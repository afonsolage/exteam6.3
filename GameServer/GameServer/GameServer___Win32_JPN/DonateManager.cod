; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\DonateManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
PUBLIC	??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
PUBLIC	?clear@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::clear
PUBLIC	?clear@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::clear
PUBLIC	??0?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
PUBLIC	??0?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
PUBLIC	??0CDonateManager@@QAE@XZ			; CDonateManager::CDonateManager
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$??0CDonateManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDonateManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDonateManager@@QAE@XZ$1
__ehfuncinfo$??0CDonateManager@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDonateManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\donatemanager.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDonateManager@@QAE@XZ PROC				; CDonateManager::CDonateManager
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CDonateManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 10	 add	 ecx, 16			; 00000010H
  00040	e8 00 00 00 00	 call	 ??0?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
  00045	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 14   : 	this->m_PetData.clear();

  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?clear@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::clear

; 15   : 	this->m_ExpData.clear();

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 10	 add	 ecx, 16			; 00000010H
  00057	e8 00 00 00 00	 call	 ?clear@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::clear

; 16   : }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CDonateManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
__unwindfunclet$??0CDonateManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
__ehhandler$??0CDonateManager@@QAE@XZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDonateManager@@QAE@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDonateManager@@QAE@XZ ENDP				; CDonateManager::CDonateManager
PUBLIC	??1CDonateManager@@QAE@XZ			; CDonateManager::~CDonateManager
xdata$x	SEGMENT
__unwindtable$??1CDonateManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDonateManager@@QAE@XZ$0
__ehfuncinfo$??1CDonateManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDonateManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDonateManager@@QAE@XZ PROC				; CDonateManager::~CDonateManager
; _this$ = ecx

; 19   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	6a ff		 push	 -1
  00085	68 00 00 00 00	 push	 __ehhandler$??1CDonateManager@@QAE@XZ
  0008a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00090	50		 push	 eax
  00091	83 ec 44	 sub	 esp, 68			; 00000044H
  00094	53		 push	 ebx
  00095	56		 push	 esi
  00096	57		 push	 edi
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0009c	33 c5		 xor	 eax, ebp
  0009e	50		 push	 eax
  0009f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  000a2	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  000a8	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 20   : }

  000b2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	83 c1 10	 add	 ecx, 16			; 00000010H
  000b8	e8 00 00 00 00	 call	 ??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
  000bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	e8 00 00 00 00	 call	 ??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
  000cc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d6	59		 pop	 ecx
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CDonateManager@@QAE@XZ$0:
  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e9 00 00 00 00	 jmp	 ??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
__ehhandler$??1CDonateManager@@QAE@XZ:
  00036	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003d	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDonateManager@@QAE@XZ
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDonateManager@@QAE@XZ ENDP				; CDonateManager::~CDonateManager
PUBLIC	?Read@CDonateManager@@QAEXPAD@Z			; CDonateManager::Read
PUBLIC	??_C@_0BJ@CILOEPIC@ExData?2DonateManager?4dat?$AA@ ; `string'
PUBLIC	?Load@CDonateManager@@QAEXXZ			; CDonateManager::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT ??_C@_0BJ@CILOEPIC@ExData?2DonateManager?4dat?$AA@
CONST	SEGMENT
??_C@_0BJ@CILOEPIC@ExData?2DonateManager?4dat?$AA@ DB 'ExData\DonateManag'
	DB	'er.dat', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CDonateManager@@QAEXXZ PROC			; CDonateManager::Load
; _this$ = ecx

; 23   : {

  000e0	55		 push	 ebp
  000e1	8b ec		 mov	 ebp, esp
  000e3	83 ec 44	 sub	 esp, 68			; 00000044H
  000e6	53		 push	 ebx
  000e7	56		 push	 esi
  000e8	57		 push	 edi
  000e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	if( g_ExLicense.CheckUser(eExUB::MU2Play) || 
; 25   : 		g_ExLicense.CheckUser(eExUB::Escalate) ||
; 26   : 		g_ExLicense.CheckUser(eExUB::eternalmu))

  000ec	6a 36		 push	 54			; 00000036H
  000ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000f3	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000f8	0f b6 c0	 movzx	 eax, al
  000fb	85 c0		 test	 eax, eax
  000fd	75 26		 jne	 SHORT $LN1@Load
  000ff	6a 40		 push	 64			; 00000040H
  00101	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00106	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0010b	0f b6 c0	 movzx	 eax, al
  0010e	85 c0		 test	 eax, eax
  00110	75 13		 jne	 SHORT $LN1@Load
  00112	6a 4f		 push	 79			; 0000004fH
  00114	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00119	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0011e	0f b6 c0	 movzx	 eax, al
  00121	85 c0		 test	 eax, eax
  00123	74 2b		 je	 SHORT $LN3@Load
$LN1@Load:

; 27   : 	{
; 28   : 		this->m_PetData.clear();

  00125	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00128	e8 00 00 00 00	 call	 ?clear@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::clear

; 29   : 		this->m_ExpData.clear();

  0012d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00130	83 c1 10	 add	 ecx, 16			; 00000010H
  00133	e8 00 00 00 00	 call	 ?clear@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::clear

; 30   : 		this->Read(gDirPath.GetNewPath("ExData\\DonateManager.dat"));

  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CILOEPIC@ExData?2DonateManager?4dat?$AA@
  0013d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00142	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00147	50		 push	 eax
  00148	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	e8 00 00 00 00	 call	 ?Read@CDonateManager@@QAEXPAD@Z ; CDonateManager::Read
$LN3@Load:

; 31   : 	}
; 32   : }

  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
?Load@CDonateManager@@QAEXXZ ENDP			; CDonateManager::Load
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	?push_back@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXABUEXPCHAR_DATA@@@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::push_back
PUBLIC	?push_back@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXABUIMPERIALPET_DATA@@@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::push_back
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CD@FLHAKOEB@?$FLDonate?5Manager?$FN?5?$CFs?5file?5not?5fou@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FLHAKOEB@?$FLDonate?5Manager?$FN?5?$CFs?5file?5not?5fou@
CONST	SEGMENT
??_C@_0CD@FLHAKOEB@?$FLDonate?5Manager?$FN?5?$CFs?5file?5not?5fou@ DB '[D'
	DB	'onate Manager] %s file not found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_list$228045 = -56					; size = 14
_iIndex$228040 = -40					; size = 4
_iType$228038 = -36					; size = 4
_list$228037 = -32					; size = 14
_iType$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Read@CDonateManager@@QAEXPAD@Z PROC			; CDonateManager::Read
; _this$ = ecx

; 35   : {

  00160	55		 push	 ebp
  00161	8b ec		 mov	 ebp, esp
  00163	83 ec 78	 sub	 esp, 120		; 00000078H
  00166	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0016b	33 c5		 xor	 eax, ebp
  0016d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00170	53		 push	 ebx
  00171	56		 push	 esi
  00172	57		 push	 edi
  00173	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 	SMDToken Token;
; 37   : 
; 38   : 	SMDFile = fopen(filename, "r");

  00176	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0017b	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 _fopen
  00184	83 c4 08	 add	 esp, 8
  00187	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 39   : 
; 40   : 	if(!SMDFile)

  0018c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00193	75 16		 jne	 SHORT $LN11@Read

; 41   : 	{
; 42   : 		MsgBox("[Donate Manager] %s file not found", filename);

  00195	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00198	50		 push	 eax
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FLHAKOEB@?$FLDonate?5Manager?$FN?5?$CFs?5file?5not?5fou@
  0019e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001a3	83 c4 08	 add	 esp, 8

; 43   : 		return;

  001a6	e9 5c 01 00 00	 jmp	 $LN12@Read
$LN11@Read:

; 44   : 	}
; 45   : 
; 46   : 	int iType = -1;

  001ab	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _iType$[ebp], -1
$LN10@Read:

; 47   : 
; 48   : 	while(true)

  001b2	b8 01 00 00 00	 mov	 eax, 1
  001b7	85 c0		 test	 eax, eax
  001b9	0f 84 28 01 00
	00		 je	 $LN9@Read

; 49   : 	{
; 50   : 		Token = GetToken();

  001bf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001c4	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 51   : 
; 52   : 		if( Token == END )

  001c7	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  001cb	75 05		 jne	 SHORT $LN8@Read

; 53   : 		{
; 54   : 			break;

  001cd	e9 15 01 00 00	 jmp	 $LN9@Read
$LN8@Read:

; 55   : 		}
; 56   : 
; 57   : 		iType = TokenNumber;

  001d2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001d8	e8 00 00 00 00	 call	 __ftol2_sse
  001dd	89 45 f0	 mov	 DWORD PTR _iType$[ebp], eax
$LN7@Read:

; 58   : 
; 59   : 		while(true)

  001e0	b8 01 00 00 00	 mov	 eax, 1
  001e5	85 c0		 test	 eax, eax
  001e7	0f 84 f5 00 00
	00		 je	 $LN6@Read

; 60   : 		{
; 61   : 			if(iType == 0)

  001ed	83 7d f0 00	 cmp	 DWORD PTR _iType$[ebp], 0
  001f1	0f 85 83 00 00
	00		 jne	 $LN5@Read

; 62   : 			{
; 63   : 				Token = GetToken();

  001f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001fc	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 64   : 
; 65   : 				if(strcmp("end", TokenString) == 0)

  001ff	68 00 00 00 00	 push	 OFFSET _TokenString
  00204	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00209	e8 00 00 00 00	 call	 _strcmp
  0020e	83 c4 08	 add	 esp, 8
  00211	85 c0		 test	 eax, eax
  00213	75 05		 jne	 SHORT $LN4@Read

; 66   : 				{
; 67   : 					break;

  00215	e9 c8 00 00 00	 jmp	 $LN6@Read
$LN4@Read:

; 68   : 				}
; 69   : 
; 70   : 				IMPERIALPET_DATA list;
; 71   : 
; 72   : 				list.Name[10] = 0;

  0021a	c6 45 ea 00	 mov	 BYTE PTR _list$228037[ebp+10], 0

; 73   : 				memcpy(list.Name, TokenString, 10);

  0021e	6a 0a		 push	 10			; 0000000aH
  00220	68 00 00 00 00	 push	 OFFSET _TokenString
  00225	8d 45 e0	 lea	 eax, DWORD PTR _list$228037[ebp]
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 _memcpy
  0022e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 74   : 
; 75   : 				Token = GetToken();

  00231	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00236	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 76   : 				int iType = (short)TokenNumber;

  00239	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023f	e8 00 00 00 00	 call	 __ftol2_sse
  00244	98		 cwde
  00245	89 45 dc	 mov	 DWORD PTR _iType$228038[ebp], eax

; 77   : 
; 78   : 				Token = GetToken();

  00248	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0024d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 79   : 				int iIndex = (short)TokenNumber;

  00250	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00256	e8 00 00 00 00	 call	 __ftol2_sse
  0025b	98		 cwde
  0025c	89 45 d8	 mov	 DWORD PTR _iIndex$228040[ebp], eax

; 80   : 
; 81   : 				list.Pet = ITEMGET(iType, iIndex);

  0025f	8b 45 dc	 mov	 eax, DWORD PTR _iType$228038[ebp]
  00262	c1 e0 09	 shl	 eax, 9
  00265	03 45 d8	 add	 eax, DWORD PTR _iIndex$228040[ebp]
  00268	66 89 45 ec	 mov	 WORD PTR _list$228037[ebp+12], ax

; 82   : 
; 83   : 				this->m_PetData.push_back(list);

  0026c	8d 45 e0	 lea	 eax, DWORD PTR _list$228037[ebp]
  0026f	50		 push	 eax
  00270	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00273	e8 00 00 00 00	 call	 ?push_back@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXABUIMPERIALPET_DATA@@@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::push_back
  00278	eb 63		 jmp	 SHORT $LN2@Read
$LN5@Read:

; 84   : 			}
; 85   : 			else if(iType == 1)

  0027a	83 7d f0 01	 cmp	 DWORD PTR _iType$[ebp], 1
  0027e	75 5d		 jne	 SHORT $LN2@Read

; 86   : 			{
; 87   : 				Token = GetToken();

  00280	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00285	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 88   : 
; 89   : 				if(strcmp("end", TokenString) == 0)

  00288	68 00 00 00 00	 push	 OFFSET _TokenString
  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00292	e8 00 00 00 00	 call	 _strcmp
  00297	83 c4 08	 add	 esp, 8
  0029a	85 c0		 test	 eax, eax
  0029c	75 02		 jne	 SHORT $LN1@Read

; 90   : 				{
; 91   : 					break;

  0029e	eb 42		 jmp	 SHORT $LN6@Read
$LN1@Read:

; 92   : 				}
; 93   : 
; 94   : 				EXPCHAR_DATA list;
; 95   : 
; 96   : 				list.Name[10] = 0;

  002a0	c6 45 d2 00	 mov	 BYTE PTR _list$228045[ebp+10], 0

; 97   : 				memcpy(list.Name, TokenString, 10);

  002a4	6a 0a		 push	 10			; 0000000aH
  002a6	68 00 00 00 00	 push	 OFFSET _TokenString
  002ab	8d 45 c8	 lea	 eax, DWORD PTR _list$228045[ebp]
  002ae	50		 push	 eax
  002af	e8 00 00 00 00	 call	 _memcpy
  002b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 98   : 
; 99   : 				Token = GetToken();

  002b7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002bc	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 100  : 				list.PlusExpPercent = (short)TokenNumber;

  002bf	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c5	e8 00 00 00 00	 call	 __ftol2_sse
  002ca	66 89 45 d4	 mov	 WORD PTR _list$228045[ebp+12], ax

; 101  : 
; 102  : 				this->m_ExpData.push_back(list);

  002ce	8d 45 c8	 lea	 eax, DWORD PTR _list$228045[ebp]
  002d1	50		 push	 eax
  002d2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002d5	83 c1 10	 add	 ecx, 16			; 00000010H
  002d8	e8 00 00 00 00	 call	 ?push_back@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXABUEXPCHAR_DATA@@@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::push_back
$LN2@Read:

; 103  : 			}
; 104  : 		}	

  002dd	e9 fe fe ff ff	 jmp	 $LN7@Read
$LN6@Read:

; 105  : 	}

  002e2	e9 cb fe ff ff	 jmp	 $LN10@Read
$LN9@Read:

; 106  : 
; 107  : 	fclose(SMDFile);

  002e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 _fclose
  002f2	83 c4 04	 add	 esp, 4

; 108  : 	LogAdd("%s file load!", filename);

  002f5	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  002f8	50		 push	 eax
  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  002fe	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00304	83 c4 08	 add	 esp, 8
$LN12@Read:

; 109  : }

  00307	5f		 pop	 edi
  00308	5e		 pop	 esi
  00309	5b		 pop	 ebx
  0030a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030d	33 cd		 xor	 ecx, ebp
  0030f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00314	8b e5		 mov	 esp, ebp
  00316	5d		 pop	 ebp
  00317	c2 04 00	 ret	 4
?Read@CDonateManager@@QAEXPAD@Z ENDP			; CDonateManager::Read
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00320	55		 push	 ebp
  00321	8b ec		 mov	 ebp, esp
  00323	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00329	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0032e	33 c5		 xor	 eax, ebp
  00330	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00333	53		 push	 ebx
  00334	56		 push	 esi
  00335	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00336	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 _fgetc
  00348	83 c4 04	 add	 esp, 4
  0034b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0034e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00352	83 f9 ff	 cmp	 ecx, -1
  00355	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00357	b8 02 00 00 00	 mov	 eax, 2
  0035c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00361	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00363	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00367	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0036a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 _fgetc
  00377	83 c4 04	 add	 esp, 4
  0037a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0037d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00381	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00384	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00386	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0038a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0038d	74 1c		 je	 SHORT $LN23@GetToken
  0038f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00393	83 f8 ff	 cmp	 eax, -1
  00396	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00398	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 _fgetc
  003a3	83 c4 04	 add	 esp, 4
  003a6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  003a9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  003ab	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003af	83 f8 ff	 cmp	 eax, -1
  003b2	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  003b4	b8 02 00 00 00	 mov	 eax, 2
  003b9	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  003be	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003c2	50		 push	 eax
  003c3	e8 00 00 00 00	 call	 _isspace
  003c8	83 c4 04	 add	 esp, 4
  003cb	85 c0		 test	 eax, eax
  003cd	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  003d3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003d7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  003dd	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  003e3	83 e9 22	 sub	 ecx, 34			; 00000022H
  003e6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  003ec	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  003f3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  003f9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  003ff	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00406	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0040d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00417	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0041c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00421	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00426	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00430	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00435	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0043a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0043f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00449	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0044e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00453	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00458	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00462	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00467	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0046c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00471	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0047b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00480	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00485	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0048a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0048f	50		 push	 eax
  00490	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00494	51		 push	 ecx
  00495	e8 00 00 00 00	 call	 _ungetc
  0049a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0049d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  004a0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  004a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004a8	50		 push	 eax
  004a9	e8 00 00 00 00	 call	 _getc
  004ae	83 c4 04	 add	 esp, 4
  004b1	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  004b4	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  004b8	83 f9 ff	 cmp	 ecx, -1
  004bb	74 36		 je	 SHORT $LN12@GetToken
  004bd	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004c1	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  004c4	74 1a		 je	 SHORT $LN11@GetToken
  004c6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004ca	50		 push	 eax
  004cb	e8 00 00 00 00	 call	 _isdigit
  004d0	83 c4 04	 add	 esp, 4
  004d3	85 c0		 test	 eax, eax
  004d5	75 09		 jne	 SHORT $LN11@GetToken
  004d7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004db	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  004de	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  004e0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004e3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  004e6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  004e8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004eb	83 c0 01	 add	 eax, 1
  004ee	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  004f1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  004f3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004f6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  004f9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  004fc	50		 push	 eax
  004fd	e8 00 00 00 00	 call	 _atof
  00502	83 c4 04	 add	 esp, 4
  00505	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0050b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00515	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0051a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0051f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00524	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0052b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00530	50		 push	 eax
  00531	e8 00 00 00 00	 call	 _getc
  00536	83 c4 04	 add	 esp, 4
  00539	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0053c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00540	83 f9 ff	 cmp	 ecx, -1
  00543	74 1c		 je	 SHORT $LN8@GetToken
  00545	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00549	83 f8 22	 cmp	 eax, 34			; 00000022H
  0054c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0054e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00551	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00554	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00556	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00559	83 c0 01	 add	 eax, 1
  0055c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0055f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00561	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00565	83 f8 22	 cmp	 eax, 34			; 00000022H
  00568	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0056a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0056f	50		 push	 eax
  00570	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00574	51		 push	 ecx
  00575	e8 00 00 00 00	 call	 _ungetc
  0057a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0057d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00580	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00583	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0058d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00592	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00597	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0059c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005a0	50		 push	 eax
  005a1	e8 00 00 00 00	 call	 _isalpha
  005a6	83 c4 04	 add	 esp, 4
  005a9	85 c0		 test	 eax, eax
  005ab	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  005b1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  005b8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005bb	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  005be	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  005c0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005c3	83 c0 01	 add	 eax, 1
  005c6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  005c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005ce	50		 push	 eax
  005cf	e8 00 00 00 00	 call	 _getc
  005d4	83 c4 04	 add	 esp, 4
  005d7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  005da	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005de	83 f9 ff	 cmp	 ecx, -1
  005e1	74 36		 je	 SHORT $LN3@GetToken
  005e3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005e7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  005ea	74 1a		 je	 SHORT $LN2@GetToken
  005ec	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005f0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  005f3	74 11		 je	 SHORT $LN2@GetToken
  005f5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005f9	50		 push	 eax
  005fa	e8 00 00 00 00	 call	 _isalnum
  005ff	83 c4 04	 add	 esp, 4
  00602	85 c0		 test	 eax, eax
  00604	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00606	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00609	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0060c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0060e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00611	83 c0 01	 add	 eax, 1
  00614	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00617	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00619	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0061e	50		 push	 eax
  0061f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00623	51		 push	 ecx
  00624	e8 00 00 00 00	 call	 _ungetc
  00629	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0062c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0062f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00632	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0063c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00641	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00643	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00645	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0064f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00654	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00656	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00658	5f		 pop	 edi
  00659	5e		 pop	 esi
  0065a	5b		 pop	 ebx
  0065b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0065e	33 cd		 xor	 ecx, ebp
  00660	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00665	8b e5		 mov	 esp, ebp
  00667	5d		 pop	 ebp
  00668	c3		 ret	 0
  00669	8d 49 00	 npad	 3
$LN35@GetToken:
  0066c	00 00 00 00	 DD	 $LN10@GetToken
  00670	00 00 00 00	 DD	 $LN19@GetToken
  00674	00 00 00 00	 DD	 $LN17@GetToken
  00678	00 00 00 00	 DD	 $LN14@GetToken
  0067c	00 00 00 00	 DD	 $LN18@GetToken
  00680	00 00 00 00	 DD	 $LN16@GetToken
  00684	00 00 00 00	 DD	 $LN15@GetToken
  00688	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0068c	00		 DB	 0
  0068d	01		 DB	 1
  0068e	07		 DB	 7
  0068f	07		 DB	 7
  00690	07		 DB	 7
  00691	07		 DB	 7
  00692	07		 DB	 7
  00693	07		 DB	 7
  00694	07		 DB	 7
  00695	07		 DB	 7
  00696	02		 DB	 2
  00697	03		 DB	 3
  00698	03		 DB	 3
  00699	07		 DB	 7
  0069a	03		 DB	 3
  0069b	03		 DB	 3
  0069c	03		 DB	 3
  0069d	03		 DB	 3
  0069e	03		 DB	 3
  0069f	03		 DB	 3
  006a0	03		 DB	 3
  006a1	03		 DB	 3
  006a2	03		 DB	 3
  006a3	03		 DB	 3
  006a4	07		 DB	 7
  006a5	04		 DB	 4
  006a6	07		 DB	 7
  006a7	07		 DB	 7
  006a8	07		 DB	 7
  006a9	07		 DB	 7
  006aa	07		 DB	 7
  006ab	07		 DB	 7
  006ac	07		 DB	 7
  006ad	07		 DB	 7
  006ae	07		 DB	 7
  006af	07		 DB	 7
  006b0	07		 DB	 7
  006b1	07		 DB	 7
  006b2	07		 DB	 7
  006b3	07		 DB	 7
  006b4	07		 DB	 7
  006b5	07		 DB	 7
  006b6	07		 DB	 7
  006b7	07		 DB	 7
  006b8	07		 DB	 7
  006b9	07		 DB	 7
  006ba	07		 DB	 7
  006bb	07		 DB	 7
  006bc	07		 DB	 7
  006bd	07		 DB	 7
  006be	07		 DB	 7
  006bf	07		 DB	 7
  006c0	07		 DB	 7
  006c1	07		 DB	 7
  006c2	07		 DB	 7
  006c3	07		 DB	 7
  006c4	07		 DB	 7
  006c5	07		 DB	 7
  006c6	07		 DB	 7
  006c7	07		 DB	 7
  006c8	07		 DB	 7
  006c9	07		 DB	 7
  006ca	07		 DB	 7
  006cb	07		 DB	 7
  006cc	07		 DB	 7
  006cd	07		 DB	 7
  006ce	07		 DB	 7
  006cf	07		 DB	 7
  006d0	07		 DB	 7
  006d1	07		 DB	 7
  006d2	07		 DB	 7
  006d3	07		 DB	 7
  006d4	07		 DB	 7
  006d5	07		 DB	 7
  006d6	07		 DB	 7
  006d7	07		 DB	 7
  006d8	07		 DB	 7
  006d9	07		 DB	 7
  006da	07		 DB	 7
  006db	07		 DB	 7
  006dc	07		 DB	 7
  006dd	07		 DB	 7
  006de	07		 DB	 7
  006df	07		 DB	 7
  006e0	07		 DB	 7
  006e1	07		 DB	 7
  006e2	07		 DB	 7
  006e3	07		 DB	 7
  006e4	07		 DB	 7
  006e5	05		 DB	 5
  006e6	07		 DB	 7
  006e7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??A?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEAAUIMPERIALPET_DATA@@I@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::operator[]
PUBLIC	?size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::size
PUBLIC	?CheckItem@CDonateManager@@QAE_NH@Z		; CDonateManager::CheckItem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\donatemanager.cpp
_TEXT	SEGMENT
tv82 = -80						; size = 4
_i$228056 = -12						; size = 4
_lpUser$228055 = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?CheckItem@CDonateManager@@QAE_NH@Z PROC		; CDonateManager::CheckItem
; _this$ = ecx

; 112  : {

  006f0	55		 push	 ebp
  006f1	8b ec		 mov	 ebp, esp
  006f3	83 ec 50	 sub	 esp, 80			; 00000050H
  006f6	53		 push	 ebx
  006f7	56		 push	 esi
  006f8	57		 push	 edi
  006f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 	if(g_ExLicense.CheckUser(eExUB::MU2Play) || g_ExLicense.CheckUser(eExUB::Escalate) || g_ExLicense.CheckUser(eExUB::eternalmu))

  006fc	6a 36		 push	 54			; 00000036H
  006fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00703	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00708	0f b6 c0	 movzx	 eax, al
  0070b	85 c0		 test	 eax, eax
  0070d	75 2a		 jne	 SHORT $LN8@CheckItem
  0070f	6a 40		 push	 64			; 00000040H
  00711	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00716	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0071b	0f b6 c0	 movzx	 eax, al
  0071e	85 c0		 test	 eax, eax
  00720	75 17		 jne	 SHORT $LN8@CheckItem
  00722	6a 4f		 push	 79			; 0000004fH
  00724	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00729	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0072e	0f b6 c0	 movzx	 eax, al
  00731	85 c0		 test	 eax, eax
  00733	0f 84 c0 00 00
	00		 je	 $LN9@CheckItem
$LN8@CheckItem:

; 114  : 	{
; 115  : 		if(!OBJMAX_RANGE(aIndex))

  00739	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  0073d	7d 09		 jge	 SHORT $LN12@CheckItem
  0073f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
  00746	eb 0f		 jmp	 SHORT $LN13@CheckItem
$LN12@CheckItem:
  00748	33 c0		 xor	 eax, eax
  0074a	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00751	0f 9e c0	 setle	 al
  00754	89 45 b0	 mov	 DWORD PTR tv82[ebp], eax
$LN13@CheckItem:
  00757	83 7d b0 00	 cmp	 DWORD PTR tv82[ebp], 0
  0075b	75 07		 jne	 SHORT $LN7@CheckItem

; 116  : 		{
; 117  : 			return true;

  0075d	b0 01		 mov	 al, 1
  0075f	e9 97 00 00 00	 jmp	 $LN10@CheckItem
$LN7@CheckItem:

; 118  : 		}
; 119  : 
; 120  : 		LPOBJ lpUser = &gObj[aIndex];

  00764	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00767	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0076d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00773	89 45 f8	 mov	 DWORD PTR _lpUser$228055[ebp], eax

; 121  : 
; 122  : 		for(int i = 0; i < this->m_PetData.size(); i++)

  00776	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228056[ebp], 0
  0077d	eb 09		 jmp	 SHORT $LN6@CheckItem
$LN5@CheckItem:
  0077f	8b 45 f4	 mov	 eax, DWORD PTR _i$228056[ebp]
  00782	83 c0 01	 add	 eax, 1
  00785	89 45 f4	 mov	 DWORD PTR _i$228056[ebp], eax
$LN6@CheckItem:
  00788	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0078b	e8 00 00 00 00	 call	 ?size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::size
  00790	39 45 f4	 cmp	 DWORD PTR _i$228056[ebp], eax
  00793	73 64		 jae	 SHORT $LN9@CheckItem

; 123  : 		{
; 124  : 			if(lpUser->Name[0] == this->m_PetData[i].Name[0])

  00795	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$228055[ebp]
  00798	0f be 70 77	 movsx	 esi, BYTE PTR [eax+119]
  0079c	8b 4d f4	 mov	 ecx, DWORD PTR _i$228056[ebp]
  0079f	51		 push	 ecx
  007a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a3	e8 00 00 00 00	 call	 ??A?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEAAUIMPERIALPET_DATA@@I@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::operator[]
  007a8	0f be 10	 movsx	 edx, BYTE PTR [eax]
  007ab	3b f2		 cmp	 esi, edx
  007ad	75 48		 jne	 SHORT $LN3@CheckItem

; 125  : 			{
; 126  : 				if(!strcmp(lpUser->Name, this->m_PetData[i].Name))

  007af	8b 45 f4	 mov	 eax, DWORD PTR _i$228056[ebp]
  007b2	50		 push	 eax
  007b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007b6	e8 00 00 00 00	 call	 ??A?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEAAUIMPERIALPET_DATA@@I@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::operator[]
  007bb	50		 push	 eax
  007bc	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$228055[ebp]
  007bf	83 c1 77	 add	 ecx, 119		; 00000077H
  007c2	51		 push	 ecx
  007c3	e8 00 00 00 00	 call	 _strcmp
  007c8	83 c4 08	 add	 esp, 8
  007cb	85 c0		 test	 eax, eax
  007cd	75 28		 jne	 SHORT $LN3@CheckItem

; 127  : 				{
; 128  : 					if(this->m_PetData[i].Pet == lpUser->pInventory[8].m_Type)

  007cf	8b 45 f4	 mov	 eax, DWORD PTR _i$228056[ebp]
  007d2	50		 push	 eax
  007d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007d6	e8 00 00 00 00	 call	 ??A?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEAAUIMPERIALPET_DATA@@I@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::operator[]
  007db	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  007df	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$228055[ebp]
  007e2	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  007e8	0f bf 90 a6 06
	00 00		 movsx	 edx, WORD PTR [eax+1702]
  007ef	3b ca		 cmp	 ecx, edx
  007f1	75 04		 jne	 SHORT $LN3@CheckItem

; 129  : 					{
; 130  : 						return true;

  007f3	b0 01		 mov	 al, 1
  007f5	eb 04		 jmp	 SHORT $LN10@CheckItem
$LN3@CheckItem:

; 131  : 					}
; 132  : 				}	
; 133  : 			}
; 134  : 		}

  007f7	eb 86		 jmp	 SHORT $LN5@CheckItem
$LN9@CheckItem:

; 135  : 	}
; 136  : 
; 137  : 	return false;

  007f9	32 c0		 xor	 al, al
$LN10@CheckItem:

; 138  : }

  007fb	5f		 pop	 edi
  007fc	5e		 pop	 esi
  007fd	5b		 pop	 ebx
  007fe	8b e5		 mov	 esp, ebp
  00800	5d		 pop	 ebp
  00801	c2 04 00	 ret	 4
?CheckItem@CDonateManager@@QAE_NH@Z ENDP		; CDonateManager::CheckItem
_TEXT	ENDS
PUBLIC	??A?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEAAUEXPCHAR_DATA@@I@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::operator[]
PUBLIC	?size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::size
PUBLIC	?CheckExp@CDonateManager@@QAEXHAA_J@Z		; CDonateManager::CheckExp
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv82 = -80						; size = 4
_i$228072 = -12						; size = 4
_lpUser$228071 = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_exp$ = 12						; size = 4
?CheckExp@CDonateManager@@QAEXHAA_J@Z PROC		; CDonateManager::CheckExp
; _this$ = ecx

; 141  : {

  00810	55		 push	 ebp
  00811	8b ec		 mov	 ebp, esp
  00813	83 ec 50	 sub	 esp, 80			; 00000050H
  00816	53		 push	 ebx
  00817	56		 push	 esi
  00818	57		 push	 edi
  00819	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 142  : 	if(g_ExLicense.CheckUser(eExUB::MU2Play)|| g_ExLicense.CheckUser(eExUB::Escalate) || g_ExLicense.CheckUser(eExUB::eternalmu))

  0081c	6a 36		 push	 54			; 00000036H
  0081e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00823	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00828	0f b6 c0	 movzx	 eax, al
  0082b	85 c0		 test	 eax, eax
  0082d	75 2a		 jne	 SHORT $LN7@CheckExp
  0082f	6a 40		 push	 64			; 00000040H
  00831	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00836	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0083b	0f b6 c0	 movzx	 eax, al
  0083e	85 c0		 test	 eax, eax
  00840	75 17		 jne	 SHORT $LN7@CheckExp
  00842	6a 4f		 push	 79			; 0000004fH
  00844	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00849	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0084e	0f b6 c0	 movzx	 eax, al
  00851	85 c0		 test	 eax, eax
  00853	0f 84 e8 00 00
	00		 je	 $LN9@CheckExp
$LN7@CheckExp:

; 143  : 	{
; 144  : 		if(!OBJMAX_RANGE(aIndex))

  00859	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  0085d	7d 09		 jge	 SHORT $LN11@CheckExp
  0085f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
  00866	eb 0f		 jmp	 SHORT $LN12@CheckExp
$LN11@CheckExp:
  00868	33 c0		 xor	 eax, eax
  0086a	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  00871	0f 9e c0	 setle	 al
  00874	89 45 b0	 mov	 DWORD PTR tv82[ebp], eax
$LN12@CheckExp:
  00877	83 7d b0 00	 cmp	 DWORD PTR tv82[ebp], 0
  0087b	75 05		 jne	 SHORT $LN6@CheckExp

; 145  : 		{
; 146  : 			return;

  0087d	e9 bf 00 00 00	 jmp	 $LN9@CheckExp
$LN6@CheckExp:

; 147  : 		}
; 148  : 
; 149  : 		LPOBJ lpUser = &gObj[aIndex];

  00882	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00885	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0088b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00891	89 45 f8	 mov	 DWORD PTR _lpUser$228071[ebp], eax

; 150  : 
; 151  : 		for(int i = 0; i < this->m_ExpData.size(); i++)

  00894	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$228072[ebp], 0
  0089b	eb 09		 jmp	 SHORT $LN5@CheckExp
$LN4@CheckExp:
  0089d	8b 45 f4	 mov	 eax, DWORD PTR _i$228072[ebp]
  008a0	83 c0 01	 add	 eax, 1
  008a3	89 45 f4	 mov	 DWORD PTR _i$228072[ebp], eax
$LN5@CheckExp:
  008a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008a9	83 c1 10	 add	 ecx, 16			; 00000010H
  008ac	e8 00 00 00 00	 call	 ?size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::size
  008b1	39 45 f4	 cmp	 DWORD PTR _i$228072[ebp], eax
  008b4	0f 83 87 00 00
	00		 jae	 $LN9@CheckExp

; 152  : 		{
; 153  : 			if(lpUser->Name[0] == this->m_ExpData[i].Name[0])

  008ba	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$228071[ebp]
  008bd	0f be 70 77	 movsx	 esi, BYTE PTR [eax+119]
  008c1	8b 4d f4	 mov	 ecx, DWORD PTR _i$228072[ebp]
  008c4	51		 push	 ecx
  008c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008c8	83 c1 10	 add	 ecx, 16			; 00000010H
  008cb	e8 00 00 00 00	 call	 ??A?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEAAUEXPCHAR_DATA@@I@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::operator[]
  008d0	0f be 10	 movsx	 edx, BYTE PTR [eax]
  008d3	3b f2		 cmp	 esi, edx
  008d5	75 65		 jne	 SHORT $LN2@CheckExp

; 154  : 			{
; 155  : 				if(!strcmp(lpUser->Name, this->m_ExpData[i].Name))

  008d7	8b 45 f4	 mov	 eax, DWORD PTR _i$228072[ebp]
  008da	50		 push	 eax
  008db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008de	83 c1 10	 add	 ecx, 16			; 00000010H
  008e1	e8 00 00 00 00	 call	 ??A?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEAAUEXPCHAR_DATA@@I@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::operator[]
  008e6	50		 push	 eax
  008e7	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$228071[ebp]
  008ea	83 c1 77	 add	 ecx, 119		; 00000077H
  008ed	51		 push	 ecx
  008ee	e8 00 00 00 00	 call	 _strcmp
  008f3	83 c4 08	 add	 esp, 8
  008f6	85 c0		 test	 eax, eax
  008f8	75 42		 jne	 SHORT $LN2@CheckExp

; 156  : 				{
; 157  : 					exp += (exp * this->m_ExpData[i].PlusExpPercent) / 100;

  008fa	8b 45 f4	 mov	 eax, DWORD PTR _i$228072[ebp]
  008fd	50		 push	 eax
  008fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00901	83 c1 10	 add	 ecx, 16			; 00000010H
  00904	e8 00 00 00 00	 call	 ??A?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEAAUEXPCHAR_DATA@@I@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::operator[]
  00909	0f bf 40 0c	 movsx	 eax, WORD PTR [eax+12]
  0090d	99		 cdq
  0090e	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00911	52		 push	 edx
  00912	50		 push	 eax
  00913	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00916	52		 push	 edx
  00917	8b 01		 mov	 eax, DWORD PTR [ecx]
  00919	50		 push	 eax
  0091a	e8 00 00 00 00	 call	 __allmul
  0091f	6a 00		 push	 0
  00921	6a 64		 push	 100			; 00000064H
  00923	52		 push	 edx
  00924	50		 push	 eax
  00925	e8 00 00 00 00	 call	 __alldiv
  0092a	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  0092d	03 01		 add	 eax, DWORD PTR [ecx]
  0092f	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  00932	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00935	89 01		 mov	 DWORD PTR [ecx], eax
  00937	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 158  : 					return;

  0093a	eb 05		 jmp	 SHORT $LN9@CheckExp
$LN2@CheckExp:

; 159  : 				}	
; 160  : 			}
; 161  : 		}

  0093c	e9 5c ff ff ff	 jmp	 $LN4@CheckExp
$LN9@CheckExp:

; 162  : 	}
; 163  : }

  00941	5f		 pop	 edi
  00942	5e		 pop	 esi
  00943	5b		 pop	 ebx
  00944	8b e5		 mov	 esp, ebp
  00946	5d		 pop	 ebp
  00947	c2 08 00	 ret	 8
?CheckExp@CDonateManager@@QAEXHAA_J@Z ENDP		; CDonateManager::CheckExp
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@V?$allocator@UIMPERIALPET_DATA@@@1@@Z ; std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
PUBLIC	??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@XZ	; std::allocator<IMPERIALPET_DATA>::allocator<IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T229949 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T229949[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@XZ ; std::allocator<IMPERIALPET_DATA>::allocator<IMPERIALPET_DATA>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@V?$allocator@UIMPERIALPET_DATA@@@1@@Z ; std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
PUBLIC	?_Tidy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
__ehhandler$??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0001d	f7 f9		 idiv	 ecx

; 880  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEAAUIMPERIALPET_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEAAUIMPERIALPET_DATA@@I@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0000f	6b c0 0e	 imul	 eax, 14			; 0000000eH
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEAAUIMPERIALPET_DATA@@I@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@ABU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA const &>
PUBLIC	??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@AAU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA &>
PUBLIC	?_Orphan_range@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXPAUIMPERIALPET_DATA@@0@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXI@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Reserve
PUBLIC	?_Inside@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBE_NPBUIMPERIALPET_DATA@@@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Inside
PUBLIC	??$addressof@$$CBUIMPERIALPET_DATA@@@std@@YAPBUIMPERIALPET_DATA@@ABU1@@Z ; std::addressof<IMPERIALPET_DATA const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXABUIMPERIALPET_DATA@@@Z
_TEXT	SEGMENT
__Idx$228101 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXABUIMPERIALPET_DATA@@@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUIMPERIALPET_DATA@@@std@@YAPBUIMPERIALPET_DATA@@ABU1@@Z ; std::addressof<IMPERIALPET_DATA const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBE_NPBUIMPERIALPET_DATA@@@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 7d		 je	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUIMPERIALPET_DATA@@@std@@YAPBUIMPERIALPET_DATA@@ABU1@@Z ; std::addressof<IMPERIALPET_DATA const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	99		 cdq
  0003a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0003f	f7 f9		 idiv	 ecx
  00041	89 45 f8	 mov	 DWORD PTR __Idx$228101[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004d	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00050	75 0a		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00052	6a 01		 push	 1
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXI@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	51		 push	 ecx
  00063	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00066	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00069	50		 push	 eax
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXPAUIMPERIALPET_DATA@@0@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00072	8b 45 f8	 mov	 eax, DWORD PTR __Idx$228101[ebp]
  00075	6b c0 0e	 imul	 eax, 14			; 0000000eH
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	03 01		 add	 eax, DWORD PTR [ecx]
  0007d	50		 push	 eax
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@AAU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA &>
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009a	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0009d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  000a3	eb 57		 jmp	 SHORT $LN5@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ae	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000b1	75 0a		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  000b3	6a 01		 push	 1
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXI@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c3	51		 push	 ecx
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ca	50		 push	 eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXPAUIMPERIALPET_DATA@@0@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000d3	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000dd	52		 push	 edx
  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	83 c0 0c	 add	 eax, 12			; 0000000cH
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@ABU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA const &>
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000ed	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f3	83 c1 0e	 add	 ecx, 14			; 0000000eH
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back:

; 997  : 			}
; 998  : 		}

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
?push_back@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXABUIMPERIALPET_DATA@@@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@0@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::erase
PUBLIC	?begin@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::begin
PUBLIC	?end@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T229968 = -88						; size = 4
$T229969 = -84						; size = 4
$T229970 = -80						; size = 4
$T229971 = -76						; size = 4
$T229972 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T229969[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T229968[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T229971[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T229970[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T229968[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T229970[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T229972[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@0@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@V?$allocator@UEXPCHAR_DATA@@@1@@Z ; std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
PUBLIC	??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@XZ	; std::allocator<EXPCHAR_DATA>::allocator<EXPCHAR_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T229975 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T229975[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@XZ ; std::allocator<EXPCHAR_DATA>::allocator<EXPCHAR_DATA>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@V?$allocator@UEXPCHAR_DATA@@@1@@Z ; std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
PUBLIC	?_Tidy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
__ehhandler$??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0001d	f7 f9		 idiv	 ecx

; 880  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEAAUEXPCHAR_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEAAUEXPCHAR_DATA@@I@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0000f	6b c0 0e	 imul	 eax, 14			; 0000000eH
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEAAUEXPCHAR_DATA@@I@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@ABU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA const &>
PUBLIC	??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@AAU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA &>
PUBLIC	?_Orphan_range@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXPAUEXPCHAR_DATA@@0@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXI@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Reserve
PUBLIC	?_Inside@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBE_NPBUEXPCHAR_DATA@@@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Inside
PUBLIC	??$addressof@$$CBUEXPCHAR_DATA@@@std@@YAPBUEXPCHAR_DATA@@ABU1@@Z ; std::addressof<EXPCHAR_DATA const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXABUEXPCHAR_DATA@@@Z
_TEXT	SEGMENT
__Idx$228277 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXABUEXPCHAR_DATA@@@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUEXPCHAR_DATA@@@std@@YAPBUEXPCHAR_DATA@@ABU1@@Z ; std::addressof<EXPCHAR_DATA const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBE_NPBUEXPCHAR_DATA@@@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 7d		 je	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUEXPCHAR_DATA@@@std@@YAPBUEXPCHAR_DATA@@ABU1@@Z ; std::addressof<EXPCHAR_DATA const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	99		 cdq
  0003a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0003f	f7 f9		 idiv	 ecx
  00041	89 45 f8	 mov	 DWORD PTR __Idx$228277[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004d	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00050	75 0a		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  00052	6a 01		 push	 1
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXI@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	51		 push	 ecx
  00063	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00066	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00069	50		 push	 eax
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXPAUEXPCHAR_DATA@@0@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00072	8b 45 f8	 mov	 eax, DWORD PTR __Idx$228277[ebp]
  00075	6b c0 0e	 imul	 eax, 14			; 0000000eH
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	03 01		 add	 eax, DWORD PTR [ecx]
  0007d	50		 push	 eax
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@AAU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA &>
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009a	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0009d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  000a3	eb 57		 jmp	 SHORT $LN5@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ae	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000b1	75 0a		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  000b3	6a 01		 push	 1
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXI@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c3	51		 push	 ecx
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ca	50		 push	 eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXPAUEXPCHAR_DATA@@0@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000d3	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000dd	52		 push	 edx
  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	83 c0 0c	 add	 eax, 12			; 0000000cH
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@ABU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA const &>
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000ed	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f3	83 c1 0e	 add	 ecx, 14			; 0000000eH
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back@2:

; 997  : 			}
; 998  : 		}

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
?push_back@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXABUEXPCHAR_DATA@@@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@0@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::erase
PUBLIC	?begin@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::begin
PUBLIC	?end@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T229994 = -88						; size = 4
$T229995 = -84						; size = 4
$T229996 = -80						; size = 4
$T229997 = -76						; size = 4
$T229998 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T229995[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T229994[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T229997[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T229996[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T229994[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T229996[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T229998[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@0@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXPAUIMPERIALPET_DATA@@0@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Destroy
PUBLIC	??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00@Z ; std::_Move<IMPERIALPET_DATA *,IMPERIALPET_DATA *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T230005 = -84						; size = 4
__Ptr$228468 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00@Z ; std::_Move<IMPERIALPET_DATA *,IMPERIALPET_DATA *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$228468[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$228468[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXPAUIMPERIALPET_DATA@@0@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$228468[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T230005[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T230005[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBE_NPBUIMPERIALPET_DATA@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBE_NPBUIMPERIALPET_DATA@@@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBE_NPBUIMPERIALPET_DATA@@@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::reserve
PUBLIC	?_Grow_to@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEII@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Grow_to
PUBLIC	?capacity@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::capacity
PUBLIC	?_Xlen@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Xlen
PUBLIC	?max_size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEII@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::reserve
$LN6@Reserve:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@I@Z ; std::allocator<IMPERIALPET_DATA>::deallocate
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 42		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXPAUIMPERIALPET_DATA@@0@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0003c	99		 cdq
  0003d	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00042	f7 f9		 idiv	 ecx
  00044	50		 push	 eax
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@I@Z ; std::allocator<IMPERIALPET_DATA>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Tidy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXPAUIMPERIALPET_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXPAUIMPERIALPET_DATA@@0@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXPAUIMPERIALPET_DATA@@0@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<IMPERIALPET_DATA>::allocator<IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@V?$allocator@UIMPERIALPET_DATA@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@V?$allocator@UIMPERIALPET_DATA@@@1@@Z PROC ; std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<IMPERIALPET_DATA>::allocator<IMPERIALPET_DATA>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@V?$allocator@UIMPERIALPET_DATA@@@1@@Z ENDP ; std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::~_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@XZ PROC	; std::allocator<IMPERIALPET_DATA>::allocator<IMPERIALPET_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@XZ ENDP	; std::allocator<IMPERIALPET_DATA>::allocator<IMPERIALPET_DATA>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXPAUEXPCHAR_DATA@@0@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Destroy
PUBLIC	??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00@Z ; std::_Move<EXPCHAR_DATA *,EXPCHAR_DATA *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T230028 = -84						; size = 4
__Ptr$228530 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00@Z ; std::_Move<EXPCHAR_DATA *,EXPCHAR_DATA *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$228530[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$228530[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXPAUEXPCHAR_DATA@@0@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$228530[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T230028[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T230028[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBE_NPBUEXPCHAR_DATA@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBE_NPBUEXPCHAR_DATA@@@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside@2
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside@2
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside@2:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBE_NPBUEXPCHAR_DATA@@@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::reserve
PUBLIC	?_Grow_to@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEII@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Grow_to
PUBLIC	?capacity@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::capacity
PUBLIC	?_Xlen@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Xlen
PUBLIC	?max_size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve@2
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve@2

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve@2
$LN2@Reserve@2:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEII@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::reserve
$LN6@Reserve@2:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@I@Z ; std::allocator<EXPCHAR_DATA>::deallocate
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 42		 je	 SHORT $LN1@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXPAUEXPCHAR_DATA@@0@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0003c	99		 cdq
  0003d	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00042	f7 f9		 idiv	 ecx
  00044	50		 push	 eax
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@I@Z ; std::allocator<EXPCHAR_DATA>::deallocate
$LN1@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Tidy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXPAUEXPCHAR_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXPAUEXPCHAR_DATA@@0@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXPAUEXPCHAR_DATA@@0@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<EXPCHAR_DATA>::allocator<EXPCHAR_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@V?$allocator@UEXPCHAR_DATA@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@V?$allocator@UEXPCHAR_DATA@@@1@@Z PROC ; std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<EXPCHAR_DATA>::allocator<EXPCHAR_DATA>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@V?$allocator@UEXPCHAR_DATA@@@1@@Z ENDP ; std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::~_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@XZ PROC		; std::allocator<EXPCHAR_DATA>::allocator<EXPCHAR_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@XZ ENDP		; std::allocator<EXPCHAR_DATA>::allocator<EXPCHAR_DATA>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUIMPERIALPET_DATA@@@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEPAUIMPERIALPET_DATA@@PAU2@00@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Umove<IMPERIALPET_DATA *>
PUBLIC	?allocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEPAUIMPERIALPET_DATA@@I@Z ; std::allocator<IMPERIALPET_DATA>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$228572 = -28					; size = 4
__Ptr$228565 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Xlen
  00044	e9 f0 00 00 00	 jmp	 $LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 df 00 00
	00		 jae	 $LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEPAUIMPERIALPET_DATA@@I@Z ; std::allocator<IMPERIALPET_DATA>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$228565[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$228565[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUIMPERIALPET_DATA@@@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEPAUIMPERIALPET_DATA@@PAU2@00@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Umove<IMPERIALPET_DATA *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve
__catch$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228565[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@I@Z ; std::allocator<IMPERIALPET_DATA>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$228572[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 3a		 je	 SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXPAUIMPERIALPET_DATA@@0@Z ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ef	2b 01		 sub	 eax, DWORD PTR [ecx]
  000f1	99		 cdq
  000f2	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000f7	f7 f9		 idiv	 ecx
  000f9	50		 push	 eax
  000fa	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 02		 mov	 eax, DWORD PTR [edx]
  000ff	50		 push	 eax
  00100	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00106	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@I@Z ; std::allocator<IMPERIALPET_DATA>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0010b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  00113	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00116	6b c0 0e	 imul	 eax, 14			; 0000000eH
  00119	03 45 e8	 add	 eax, DWORD PTR __Ptr$228565[ebp]
  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  00122	8b 45 e4	 mov	 eax, DWORD PTR __Size$228572[ebp]
  00125	6b c0 0e	 imul	 eax, 14			; 0000000eH
  00128	03 45 e8	 add	 eax, DWORD PTR __Ptr$228565[ebp]
  0012b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  00131	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228565[ebp]
  00137	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0001d	f7 f9		 idiv	 ecx

; 778  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?capacity@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UIMPERIALPET_DATA@@@std@@QBEIXZ ; std::allocator<IMPERIALPET_DATA>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UIMPERIALPET_DATA@@@std@@QBEIXZ ; std::allocator<IMPERIALPET_DATA>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<IMPERIALPET_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXPAUIMPERIALPET_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXPAUIMPERIALPET_DATA@@0@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<IMPERIALPET_DATA> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEXPAUIMPERIALPET_DATA@@0@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@QBEIXZ ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<IMPERIALPET_DATA>::allocator<IMPERIALPET_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UIMPERIALPET_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<IMPERIALPET_DATA>::allocator<IMPERIALPET_DATA>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ?deallocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@I@Z PROC ; std::allocator<IMPERIALPET_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@I@Z ENDP ; std::allocator<IMPERIALPET_DATA>::deallocate
_TEXT	ENDS
PUBLIC	??$_Umove@PAUEXPCHAR_DATA@@@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEPAUEXPCHAR_DATA@@PAU2@00@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Umove<EXPCHAR_DATA *>
PUBLIC	?allocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEPAUEXPCHAR_DATA@@I@Z ; std::allocator<EXPCHAR_DATA>::allocate
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$228613 = -28					; size = 4
__Ptr$228606 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Xlen
  00044	e9 f0 00 00 00	 jmp	 $LN7@reserve@2
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 df 00 00
	00		 jae	 $LN7@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEPAUEXPCHAR_DATA@@I@Z ; std::allocator<EXPCHAR_DATA>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$228606[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$228606[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUEXPCHAR_DATA@@@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEPAUEXPCHAR_DATA@@PAU2@00@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Umove<EXPCHAR_DATA *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve@2
__catch$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228606[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@I@Z ; std::allocator<EXPCHAR_DATA>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve@2:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$228613[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 3a		 je	 SHORT $LN1@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXPAUEXPCHAR_DATA@@0@Z ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ef	2b 01		 sub	 eax, DWORD PTR [ecx]
  000f1	99		 cdq
  000f2	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000f7	f7 f9		 idiv	 ecx
  000f9	50		 push	 eax
  000fa	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 02		 mov	 eax, DWORD PTR [edx]
  000ff	50		 push	 eax
  00100	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00106	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@I@Z ; std::allocator<EXPCHAR_DATA>::deallocate
$LN1@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0010b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  00113	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00116	6b c0 0e	 imul	 eax, 14			; 0000000eH
  00119	03 45 e8	 add	 eax, DWORD PTR __Ptr$228606[ebp]
  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  00122	8b 45 e4	 mov	 eax, DWORD PTR __Size$228613[ebp]
  00125	6b c0 0e	 imul	 eax, 14			; 0000000eH
  00128	03 45 e8	 add	 eax, DWORD PTR __Ptr$228606[ebp]
  0012b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  00131	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228606[ebp]
  00137	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve@2:

; 772  : 			}
; 773  : 		}

  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0001d	f7 f9		 idiv	 ecx

; 778  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?capacity@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UEXPCHAR_DATA@@@std@@QBEIXZ ; std::allocator<EXPCHAR_DATA>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UEXPCHAR_DATA@@@std@@QBEIXZ ; std::allocator<EXPCHAR_DATA>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<EXPCHAR_DATA> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXPAUEXPCHAR_DATA@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXPAUEXPCHAR_DATA@@0@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<EXPCHAR_DATA> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEXPAUEXPCHAR_DATA@@0@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@QBEIXZ ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to@2
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to@2:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to@2:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Grow_to
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen@2:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<EXPCHAR_DATA>::allocator<EXPCHAR_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UEXPCHAR_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<EXPCHAR_DATA>::allocator<EXPCHAR_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@I@Z PROC ; std::allocator<EXPCHAR_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@I@Z ENDP ; std::allocator<EXPCHAR_DATA>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Allocate@UIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@IPAU1@@Z ; std::_Allocate<IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEPAUIMPERIALPET_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEPAUIMPERIALPET_DATA@@I@Z PROC ; std::allocator<IMPERIALPET_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@IPAU1@@Z ; std::_Allocate<IMPERIALPET_DATA>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UIMPERIALPET_DATA@@@std@@QAEPAUIMPERIALPET_DATA@@I@Z ENDP ; std::allocator<IMPERIALPET_DATA>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UIMPERIALPET_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UIMPERIALPET_DATA@@@std@@QBEIXZ PROC ; std::allocator<IMPERIALPET_DATA>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 92 24
	49 12		 mov	 DWORD PTR __Count$[ebp], 306783378 ; 12492492H

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UIMPERIALPET_DATA@@@std@@QBEIXZ ENDP ; std::allocator<IMPERIALPET_DATA>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@UEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@IPAU1@@Z ; std::_Allocate<EXPCHAR_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ?allocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEPAUEXPCHAR_DATA@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEPAUEXPCHAR_DATA@@I@Z PROC ; std::allocator<EXPCHAR_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@IPAU1@@Z ; std::_Allocate<EXPCHAR_DATA>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UEXPCHAR_DATA@@@std@@QAEPAUEXPCHAR_DATA@@I@Z ENDP ; std::allocator<EXPCHAR_DATA>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UEXPCHAR_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UEXPCHAR_DATA@@@std@@QBEIXZ PROC	; std::allocator<EXPCHAR_DATA>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 92 24
	49 12		 mov	 DWORD PTR __Count$[ebp], 306783378 ; 12492492H

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size@2
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size@2
$LN3@max_size@2:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UEXPCHAR_DATA@@@std@@QBEIXZ ENDP	; std::allocator<EXPCHAR_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QAE@PAUIMPERIALPET_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QAE@PAUEXPCHAR_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> > >::_Compat
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUIMPERIALPET_DATA@@@std@@YAPBUIMPERIALPET_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUIMPERIALPET_DATA@@@std@@YAPBUIMPERIALPET_DATA@@ABU1@@Z PROC ; std::addressof<IMPERIALPET_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUIMPERIALPET_DATA@@@std@@YAPBUIMPERIALPET_DATA@@ABU1@@Z ENDP ; std::addressof<IMPERIALPET_DATA const >
_TEXT	ENDS
PUBLIC	??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z ; std::allocator<IMPERIALPET_DATA>::construct<IMPERIALPET_DATA &>
PUBLIC	??$forward@AAUIMPERIALPET_DATA@@@std@@YAAAUIMPERIALPET_DATA@@AAU1@@Z ; std::forward<IMPERIALPET_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@AAU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@AAU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUIMPERIALPET_DATA@@@std@@YAAAUIMPERIALPET_DATA@@AAU1@@Z ; std::forward<IMPERIALPET_DATA &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z ; std::allocator<IMPERIALPET_DATA>::construct<IMPERIALPET_DATA &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@AAU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@ABU3@@Z ; std::allocator<IMPERIALPET_DATA>::construct
PUBLIC	??$forward@ABUIMPERIALPET_DATA@@@std@@YAABUIMPERIALPET_DATA@@ABU1@@Z ; std::forward<IMPERIALPET_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@ABU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@ABU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUIMPERIALPET_DATA@@@std@@YAABUIMPERIALPET_DATA@@ABU1@@Z ; std::forward<IMPERIALPET_DATA const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@ABU3@@Z ; std::allocator<IMPERIALPET_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@ABU3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA const &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUEXPCHAR_DATA@@@std@@YAPBUEXPCHAR_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUEXPCHAR_DATA@@@std@@YAPBUEXPCHAR_DATA@@ABU1@@Z PROC ; std::addressof<EXPCHAR_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUEXPCHAR_DATA@@@std@@YAPBUEXPCHAR_DATA@@ABU1@@Z ENDP ; std::addressof<EXPCHAR_DATA const >
_TEXT	ENDS
PUBLIC	??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z ; std::allocator<EXPCHAR_DATA>::construct<EXPCHAR_DATA &>
PUBLIC	??$forward@AAUEXPCHAR_DATA@@@std@@YAAAUEXPCHAR_DATA@@AAU1@@Z ; std::forward<EXPCHAR_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@AAU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@AAU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUEXPCHAR_DATA@@@std@@YAAAUEXPCHAR_DATA@@AAU1@@Z ; std::forward<EXPCHAR_DATA &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z ; std::allocator<EXPCHAR_DATA>::construct<EXPCHAR_DATA &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@AAU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@ABU3@@Z ; std::allocator<EXPCHAR_DATA>::construct
PUBLIC	??$forward@ABUEXPCHAR_DATA@@@std@@YAABUEXPCHAR_DATA@@ABU1@@Z ; std::forward<EXPCHAR_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@ABU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@ABU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUEXPCHAR_DATA@@@std@@YAABUEXPCHAR_DATA@@ABU1@@Z ; std::forward<EXPCHAR_DATA const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@ABU3@@Z ; std::allocator<EXPCHAR_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@ABU3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<IMPERIALPET_DATA *,IMPERIALPET_DATA *>
PUBLIC	??$_Ptr_cat@UIMPERIALPET_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUIMPERIALPET_DATA@@0@Z ; std::_Ptr_cat<IMPERIALPET_DATA,IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00@Z
_TEXT	SEGMENT
$T230158 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00@Z PROC ; std::_Move<IMPERIALPET_DATA *,IMPERIALPET_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UIMPERIALPET_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUIMPERIALPET_DATA@@0@Z ; std::_Ptr_cat<IMPERIALPET_DATA,IMPERIALPET_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T230158[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T230158[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<IMPERIALPET_DATA *,IMPERIALPET_DATA *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00@Z ENDP ; std::_Move<IMPERIALPET_DATA *,IMPERIALPET_DATA *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<EXPCHAR_DATA *,EXPCHAR_DATA *>
PUBLIC	??$_Ptr_cat@UEXPCHAR_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUEXPCHAR_DATA@@0@Z ; std::_Ptr_cat<EXPCHAR_DATA,EXPCHAR_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00@Z
_TEXT	SEGMENT
$T230161 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00@Z PROC ; std::_Move<EXPCHAR_DATA *,EXPCHAR_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UEXPCHAR_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUEXPCHAR_DATA@@0@Z ; std::_Ptr_cat<EXPCHAR_DATA,EXPCHAR_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T230161[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T230161[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<EXPCHAR_DATA *,EXPCHAR_DATA *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00@Z ENDP ; std::_Move<EXPCHAR_DATA *,EXPCHAR_DATA *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z ; std::_Uninitialized_move<IMPERIALPET_DATA *,IMPERIALPET_DATA *,std::allocator<IMPERIALPET_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUIMPERIALPET_DATA@@@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEPAUIMPERIALPET_DATA@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUIMPERIALPET_DATA@@@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEPAUIMPERIALPET_DATA@@PAU2@00@Z PROC ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Umove<IMPERIALPET_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z ; std::_Uninitialized_move<IMPERIALPET_DATA *,IMPERIALPET_DATA *,std::allocator<IMPERIALPET_DATA> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUIMPERIALPET_DATA@@@?$vector@UIMPERIALPET_DATA@@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@IAEPAUIMPERIALPET_DATA@@PAU2@00@Z ENDP ; std::vector<IMPERIALPET_DATA,std::allocator<IMPERIALPET_DATA> >::_Umove<IMPERIALPET_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<IMPERIALPET_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z
_TEXT	SEGMENT
$T230166 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<IMPERIALPET_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UIMPERIALPET_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUIMPERIALPET_DATA@@0@Z ; std::_Ptr_cat<IMPERIALPET_DATA,IMPERIALPET_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T230166[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T230166[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<IMPERIALPET_DATA> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<IMPERIALPET_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@@Z ; std::_Uninitialized_move<EXPCHAR_DATA *,EXPCHAR_DATA *,std::allocator<EXPCHAR_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUEXPCHAR_DATA@@@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEPAUEXPCHAR_DATA@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUEXPCHAR_DATA@@@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEPAUEXPCHAR_DATA@@PAU2@00@Z PROC ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Umove<EXPCHAR_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@@Z ; std::_Uninitialized_move<EXPCHAR_DATA *,EXPCHAR_DATA *,std::allocator<EXPCHAR_DATA> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUEXPCHAR_DATA@@@?$vector@UEXPCHAR_DATA@@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@IAEPAUEXPCHAR_DATA@@PAU2@00@Z ENDP ; std::vector<EXPCHAR_DATA,std::allocator<EXPCHAR_DATA> >::_Umove<EXPCHAR_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<EXPCHAR_DATA> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@@Z
_TEXT	SEGMENT
$T230171 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<EXPCHAR_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UEXPCHAR_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUEXPCHAR_DATA@@0@Z ; std::_Ptr_cat<EXPCHAR_DATA,EXPCHAR_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T230171[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T230171[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<EXPCHAR_DATA> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<EXPCHAR_DATA> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@UIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T230174 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@IPAU1@@Z PROC ; std::_Allocate<IMPERIALPET_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 92 24
	49 12		 cmp	 DWORD PTR __Count$[ebp], 306783378 ; 12492492H
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	6b c0 0e	 imul	 eax, 14			; 0000000eH
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T230174[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T230174[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@IPAU1@@Z ENDP ; std::_Allocate<IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@UEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T230177 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@IPAU1@@Z PROC ; std::_Allocate<EXPCHAR_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate@2

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate@2
$LN4@Allocate@2:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 92 24
	49 12		 cmp	 DWORD PTR __Count$[ebp], 306783378 ; 12492492H
  00026	77 18		 ja	 SHORT $LN1@Allocate@2
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	6b c0 0e	 imul	 eax, 14			; 0000000eH
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T230177[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T230177[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate@2:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@2:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@IPAU1@@Z ENDP ; std::_Allocate<EXPCHAR_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z ; std::_Construct<IMPERIALPET_DATA,IMPERIALPET_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@ABU3@@Z PROC ; std::allocator<IMPERIALPET_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z ; std::_Construct<IMPERIALPET_DATA,IMPERIALPET_DATA const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@ABU3@@Z ENDP ; std::allocator<IMPERIALPET_DATA>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z ; std::_Construct<EXPCHAR_DATA,EXPCHAR_DATA const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@ABU3@@Z PROC ; std::allocator<EXPCHAR_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z ; std::_Construct<EXPCHAR_DATA,EXPCHAR_DATA const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@ABU3@@Z ENDP ; std::allocator<EXPCHAR_DATA>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUIMPERIALPET_DATA@@@std@@YAAAUIMPERIALPET_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUIMPERIALPET_DATA@@@std@@YAAAUIMPERIALPET_DATA@@AAU1@@Z PROC ; std::forward<IMPERIALPET_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUIMPERIALPET_DATA@@@std@@YAAAUIMPERIALPET_DATA@@AAU1@@Z ENDP ; std::forward<IMPERIALPET_DATA &>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T230186 = -88						; size = 4
$T230187 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z PROC ; std::allocator<IMPERIALPET_DATA>::construct<IMPERIALPET_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 0e		 push	 14			; 0000000eH
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T230187[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T230187[ebp], 0
  00047	74 2f		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUIMPERIALPET_DATA@@@std@@YAAAUIMPERIALPET_DATA@@AAU1@@Z ; std::forward<IMPERIALPET_DATA &>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 ac	 mov	 edx, DWORD PTR $T230187[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	89 0a		 mov	 DWORD PTR [edx], ecx
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00068	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  0006c	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
  00070	8b 4d ac	 mov	 ecx, DWORD PTR $T230187[ebp]
  00073	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00076	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00078	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  0007f	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00082	89 55 a8	 mov	 DWORD PTR $T230186[ebp], edx
  00085	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T230187[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUIMPERIALPET_DATA@@@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@AAU2@@Z ENDP ; std::allocator<IMPERIALPET_DATA>::construct<IMPERIALPET_DATA &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUIMPERIALPET_DATA@@@std@@YAABUIMPERIALPET_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUIMPERIALPET_DATA@@@std@@YAABUIMPERIALPET_DATA@@ABU1@@Z PROC ; std::forward<IMPERIALPET_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUIMPERIALPET_DATA@@@std@@YAABUIMPERIALPET_DATA@@ABU1@@Z ENDP ; std::forward<IMPERIALPET_DATA const &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@AAUEXPCHAR_DATA@@@std@@YAAAUEXPCHAR_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUEXPCHAR_DATA@@@std@@YAAAUEXPCHAR_DATA@@AAU1@@Z PROC ; std::forward<EXPCHAR_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUEXPCHAR_DATA@@@std@@YAAAUEXPCHAR_DATA@@AAU1@@Z ENDP ; std::forward<EXPCHAR_DATA &>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T230207 = -88						; size = 4
$T230208 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z PROC ; std::allocator<EXPCHAR_DATA>::construct<EXPCHAR_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 0e		 push	 14			; 0000000eH
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T230208[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T230208[ebp], 0
  00047	74 2f		 je	 SHORT $LN3@construct@2
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUEXPCHAR_DATA@@@std@@YAAAUEXPCHAR_DATA@@AAU1@@Z ; std::forward<EXPCHAR_DATA &>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 ac	 mov	 edx, DWORD PTR $T230208[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	89 0a		 mov	 DWORD PTR [edx], ecx
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00068	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  0006c	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
  00070	8b 4d ac	 mov	 ecx, DWORD PTR $T230208[ebp]
  00073	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00076	eb 07		 jmp	 SHORT $LN4@construct@2
$LN3@construct@2:
  00078	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@2:
  0007f	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00082	89 55 a8	 mov	 DWORD PTR $T230207[ebp], edx
  00085	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T230208[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUEXPCHAR_DATA@@@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@AAU2@@Z ENDP ; std::allocator<EXPCHAR_DATA>::construct<EXPCHAR_DATA &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUEXPCHAR_DATA@@@std@@YAABUEXPCHAR_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUEXPCHAR_DATA@@@std@@YAABUEXPCHAR_DATA@@ABU1@@Z PROC ; std::forward<EXPCHAR_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUEXPCHAR_DATA@@@std@@YAABUEXPCHAR_DATA@@ABU1@@Z ENDP ; std::forward<EXPCHAR_DATA const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UIMPERIALPET_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUIMPERIALPET_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UIMPERIALPET_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUIMPERIALPET_DATA@@0@Z PROC ; std::_Ptr_cat<IMPERIALPET_DATA,IMPERIALPET_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UIMPERIALPET_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUIMPERIALPET_DATA@@0@Z ENDP ; std::_Ptr_cat<IMPERIALPET_DATA,IMPERIALPET_DATA>
_TEXT	ENDS
PUBLIC	??$move@AAUIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z ; std::move<IMPERIALPET_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<IMPERIALPET_DATA *,IMPERIALPET_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 0e	 add	 eax, 14			; 0000000eH
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 29		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z ; std::move<IMPERIALPET_DATA &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0003e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00041	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00044	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  00048	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax
  0004c	eb bd		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  0004e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$_Move@PAUIMPERIALPET_DATA@@PAU1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<IMPERIALPET_DATA *,IMPERIALPET_DATA *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UEXPCHAR_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUEXPCHAR_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UEXPCHAR_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUEXPCHAR_DATA@@0@Z PROC ; std::_Ptr_cat<EXPCHAR_DATA,EXPCHAR_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UEXPCHAR_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUEXPCHAR_DATA@@0@Z ENDP ; std::_Ptr_cat<EXPCHAR_DATA,EXPCHAR_DATA>
_TEXT	ENDS
PUBLIC	??$move@AAUEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z ; std::move<EXPCHAR_DATA &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<EXPCHAR_DATA *,EXPCHAR_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move@2
$LN2@Move@2:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 0e	 add	 eax, 14			; 0000000eH
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move@2:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 29		 je	 SHORT $LN1@Move@2

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z ; std::move<EXPCHAR_DATA &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0003e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00041	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00044	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  00048	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax
  0004c	eb bd		 jmp	 SHORT $LN2@Move@2
$LN1@Move@2:

; 2515 : 	return (_Dest);

  0004e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$_Move@PAUEXPCHAR_DATA@@PAU1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<EXPCHAR_DATA *,EXPCHAR_DATA *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<IMPERIALPET_DATA *,IMPERIALPET_DATA *,std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA>
PUBLIC	??$_Val_type@PAUIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@@Z ; std::_Val_type<IMPERIALPET_DATA *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z
_TEXT	SEGMENT
$T230230 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z PROC ; std::_Uninitialized_move<IMPERIALPET_DATA *,IMPERIALPET_DATA *,std::allocator<IMPERIALPET_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UIMPERIALPET_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUIMPERIALPET_DATA@@0@Z ; std::_Ptr_cat<IMPERIALPET_DATA,IMPERIALPET_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T230230[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T230230[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@@Z ; std::_Val_type<IMPERIALPET_DATA *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<IMPERIALPET_DATA *,IMPERIALPET_DATA *,std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<IMPERIALPET_DATA *,IMPERIALPET_DATA *,std::allocator<IMPERIALPET_DATA> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@@Z ; std::_Dest_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<IMPERIALPET_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 0e	 add	 eax, 14			; 0000000eH
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@@Z ; std::_Dest_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UIMPERIALPET_DATA@@@std@@@std@@YAXPAUIMPERIALPET_DATA@@0AAV?$allocator@UIMPERIALPET_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<IMPERIALPET_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<EXPCHAR_DATA *,EXPCHAR_DATA *,std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA>
PUBLIC	??$_Val_type@PAUEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@PAU1@@Z ; std::_Val_type<EXPCHAR_DATA *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@@Z
_TEXT	SEGMENT
$T230235 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@@Z PROC ; std::_Uninitialized_move<EXPCHAR_DATA *,EXPCHAR_DATA *,std::allocator<EXPCHAR_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UEXPCHAR_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUEXPCHAR_DATA@@0@Z ; std::_Ptr_cat<EXPCHAR_DATA,EXPCHAR_DATA>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T230235[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T230235[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@PAU1@@Z ; std::_Val_type<EXPCHAR_DATA *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<EXPCHAR_DATA *,EXPCHAR_DATA *,std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<EXPCHAR_DATA *,EXPCHAR_DATA *,std::allocator<EXPCHAR_DATA> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@@Z ; std::_Dest_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<EXPCHAR_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 0e	 add	 eax, 14			; 0000000eH
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra@2

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@@Z ; std::_Dest_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UEXPCHAR_DATA@@@std@@@std@@YAXPAUEXPCHAR_DATA@@0AAV?$allocator@UEXPCHAR_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<EXPCHAR_DATA> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T230240 = -88						; size = 4
$T230241 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z PROC ; std::_Construct<IMPERIALPET_DATA,IMPERIALPET_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 0e		 push	 14			; 0000000eH
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T230241[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T230241[ebp], 0
  0004a	74 2f		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUIMPERIALPET_DATA@@@std@@YAABUIMPERIALPET_DATA@@ABU1@@Z ; std::forward<IMPERIALPET_DATA const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 55 ac	 mov	 edx, DWORD PTR $T230241[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	89 0a		 mov	 DWORD PTR [edx], ecx
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00065	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00068	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0006b	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  0006f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
  00073	8b 4d ac	 mov	 ecx, DWORD PTR $T230241[ebp]
  00076	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00079	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  0007b	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  00082	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00085	89 55 a8	 mov	 DWORD PTR $T230240[ebp], edx
  00088	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T230241[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UIMPERIALPET_DATA@@ABU1@@std@@YAXPAUIMPERIALPET_DATA@@ABU1@@Z ENDP ; std::_Construct<IMPERIALPET_DATA,IMPERIALPET_DATA const &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T230253 = -88						; size = 4
$T230254 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z PROC ; std::_Construct<EXPCHAR_DATA,EXPCHAR_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 0e		 push	 14			; 0000000eH
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T230254[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T230254[ebp], 0
  0004a	74 2f		 je	 SHORT $LN3@Construct@2
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUEXPCHAR_DATA@@@std@@YAABUEXPCHAR_DATA@@ABU1@@Z ; std::forward<EXPCHAR_DATA const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 55 ac	 mov	 edx, DWORD PTR $T230254[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	89 0a		 mov	 DWORD PTR [edx], ecx
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00065	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00068	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0006b	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  0006f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
  00073	8b 4d ac	 mov	 ecx, DWORD PTR $T230254[ebp]
  00076	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00079	eb 07		 jmp	 SHORT $LN4@Construct@2
$LN3@Construct@2:
  0007b	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct@2:
  00082	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00085	89 55 a8	 mov	 DWORD PTR $T230253[ebp], edx
  00088	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T230254[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UEXPCHAR_DATA@@ABU1@@std@@YAXPAUEXPCHAR_DATA@@ABU1@@Z ENDP ; std::_Construct<EXPCHAR_DATA,EXPCHAR_DATA const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z PROC ; std::move<IMPERIALPET_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z ENDP ; std::move<IMPERIALPET_DATA &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$move@AAUEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z PROC ; std::move<EXPCHAR_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z ENDP ; std::move<EXPCHAR_DATA &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@@Z PROC ; std::_Val_type<IMPERIALPET_DATA *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUIMPERIALPET_DATA@@@std@@YAPAUIMPERIALPET_DATA@@PAU1@@Z ENDP ; std::_Val_type<IMPERIALPET_DATA *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@U3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<IMPERIALPET_DATA *,IMPERIALPET_DATA *,std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 0e	 add	 eax, 14			; 0000000eH
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@U3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 0e	 add	 eax, 14			; 0000000eH
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@@Z ; std::_Dest_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUIMPERIALPET_DATA@@PAU1@V?$allocator@UIMPERIALPET_DATA@@@std@@U1@@std@@YAPAUIMPERIALPET_DATA@@PAU1@00AAV?$allocator@UIMPERIALPET_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<IMPERIALPET_DATA *,IMPERIALPET_DATA *,std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA>
PUBLIC	?destroy@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@@Z ; std::allocator<IMPERIALPET_DATA>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@@Z PROC ; std::_Dest_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@@Z ; std::allocator<IMPERIALPET_DATA>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@PAU1@@Z PROC ; std::_Val_type<EXPCHAR_DATA *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUEXPCHAR_DATA@@@std@@YAPAUEXPCHAR_DATA@@PAU1@@Z ENDP ; std::_Val_type<EXPCHAR_DATA *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@U3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<EXPCHAR_DATA *,EXPCHAR_DATA *,std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov@2
$LN5@Uninit_mov@2:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 0e	 add	 eax, 14			; 0000000eH
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov@2:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov@2

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@U3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov@2
$LN4@Uninit_mov@2:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov@2
__catch$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov@2
$LN2@Uninit_mov@2:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 0e	 add	 eax, 14			; 0000000eH
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov@2:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov@2

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@@Z ; std::_Dest_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov@2
$LN1@Uninit_mov@2:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov@2:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov@2:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUEXPCHAR_DATA@@PAU1@V?$allocator@UEXPCHAR_DATA@@@std@@U1@@std@@YAPAUEXPCHAR_DATA@@PAU1@00AAV?$allocator@UEXPCHAR_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<EXPCHAR_DATA *,EXPCHAR_DATA *,std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA>
PUBLIC	?destroy@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@@Z ; std::allocator<EXPCHAR_DATA>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@@Z PROC ; std::_Dest_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@@Z ; std::allocator<EXPCHAR_DATA>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy@UIMPERIALPET_DATA@@@std@@YAXPAUIMPERIALPET_DATA@@@Z ; std::_Destroy<IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@@Z PROC ; std::allocator<IMPERIALPET_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UIMPERIALPET_DATA@@@std@@YAXPAUIMPERIALPET_DATA@@@Z ; std::_Destroy<IMPERIALPET_DATA>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@@Z ENDP ; std::allocator<IMPERIALPET_DATA>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UEXPCHAR_DATA@@@std@@YAXPAUEXPCHAR_DATA@@@Z ; std::_Destroy<EXPCHAR_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@@Z PROC ; std::allocator<EXPCHAR_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UEXPCHAR_DATA@@@std@@YAXPAUEXPCHAR_DATA@@@Z ; std::_Destroy<EXPCHAR_DATA>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@@Z ENDP ; std::allocator<EXPCHAR_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z ; std::allocator<IMPERIALPET_DATA>::construct
PUBLIC	??$forward@UIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z ; std::forward<IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@U3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@U3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z ; std::forward<IMPERIALPET_DATA>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z ; std::allocator<IMPERIALPET_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UIMPERIALPET_DATA@@@std@@UIMPERIALPET_DATA@@U3@@std@@YAXAAV?$allocator@UIMPERIALPET_DATA@@@0@PAUIMPERIALPET_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<IMPERIALPET_DATA>,IMPERIALPET_DATA,IMPERIALPET_DATA>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z ; std::allocator<EXPCHAR_DATA>::construct
PUBLIC	??$forward@UEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z ; std::forward<EXPCHAR_DATA>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@U3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@U3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z ; std::forward<EXPCHAR_DATA>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z ; std::allocator<EXPCHAR_DATA>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UEXPCHAR_DATA@@@std@@UEXPCHAR_DATA@@U3@@std@@YAXAAV?$allocator@UEXPCHAR_DATA@@@0@PAUEXPCHAR_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<EXPCHAR_DATA>,EXPCHAR_DATA,EXPCHAR_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UIMPERIALPET_DATA@@@std@@YAXPAUIMPERIALPET_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UIMPERIALPET_DATA@@@std@@YAXPAUIMPERIALPET_DATA@@@Z PROC ; std::_Destroy<IMPERIALPET_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UIMPERIALPET_DATA@@@std@@YAXPAUIMPERIALPET_DATA@@@Z ENDP ; std::_Destroy<IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UEXPCHAR_DATA@@@std@@YAXPAUEXPCHAR_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UEXPCHAR_DATA@@@std@@YAXPAUEXPCHAR_DATA@@@Z PROC ; std::_Destroy<EXPCHAR_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UEXPCHAR_DATA@@@std@@YAXPAUEXPCHAR_DATA@@@Z ENDP ; std::_Destroy<EXPCHAR_DATA>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T230320 = -88						; size = 4
$T230321 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z PROC ; std::allocator<IMPERIALPET_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 0e		 push	 14			; 0000000eH
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T230321[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T230321[ebp], 0
  00047	74 2f		 je	 SHORT $LN3@construct@3
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z ; std::forward<IMPERIALPET_DATA>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 ac	 mov	 edx, DWORD PTR $T230321[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	89 0a		 mov	 DWORD PTR [edx], ecx
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00068	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  0006c	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
  00070	8b 4d ac	 mov	 ecx, DWORD PTR $T230321[ebp]
  00073	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00076	eb 07		 jmp	 SHORT $LN4@construct@3
$LN3@construct@3:
  00078	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@3:
  0007f	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00082	89 55 a8	 mov	 DWORD PTR $T230320[ebp], edx
  00085	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T230321[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UIMPERIALPET_DATA@@@std@@QAEXPAUIMPERIALPET_DATA@@$$QAU3@@Z ENDP ; std::allocator<IMPERIALPET_DATA>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T230333 = -88						; size = 4
$T230334 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z PROC ; std::allocator<EXPCHAR_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 0e		 push	 14			; 0000000eH
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T230334[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T230334[ebp], 0
  00047	74 2f		 je	 SHORT $LN3@construct@4
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z ; std::forward<EXPCHAR_DATA>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 ac	 mov	 edx, DWORD PTR $T230334[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	89 0a		 mov	 DWORD PTR [edx], ecx
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00068	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  0006c	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
  00070	8b 4d ac	 mov	 ecx, DWORD PTR $T230334[ebp]
  00073	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00076	eb 07		 jmp	 SHORT $LN4@construct@4
$LN3@construct@4:
  00078	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@4:
  0007f	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00082	89 55 a8	 mov	 DWORD PTR $T230333[ebp], edx
  00085	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T230334[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UEXPCHAR_DATA@@@std@@QAEXPAUEXPCHAR_DATA@@$$QAU3@@Z ENDP ; std::allocator<EXPCHAR_DATA>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z PROC ; std::forward<IMPERIALPET_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UIMPERIALPET_DATA@@@std@@YA$$QAUIMPERIALPET_DATA@@AAU1@@Z ENDP ; std::forward<IMPERIALPET_DATA>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@UEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z PROC ; std::forward<EXPCHAR_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UEXPCHAR_DATA@@@std@@YA$$QAUEXPCHAR_DATA@@AAU1@@Z ENDP ; std::forward<EXPCHAR_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\donatemanager.cpp
;	COMDAT ??__Eg_DonateManager@@YAXXZ
text$yc	SEGMENT
??__Eg_DonateManager@@YAXXZ PROC			; `dynamic initializer for 'g_DonateManager'', COMDAT

; 10   : CDonateManager g_DonateManager;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DonateManager@@3VCDonateManager@@A ; g_DonateManager
  0000e	e8 00 00 00 00	 call	 ??0CDonateManager@@QAE@XZ ; CDonateManager::CDonateManager
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_DonateManager@@YAXXZ ; `dynamic atexit destructor for 'g_DonateManager''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_DonateManager@@YAXXZ ENDP			; `dynamic initializer for 'g_DonateManager''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_DonateManager@@YAXXZ
text$yd	SEGMENT
??__Fg_DonateManager@@YAXXZ PROC			; `dynamic atexit destructor for 'g_DonateManager'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DonateManager@@3VCDonateManager@@A ; g_DonateManager
  0000e	e8 00 00 00 00	 call	 ??1CDonateManager@@QAE@XZ ; CDonateManager::~CDonateManager
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_DonateManager@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_DonateManager''
text$yd	ENDS
PUBLIC	?g_DonateManager@@3VCDonateManager@@A		; g_DonateManager
_BSS	SEGMENT
?g_DonateManager@@3VCDonateManager@@A DB 020H DUP (?)	; g_DonateManager
_BSS	ENDS
CRT$XCU	SEGMENT
_g_DonateManager$initializer$ DD FLAT:??__Eg_DonateManager@@YAXXZ
CRT$XCU	ENDS
END
