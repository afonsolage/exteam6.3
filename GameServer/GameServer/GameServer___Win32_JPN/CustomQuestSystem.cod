; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\CustomQuestSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >
PUBLIC	??0?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::vector<CustomQuestData,std::allocator<CustomQuestData> >
PUBLIC	??_7CCustomQuestSystem@@6B@			; CCustomQuestSystem::`vftable'
PUBLIC	??0CCustomQuestSystem@@QAE@XZ			; CCustomQuestSystem::CCustomQuestSystem
PUBLIC	??_R4CCustomQuestSystem@@6B@			; CCustomQuestSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCustomQuestSystem@@@8			; CCustomQuestSystem `RTTI Type Descriptor'
PUBLIC	??_R3CCustomQuestSystem@@8			; CCustomQuestSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCustomQuestSystem@@8			; CCustomQuestSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCustomQuestSystem@@8		; CCustomQuestSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCustomQuestSystem@@UAEPAXI@Z:PROC		; CCustomQuestSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCustomQuestSystem@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\customquestsystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCustomQuestSystem@@8 DD FLAT:??_R0?AVCCustomQuestSystem@@@8 ; CCustomQuestSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCustomQuestSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CCustomQuestSystem@@8
rdata$r	SEGMENT
??_R2CCustomQuestSystem@@8 DD FLAT:??_R1A@?0A@EA@CCustomQuestSystem@@8 ; CCustomQuestSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCustomQuestSystem@@8
rdata$r	SEGMENT
??_R3CCustomQuestSystem@@8 DD 00H			; CCustomQuestSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCustomQuestSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCustomQuestSystem@@@8
_DATA	SEGMENT
??_R0?AVCCustomQuestSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CCustomQuestSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCustomQuestSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCustomQuestSystem@@6B@
rdata$r	SEGMENT
??_R4CCustomQuestSystem@@6B@ DD 00H			; CCustomQuestSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCustomQuestSystem@@@8
	DD	FLAT:??_R3CCustomQuestSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CCustomQuestSystem@@6B@
CONST	SEGMENT
??_7CCustomQuestSystem@@6B@ DD FLAT:??_R4CCustomQuestSystem@@6B@ ; CCustomQuestSystem::`vftable'
	DD	FLAT:??_ECCustomQuestSystem@@UAEPAXI@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CCustomQuestSystem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCustomQuestSystem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCustomQuestSystem@@QAE@XZ$1
__ehfuncinfo$??0CCustomQuestSystem@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCustomQuestSystem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCustomQuestSystem@@QAE@XZ PROC			; CCustomQuestSystem::CCustomQuestSystem
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCustomQuestSystem@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCustomQuestSystem@@6B@
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0003a	e8 00 00 00 00	 call	 ??0?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::vector<CustomQuestData,std::allocator<CustomQuestData> >
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0004c	e8 00 00 00 00	 call	 ??0?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::vector<CustomQuestData,std::allocator<CustomQuestData> >
  00051	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0005b	e8 00 00 00 00	 call	 ??0?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::vector<CustomQuestData,std::allocator<CustomQuestData> >

; 18   : }

  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CCustomQuestSystem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >
__unwindfunclet$??0CCustomQuestSystem@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >
__ehhandler$??0CCustomQuestSystem@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCustomQuestSystem@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCustomQuestSystem@@QAE@XZ ENDP			; CCustomQuestSystem::CCustomQuestSystem
PUBLIC	??1CCustomQuestSystem@@UAE@XZ			; CCustomQuestSystem::~CCustomQuestSystem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCCustomQuestSystem@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCustomQuestSystem@@UAEPAXI@Z PROC			; CCustomQuestSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CCustomQuestSystem@@UAE@XZ ; CCustomQuestSystem::~CCustomQuestSystem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCCustomQuestSystem@@UAEPAXI@Z ENDP			; CCustomQuestSystem::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$??1CCustomQuestSystem@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCustomQuestSystem@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCustomQuestSystem@@UAE@XZ$1
__ehfuncinfo$??1CCustomQuestSystem@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCustomQuestSystem@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCustomQuestSystem@@UAE@XZ PROC			; CCustomQuestSystem::~CCustomQuestSystem
; _this$ = ecx

; 22   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	6a ff		 push	 -1
  00085	68 00 00 00 00	 push	 __ehhandler$??1CCustomQuestSystem@@UAE@XZ
  0008a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00090	50		 push	 eax
  00091	83 ec 44	 sub	 esp, 68			; 00000044H
  00094	53		 push	 ebx
  00095	56		 push	 esi
  00096	57		 push	 edi
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0009c	33 c5		 xor	 eax, ebp
  0009e	50		 push	 eax
  0009f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  000a2	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  000a8	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  000ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCustomQuestSystem@@6B@
  000b4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 23   : }

  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000c1	e8 00 00 00 00	 call	 ??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >
  000c6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ca	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000d0	e8 00 00 00 00	 call	 ??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >
  000d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000dc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000e2	e8 00 00 00 00	 call	 ??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >
  000e7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f1	59		 pop	 ecx
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CCustomQuestSystem@@UAE@XZ$0:
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e9 00 00 00 00	 jmp	 ??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >
__unwindfunclet$??1CCustomQuestSystem@@UAE@XZ$1:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00042	e9 00 00 00 00	 jmp	 ??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >
__ehhandler$??1CCustomQuestSystem@@UAE@XZ:
  00047	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004e	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00051	33 c8		 xor	 ecx, eax
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CCustomQuestSystem@@UAE@XZ
  0005d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CCustomQuestSystem@@UAE@XZ ENDP			; CCustomQuestSystem::~CCustomQuestSystem
PUBLIC	?clear@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::clear
PUBLIC	?Init@CCustomQuestSystem@@QAEXXZ		; CCustomQuestSystem::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CCustomQuestSystem@@QAEXXZ PROC			; CCustomQuestSystem::Init
; _this$ = ecx

; 26   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	83 ec 44	 sub	 esp, 68			; 00000044H
  00106	53		 push	 ebx
  00107	56		 push	 esi
  00108	57		 push	 edi
  00109	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	m_vUniqueQuests.clear();

  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00112	e8 00 00 00 00	 call	 ?clear@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::clear

; 28   : 	m_vDailyQuests.clear();

  00117	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0011d	e8 00 00 00 00	 call	 ?clear@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::clear

; 29   : 	m_vGuildQuests.clear();

  00122	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00128	e8 00 00 00 00	 call	 ?clear@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::clear

; 30   : 	m_bEnabled = false;

  0012d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00130	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 31   : 	m_iNpcClass = 0;

  00137	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 32   : }

  00141	5f		 pop	 edi
  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
?Init@CCustomQuestSystem@@QAEXXZ ENDP			; CCustomQuestSystem::Init
_TEXT	ENDS
PUBLIC	??_C@_0BI@PMMAKHJA@Custom?2Quests?2Daily?4txt?$AA@ ; `string'
PUBLIC	?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z	; CCustomQuestSystem::LoadQuests
PUBLIC	??_C@_0BJ@FBDNIKAA@Custom?2Quests?2Unique?4txt?$AA@ ; `string'
PUBLIC	??_C@_09FENANBBA@NPC_CLASS?$AA@			; `string'
PUBLIC	??_C@_05KJMBIHHL@Quest?$AA@			; `string'
PUBLIC	??_C@_07DOAOMMKG@Enabled?$AA@			; `string'
PUBLIC	??_C@_0BJ@ECKBNBGA@Custom?2Quests?2Config?4ini?$AA@ ; `string'
PUBLIC	?Load@CCustomQuestSystem@@QAEXXZ		; CCustomQuestSystem::Load
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BI@PMMAKHJA@Custom?2Quests?2Daily?4txt?$AA@
CONST	SEGMENT
??_C@_0BI@PMMAKHJA@Custom?2Quests?2Daily?4txt?$AA@ DB 'Custom\Quests\Dail'
	DB	'y.txt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FBDNIKAA@Custom?2Quests?2Unique?4txt?$AA@
CONST	SEGMENT
??_C@_0BJ@FBDNIKAA@Custom?2Quests?2Unique?4txt?$AA@ DB 'Custom\Quests\Uni'
	DB	'que.txt', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09FENANBBA@NPC_CLASS?$AA@
CONST	SEGMENT
??_C@_09FENANBBA@NPC_CLASS?$AA@ DB 'NPC_CLASS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJMBIHHL@Quest?$AA@
CONST	SEGMENT
??_C@_05KJMBIHHL@Quest?$AA@ DB 'Quest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOAOMMKG@Enabled?$AA@
CONST	SEGMENT
??_C@_07DOAOMMKG@Enabled?$AA@ DB 'Enabled', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ECKBNBGA@Custom?2Quests?2Config?4ini?$AA@
CONST	SEGMENT
??_C@_0BJ@ECKBNBGA@Custom?2Quests?2Config?4ini?$AA@ DB 'Custom\Quests\Con'
	DB	'fig.ini', 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CCustomQuestSystem@@QAEXXZ PROC			; CCustomQuestSystem::Load
; _this$ = ecx

; 35   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	83 ec 44	 sub	 esp, 68			; 00000044H
  00156	53		 push	 ebx
  00157	56		 push	 esi
  00158	57		 push	 edi
  00159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 	Init();

  0015c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015f	e8 00 00 00 00	 call	 ?Init@CCustomQuestSystem@@QAEXXZ ; CCustomQuestSystem::Init

; 37   : 
; 38   : 	m_bEnabled = (BOOL) GetPrivateProfileInt("Quest", "Enabled", 0, gDirPath.GetNewPath("Custom\\Quests\\Config.ini"));

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@ECKBNBGA@Custom?2Quests?2Config?4ini?$AA@
  00169	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0016e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00173	50		 push	 eax
  00174	6a 00		 push	 0
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_07DOAOMMKG@Enabled?$AA@
  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_05KJMBIHHL@Quest?$AA@
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00186	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00189	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 39   : 
; 40   : 	if (!m_bEnabled)

  0018c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00193	75 02		 jne	 SHORT $LN1@Load

; 41   : 		return;

  00195	eb 46		 jmp	 SHORT $LN2@Load
$LN1@Load:

; 42   : 
; 43   : 	m_iNpcClass = GetPrivateProfileInt("Quest", "NPC_CLASS", 0, gDirPath.GetNewPath("Custom\\Quests\\Config.ini"));

  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@ECKBNBGA@Custom?2Quests?2Config?4ini?$AA@
  0019c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  001a1	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  001a6	50		 push	 eax
  001a7	6a 00		 push	 0
  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_09FENANBBA@NPC_CLASS?$AA@
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_05KJMBIHHL@Quest?$AA@
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  001b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bc	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 44   : 
; 45   : 	LoadQuests(CQ_UNIQUE_QUEST, "Custom\\Quests\\Unique.txt");

  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FBDNIKAA@Custom?2Quests?2Unique?4txt?$AA@
  001c4	6a 00		 push	 0
  001c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c9	e8 00 00 00 00	 call	 ?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z ; CCustomQuestSystem::LoadQuests

; 46   : 	LoadQuests(CQ_DAILY_QUEST, "Custom\\Quests\\Daily.txt");

  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PMMAKHJA@Custom?2Quests?2Daily?4txt?$AA@
  001d3	6a 01		 push	 1
  001d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d8	e8 00 00 00 00	 call	 ?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z ; CCustomQuestSystem::LoadQuests
$LN2@Load:

; 47   : }

  001dd	5f		 pop	 edi
  001de	5e		 pop	 esi
  001df	5b		 pop	 ebx
  001e0	8b e5		 mov	 esp, ebp
  001e2	5d		 pop	 ebp
  001e3	c3		 ret	 0
?Load@CCustomQuestSystem@@QAEXXZ ENDP			; CCustomQuestSystem::Load
_TEXT	ENDS
PUBLIC	??$emplace_back@AAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXAAUCustomQuestData@@@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::emplace_back<CustomQuestData &>
PUBLIC	??$emplace_back@AAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXAAUCustomQuestReward@@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::emplace_back<CustomQuestReward &>
PUBLIC	??$emplace_back@AAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXAAUCustomQuestMission@@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::emplace_back<CustomQuestMission &>
PUBLIC	??1CustomQuestData@@QAE@XZ			; CustomQuestData::~CustomQuestData
PUBLIC	??0CustomQuestData@@QAE@XZ			; CustomQuestData::CustomQuestData
PUBLIC	?FindQuestList@CCustomQuestSystem@@AAEAAV?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@H@Z ; CCustomQuestSystem::FindQuestList
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	_fclose:PROC
EXTRN	_strncpy:PROC
EXTRN	_memset:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z$0
__ehfuncinfo$?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_reward$229544 = -168					; size = 20
_mission$229533 = -148					; size = 8
_session$229527 = -140					; size = 4
_data$229514 = -136					; size = 104
_quests$ = -32						; size = 4
_file_path$ = -28					; size = 4
_Token$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_path$ = 12						; size = 4
?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z PROC		; CCustomQuestSystem::LoadQuests
; _this$ = ecx

; 50   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	6a ff		 push	 -1
  001f5	68 00 00 00 00	 push	 __ehhandler$?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z
  001fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00200	50		 push	 eax
  00201	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00207	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0020c	33 c5		 xor	 eax, ebp
  0020e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00211	53		 push	 ebx
  00212	56		 push	 esi
  00213	57		 push	 edi
  00214	50		 push	 eax
  00215	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00218	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0021e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 	int Token;
; 52   : 	char* file_path = gDirPath.GetNewPath(path);

  00221	8b 45 0c	 mov	 eax, DWORD PTR _path$[ebp]
  00224	50		 push	 eax
  00225	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0022a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0022f	89 45 e4	 mov	 DWORD PTR _file_path$[ebp], eax

; 53   : 
; 54   : 	SMDFile = fopen(file_path, "r");

  00232	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00237	8b 45 e4	 mov	 eax, DWORD PTR _file_path$[ebp]
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 _fopen
  00240	83 c4 08	 add	 esp, 8
  00243	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 55   : 
; 56   : 	if( SMDFile == NULL )

  00248	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  0024f	75 1e		 jne	 SHORT $LN13@LoadQuests

; 57   : 	{
; 58   : 		MsgBox(lMsg.Get(MSGGET(0, 112)), file_path);

  00251	8b 45 e4	 mov	 eax, DWORD PTR _file_path$[ebp]
  00254	50		 push	 eax
  00255	6a 70		 push	 112			; 00000070H
  00257	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0025c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00267	83 c4 08	 add	 esp, 8

; 59   : 		return;

  0026a	e9 1b 03 00 00	 jmp	 $LN14@LoadQuests
$LN13@LoadQuests:

; 60   : 	}
; 61   : 
; 62   : 	std::vector<CustomQuestData>& quests = FindQuestList(type);

  0026f	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00272	50		 push	 eax
  00273	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00276	e8 00 00 00 00	 call	 ?FindQuestList@CCustomQuestSystem@@AAEAAV?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@H@Z ; CCustomQuestSystem::FindQuestList
  0027b	89 45 e0	 mov	 DWORD PTR _quests$[ebp], eax
$LN12@LoadQuests:

; 63   : 
; 64   : 	while(true)

  0027e	b8 01 00 00 00	 mov	 eax, 1
  00283	85 c0		 test	 eax, eax
  00285	0f 84 f1 02 00
	00		 je	 $LN11@LoadQuests

; 65   : 	{
; 66   : 		Token = GetToken();

  0028b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00290	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 67   : 
; 68   : 		if (Token == END)

  00293	83 7d e8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00297	75 05		 jne	 SHORT $LN10@LoadQuests

; 69   : 		{
; 70   : 			break;

  00299	e9 de 02 00 00	 jmp	 $LN11@LoadQuests
$LN10@LoadQuests:

; 71   : 		}
; 72   : 
; 73   : 		if ( Token != NUMBER )

  0029e	83 7d e8 01	 cmp	 DWORD PTR _Token$[ebp], 1
  002a2	74 05		 je	 SHORT $LN9@LoadQuests

; 74   : 		{
; 75   : 			break;

  002a4	e9 d3 02 00 00	 jmp	 $LN11@LoadQuests
$LN9@LoadQuests:

; 76   : 		}
; 77   : 
; 78   : 		CustomQuestData data;

  002a9	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _data$229514[ebp]
  002af	e8 00 00 00 00	 call	 ??0CustomQuestData@@QAE@XZ
  002b4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 79   : 		memset(&data, 0, sizeof(data));

  002bb	6a 68		 push	 104			; 00000068H
  002bd	6a 00		 push	 0
  002bf	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _data$229514[ebp]
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 _memset
  002cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 80   : 
; 81   : 		data.id = (int)TokenNumber;

  002ce	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002d4	e8 00 00 00 00	 call	 __ftol2_sse
  002d9	89 85 78 ff ff
	ff		 mov	 DWORD PTR _data$229514[ebp], eax

; 82   : 
; 83   : 		Token = GetToken();

  002df	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002e4	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 84   : 		data.NeedLevel = (int)TokenNumber;

  002e7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ed	e8 00 00 00 00	 call	 __ftol2_sse
  002f2	89 45 98	 mov	 DWORD PTR _data$229514[ebp+32], eax

; 85   : 
; 86   : 		if (type == CQ_DAILY_QUEST)

  002f5	83 7d 08 01	 cmp	 DWORD PTR _type$[ebp], 1
  002f9	75 16		 jne	 SHORT $LN8@LoadQuests

; 87   : 		{
; 88   : 			Token = GetToken();

  002fb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00300	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 89   : 			data.MaxLevel = (int)TokenNumber;

  00303	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00309	e8 00 00 00 00	 call	 __ftol2_sse
  0030e	89 45 9c	 mov	 DWORD PTR _data$229514[ebp+36], eax
$LN8@LoadQuests:

; 90   : 		}
; 91   : 
; 92   : 		Token = GetToken();

  00311	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00316	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 93   : 		data.NeedReset = (int)TokenNumber;

  00319	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0031f	e8 00 00 00 00	 call	 __ftol2_sse
  00324	89 45 a0	 mov	 DWORD PTR _data$229514[ebp+40], eax

; 94   : 
; 95   : 		Token = GetToken();

  00327	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0032c	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 96   : 		strncpy(data.NameQuest, TokenString, 25);

  0032f	6a 19		 push	 25			; 00000019H
  00331	68 00 00 00 00	 push	 OFFSET _TokenString
  00336	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _data$229514[ebp+4]
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 _strncpy
  00342	83 c4 0c	 add	 esp, 12			; 0000000cH

; 97   : 
; 98   : 		Token = GetToken();

  00345	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0034a	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 99   : 		data.AllowDW = (BOOL)TokenNumber;

  0034d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00353	e8 00 00 00 00	 call	 __ftol2_sse
  00358	89 45 a4	 mov	 DWORD PTR _data$229514[ebp+44], eax

; 100  : 
; 101  : 		Token = GetToken();

  0035b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00360	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 102  : 		data.AllowDK = (BOOL)TokenNumber;

  00363	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00369	e8 00 00 00 00	 call	 __ftol2_sse
  0036e	89 45 a8	 mov	 DWORD PTR _data$229514[ebp+48], eax

; 103  : 
; 104  : 		Token = GetToken();

  00371	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00376	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 105  : 		data.AllowELF = (BOOL)TokenNumber;

  00379	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0037f	e8 00 00 00 00	 call	 __ftol2_sse
  00384	89 45 ac	 mov	 DWORD PTR _data$229514[ebp+52], eax

; 106  : 
; 107  : 		Token = GetToken();

  00387	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0038c	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 108  : 		data.AllowSUM = (BOOL)TokenNumber;

  0038f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00395	e8 00 00 00 00	 call	 __ftol2_sse
  0039a	89 45 b0	 mov	 DWORD PTR _data$229514[ebp+56], eax

; 109  : 
; 110  : 		Token = GetToken();

  0039d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003a2	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 111  : 		data.AllowMG = (BOOL)TokenNumber;

  003a5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003ab	e8 00 00 00 00	 call	 __ftol2_sse
  003b0	89 45 b4	 mov	 DWORD PTR _data$229514[ebp+60], eax

; 112  : 
; 113  : 		Token = GetToken();

  003b3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003b8	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 114  : 		data.AllowDL = (BOOL)TokenNumber;

  003bb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003c1	e8 00 00 00 00	 call	 __ftol2_sse
  003c6	89 45 b8	 mov	 DWORD PTR _data$229514[ebp+64], eax

; 115  : 
; 116  : 		Token = GetToken();

  003c9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003ce	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 117  : 		data.AllowRF = (BOOL)TokenNumber;

  003d1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003d7	e8 00 00 00 00	 call	 __ftol2_sse
  003dc	89 45 bc	 mov	 DWORD PTR _data$229514[ebp+68], eax

; 118  : 
; 119  : 		Token = GetToken();

  003df	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003e4	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 120  : 		int session = (int)TokenNumber;

  003e7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003ed	e8 00 00 00 00	 call	 __ftol2_sse
  003f2	89 85 74 ff ff
	ff		 mov	 DWORD PTR _session$229527[ebp], eax

; 121  : 
; 122  : 		if (session != 1)

  003f8	83 bd 74 ff ff
	ff 01		 cmp	 DWORD PTR _session$229527[ebp], 1
  003ff	74 17		 je	 SHORT $LN7@LoadQuests

; 123  : 		{
; 124  : 			break;

  00401	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00408	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _data$229514[ebp]
  0040e	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  00413	e9 64 01 00 00	 jmp	 $LN11@LoadQuests
$LN7@LoadQuests:

; 125  : 		}
; 126  : 
; 127  : 		Token = GetToken();

  00418	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0041d	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax
$LN6@LoadQuests:

; 128  : 		while (Token == NUMBER)

  00420	83 7d e8 01	 cmp	 DWORD PTR _Token$[ebp], 1
  00424	75 43		 jne	 SHORT $LN5@LoadQuests

; 129  : 		{
; 130  : 			CustomQuestMission mission;
; 131  : 			mission.MobID = (int)TokenNumber;

  00426	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0042c	e8 00 00 00 00	 call	 __ftol2_sse
  00431	89 85 6c ff ff
	ff		 mov	 DWORD PTR _mission$229533[ebp], eax

; 132  : 
; 133  : 			Token = GetToken();

  00437	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0043c	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 134  : 			mission.MobCount = (int)TokenNumber;

  0043f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00445	e8 00 00 00 00	 call	 __ftol2_sse
  0044a	89 85 70 ff ff
	ff		 mov	 DWORD PTR _mission$229533[ebp+4], eax

; 135  : 
; 136  : 			Token = GetToken();

  00450	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00455	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 137  : 
; 138  : 			data.missions.emplace_back(mission);

  00458	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _mission$229533[ebp]
  0045e	50		 push	 eax
  0045f	8d 4d c0	 lea	 ecx, DWORD PTR _data$229514[ebp+72]
  00462	e8 00 00 00 00	 call	 ??$emplace_back@AAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXAAUCustomQuestMission@@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::emplace_back<CustomQuestMission &>

; 139  : 		}

  00467	eb b7		 jmp	 SHORT $LN6@LoadQuests
$LN5@LoadQuests:

; 140  : 
; 141  : 		Token = GetToken();

  00469	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0046e	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 142  : 		session = (int)TokenNumber;

  00471	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00477	e8 00 00 00 00	 call	 __ftol2_sse
  0047c	89 85 74 ff ff
	ff		 mov	 DWORD PTR _session$229527[ebp], eax

; 143  : 
; 144  : 		if (session != 2)

  00482	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _session$229527[ebp], 2
  00489	74 17		 je	 SHORT $LN4@LoadQuests

; 145  : 		{
; 146  : 			break;

  0048b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00492	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _data$229514[ebp]
  00498	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  0049d	e9 da 00 00 00	 jmp	 $LN11@LoadQuests
$LN4@LoadQuests:

; 147  : 		}
; 148  : 
; 149  : 		Token = GetToken();

  004a2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004a7	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax
$LN3@LoadQuests:

; 150  : 		while (Token == NUMBER)

  004aa	83 7d e8 01	 cmp	 DWORD PTR _Token$[ebp], 1
  004ae	0f 85 9a 00 00
	00		 jne	 $LN2@LoadQuests

; 151  : 		{
; 152  : 			CustomQuestReward reward;
; 153  : 			reward.Type = (int)TokenNumber;

  004b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004ba	e8 00 00 00 00	 call	 __ftol2_sse
  004bf	89 85 58 ff ff
	ff		 mov	 DWORD PTR _reward$229544[ebp], eax

; 154  : 
; 155  : 			Token = GetToken();

  004c5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004ca	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 156  : 			reward.Count = (int)TokenNumber;

  004cd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004d3	e8 00 00 00 00	 call	 __ftol2_sse
  004d8	89 85 5c ff ff
	ff		 mov	 DWORD PTR _reward$229544[ebp+4], eax

; 157  : 
; 158  : 			if (reward.Type == RewardType::ITEM)

  004de	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR _reward$229544[ebp], 3
  004e5	75 4b		 jne	 SHORT $LN1@LoadQuests

; 159  : 			{
; 160  : 				Token = GetToken();

  004e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004ec	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 161  : 				reward.ItemType = (int)TokenNumber;

  004ef	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004f5	e8 00 00 00 00	 call	 __ftol2_sse
  004fa	89 85 60 ff ff
	ff		 mov	 DWORD PTR _reward$229544[ebp+8], eax

; 162  : 
; 163  : 				Token = GetToken();

  00500	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00505	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 164  : 				reward.ItemIdx = (int)TokenNumber;

  00508	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0050e	e8 00 00 00 00	 call	 __ftol2_sse
  00513	89 85 64 ff ff
	ff		 mov	 DWORD PTR _reward$229544[ebp+12], eax

; 165  : 
; 166  : 				Token = GetToken();

  00519	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0051e	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 167  : 				reward.ItemLvl = (int)TokenNumber;

  00521	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00527	e8 00 00 00 00	 call	 __ftol2_sse
  0052c	89 85 68 ff ff
	ff		 mov	 DWORD PTR _reward$229544[ebp+16], eax
$LN1@LoadQuests:

; 168  : 			}
; 169  : 
; 170  : 			Token = GetToken();

  00532	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00537	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 171  : 
; 172  : 			data.rewards.emplace_back(reward);

  0053a	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _reward$229544[ebp]
  00540	50		 push	 eax
  00541	8d 4d d0	 lea	 ecx, DWORD PTR _data$229514[ebp+88]
  00544	e8 00 00 00 00	 call	 ??$emplace_back@AAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXAAUCustomQuestReward@@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::emplace_back<CustomQuestReward &>

; 173  : 		}

  00549	e9 5c ff ff ff	 jmp	 $LN3@LoadQuests
$LN2@LoadQuests:

; 174  : 
; 175  : 		Token = GetToken();

  0054e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00553	89 45 e8	 mov	 DWORD PTR _Token$[ebp], eax

; 176  : 
; 177  : 		quests.emplace_back(data);

  00556	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _data$229514[ebp]
  0055c	50		 push	 eax
  0055d	8b 4d e0	 mov	 ecx, DWORD PTR _quests$[ebp]
  00560	e8 00 00 00 00	 call	 ??$emplace_back@AAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXAAUCustomQuestData@@@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::emplace_back<CustomQuestData &>

; 178  : 	}

  00565	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0056c	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _data$229514[ebp]
  00572	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  00577	e9 02 fd ff ff	 jmp	 $LN12@LoadQuests
$LN11@LoadQuests:

; 179  : 
; 180  : 	fclose(SMDFile);

  0057c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00581	50		 push	 eax
  00582	e8 00 00 00 00	 call	 _fclose
  00587	83 c4 04	 add	 esp, 4
$LN14@LoadQuests:

; 181  : }

  0058a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0058d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00594	59		 pop	 ecx
  00595	5f		 pop	 edi
  00596	5e		 pop	 esi
  00597	5b		 pop	 ebx
  00598	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0059b	33 cd		 xor	 ecx, ebp
  0059d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005a2	8b e5		 mov	 esp, ebp
  005a4	5d		 pop	 ebp
  005a5	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z$0:
  00062	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _data$229514[ebp]
  00068	e9 00 00 00 00	 jmp	 ??1CustomQuestData@@QAE@XZ
__ehhandler$?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z:
  0006d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00071	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00074	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0007a	33 c8		 xor	 ecx, eax
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00084	33 c8		 xor	 ecx, eax
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z
  00090	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadQuests@CCustomQuestSystem@@AAEXHPAD@Z ENDP		; CCustomQuestSystem::LoadQuests
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\customquestsystem.h
;	COMDAT ?FindQuestList@CCustomQuestSystem@@AAEAAV?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@H@Z
_TEXT	SEGMENT
tv69 = -84						; size = 4
tv70 = -80						; size = 4
$T232849 = -76						; size = 4
$T232850 = -72						; size = 4
_this$ = -4						; size = 4
_type$ = 8						; size = 4
?FindQuestList@CCustomQuestSystem@@AAEAAV?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@H@Z PROC ; CCustomQuestSystem::FindQuestList, COMDAT
; _this$ = ecx

; 138  : 	std::vector<CustomQuestData>& FindQuestList(int type) {return (type == CQ_UNIQUE_QUEST) ? this->m_vUniqueQuests : (type == CQ_DAILY_QUEST) ? this->m_vDailyQuests : this->m_vGuildQuests;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	83 7d 08 00	 cmp	 DWORD PTR _type$[ebp], 0
  00010	75 0b		 jne	 SHORT $LN5@FindQuestL
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	83 c0 0c	 add	 eax, 12			; 0000000cH
  00018	89 45 b0	 mov	 DWORD PTR tv70[ebp], eax
  0001b	eb 26		 jmp	 SHORT $LN6@FindQuestL
$LN5@FindQuestL:
  0001d	83 7d 08 01	 cmp	 DWORD PTR _type$[ebp], 1
  00021	75 0b		 jne	 SHORT $LN3@FindQuestL
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00029	89 4d ac	 mov	 DWORD PTR tv69[ebp], ecx
  0002c	eb 09		 jmp	 SHORT $LN4@FindQuestL
$LN3@FindQuestL:
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00031	83 c2 2c	 add	 edx, 44			; 0000002cH
  00034	89 55 ac	 mov	 DWORD PTR tv69[ebp], edx
$LN4@FindQuestL:
  00037	8b 45 ac	 mov	 eax, DWORD PTR tv69[ebp]
  0003a	89 45 b8	 mov	 DWORD PTR $T232850[ebp], eax
  0003d	8b 4d b8	 mov	 ecx, DWORD PTR $T232850[ebp]
  00040	89 4d b0	 mov	 DWORD PTR tv70[ebp], ecx
$LN6@FindQuestL:
  00043	8b 55 b0	 mov	 edx, DWORD PTR tv70[ebp]
  00046	89 55 b4	 mov	 DWORD PTR $T232849[ebp], edx
  00049	8b 45 b4	 mov	 eax, DWORD PTR $T232849[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?FindQuestList@CCustomQuestSystem@@AAEAAV?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@H@Z ENDP ; CCustomQuestSystem::FindQuestList
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  005b0	55		 push	 ebp
  005b1	8b ec		 mov	 ebp, esp
  005b3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  005b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  005be	33 c5		 xor	 eax, ebp
  005c0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  005c3	53		 push	 ebx
  005c4	56		 push	 esi
  005c5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  005c6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  005cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005d2	50		 push	 eax
  005d3	e8 00 00 00 00	 call	 _fgetc
  005d8	83 c4 04	 add	 esp, 4
  005db	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  005de	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005e2	83 f9 ff	 cmp	 ecx, -1
  005e5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  005e7	b8 02 00 00 00	 mov	 eax, 2
  005ec	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  005f1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  005f3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005f7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  005fa	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  005fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00601	50		 push	 eax
  00602	e8 00 00 00 00	 call	 _fgetc
  00607	83 c4 04	 add	 esp, 4
  0060a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0060d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00611	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00614	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00616	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0061a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0061d	74 1c		 je	 SHORT $LN23@GetToken
  0061f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00623	83 f8 ff	 cmp	 eax, -1
  00626	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00628	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0062d	50		 push	 eax
  0062e	e8 00 00 00 00	 call	 _fgetc
  00633	83 c4 04	 add	 esp, 4
  00636	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00639	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0063b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0063f	83 f8 ff	 cmp	 eax, -1
  00642	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00644	b8 02 00 00 00	 mov	 eax, 2
  00649	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0064e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 _isspace
  00658	83 c4 04	 add	 esp, 4
  0065b	85 c0		 test	 eax, eax
  0065d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00663	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00667	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0066d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00673	83 e9 22	 sub	 ecx, 34			; 00000022H
  00676	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0067c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00683	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00689	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0068f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00696	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0069d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  006a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006ac	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  006b1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  006b6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  006c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006c5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  006ca	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  006cf	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  006d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006de	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  006e3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  006e8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  006f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006f7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  006fc	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00701	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0070b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00710	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00715	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0071a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0071f	50		 push	 eax
  00720	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00724	51		 push	 ecx
  00725	e8 00 00 00 00	 call	 _ungetc
  0072a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0072d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00730	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00733	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00738	50		 push	 eax
  00739	e8 00 00 00 00	 call	 _getc
  0073e	83 c4 04	 add	 esp, 4
  00741	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00744	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00748	83 f9 ff	 cmp	 ecx, -1
  0074b	74 36		 je	 SHORT $LN12@GetToken
  0074d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00751	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00754	74 1a		 je	 SHORT $LN11@GetToken
  00756	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0075a	50		 push	 eax
  0075b	e8 00 00 00 00	 call	 _isdigit
  00760	83 c4 04	 add	 esp, 4
  00763	85 c0		 test	 eax, eax
  00765	75 09		 jne	 SHORT $LN11@GetToken
  00767	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0076b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0076e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00770	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00773	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00776	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00778	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0077b	83 c0 01	 add	 eax, 1
  0077e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00781	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00783	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00786	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00789	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0078c	50		 push	 eax
  0078d	e8 00 00 00 00	 call	 _atof
  00792	83 c4 04	 add	 esp, 4
  00795	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0079b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  007a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007aa	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  007af	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  007b4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  007bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007c0	50		 push	 eax
  007c1	e8 00 00 00 00	 call	 _getc
  007c6	83 c4 04	 add	 esp, 4
  007c9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  007cc	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007d0	83 f9 ff	 cmp	 ecx, -1
  007d3	74 1c		 je	 SHORT $LN8@GetToken
  007d5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007d9	83 f8 22	 cmp	 eax, 34			; 00000022H
  007dc	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  007de	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007e1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  007e4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  007e6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007e9	83 c0 01	 add	 eax, 1
  007ec	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  007ef	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  007f1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007f5	83 f8 22	 cmp	 eax, 34			; 00000022H
  007f8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  007fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007ff	50		 push	 eax
  00800	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00804	51		 push	 ecx
  00805	e8 00 00 00 00	 call	 _ungetc
  0080a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0080d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00810	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00813	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0081d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00822	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00827	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0082c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00830	50		 push	 eax
  00831	e8 00 00 00 00	 call	 _isalpha
  00836	83 c4 04	 add	 esp, 4
  00839	85 c0		 test	 eax, eax
  0083b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00841	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00848	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0084b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0084e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00850	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00853	83 c0 01	 add	 eax, 1
  00856	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00859	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0085e	50		 push	 eax
  0085f	e8 00 00 00 00	 call	 _getc
  00864	83 c4 04	 add	 esp, 4
  00867	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0086a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0086e	83 f9 ff	 cmp	 ecx, -1
  00871	74 36		 je	 SHORT $LN3@GetToken
  00873	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00877	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0087a	74 1a		 je	 SHORT $LN2@GetToken
  0087c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00880	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00883	74 11		 je	 SHORT $LN2@GetToken
  00885	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00889	50		 push	 eax
  0088a	e8 00 00 00 00	 call	 _isalnum
  0088f	83 c4 04	 add	 esp, 4
  00892	85 c0		 test	 eax, eax
  00894	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00896	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00899	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0089c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0089e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008a1	83 c0 01	 add	 eax, 1
  008a4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  008a7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  008a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008ae	50		 push	 eax
  008af	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008b3	51		 push	 ecx
  008b4	e8 00 00 00 00	 call	 _ungetc
  008b9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  008bc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008bf	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  008c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  008cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008d1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  008d3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  008d5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  008df	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008e4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  008e6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  008e8	5f		 pop	 edi
  008e9	5e		 pop	 esi
  008ea	5b		 pop	 ebx
  008eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008ee	33 cd		 xor	 ecx, ebp
  008f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008f5	8b e5		 mov	 esp, ebp
  008f7	5d		 pop	 ebp
  008f8	c3		 ret	 0
  008f9	8d 49 00	 npad	 3
$LN35@GetToken:
  008fc	00 00 00 00	 DD	 $LN10@GetToken
  00900	00 00 00 00	 DD	 $LN19@GetToken
  00904	00 00 00 00	 DD	 $LN17@GetToken
  00908	00 00 00 00	 DD	 $LN14@GetToken
  0090c	00 00 00 00	 DD	 $LN18@GetToken
  00910	00 00 00 00	 DD	 $LN16@GetToken
  00914	00 00 00 00	 DD	 $LN15@GetToken
  00918	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0091c	00		 DB	 0
  0091d	01		 DB	 1
  0091e	07		 DB	 7
  0091f	07		 DB	 7
  00920	07		 DB	 7
  00921	07		 DB	 7
  00922	07		 DB	 7
  00923	07		 DB	 7
  00924	07		 DB	 7
  00925	07		 DB	 7
  00926	02		 DB	 2
  00927	03		 DB	 3
  00928	03		 DB	 3
  00929	07		 DB	 7
  0092a	03		 DB	 3
  0092b	03		 DB	 3
  0092c	03		 DB	 3
  0092d	03		 DB	 3
  0092e	03		 DB	 3
  0092f	03		 DB	 3
  00930	03		 DB	 3
  00931	03		 DB	 3
  00932	03		 DB	 3
  00933	03		 DB	 3
  00934	07		 DB	 7
  00935	04		 DB	 4
  00936	07		 DB	 7
  00937	07		 DB	 7
  00938	07		 DB	 7
  00939	07		 DB	 7
  0093a	07		 DB	 7
  0093b	07		 DB	 7
  0093c	07		 DB	 7
  0093d	07		 DB	 7
  0093e	07		 DB	 7
  0093f	07		 DB	 7
  00940	07		 DB	 7
  00941	07		 DB	 7
  00942	07		 DB	 7
  00943	07		 DB	 7
  00944	07		 DB	 7
  00945	07		 DB	 7
  00946	07		 DB	 7
  00947	07		 DB	 7
  00948	07		 DB	 7
  00949	07		 DB	 7
  0094a	07		 DB	 7
  0094b	07		 DB	 7
  0094c	07		 DB	 7
  0094d	07		 DB	 7
  0094e	07		 DB	 7
  0094f	07		 DB	 7
  00950	07		 DB	 7
  00951	07		 DB	 7
  00952	07		 DB	 7
  00953	07		 DB	 7
  00954	07		 DB	 7
  00955	07		 DB	 7
  00956	07		 DB	 7
  00957	07		 DB	 7
  00958	07		 DB	 7
  00959	07		 DB	 7
  0095a	07		 DB	 7
  0095b	07		 DB	 7
  0095c	07		 DB	 7
  0095d	07		 DB	 7
  0095e	07		 DB	 7
  0095f	07		 DB	 7
  00960	07		 DB	 7
  00961	07		 DB	 7
  00962	07		 DB	 7
  00963	07		 DB	 7
  00964	07		 DB	 7
  00965	07		 DB	 7
  00966	07		 DB	 7
  00967	07		 DB	 7
  00968	07		 DB	 7
  00969	07		 DB	 7
  0096a	07		 DB	 7
  0096b	07		 DB	 7
  0096c	07		 DB	 7
  0096d	07		 DB	 7
  0096e	07		 DB	 7
  0096f	07		 DB	 7
  00970	07		 DB	 7
  00971	07		 DB	 7
  00972	07		 DB	 7
  00973	07		 DB	 7
  00974	07		 DB	 7
  00975	05		 DB	 5
  00976	07		 DB	 7
  00977	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::~vector<CustomQuestMission,std::allocator<CustomQuestMission> >
PUBLIC	??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::vector<CustomQuestReward,std::allocator<CustomQuestReward> >
PUBLIC	??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::vector<CustomQuestMission,std::allocator<CustomQuestMission> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CustomQuestData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CustomQuestData@@QAE@XZ$0
__ehfuncinfo$??0CustomQuestData@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CustomQuestData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0CustomQuestData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CustomQuestData@@QAE@XZ PROC				; CustomQuestData::CustomQuestData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CustomQuestData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 48	 add	 ecx, 72			; 00000048H
  00031	e8 00 00 00 00	 call	 ??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::vector<CustomQuestMission,std::allocator<CustomQuestMission> >
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 58	 add	 ecx, 88			; 00000058H
  00043	e8 00 00 00 00	 call	 ??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::vector<CustomQuestReward,std::allocator<CustomQuestReward> >
  00048	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CustomQuestData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 48	 add	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::~vector<CustomQuestMission,std::allocator<CustomQuestMission> >
__ehhandler$??0CustomQuestData@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CustomQuestData@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CustomQuestData@@QAE@XZ ENDP				; CustomQuestData::CustomQuestData
PUBLIC	??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::~vector<CustomQuestReward,std::allocator<CustomQuestReward> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CustomQuestData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CustomQuestData@@QAE@XZ$0
__ehfuncinfo$??1CustomQuestData@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CustomQuestData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1CustomQuestData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CustomQuestData@@QAE@XZ PROC				; CustomQuestData::~CustomQuestData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CustomQuestData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 58	 add	 ecx, 88			; 00000058H
  00038	e8 00 00 00 00	 call	 ??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::~vector<CustomQuestReward,std::allocator<CustomQuestReward> >
  0003d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 48	 add	 ecx, 72			; 00000048H
  0004a	e8 00 00 00 00	 call	 ??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::~vector<CustomQuestMission,std::allocator<CustomQuestMission> >
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CustomQuestData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 48	 add	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::~vector<CustomQuestMission,std::allocator<CustomQuestMission> >
__ehhandler$??1CustomQuestData@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CustomQuestData@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CustomQuestData@@QAE@XZ ENDP				; CustomQuestData::~CustomQuestData
PUBLIC	?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::GC_MainInfo
PUBLIC	?Dialog@CCustomQuestSystem@@QAE_NHH@Z		; CCustomQuestSystem::Dialog
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnectedEx@@YA_NH@Z:PROC		; gObjIsConnectedEx
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\customquestsystem.cpp
_TEXT	SEGMENT
_lpNpc$ = -12						; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_aNpcIndex$ = 12					; size = 4
?Dialog@CCustomQuestSystem@@QAE_NHH@Z PROC		; CCustomQuestSystem::Dialog
; _this$ = ecx

; 184  : {

  00980	55		 push	 ebp
  00981	8b ec		 mov	 ebp, esp
  00983	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00986	53		 push	 ebx
  00987	56		 push	 esi
  00988	57		 push	 edi
  00989	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 185  : 	if (!m_bEnabled)

  0098c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0098f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00993	75 04		 jne	 SHORT $LN3@Dialog

; 186  : 	{
; 187  : 		return false;

  00995	32 c0		 xor	 al, al
  00997	eb 5f		 jmp	 SHORT $LN4@Dialog
$LN3@Dialog:

; 188  : 	}
; 189  : 
; 190  : 	if(!gObjIsConnectedEx(aIndex))

  00999	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0099c	50		 push	 eax
  0099d	e8 00 00 00 00	 call	 ?gObjIsConnectedEx@@YA_NH@Z ; gObjIsConnectedEx
  009a2	83 c4 04	 add	 esp, 4
  009a5	0f b6 c8	 movzx	 ecx, al
  009a8	85 c9		 test	 ecx, ecx
  009aa	75 04		 jne	 SHORT $LN2@Dialog

; 191  : 	{
; 192  : 		return false;

  009ac	32 c0		 xor	 al, al
  009ae	eb 48		 jmp	 SHORT $LN4@Dialog
$LN2@Dialog:

; 193  : 	}
; 194  : 
; 195  : 	LPOBJ lpUser = &gObj[aIndex];

  009b0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  009b3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  009b9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  009bf	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 196  : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  009c2	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  009c5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  009cb	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  009d1	89 45 f4	 mov	 DWORD PTR _lpNpc$[ebp], eax

; 197  : 
; 198  : 	if (lpNpc->Class != this->m_iNpcClass)

  009d4	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  009d7	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  009de	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  009e1	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  009e4	74 04		 je	 SHORT $LN1@Dialog

; 199  : 	{
; 200  : 		return false;

  009e6	32 c0		 xor	 al, al
  009e8	eb 0e		 jmp	 SHORT $LN4@Dialog
$LN1@Dialog:

; 201  : 	}
; 202  : 
; 203  : 	this->GC_MainInfo(lpUser);

  009ea	8b 45 f8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  009ed	50		 push	 eax
  009ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009f1	e8 00 00 00 00	 call	 ?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::GC_MainInfo

; 204  : 
; 205  : 	return true;

  009f6	b0 01		 mov	 al, 1
$LN4@Dialog:

; 206  : }

  009f8	5f		 pop	 edi
  009f9	5e		 pop	 esi
  009fa	5b		 pop	 ebx
  009fb	8b e5		 mov	 esp, ebp
  009fd	5d		 pop	 ebp
  009fe	c2 08 00	 ret	 8
?Dialog@CCustomQuestSystem@@QAE_NHH@Z ENDP		; CCustomQuestSystem::Dialog
_TEXT	ENDS
PUBLIC	??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
PUBLIC	?size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::size
PUBLIC	?IsDailyQuestAvailable@CCustomQuestSystem@@AAE_NPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::IsDailyQuestAvailable
PUBLIC	?FindNextQuest@CCustomQuestSystem@@AAEHHPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::FindNextQuest
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv144 = -80						; size = 4
_i$229582 = -12						; size = 4
_quests$ = -8						; size = 4
_this$ = -4						; size = 4
_type$ = 8						; size = 4
_lpUser$ = 12						; size = 4
?FindNextQuest@CCustomQuestSystem@@AAEHHPAUOBJECTSTRUCT@@@Z PROC ; CCustomQuestSystem::FindNextQuest
; _this$ = ecx

; 209  : {

  00a10	55		 push	 ebp
  00a11	8b ec		 mov	 ebp, esp
  00a13	83 ec 50	 sub	 esp, 80			; 00000050H
  00a16	53		 push	 ebx
  00a17	56		 push	 esi
  00a18	57		 push	 edi
  00a19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 210  : 	if (type == CQ_DAILY_QUEST && !IsDailyQuestAvailable(lpUser))

  00a1c	83 7d 08 01	 cmp	 DWORD PTR _type$[ebp], 1
  00a20	75 1a		 jne	 SHORT $LN24@FindNextQu
  00a22	8b 45 0c	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00a25	50		 push	 eax
  00a26	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a29	e8 00 00 00 00	 call	 ?IsDailyQuestAvailable@CCustomQuestSystem@@AAE_NPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::IsDailyQuestAvailable
  00a2e	0f b6 c8	 movzx	 ecx, al
  00a31	85 c9		 test	 ecx, ecx
  00a33	75 07		 jne	 SHORT $LN24@FindNextQu

; 211  : 		return 0;

  00a35	33 c0		 xor	 eax, eax
  00a37	e9 ae 01 00 00	 jmp	 $LN25@FindNextQu
$LN24@FindNextQu:

; 212  : 
; 213  : 	std::vector<CustomQuestData>& quests = FindQuestList(type);

  00a3c	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00a3f	50		 push	 eax
  00a40	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a43	e8 00 00 00 00	 call	 ?FindQuestList@CCustomQuestSystem@@AAEAAV?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@H@Z ; CCustomQuestSystem::FindQuestList
  00a48	89 45 f8	 mov	 DWORD PTR _quests$[ebp], eax

; 214  : 	
; 215  : 	for(int i = 0; i < quests.size(); i++)

  00a4b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$229582[ebp], 0
  00a52	eb 09		 jmp	 SHORT $LN23@FindNextQu
$LN22@FindNextQu:
  00a54	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00a57	83 c0 01	 add	 eax, 1
  00a5a	89 45 f4	 mov	 DWORD PTR _i$229582[ebp], eax
$LN23@FindNextQu:
  00a5d	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00a60	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::size
  00a65	39 45 f4	 cmp	 DWORD PTR _i$229582[ebp], eax
  00a68	0f 83 7a 01 00
	00		 jae	 $LN21@FindNextQu

; 216  : 	{
; 217  : 		if (lpUser->Level < quests[i].NeedLevel)

  00a6e	8b 45 0c	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00a71	0f bf b0 be 00
	00 00		 movsx	 esi, WORD PTR [eax+190]
  00a78	8b 4d f4	 mov	 ecx, DWORD PTR _i$229582[ebp]
  00a7b	51		 push	 ecx
  00a7c	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00a7f	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00a84	3b 70 20	 cmp	 esi, DWORD PTR [eax+32]
  00a87	7d 02		 jge	 SHORT $LN20@FindNextQu

; 218  : 			continue;

  00a89	eb c9		 jmp	 SHORT $LN22@FindNextQu
$LN20@FindNextQu:

; 219  : 
; 220  : 		if (quests[i].MaxLevel > 0 && quests[i].MaxLevel < lpUser->Level)

  00a8b	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00a8e	50		 push	 eax
  00a8f	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00a92	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00a97	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00a9b	7e 1d		 jle	 SHORT $LN19@FindNextQu
  00a9d	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00aa0	50		 push	 eax
  00aa1	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00aa4	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00aa9	8b 4d 0c	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00aac	0f bf 91 be 00
	00 00		 movsx	 edx, WORD PTR [ecx+190]
  00ab3	39 50 24	 cmp	 DWORD PTR [eax+36], edx
  00ab6	7d 02		 jge	 SHORT $LN19@FindNextQu

; 221  : 			continue;

  00ab8	eb 9a		 jmp	 SHORT $LN22@FindNextQu
$LN19@FindNextQu:

; 222  : 
; 223  : 		if (type == CQ_DAILY_QUEST && lpUser->Level > quests[i].MaxLevel)

  00aba	83 7d 08 01	 cmp	 DWORD PTR _type$[ebp], 1
  00abe	75 20		 jne	 SHORT $LN18@FindNextQu
  00ac0	8b 45 0c	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00ac3	0f bf b0 be 00
	00 00		 movsx	 esi, WORD PTR [eax+190]
  00aca	8b 4d f4	 mov	 ecx, DWORD PTR _i$229582[ebp]
  00acd	51		 push	 ecx
  00ace	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00ad1	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00ad6	3b 70 24	 cmp	 esi, DWORD PTR [eax+36]
  00ad9	7e 05		 jle	 SHORT $LN18@FindNextQu

; 224  : 			continue;

  00adb	e9 74 ff ff ff	 jmp	 $LN22@FindNextQu
$LN18@FindNextQu:

; 225  : 
; 226  : 		if (lpUser->Reset < quests[i].NeedReset)

  00ae0	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00ae3	50		 push	 eax
  00ae4	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00ae7	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00aec	8b 4d 0c	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00aef	8b 91 90 22 00
	00		 mov	 edx, DWORD PTR [ecx+8848]
  00af5	3b 50 28	 cmp	 edx, DWORD PTR [eax+40]
  00af8	7d 05		 jge	 SHORT $LN17@FindNextQu

; 227  : 			continue;

  00afa	e9 55 ff ff ff	 jmp	 $LN22@FindNextQu
$LN17@FindNextQu:

; 228  : 
; 229  : 		switch (lpUser->Class)

  00aff	8b 45 0c	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00b02	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00b09	89 4d b0	 mov	 DWORD PTR tv144[ebp], ecx
  00b0c	83 7d b0 06	 cmp	 DWORD PTR tv144[ebp], 6
  00b10	0f 87 ba 00 00
	00		 ja	 $LN15@FindNextQu
  00b16	8b 55 b0	 mov	 edx, DWORD PTR tv144[ebp]
  00b19	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN27@FindNextQu[edx*4]
$LN14@FindNextQu:

; 230  : 		{
; 231  : 		case CLASS_WIZARD: if (quests[i].AllowDW == 0) continue; break;

  00b20	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00b23	50		 push	 eax
  00b24	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00b27	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00b2c	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00b30	75 05		 jne	 SHORT $LN13@FindNextQu
  00b32	e9 1d ff ff ff	 jmp	 $LN22@FindNextQu
$LN13@FindNextQu:
  00b37	e9 94 00 00 00	 jmp	 $LN15@FindNextQu
$LN12@FindNextQu:

; 232  : 		case CLASS_KNIGHT: if (quests[i].AllowDK == 0) continue; break;

  00b3c	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00b3f	50		 push	 eax
  00b40	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00b43	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00b48	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00b4c	75 05		 jne	 SHORT $LN11@FindNextQu
  00b4e	e9 01 ff ff ff	 jmp	 $LN22@FindNextQu
$LN11@FindNextQu:
  00b53	eb 7b		 jmp	 SHORT $LN15@FindNextQu
$LN10@FindNextQu:

; 233  : 		case CLASS_ELF: if (quests[i].AllowELF == 0) continue; break;

  00b55	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00b58	50		 push	 eax
  00b59	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00b5c	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00b61	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  00b65	75 05		 jne	 SHORT $LN9@FindNextQu
  00b67	e9 e8 fe ff ff	 jmp	 $LN22@FindNextQu
$LN9@FindNextQu:
  00b6c	eb 62		 jmp	 SHORT $LN15@FindNextQu
$LN8@FindNextQu:

; 234  : 		case CLASS_SUMMONER: if (quests[i].AllowSUM == 0) continue; break;

  00b6e	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00b71	50		 push	 eax
  00b72	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00b75	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00b7a	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00b7e	75 05		 jne	 SHORT $LN7@FindNextQu
  00b80	e9 cf fe ff ff	 jmp	 $LN22@FindNextQu
$LN7@FindNextQu:
  00b85	eb 49		 jmp	 SHORT $LN15@FindNextQu
$LN6@FindNextQu:

; 235  : 		case CLASS_MAGUMSA: if (quests[i].AllowMG == 0) continue; break;

  00b87	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00b8a	50		 push	 eax
  00b8b	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00b8e	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00b93	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00b97	75 05		 jne	 SHORT $LN5@FindNextQu
  00b99	e9 b6 fe ff ff	 jmp	 $LN22@FindNextQu
$LN5@FindNextQu:
  00b9e	eb 30		 jmp	 SHORT $LN15@FindNextQu
$LN4@FindNextQu:

; 236  : 		case CLASS_DARKLORD: if (quests[i].AllowDL == 0) continue; break;

  00ba0	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00ba3	50		 push	 eax
  00ba4	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00ba7	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00bac	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00bb0	75 05		 jne	 SHORT $LN3@FindNextQu
  00bb2	e9 9d fe ff ff	 jmp	 $LN22@FindNextQu
$LN3@FindNextQu:
  00bb7	eb 17		 jmp	 SHORT $LN15@FindNextQu
$LN2@FindNextQu:

; 237  : 		case CLASS_MONK: if (quests[i].AllowRF == 0) continue; break;

  00bb9	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00bbc	50		 push	 eax
  00bbd	8b 4d f8	 mov	 ecx, DWORD PTR _quests$[ebp]
  00bc0	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00bc5	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00bc9	75 05		 jne	 SHORT $LN15@FindNextQu
  00bcb	e9 84 fe ff ff	 jmp	 $LN22@FindNextQu
$LN15@FindNextQu:

; 238  : 		}
; 239  : 
; 240  : 		return m_vUniqueQuests[i].id;

  00bd0	8b 45 f4	 mov	 eax, DWORD PTR _i$229582[ebp]
  00bd3	50		 push	 eax
  00bd4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bd7	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00bda	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00bdf	8b 00		 mov	 eax, DWORD PTR [eax]
  00be1	eb 07		 jmp	 SHORT $LN25@FindNextQu

; 241  : 	}

  00be3	e9 6c fe ff ff	 jmp	 $LN22@FindNextQu
$LN21@FindNextQu:

; 242  : 
; 243  : 	return 0;

  00be8	33 c0		 xor	 eax, eax
$LN25@FindNextQu:

; 244  : }

  00bea	5f		 pop	 edi
  00beb	5e		 pop	 esi
  00bec	5b		 pop	 ebx
  00bed	8b e5		 mov	 esp, ebp
  00bef	5d		 pop	 ebp
  00bf0	c2 08 00	 ret	 8
  00bf3	90		 npad	 1
$LN27@FindNextQu:
  00bf4	00 00 00 00	 DD	 $LN14@FindNextQu
  00bf8	00 00 00 00	 DD	 $LN12@FindNextQu
  00bfc	00 00 00 00	 DD	 $LN10@FindNextQu
  00c00	00 00 00 00	 DD	 $LN6@FindNextQu
  00c04	00 00 00 00	 DD	 $LN4@FindNextQu
  00c08	00 00 00 00	 DD	 $LN8@FindNextQu
  00c0c	00 00 00 00	 DD	 $LN2@FindNextQu
?FindNextQuest@CCustomQuestSystem@@AAEHHPAUOBJECTSTRUCT@@@Z ENDP ; CCustomQuestSystem::FindNextQuest
_TEXT	ENDS
PUBLIC	?GetTodayDaysCount@CCustomQuestSystem@@ABEHXZ	; CCustomQuestSystem::GetTodayDaysCount
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpUser$ = 8						; size = 4
?IsDailyQuestAvailable@CCustomQuestSystem@@AAE_NPAUOBJECTSTRUCT@@@Z PROC ; CCustomQuestSystem::IsDailyQuestAvailable
; _this$ = ecx

; 247  : {

  00c10	55		 push	 ebp
  00c11	8b ec		 mov	 ebp, esp
  00c13	83 ec 44	 sub	 esp, 68			; 00000044H
  00c16	53		 push	 ebx
  00c17	56		 push	 esi
  00c18	57		 push	 edi
  00c19	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 	return lpUser->ExWQuestNum[CQ_DAILY_QUEST] < GetTodayDaysCount();

  00c1c	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00c1f	0f b7 b0 f2 2a
	00 00		 movzx	 esi, WORD PTR [eax+10994]
  00c26	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c29	e8 00 00 00 00	 call	 ?GetTodayDaysCount@CCustomQuestSystem@@ABEHXZ ; CCustomQuestSystem::GetTodayDaysCount
  00c2e	33 c9		 xor	 ecx, ecx
  00c30	3b f0		 cmp	 esi, eax
  00c32	0f 9c c1	 setl	 cl
  00c35	8a c1		 mov	 al, cl

; 249  : }

  00c37	5f		 pop	 edi
  00c38	5e		 pop	 esi
  00c39	5b		 pop	 ebx
  00c3a	8b e5		 mov	 esp, ebp
  00c3c	5d		 pop	 ebp
  00c3d	c2 04 00	 ret	 4
?IsDailyQuestAvailable@CCustomQuestSystem@@AAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CCustomQuestSystem::IsDailyQuestAvailable
_TEXT	ENDS
EXTRN	__alldiv:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\customquestsystem.h
;	COMDAT ?GetTodayDaysCount@CCustomQuestSystem@@ABEHXZ
_TEXT	SEGMENT
_s$ = -12						; size = 8
_this$ = -4						; size = 4
?GetTodayDaysCount@CCustomQuestSystem@@ABEHXZ PROC	; CCustomQuestSystem::GetTodayDaysCount, COMDAT
; _this$ = ecx

; 129  : 	int GetTodayDaysCount() const { time_t s = time(NULL); return (s/(60*60*24)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	6a 00		 push	 0
  0000e	e8 00 00 00 00	 call	 _time
  00013	83 c4 04	 add	 esp, 4
  00016	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax
  00019	89 55 f8	 mov	 DWORD PTR _s$[ebp+4], edx
  0001c	6a 00		 push	 0
  0001e	68 80 51 01 00	 push	 86400			; 00015180H
  00023	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp+4]
  00026	50		 push	 eax
  00027	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 __alldiv
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?GetTodayDaysCount@CCustomQuestSystem@@ABEHXZ ENDP	; CCustomQuestSystem::GetTodayDaysCount
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 132  : {

  00c40	55		 push	 ebp
  00c41	8b ec		 mov	 ebp, esp
  00c43	83 ec 40	 sub	 esp, 64			; 00000040H
  00c46	53		 push	 ebx
  00c47	56		 push	 esi
  00c48	57		 push	 edi

; 133  :     return _time64(_Time);

  00c49	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00c4c	50		 push	 eax
  00c4d	e8 00 00 00 00	 call	 __time64
  00c52	83 c4 04	 add	 esp, 4

; 134  : }

  00c55	5f		 pop	 edi
  00c56	5e		 pop	 esi
  00c57	5b		 pop	 ebx
  00c58	8b e5		 mov	 esp, ebp
  00c5a	5d		 pop	 ebp
  00c5b	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	??0CustomQuestData@@QAE@ABU0@@Z			; CustomQuestData::CustomQuestData
PUBLIC	__$ArrayPad$
PUBLIC	?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z ; CCustomQuestSystem::FindQuestData
xdata$x	SEGMENT
__unwindtable$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z$0
__ehfuncinfo$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\customquestsystem.cpp
xdata$x	ENDS
_TEXT	SEGMENT
$T232893 = -200						; size = 4
_i$229624 = -132					; size = 4
_quests$ = -128						; size = 4
_empty$ = -124						; size = 104
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_type$ = 12						; size = 4
_id$ = 16						; size = 4
?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z PROC ; CCustomQuestSystem::FindQuestData
; _this$ = ecx

; 252  : {

  00c60	55		 push	 ebp
  00c61	8b ec		 mov	 ebp, esp
  00c63	6a ff		 push	 -1
  00c65	68 00 00 00 00	 push	 __ehhandler$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z
  00c6a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00c70	50		 push	 eax
  00c71	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00c77	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00c7c	33 c5		 xor	 eax, ebp
  00c7e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00c81	53		 push	 ebx
  00c82	56		 push	 esi
  00c83	57		 push	 edi
  00c84	50		 push	 eax
  00c85	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00c88	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00c8e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00c91	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T232893[ebp], 0

; 253  : 	CustomQuestData empty;

  00c9b	8d 4d 84	 lea	 ecx, DWORD PTR _empty$[ebp]
  00c9e	e8 00 00 00 00	 call	 ??0CustomQuestData@@QAE@XZ
  00ca3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 254  : 	memset(&empty, 0, sizeof(empty));

  00caa	6a 68		 push	 104			; 00000068H
  00cac	6a 00		 push	 0
  00cae	8d 45 84	 lea	 eax, DWORD PTR _empty$[ebp]
  00cb1	50		 push	 eax
  00cb2	e8 00 00 00 00	 call	 _memset
  00cb7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 255  : 
; 256  : 	std::vector<CustomQuestData>& quests = FindQuestList(type);

  00cba	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00cbd	50		 push	 eax
  00cbe	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00cc1	e8 00 00 00 00	 call	 ?FindQuestList@CCustomQuestSystem@@AAEAAV?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@H@Z ; CCustomQuestSystem::FindQuestList
  00cc6	89 45 80	 mov	 DWORD PTR _quests$[ebp], eax

; 257  : 
; 258  : 	for(int i = 0; i < quests.size(); i++)

  00cc9	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$229624[ebp], 0
  00cd3	eb 0f		 jmp	 SHORT $LN4@FindQuestD
$LN3@FindQuestD:
  00cd5	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _i$229624[ebp]
  00cdb	83 c0 01	 add	 eax, 1
  00cde	89 85 7c ff ff
	ff		 mov	 DWORD PTR _i$229624[ebp], eax
$LN4@FindQuestD:
  00ce4	8b 4d 80	 mov	 ecx, DWORD PTR _quests$[ebp]
  00ce7	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::size
  00cec	39 85 7c ff ff
	ff		 cmp	 DWORD PTR _i$229624[ebp], eax
  00cf2	73 50		 jae	 SHORT $LN2@FindQuestD

; 259  : 	{
; 260  : 		if (quests[i].id == id)

  00cf4	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _i$229624[ebp]
  00cfa	50		 push	 eax
  00cfb	8b 4d 80	 mov	 ecx, DWORD PTR _quests$[ebp]
  00cfe	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00d03	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d05	3b 4d 10	 cmp	 ecx, DWORD PTR _id$[ebp]
  00d08	75 38		 jne	 SHORT $LN1@FindQuestD

; 261  : 			return quests[i];

  00d0a	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _i$229624[ebp]
  00d10	50		 push	 eax
  00d11	8b 4d 80	 mov	 ecx, DWORD PTR _quests$[ebp]
  00d14	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
  00d19	50		 push	 eax
  00d1a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00d1d	e8 00 00 00 00	 call	 ??0CustomQuestData@@QAE@ABU0@@Z
  00d22	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T232893[ebp]
  00d28	83 c9 01	 or	 ecx, 1
  00d2b	89 8d 38 ff ff
	ff		 mov	 DWORD PTR $T232893[ebp], ecx
  00d31	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00d35	8d 4d 84	 lea	 ecx, DWORD PTR _empty$[ebp]
  00d38	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  00d3d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00d40	eb 2c		 jmp	 SHORT $LN5@FindQuestD
$LN1@FindQuestD:

; 262  : 	}

  00d42	eb 91		 jmp	 SHORT $LN3@FindQuestD
$LN2@FindQuestD:

; 263  : 
; 264  : 	return empty;

  00d44	8d 45 84	 lea	 eax, DWORD PTR _empty$[ebp]
  00d47	50		 push	 eax
  00d48	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00d4b	e8 00 00 00 00	 call	 ??0CustomQuestData@@QAE@ABU0@@Z
  00d50	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T232893[ebp]
  00d56	83 c9 01	 or	 ecx, 1
  00d59	89 8d 38 ff ff
	ff		 mov	 DWORD PTR $T232893[ebp], ecx
  00d5f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00d63	8d 4d 84	 lea	 ecx, DWORD PTR _empty$[ebp]
  00d66	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  00d6b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@FindQuestD:

; 265  : }

  00d6e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00d71	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00d78	59		 pop	 ecx
  00d79	5f		 pop	 edi
  00d7a	5e		 pop	 esi
  00d7b	5b		 pop	 ebx
  00d7c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00d7f	33 cd		 xor	 ecx, ebp
  00d81	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00d86	8b e5		 mov	 esp, ebp
  00d88	5d		 pop	 ebp
  00d89	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z$0:
  00095	8d 4d 84	 lea	 ecx, DWORD PTR _empty$[ebp]
  00098	e9 00 00 00 00	 jmp	 ??1CustomQuestData@@QAE@XZ
__unwindfunclet$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z$1:
  0009d	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T232893[ebp]
  000a3	83 e0 01	 and	 eax, 1
  000a6	0f 84 0f 00 00
	00		 je	 $LN9@FindQuestD
  000ac	83 a5 38 ff ff
	ff fe		 and	 DWORD PTR $T232893[ebp], -2 ; fffffffeH
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000b6	e9 00 00 00 00	 jmp	 ??1CustomQuestData@@QAE@XZ
$LN9@FindQuestD:
  000bb	c3		 ret	 0
__ehhandler$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z:
  000bc	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000c0	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000c3	8b 8a 34 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-204]
  000c9	33 c8		 xor	 ecx, eax
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000d3	33 c8		 xor	 ecx, eax
  000d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000da	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z
  000df	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z ENDP ; CCustomQuestSystem::FindQuestData
PUBLIC	??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::vector<CustomQuestReward,std::allocator<CustomQuestReward> >
PUBLIC	??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::vector<CustomQuestMission,std::allocator<CustomQuestMission> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CustomQuestData@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CustomQuestData@@QAE@ABU0@@Z$0
__ehfuncinfo$??0CustomQuestData@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CustomQuestData@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0CustomQuestData@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CustomQuestData@@QAE@ABU0@@Z PROC			; CustomQuestData::CustomQuestData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CustomQuestData@@QAE@ABU0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00031	8b 11		 mov	 edx, DWORD PTR [ecx]
  00033	89 10		 mov	 DWORD PTR [eax], edx
  00035	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00038	83 c6 04	 add	 esi, 4
  0003b	8b 7d f0	 mov	 edi, DWORD PTR _this$[ebp]
  0003e	83 c7 04	 add	 edi, 4
  00041	b9 06 00 00 00	 mov	 ecx, 6
  00046	f3 a5		 rep movsd
  00048	a4		 movsb
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0004f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00052	89 50 20	 mov	 DWORD PTR [eax+32], edx
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0005b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0005e	89 50 24	 mov	 DWORD PTR [eax+36], edx
  00061	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00067	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0006a	89 50 28	 mov	 DWORD PTR [eax+40], edx
  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00073	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00076	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00079	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0007f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00082	89 50 30	 mov	 DWORD PTR [eax+48], edx
  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0008b	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0008e	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00091	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00094	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00097	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0009a	89 50 38	 mov	 DWORD PTR [eax+56], edx
  0009d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000a3	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000a6	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  000a9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000af	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  000b2	89 50 40	 mov	 DWORD PTR [eax+64], edx
  000b5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000bb	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000be	89 50 44	 mov	 DWORD PTR [eax+68], edx
  000c1	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  000c4	83 c0 48	 add	 eax, 72			; 00000048H
  000c7	50		 push	 eax
  000c8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	83 c1 48	 add	 ecx, 72			; 00000048H
  000ce	e8 00 00 00 00	 call	 ??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::vector<CustomQuestMission,std::allocator<CustomQuestMission> >
  000d3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000da	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  000dd	83 c0 58	 add	 eax, 88			; 00000058H
  000e0	50		 push	 eax
  000e1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	83 c1 58	 add	 ecx, 88			; 00000058H
  000e7	e8 00 00 00 00	 call	 ??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::vector<CustomQuestReward,std::allocator<CustomQuestReward> >
  000ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CustomQuestData@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 48	 add	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::~vector<CustomQuestMission,std::allocator<CustomQuestMission> >
__ehhandler$??0CustomQuestData@@QAE@ABU0@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CustomQuestData@@QAE@ABU0@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CustomQuestData@@QAE@ABU0@@Z ENDP			; CustomQuestData::CustomQuestData
PUBLIC	??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
PUBLIC	?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
PUBLIC	??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
PUBLIC	?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
PUBLIC	?set@PWMSG_HEAD2@@QAEXPAEEEH@Z			; PWMSG_HEAD2::set
PUBLIC	__$ArrayPad$
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
xdata$x	SEGMENT
__unwindtable$?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z$0
__ehfuncinfo$?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_i$229657 = -628					; size = 4
_i$229651 = -624					; size = 4
_data$229646 = -620					; size = 104
_cur_quest_id$229642 = -516				; size = 4
_t$229638 = -512					; size = 4
_pReq$ = -508						; size = 488
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpUser$ = 8						; size = 4
?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z PROC ; CCustomQuestSystem::GC_MainInfo
; _this$ = ecx

; 268  : {

  00d90	55		 push	 ebp
  00d91	8b ec		 mov	 ebp, esp
  00d93	6a ff		 push	 -1
  00d95	68 00 00 00 00	 push	 __ehhandler$?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z
  00d9a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00da0	50		 push	 eax
  00da1	81 ec a8 02 00
	00		 sub	 esp, 680		; 000002a8H
  00da7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00dac	33 c5		 xor	 eax, ebp
  00dae	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00db1	53		 push	 ebx
  00db2	56		 push	 esi
  00db3	57		 push	 edi
  00db4	50		 push	 eax
  00db5	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00db8	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00dbe	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 269  : 	GC_MainPacket pReq;
; 270  : 	memset(&pReq, 0, sizeof(pReq));

  00dc1	68 e8 01 00 00	 push	 488			; 000001e8H
  00dc6	6a 00		 push	 0
  00dc8	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _pReq$[ebp]
  00dce	50		 push	 eax
  00dcf	e8 00 00 00 00	 call	 _memset
  00dd4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 271  : 
; 272  : 	pReq.h.set((LPBYTE)&pReq, 0xFA, 0xCC, sizeof(pReq));

  00dd7	68 e8 01 00 00	 push	 488			; 000001e8H
  00ddc	68 cc 00 00 00	 push	 204			; 000000ccH
  00de1	68 fa 00 00 00	 push	 250			; 000000faH
  00de6	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _pReq$[ebp]
  00dec	50		 push	 eax
  00ded	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _pReq$[ebp]
  00df3	e8 00 00 00 00	 call	 ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ; PWMSG_HEAD2::set

; 273  : 
; 274  : 	for (int t = 0; t < CQ_QUEST_TP_CNT; t++)

  00df8	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _t$229638[ebp], 0
  00e02	eb 0f		 jmp	 SHORT $LN17@GC_MainInf
$LN16@GC_MainInf:
  00e04	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00e0a	83 c0 01	 add	 eax, 1
  00e0d	89 85 00 fe ff
	ff		 mov	 DWORD PTR _t$229638[ebp], eax
$LN17@GC_MainInf:
  00e13	83 bd 00 fe ff
	ff 03		 cmp	 DWORD PTR _t$229638[ebp], 3
  00e1a	0f 8d 50 05 00
	00		 jge	 $LN15@GC_MainInf

; 275  : 	{
; 276  : 		pReq.exQuest[t].b_End = false;

  00e20	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00e26	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e2c	c6 84 05 27 fe
	ff ff 00	 mov	 BYTE PTR _pReq$[ebp+eax+35], 0

; 277  : 		pReq.exQuest[t].b_Level = true;

  00e34	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00e3a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e40	c6 84 05 36 fe
	ff ff 01	 mov	 BYTE PTR _pReq$[ebp+eax+50], 1

; 278  : 		pReq.exQuest[t].b_Reset = true;

  00e48	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00e4e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e54	c6 84 05 3a fe
	ff ff 01	 mov	 BYTE PTR _pReq$[ebp+eax+54], 1

; 279  : 		pReq.exQuest[t].b_accept = true;

  00e5c	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00e62	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e68	c6 84 05 25 fe
	ff ff 01	 mov	 BYTE PTR _pReq$[ebp+eax+33], 1

; 280  : 
; 281  : 		int cur_quest_id = lpUser->ExWQuestNum[t];

  00e70	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00e76	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00e79	0f b7 94 41 f0
	2a 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+10992]
  00e81	89 95 fc fd ff
	ff		 mov	 DWORD PTR _cur_quest_id$229642[ebp], edx

; 282  : 
; 283  : 		//Fix possible erros with daily quest not started
; 284  : 		if (t == CQ_DAILY_QUEST && cur_quest_id < MAX_DAILY_QUEST_ID && !lpUser->ExWQuestStart[t])

  00e87	83 bd 00 fe ff
	ff 01		 cmp	 DWORD PTR _t$229638[ebp], 1
  00e8e	75 3d		 jne	 SHORT $LN14@GC_MainInf
  00e90	81 bd fc fd ff
	ff 10 27 00 00	 cmp	 DWORD PTR _cur_quest_id$229642[ebp], 10000 ; 00002710H
  00e9a	7d 31		 jge	 SHORT $LN14@GC_MainInf
  00e9c	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00e9f	03 85 00 fe ff
	ff		 add	 eax, DWORD PTR _t$229638[ebp]
  00ea5	0f b6 88 ec 2a
	00 00		 movzx	 ecx, BYTE PTR [eax+10988]
  00eac	85 c9		 test	 ecx, ecx
  00eae	75 1d		 jne	 SHORT $LN14@GC_MainInf

; 285  : 		{
; 286  : 			cur_quest_id = 0;

  00eb0	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _cur_quest_id$229642[ebp], 0

; 287  : 			lpUser->ExWQuestNum[t] = 0;

  00eba	33 c0		 xor	 eax, eax
  00ebc	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  00ec2	8b 55 08	 mov	 edx, DWORD PTR _lpUser$[ebp]
  00ec5	66 89 84 4a f0
	2a 00 00	 mov	 WORD PTR [edx+ecx*2+10992], ax
$LN14@GC_MainInf:

; 288  : 		}
; 289  : 
; 290  : 		if (cur_quest_id == 0 || (t == CQ_DAILY_QUEST && cur_quest_id > MAX_DAILY_QUEST_ID && IsDailyQuestAvailable(lpUser)))

  00ecd	83 bd fc fd ff
	ff 00		 cmp	 DWORD PTR _cur_quest_id$229642[ebp], 0
  00ed4	74 28		 je	 SHORT $LN12@GC_MainInf
  00ed6	83 bd 00 fe ff
	ff 01		 cmp	 DWORD PTR _t$229638[ebp], 1
  00edd	75 38		 jne	 SHORT $LN13@GC_MainInf
  00edf	81 bd fc fd ff
	ff 10 27 00 00	 cmp	 DWORD PTR _cur_quest_id$229642[ebp], 10000 ; 00002710H
  00ee9	7e 2c		 jle	 SHORT $LN13@GC_MainInf
  00eeb	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00eee	50		 push	 eax
  00eef	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00ef2	e8 00 00 00 00	 call	 ?IsDailyQuestAvailable@CCustomQuestSystem@@AAE_NPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::IsDailyQuestAvailable
  00ef7	0f b6 c8	 movzx	 ecx, al
  00efa	85 c9		 test	 ecx, ecx
  00efc	74 19		 je	 SHORT $LN13@GC_MainInf
$LN12@GC_MainInf:

; 291  : 		{
; 292  : 			cur_quest_id = FindNextQuest(t, lpUser);

  00efe	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00f01	50		 push	 eax
  00f02	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  00f08	51		 push	 ecx
  00f09	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00f0c	e8 00 00 00 00	 call	 ?FindNextQuest@CCustomQuestSystem@@AAEHHPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::FindNextQuest
  00f11	89 85 fc fd ff
	ff		 mov	 DWORD PTR _cur_quest_id$229642[ebp], eax
$LN13@GC_MainInf:

; 293  : 		} 
; 294  : 
; 295  : 		CustomQuestData data = FindQuestData(t, cur_quest_id);

  00f17	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR _cur_quest_id$229642[ebp]
  00f1d	50		 push	 eax
  00f1e	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  00f24	51		 push	 ecx
  00f25	8d 95 94 fd ff
	ff		 lea	 edx, DWORD PTR _data$229646[ebp]
  00f2b	52		 push	 edx
  00f2c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00f2f	e8 00 00 00 00	 call	 ?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z ; CCustomQuestSystem::FindQuestData
  00f34	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  : 
; 297  : 		if (data.id == 0)

  00f3b	83 bd 94 fd ff
	ff 00		 cmp	 DWORD PTR _data$229646[ebp], 0
  00f42	75 2b		 jne	 SHORT $LN11@GC_MainInf

; 298  : 		{
; 299  : 			pReq.exQuest[t].b_End = true;

  00f44	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00f4a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00f50	c6 84 05 27 fe
	ff ff 01	 mov	 BYTE PTR _pReq$[ebp+eax+35], 1

; 300  : 			continue;

  00f58	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00f5f	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp]
  00f65	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  00f6a	e9 95 fe ff ff	 jmp	 $LN16@GC_MainInf
$LN11@GC_MainInf:

; 301  : 		}
; 302  : 
; 303  : 		if (data.NeedLevel > lpUser->Level)

  00f6f	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00f72	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00f79	39 8d b4 fd ff
	ff		 cmp	 DWORD PTR _data$229646[ebp+32], ecx
  00f7f	7e 28		 jle	 SHORT $LN10@GC_MainInf

; 304  : 		{
; 305  : 			pReq.exQuest[t].b_Level = false;

  00f81	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00f87	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00f8d	c6 84 05 36 fe
	ff ff 00	 mov	 BYTE PTR _pReq$[ebp+eax+50], 0

; 306  : 			pReq.exQuest[t].b_accept = false;

  00f95	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00f9b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00fa1	c6 84 05 25 fe
	ff ff 00	 mov	 BYTE PTR _pReq$[ebp+eax+33], 0
$LN10@GC_MainInf:

; 307  : 		}
; 308  : 
; 309  : 		if (data.NeedReset > lpUser->Reset)

  00fa9	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00fac	8b 8d bc fd ff
	ff		 mov	 ecx, DWORD PTR _data$229646[ebp+40]
  00fb2	3b 88 90 22 00
	00		 cmp	 ecx, DWORD PTR [eax+8848]
  00fb8	7e 28		 jle	 SHORT $LN9@GC_MainInf

; 310  : 		{
; 311  : 			pReq.exQuest[t].b_Reset = false;

  00fba	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00fc0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00fc6	c6 84 05 3a fe
	ff ff 00	 mov	 BYTE PTR _pReq$[ebp+eax+54], 0

; 312  : 			pReq.exQuest[t].b_accept = false;

  00fce	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  00fd4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00fda	c6 84 05 25 fe
	ff ff 00	 mov	 BYTE PTR _pReq$[ebp+eax+33], 0
$LN9@GC_MainInf:

; 313  : 		}
; 314  : 
; 315  : 		strncpy(pReq.exQuest[t].NameQuest, data.NameQuest, 25);

  00fe2	6a 19		 push	 25			; 00000019H
  00fe4	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _data$229646[ebp+4]
  00fea	50		 push	 eax
  00feb	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  00ff1	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  00ff7	8d 94 0d 0c fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+8]
  00ffe	52		 push	 edx
  00fff	e8 00 00 00 00	 call	 _strncpy
  01004	83 c4 0c	 add	 esp, 12			; 0000000cH

; 316  : 		pReq.exQuest[t].Start = lpUser->ExWQuestStart[t];

  01007	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  0100d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01013	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01016	03 8d 00 fe ff
	ff		 add	 ecx, DWORD PTR _t$229638[ebp]
  0101c	8a 91 ec 2a 00
	00		 mov	 dl, BYTE PTR [ecx+10988]
  01022	88 94 05 28 fe
	ff ff		 mov	 BYTE PTR _pReq$[ebp+eax+36], dl

; 317  : 		pReq.exQuest[t].Number = lpUser->ExWQuestNum[t];

  01029	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  0102f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01035	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  0103b	8b 55 08	 mov	 edx, DWORD PTR _lpUser$[ebp]
  0103e	66 8b 8c 4a f0
	2a 00 00	 mov	 cx, WORD PTR [edx+ecx*2+10992]
  01046	66 89 8c 05 2a
	fe ff ff	 mov	 WORD PTR _pReq$[ebp+eax+38], cx

; 318  : 		pReq.exQuest[t].NeedLevel = data.NeedLevel;

  0104e	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  01054	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0105a	66 8b 8d b4 fd
	ff ff		 mov	 cx, WORD PTR _data$229646[ebp+32]
  01061	66 89 8c 05 38
	fe ff ff	 mov	 WORD PTR _pReq$[ebp+eax+52], cx

; 319  : 		pReq.exQuest[t].NeedReset = data.NeedReset;

  01069	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  0106f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01075	66 8b 8d bc fd
	ff ff		 mov	 cx, WORD PTR _data$229646[ebp+40]
  0107c	66 89 8c 05 3c
	fe ff ff	 mov	 WORD PTR _pReq$[ebp+eax+56], cx

; 320  : 		pReq.exQuest[t].b_done = true;

  01084	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  0108a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01090	c6 84 05 26 fe
	ff ff 01	 mov	 BYTE PTR _pReq$[ebp+eax+34], 1

; 321  : 
; 322  : 		for (int i = 0; i < data.missions.size(); i++)

  01098	c7 85 90 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$229651[ebp], 0
  010a2	eb 0f		 jmp	 SHORT $LN8@GC_MainInf
$LN7@GC_MainInf:
  010a4	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _i$229651[ebp]
  010aa	83 c0 01	 add	 eax, 1
  010ad	89 85 90 fd ff
	ff		 mov	 DWORD PTR _i$229651[ebp], eax
$LN8@GC_MainInf:
  010b3	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+72]
  010b9	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  010be	39 85 90 fd ff
	ff		 cmp	 DWORD PTR _i$229651[ebp], eax
  010c4	0f 83 4b 01 00
	00		 jae	 $LN6@GC_MainInf

; 323  : 		{
; 324  : 			if (data.missions[i].MobCount > lpUser->ExWQuestCount[t][i])

  010ca	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _i$229651[ebp]
  010d0	50		 push	 eax
  010d1	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+72]
  010d7	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
  010dc	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  010e2	6b c9 0a	 imul	 ecx, 10			; 0000000aH
  010e5	8b 55 08	 mov	 edx, DWORD PTR _lpUser$[ebp]
  010e8	8d 8c 0a f6 2a
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+10998]
  010ef	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _i$229651[ebp]
  010f5	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  010f9	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  010fc	7e 34		 jle	 SHORT $LN5@GC_MainInf

; 325  : 			{
; 326  : 				pReq.exQuest[t].b_done = false;

  010fe	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  01104	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0110a	c6 84 05 26 fe
	ff ff 00	 mov	 BYTE PTR _pReq$[ebp+eax+34], 0

; 327  : 				pReq.exQuest[t].b_Mission[i] = false;

  01112	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  01118	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0111e	8d 8c 05 0c fe
	ff ff		 lea	 ecx, DWORD PTR _pReq$[ebp+eax+8]
  01125	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _i$229651[ebp]
  0112b	c6 44 11 36 00	 mov	 BYTE PTR [ecx+edx+54], 0

; 328  : 			}
; 329  : 			else

  01130	eb 1e		 jmp	 SHORT $LN4@GC_MainInf
$LN5@GC_MainInf:

; 330  : 			{
; 331  : 				pReq.exQuest[t].b_Mission[i] = true;

  01132	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  01138	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0113e	8d 8c 05 0c fe
	ff ff		 lea	 ecx, DWORD PTR _pReq$[ebp+eax+8]
  01145	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _i$229651[ebp]
  0114b	c6 44 11 36 01	 mov	 BYTE PTR [ecx+edx+54], 1
$LN4@GC_MainInf:

; 332  : 			}
; 333  : 
; 334  : 			pReq.exQuest[t].Count[i] = lpUser->ExWQuestCount[t][i];

  01150	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  01156	6b c0 0a	 imul	 eax, 10			; 0000000aH
  01159	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0115c	8d 94 01 f6 2a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+10998]
  01163	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  01169	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0116f	8d 8c 05 0c fe
	ff ff		 lea	 ecx, DWORD PTR _pReq$[ebp+eax+8]
  01176	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _i$229651[ebp]
  0117c	8b b5 90 fd ff
	ff		 mov	 esi, DWORD PTR _i$229651[ebp]
  01182	66 8b 14 72	 mov	 dx, WORD PTR [edx+esi*2]
  01186	66 89 54 41 20	 mov	 WORD PTR [ecx+eax*2+32], dx

; 335  : 			pReq.exQuest[t].MissionType[i] = 1; //HUNTING;

  0118b	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _t$229638[ebp]
  01191	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01197	8d 8c 05 0c fe
	ff ff		 lea	 ecx, DWORD PTR _pReq$[ebp+eax+8]
  0119e	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _i$229651[ebp]
  011a4	c6 44 11 3b 01	 mov	 BYTE PTR [ecx+edx+59], 1

; 336  : 			pReq.exQuest[t].MissionID[i] = data.missions[i].MobID;

  011a9	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _i$229651[ebp]
  011af	50		 push	 eax
  011b0	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+72]
  011b6	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
  011bb	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  011c1	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  011c7	8d 94 0d 0c fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+8]
  011ce	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _i$229651[ebp]
  011d4	66 8b 00	 mov	 ax, WORD PTR [eax]
  011d7	66 89 44 4a 40	 mov	 WORD PTR [edx+ecx*2+64], ax

; 337  : 			pReq.exQuest[t].MissionCount[i] = data.missions[i].MobCount;

  011dc	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _i$229651[ebp]
  011e2	50		 push	 eax
  011e3	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+72]
  011e9	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
  011ee	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  011f4	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  011fa	8d 94 0d 0c fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+8]
  01201	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _i$229651[ebp]
  01207	66 8b 40 04	 mov	 ax, WORD PTR [eax+4]
  0120b	66 89 44 4a 68	 mov	 WORD PTR [edx+ecx*2+104], ax

; 338  : 		}

  01210	e9 8f fe ff ff	 jmp	 $LN7@GC_MainInf
$LN6@GC_MainInf:

; 339  : 
; 340  : 		for (int i = 0; i < data.rewards.size(); i++)

  01215	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$229657[ebp], 0
  0121f	eb 0f		 jmp	 SHORT $LN3@GC_MainInf
$LN2@GC_MainInf:
  01221	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _i$229657[ebp]
  01227	83 c0 01	 add	 eax, 1
  0122a	89 85 8c fd ff
	ff		 mov	 DWORD PTR _i$229657[ebp], eax
$LN3@GC_MainInf:
  01230	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+88]
  01236	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  0123b	39 85 8c fd ff
	ff		 cmp	 DWORD PTR _i$229657[ebp], eax
  01241	0f 83 12 01 00
	00		 jae	 $LN1@GC_MainInf

; 341  : 		{
; 342  : 			pReq.exQuest[t].RewardType[i] = data.rewards[i].Type;

  01247	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _i$229657[ebp]
  0124d	50		 push	 eax
  0124e	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+88]
  01254	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  01259	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  0125f	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  01265	8d 94 0d 0c fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+8]
  0126c	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _i$229657[ebp]
  01272	66 8b 00	 mov	 ax, WORD PTR [eax]
  01275	66 89 44 4a 78	 mov	 WORD PTR [edx+ecx*2+120], ax

; 343  : 			pReq.exQuest[t].RewardCount[i] = data.rewards[i].Count;

  0127a	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _i$229657[ebp]
  01280	50		 push	 eax
  01281	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+88]
  01287	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  0128c	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  01292	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  01298	8d 94 0d 0c fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+8]
  0129f	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _i$229657[ebp]
  012a5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  012a8	89 84 8a 80 00
	00 00		 mov	 DWORD PTR [edx+ecx*4+128], eax

; 344  : 			pReq.exQuest[t].RewardItemType[i] = data.rewards[i].ItemType;

  012af	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _i$229657[ebp]
  012b5	50		 push	 eax
  012b6	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+88]
  012bc	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  012c1	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  012c7	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  012cd	8d 94 0d 0c fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+8]
  012d4	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _i$229657[ebp]
  012da	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]
  012de	66 89 84 4a 8c
	00 00 00	 mov	 WORD PTR [edx+ecx*2+140], ax

; 345  : 			pReq.exQuest[t].RewardItemIndex[i] = data.rewards[i].ItemIdx;

  012e6	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _i$229657[ebp]
  012ec	50		 push	 eax
  012ed	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+88]
  012f3	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  012f8	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  012fe	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  01304	8d 94 0d 0c fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+8]
  0130b	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _i$229657[ebp]
  01311	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  01315	66 89 84 4a 92
	00 00 00	 mov	 WORD PTR [edx+ecx*2+146], ax

; 346  : 			pReq.exQuest[t].RewardItemLevel[i] = data.rewards[i].ItemLvl;

  0131d	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _i$229657[ebp]
  01323	50		 push	 eax
  01324	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp+88]
  0132a	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  0132f	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229638[ebp]
  01335	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  0133b	8d 94 0d 0c fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+8]
  01342	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _i$229657[ebp]
  01348	66 8b 40 10	 mov	 ax, WORD PTR [eax+16]
  0134c	66 89 84 4a 98
	00 00 00	 mov	 WORD PTR [edx+ecx*2+152], ax

; 347  : 		}

  01354	e9 c8 fe ff ff	 jmp	 $LN2@GC_MainInf
$LN1@GC_MainInf:

; 348  : 	}

  01359	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01360	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp]
  01366	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  0136b	e9 94 fa ff ff	 jmp	 $LN16@GC_MainInf
$LN15@GC_MainInf:

; 349  : 	DataSend(lpUser->m_Index, (LPBYTE)&pReq, sizeof(pReq));

  01370	68 e8 01 00 00	 push	 488			; 000001e8H
  01375	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _pReq$[ebp]
  0137b	50		 push	 eax
  0137c	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0137f	8b 11		 mov	 edx, DWORD PTR [ecx]
  01381	52		 push	 edx
  01382	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01387	83 c4 0c	 add	 esp, 12			; 0000000cH

; 350  : }

  0138a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0138d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01394	59		 pop	 ecx
  01395	5f		 pop	 edi
  01396	5e		 pop	 esi
  01397	5b		 pop	 ebx
  01398	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0139b	33 cd		 xor	 ecx, ebp
  0139d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  013a2	8b e5		 mov	 esp, ebp
  013a4	5d		 pop	 ebp
  013a5	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z$0:
  000e4	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR _data$229646[ebp]
  000ea	e9 00 00 00 00	 jmp	 ??1CustomQuestData@@QAE@XZ
__ehhandler$?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z:
  000ef	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000f3	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000f6	8b 8a 48 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-696]
  000fc	33 c8		 xor	 ecx, eax
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00106	33 c8		 xor	 ecx, eax
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z
  00112	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCustomQuestSystem::GC_MainInfo
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
;	COMDAT ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z PROC			; PWMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 149  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 150  : 		lpBuf[0] = 0xC2;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H

; 151  : 		lpBuf[1] = SET_NUMBERH(size);

  00012	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00015	c1 e8 08	 shr	 eax, 8
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  0001b	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 152  : 		lpBuf[2] = SET_NUMBERL(size);

  0001e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00021	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00029	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 153  : 		lpBuf[3] = head;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0002f	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00032	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 154  : 		lpBuf[4] = sub;

  00035	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00038	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0003b	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 155  : 	}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 10 00	 ret	 16			; 00000010H
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ENDP			; PWMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?RewardQuest@CCustomQuestSystem@@AAEXHH@Z	; CCustomQuestSystem::RewardQuest
PUBLIC	?GC_Start@CCustomQuestSystem@@AAEXHH_N@Z	; CCustomQuestSystem::GC_Start
PUBLIC	??_C@_0CP@GAOOCKGI@?$FLExWinQuestSystem?$FN?5Error?5CG_Acce@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z ; CCustomQuestSystem::CG_AcceptQuest
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
;	COMDAT ??_C@_0CP@GAOOCKGI@?$FLExWinQuestSystem?$FN?5Error?5CG_Acce@
; File d:\projects\exteam6.3\source\gameserver\gameserver\customquestsystem.cpp
CONST	SEGMENT
??_C@_0CP@GAOOCKGI@?$FLExWinQuestSystem?$FN?5Error?5CG_Acce@ DB '[ExWinQu'
	DB	'estSystem] Error CG_AcceptQuest Result', 00H ; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z$0
__ehfuncinfo$?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_data$ = -136						; size = 104
_cur_quest_id$ = -32					; size = 4
_type$ = -28						; size = 4
_lpUser$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_aIndex$ = 8						; size = 4
_aRecv$ = 12						; size = 4
?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z PROC ; CCustomQuestSystem::CG_AcceptQuest
; _this$ = ecx

; 353  : {

  013b0	55		 push	 ebp
  013b1	8b ec		 mov	 ebp, esp
  013b3	6a ff		 push	 -1
  013b5	68 00 00 00 00	 push	 __ehhandler$?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z
  013ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  013c0	50		 push	 eax
  013c1	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  013c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  013cc	33 c5		 xor	 eax, ebp
  013ce	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  013d1	53		 push	 ebx
  013d2	56		 push	 esi
  013d3	57		 push	 edi
  013d4	50		 push	 eax
  013d5	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  013d8	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  013de	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 354  : 	if(!gObjIsConnectedEx(aIndex))

  013e1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  013e4	50		 push	 eax
  013e5	e8 00 00 00 00	 call	 ?gObjIsConnectedEx@@YA_NH@Z ; gObjIsConnectedEx
  013ea	83 c4 04	 add	 esp, 4
  013ed	0f b6 c8	 movzx	 ecx, al
  013f0	85 c9		 test	 ecx, ecx
  013f2	75 05		 jne	 SHORT $LN8@CG_AcceptQ

; 355  : 	{
; 356  : 		return;

  013f4	e9 73 01 00 00	 jmp	 $LN9@CG_AcceptQ
$LN8@CG_AcceptQ:

; 357  : 	}	
; 358  : 
; 359  : 	if(aRecv->Result != 0 && aRecv->Result != 1 && aRecv->Result != 2)

  013f9	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  013fc	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01400	85 c9		 test	 ecx, ecx
  01402	74 1d		 je	 SHORT $LN7@CG_AcceptQ
  01404	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01407	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0140b	83 f9 01	 cmp	 ecx, 1
  0140e	74 11		 je	 SHORT $LN7@CG_AcceptQ
  01410	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01413	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  01417	83 f9 02	 cmp	 ecx, 2
  0141a	74 05		 je	 SHORT $LN7@CG_AcceptQ

; 360  : 	{
; 361  : 		return;

  0141c	e9 4b 01 00 00	 jmp	 $LN9@CG_AcceptQ
$LN7@CG_AcceptQ:

; 362  : 	}
; 363  : 
; 364  : 	LPOBJ lpUser = &gObj[aIndex];

  01421	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01424	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0142a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01430	89 45 e8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 365  : 
; 366  : 	int type = aRecv->Result;

  01433	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01436	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0143a	89 4d e4	 mov	 DWORD PTR _type$[ebp], ecx

; 367  : 	int cur_quest_id = lpUser->ExWQuestNum[type];

  0143d	8b 45 e4	 mov	 eax, DWORD PTR _type$[ebp]
  01440	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01443	0f b7 94 41 f0
	2a 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+10992]
  0144b	89 55 e0	 mov	 DWORD PTR _cur_quest_id$[ebp], edx

; 368  : 	
; 369  : 	if (cur_quest_id == 0 || (type == CQ_DAILY_QUEST && cur_quest_id > MAX_DAILY_QUEST_ID && IsDailyQuestAvailable(lpUser)))

  0144e	83 7d e0 00	 cmp	 DWORD PTR _cur_quest_id$[ebp], 0
  01452	74 22		 je	 SHORT $LN5@CG_AcceptQ
  01454	83 7d e4 01	 cmp	 DWORD PTR _type$[ebp], 1
  01458	75 41		 jne	 SHORT $LN6@CG_AcceptQ
  0145a	81 7d e0 10 27
	00 00		 cmp	 DWORD PTR _cur_quest_id$[ebp], 10000 ; 00002710H
  01461	7e 38		 jle	 SHORT $LN6@CG_AcceptQ
  01463	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01466	50		 push	 eax
  01467	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0146a	e8 00 00 00 00	 call	 ?IsDailyQuestAvailable@CCustomQuestSystem@@AAE_NPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::IsDailyQuestAvailable
  0146f	0f b6 c8	 movzx	 ecx, al
  01472	85 c9		 test	 ecx, ecx
  01474	74 25		 je	 SHORT $LN6@CG_AcceptQ
$LN5@CG_AcceptQ:

; 370  : 	{
; 371  : 		cur_quest_id = FindNextQuest(type, lpUser);

  01476	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01479	50		 push	 eax
  0147a	8b 4d e4	 mov	 ecx, DWORD PTR _type$[ebp]
  0147d	51		 push	 ecx
  0147e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01481	e8 00 00 00 00	 call	 ?FindNextQuest@CCustomQuestSystem@@AAEHHPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::FindNextQuest
  01486	89 45 e0	 mov	 DWORD PTR _cur_quest_id$[ebp], eax

; 372  : 		lpUser->ExWQuestNum[type] = cur_quest_id;

  01489	8b 45 e4	 mov	 eax, DWORD PTR _type$[ebp]
  0148c	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0148f	66 8b 55 e0	 mov	 dx, WORD PTR _cur_quest_id$[ebp]
  01493	66 89 94 41 f0
	2a 00 00	 mov	 WORD PTR [ecx+eax*2+10992], dx
$LN6@CG_AcceptQ:

; 373  : 	}
; 374  : 	
; 375  : 	CustomQuestData data = FindQuestData(type, cur_quest_id);

  0149b	8b 45 e0	 mov	 eax, DWORD PTR _cur_quest_id$[ebp]
  0149e	50		 push	 eax
  0149f	8b 4d e4	 mov	 ecx, DWORD PTR _type$[ebp]
  014a2	51		 push	 ecx
  014a3	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _data$[ebp]
  014a9	52		 push	 edx
  014aa	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  014ad	e8 00 00 00 00	 call	 ?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z ; CCustomQuestSystem::FindQuestData
  014b2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 376  : 
; 377  : 	if( data.id == 0 || data.NeedLevel > lpUser->Level || data.NeedReset > lpUser->Reset 
; 378  : 		|| (data.MaxLevel > 0 && data.MaxLevel < lpUser->Level) )

  014b9	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _data$[ebp], 0
  014c0	74 32		 je	 SHORT $LN3@CG_AcceptQ
  014c2	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  014c5	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  014cc	39 4d 98	 cmp	 DWORD PTR _data$[ebp+32], ecx
  014cf	7f 23		 jg	 SHORT $LN3@CG_AcceptQ
  014d1	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  014d4	8b 4d a0	 mov	 ecx, DWORD PTR _data$[ebp+40]
  014d7	3b 88 90 22 00
	00		 cmp	 ecx, DWORD PTR [eax+8848]
  014dd	7f 15		 jg	 SHORT $LN3@CG_AcceptQ
  014df	83 7d 9c 00	 cmp	 DWORD PTR _data$[ebp+36], 0
  014e3	7e 33		 jle	 SHORT $LN4@CG_AcceptQ
  014e5	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  014e8	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  014ef	39 4d 9c	 cmp	 DWORD PTR _data$[ebp+36], ecx
  014f2	7d 24		 jge	 SHORT $LN4@CG_AcceptQ
$LN3@CG_AcceptQ:

; 379  : 	{
; 380  : 		LogAddC(2, "[ExWinQuestSystem] Error CG_AcceptQuest Result");

  014f4	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@GAOOCKGI@?$FLExWinQuestSystem?$FN?5Error?5CG_Acce@
  014f9	6a 02		 push	 2
  014fb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  01501	83 c4 08	 add	 esp, 8

; 381  : 		return;

  01504	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0150b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  01511	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  01516	eb 54		 jmp	 SHORT $LN9@CG_AcceptQ
$LN4@CG_AcceptQ:

; 382  : 	}
; 383  : 
; 384  : 	if(!lpUser->ExWQuestStart[type])

  01518	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0151b	03 45 e4	 add	 eax, DWORD PTR _type$[ebp]
  0151e	0f b6 88 ec 2a
	00 00		 movzx	 ecx, BYTE PTR [eax+10988]
  01525	85 c9		 test	 ecx, ecx
  01527	75 21		 jne	 SHORT $LN2@CG_AcceptQ

; 385  : 	{
; 386  : 		lpUser->ExWQuestStart[type] = true;

  01529	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0152c	03 45 e4	 add	 eax, DWORD PTR _type$[ebp]
  0152f	c6 80 ec 2a 00
	00 01		 mov	 BYTE PTR [eax+10988], 1

; 387  : 		this->GC_Start(aIndex, type, true);

  01536	6a 01		 push	 1
  01538	8b 45 e4	 mov	 eax, DWORD PTR _type$[ebp]
  0153b	50		 push	 eax
  0153c	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0153f	51		 push	 ecx
  01540	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01543	e8 00 00 00 00	 call	 ?GC_Start@CCustomQuestSystem@@AAEXHH_N@Z ; CCustomQuestSystem::GC_Start

; 388  : 	}
; 389  : 	else

  01548	eb 10		 jmp	 SHORT $LN1@CG_AcceptQ
$LN2@CG_AcceptQ:

; 390  : 	{
; 391  : 		this->RewardQuest(aIndex, type);

  0154a	8b 45 e4	 mov	 eax, DWORD PTR _type$[ebp]
  0154d	50		 push	 eax
  0154e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01551	51		 push	 ecx
  01552	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01555	e8 00 00 00 00	 call	 ?RewardQuest@CCustomQuestSystem@@AAEXHH@Z ; CCustomQuestSystem::RewardQuest
$LN1@CG_AcceptQ:

; 392  : 	}
; 393  : }

  0155a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01561	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  01567	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
$LN9@CG_AcceptQ:
  0156c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0156f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01576	59		 pop	 ecx
  01577	5f		 pop	 edi
  01578	5e		 pop	 esi
  01579	5b		 pop	 ebx
  0157a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0157d	33 cd		 xor	 ecx, ebp
  0157f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01584	8b e5		 mov	 esp, ebp
  01586	5d		 pop	 ebp
  01587	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z$0:
  00117	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  0011d	e9 00 00 00 00	 jmp	 ??1CustomQuestData@@QAE@XZ
__ehhandler$?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z:
  00122	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00126	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00129	8b 8a 34 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-204]
  0012f	33 c8		 xor	 ecx, eax
  00131	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00136	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00139	33 c8		 xor	 ecx, eax
  0013b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00140	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z
  00145	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CG_AcceptQuest@CCustomQuestSystem@@QAEXHPAUCG_CQAcceptDone@@@Z ENDP ; CCustomQuestSystem::CG_AcceptQuest
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pReq$ = -12						; size = 6
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_type$ = 12						; size = 4
_start$ = 16						; size = 1
?GC_Start@CCustomQuestSystem@@AAEXHH_N@Z PROC		; CCustomQuestSystem::GC_Start
; _this$ = ecx

; 396  : {

  01590	55		 push	 ebp
  01591	8b ec		 mov	 ebp, esp
  01593	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01596	53		 push	 ebx
  01597	56		 push	 esi
  01598	57		 push	 edi
  01599	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 	GC_CQStart pReq = { 0 };

  0159c	c6 45 f4 00	 mov	 BYTE PTR _pReq$[ebp], 0
  015a0	33 c0		 xor	 eax, eax
  015a2	89 45 f5	 mov	 DWORD PTR _pReq$[ebp+1], eax
  015a5	88 45 f9	 mov	 BYTE PTR _pReq$[ebp+5], al

; 398  : 	pReq.h.set((LPBYTE)&pReq, 0xFB, 0xC4, sizeof(pReq));

  015a8	6a 06		 push	 6
  015aa	68 c4 00 00 00	 push	 196			; 000000c4H
  015af	68 fb 00 00 00	 push	 251			; 000000fbH
  015b4	8d 45 f4	 lea	 eax, DWORD PTR _pReq$[ebp]
  015b7	50		 push	 eax
  015b8	8d 4d f4	 lea	 ecx, DWORD PTR _pReq$[ebp]
  015bb	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 399  : 	pReq.Act = type;

  015c0	8a 45 0c	 mov	 al, BYTE PTR _type$[ebp]
  015c3	88 45 f8	 mov	 BYTE PTR _pReq$[ebp+4], al

; 400  : 	pReq.Start = start;

  015c6	8a 45 10	 mov	 al, BYTE PTR _start$[ebp]
  015c9	88 45 f9	 mov	 BYTE PTR _pReq$[ebp+5], al

; 401  : 	DataSend(aIndex, (LPBYTE)&pReq, pReq.h.size);

  015cc	0f b6 45 f5	 movzx	 eax, BYTE PTR _pReq$[ebp+1]
  015d0	50		 push	 eax
  015d1	8d 4d f4	 lea	 ecx, DWORD PTR _pReq$[ebp]
  015d4	51		 push	 ecx
  015d5	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  015d8	52		 push	 edx
  015d9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  015de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 402  : }

  015e1	5f		 pop	 edi
  015e2	5e		 pop	 esi
  015e3	5b		 pop	 ebx
  015e4	8b e5		 mov	 esp, ebp
  015e6	5d		 pop	 ebp
  015e7	c2 0c 00	 ret	 12			; 0000000cH
?GC_Start@CCustomQuestSystem@@AAEXHH_N@Z ENDP		; CCustomQuestSystem::GC_Start
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 106  : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 107  : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 108  : 		lpBuf[3] = sub;

  00024	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00027	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0002a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_C@_0EM@DENPNIKB@?$FLCustomQuestSystem?$FN?5Failed?5to?5re@ ; `string'
PUBLIC	??_C@_0EH@BAFELOHP@?$FLCustomQuestSystem?$FN?5Failed?5to?5re@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?MoneyItemDrop@MapClass@@QAEHHHH@Z:PROC		; MapClass::MoneyItemDrop
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
;	COMDAT ??_C@_0EM@DENPNIKB@?$FLCustomQuestSystem?$FN?5Failed?5to?5re@
; File d:\projects\exteam6.3\source\gameserver\gameserver\customquestsystem.cpp
CONST	SEGMENT
??_C@_0EM@DENPNIKB@?$FLCustomQuestSystem?$FN?5Failed?5to?5re@ DB '[Custom'
	DB	'QuestSystem] Failed to reward! Missions not completed at ques'
	DB	't id %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@BAFELOHP@?$FLCustomQuestSystem?$FN?5Failed?5to?5re@
CONST	SEGMENT
??_C@_0EH@BAFELOHP@?$FLCustomQuestSystem?$FN?5Failed?5to?5re@ DB '[Custom'
	DB	'QuestSystem] Failed to reward! No mission found for quest id '
	DB	'%d', 00H					; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?RewardQuest@CCustomQuestSystem@@AAEXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RewardQuest@CCustomQuestSystem@@AAEXHH@Z$0
__ehfuncinfo$?RewardQuest@CCustomQuestSystem@@AAEXHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RewardQuest@CCustomQuestSystem@@AAEXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv162 = -220						; size = 4
_c$229723 = -152					; size = 4
_i$229715 = -148					; size = 4
_i$229711 = -144					; size = 4
_i$229704 = -140					; size = 4
_completed$ = -133					; size = 1
_data$ = -132						; size = 104
_cur_quest_id$ = -28					; size = 4
_lpUser$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_aIndex$ = 8						; size = 4
_type$ = 12						; size = 4
?RewardQuest@CCustomQuestSystem@@AAEXHH@Z PROC		; CCustomQuestSystem::RewardQuest
; _this$ = ecx

; 405  : {

  015f0	55		 push	 ebp
  015f1	8b ec		 mov	 ebp, esp
  015f3	6a ff		 push	 -1
  015f5	68 00 00 00 00	 push	 __ehhandler$?RewardQuest@CCustomQuestSystem@@AAEXHH@Z
  015fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  01600	50		 push	 eax
  01601	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  01607	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0160c	33 c5		 xor	 eax, ebp
  0160e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01611	53		 push	 ebx
  01612	56		 push	 esi
  01613	57		 push	 edi
  01614	50		 push	 eax
  01615	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  01618	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0161e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 406  : 	if(!gObjIsConnectedEx(aIndex))

  01621	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01624	50		 push	 eax
  01625	e8 00 00 00 00	 call	 ?gObjIsConnectedEx@@YA_NH@Z ; gObjIsConnectedEx
  0162a	83 c4 04	 add	 esp, 4
  0162d	0f b6 c8	 movzx	 ecx, al
  01630	85 c9		 test	 ecx, ecx
  01632	75 05		 jne	 SHORT $LN23@RewardQues

; 407  : 	{
; 408  : 		return;

  01634	e9 92 03 00 00	 jmp	 $LN24@RewardQues
$LN23@RewardQues:

; 409  : 	}	
; 410  : 
; 411  : 	LPOBJ lpUser = &gObj[aIndex];

  01639	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0163c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01642	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01648	89 45 e8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 412  : 
; 413  : 	int cur_quest_id = lpUser->ExWQuestNum[type];

  0164b	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0164e	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01651	0f b7 94 41 f0
	2a 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+10992]
  01659	89 55 e4	 mov	 DWORD PTR _cur_quest_id$[ebp], edx

; 414  : 	CustomQuestData data = FindQuestData(type, cur_quest_id);

  0165c	8b 45 e4	 mov	 eax, DWORD PTR _cur_quest_id$[ebp]
  0165f	50		 push	 eax
  01660	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  01663	51		 push	 ecx
  01664	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _data$[ebp]
  0166a	52		 push	 edx
  0166b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0166e	e8 00 00 00 00	 call	 ?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z ; CCustomQuestSystem::FindQuestData
  01673	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 415  : 
; 416  : 	if (data.id == 0 || data.missions.size() == 0 || data.rewards.size() == 0)

  0167a	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR _data$[ebp], 0
  01681	74 18		 je	 SHORT $LN21@RewardQues
  01683	8d 4d c4	 lea	 ecx, DWORD PTR _data$[ebp+72]
  01686	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  0168b	85 c0		 test	 eax, eax
  0168d	74 0c		 je	 SHORT $LN21@RewardQues
  0168f	8d 4d d4	 lea	 ecx, DWORD PTR _data$[ebp+88]
  01692	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  01697	85 c0		 test	 eax, eax
  01699	75 2b		 jne	 SHORT $LN22@RewardQues
$LN21@RewardQues:

; 417  : 	{
; 418  : 		LogAddC(2, "[CustomQuestSystem] Failed to reward! No mission found for quest id %d", cur_quest_id);

  0169b	8b 45 e4	 mov	 eax, DWORD PTR _cur_quest_id$[ebp]
  0169e	50		 push	 eax
  0169f	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@BAFELOHP@?$FLCustomQuestSystem?$FN?5Failed?5to?5re@
  016a4	6a 02		 push	 2
  016a6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  016ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 419  : 		return;

  016af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  016b6	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  016bc	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  016c1	e9 05 03 00 00	 jmp	 $LN24@RewardQues
$LN22@RewardQues:

; 420  : 	}
; 421  : 
; 422  : 	bool completed = true;

  016c6	c6 85 7b ff ff
	ff 01		 mov	 BYTE PTR _completed$[ebp], 1

; 423  : 	for (int i = 0; i < data.missions.size(); i++)

  016cd	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$229704[ebp], 0
  016d7	eb 0f		 jmp	 SHORT $LN20@RewardQues
$LN19@RewardQues:
  016d9	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$229704[ebp]
  016df	83 c0 01	 add	 eax, 1
  016e2	89 85 74 ff ff
	ff		 mov	 DWORD PTR _i$229704[ebp], eax
$LN20@RewardQues:
  016e8	8d 4d c4	 lea	 ecx, DWORD PTR _data$[ebp+72]
  016eb	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  016f0	39 85 74 ff ff
	ff		 cmp	 DWORD PTR _i$229704[ebp], eax
  016f6	73 37		 jae	 SHORT $LN18@RewardQues

; 424  : 	{
; 425  : 		if (data.missions[i].MobCount > lpUser->ExWQuestCount[type][i])

  016f8	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$229704[ebp]
  016fe	50		 push	 eax
  016ff	8d 4d c4	 lea	 ecx, DWORD PTR _data$[ebp+72]
  01702	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
  01707	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  0170a	6b c9 0a	 imul	 ecx, 10			; 0000000aH
  0170d	8b 55 e8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01710	8d 8c 0a f6 2a
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+10998]
  01717	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _i$229704[ebp]
  0171d	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  01721	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  01724	7e 07		 jle	 SHORT $LN17@RewardQues

; 426  : 			completed = false;

  01726	c6 85 7b ff ff
	ff 00		 mov	 BYTE PTR _completed$[ebp], 0
$LN17@RewardQues:

; 427  : 	}

  0172d	eb aa		 jmp	 SHORT $LN19@RewardQues
$LN18@RewardQues:

; 428  : 
; 429  : 	if (!completed)

  0172f	0f b6 85 7b ff
	ff ff		 movzx	 eax, BYTE PTR _completed$[ebp]
  01736	85 c0		 test	 eax, eax
  01738	75 2b		 jne	 SHORT $LN16@RewardQues

; 430  : 	{
; 431  : 		LogAddC(2, "[CustomQuestSystem] Failed to reward! Missions not completed at quest id %d", cur_quest_id);

  0173a	8b 45 e4	 mov	 eax, DWORD PTR _cur_quest_id$[ebp]
  0173d	50		 push	 eax
  0173e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@DENPNIKB@?$FLCustomQuestSystem?$FN?5Failed?5to?5re@
  01743	6a 02		 push	 2
  01745	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0174b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		return;

  0174e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01755	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  0175b	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  01760	e9 66 02 00 00	 jmp	 $LN24@RewardQues
$LN16@RewardQues:

; 433  : 	}
; 434  : 
; 435  : 	for (int i = 0; i < data.missions.size(); i++)

  01765	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$229711[ebp], 0
  0176f	eb 0f		 jmp	 SHORT $LN15@RewardQues
$LN14@RewardQues:
  01771	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _i$229711[ebp]
  01777	83 c0 01	 add	 eax, 1
  0177a	89 85 70 ff ff
	ff		 mov	 DWORD PTR _i$229711[ebp], eax
$LN15@RewardQues:
  01780	8d 4d c4	 lea	 ecx, DWORD PTR _data$[ebp+72]
  01783	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  01788	39 85 70 ff ff
	ff		 cmp	 DWORD PTR _i$229711[ebp], eax
  0178e	73 1e		 jae	 SHORT $LN13@RewardQues

; 436  : 	{
; 437  : 		lpUser->ExWQuestCount[type][i] = 0;

  01790	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  01793	6b c0 0a	 imul	 eax, 10			; 0000000aH
  01796	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01799	8d 94 01 f6 2a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+10998]
  017a0	33 c0		 xor	 eax, eax
  017a2	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _i$229711[ebp]
  017a8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 438  : 	}

  017ac	eb c3		 jmp	 SHORT $LN14@RewardQues
$LN13@RewardQues:

; 439  : 
; 440  : 	for (int i = 0; i < data.rewards.size(); i++)

  017ae	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$229715[ebp], 0
  017b8	eb 0f		 jmp	 SHORT $LN12@RewardQues
$LN11@RewardQues:
  017ba	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$229715[ebp]
  017c0	83 c0 01	 add	 eax, 1
  017c3	89 85 6c ff ff
	ff		 mov	 DWORD PTR _i$229715[ebp], eax
$LN12@RewardQues:
  017c9	8d 4d d4	 lea	 ecx, DWORD PTR _data$[ebp+88]
  017cc	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  017d1	39 85 6c ff ff
	ff		 cmp	 DWORD PTR _i$229715[ebp], eax
  017d7	0f 83 85 01 00
	00		 jae	 $LN10@RewardQues

; 441  : 	{
; 442  : 		if(!MAX_MAP_RANGE(lpUser->MapNumber))

  017dd	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  017e0	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  017e7	85 c9		 test	 ecx, ecx
  017e9	7d 0c		 jge	 SHORT $LN26@RewardQues
  017eb	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv162[ebp], 0
  017f5	eb 18		 jmp	 SHORT $LN27@RewardQues
$LN26@RewardQues:
  017f7	8b 55 e8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  017fa	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  01801	33 c9		 xor	 ecx, ecx
  01803	83 f8 59	 cmp	 eax, 89			; 00000059H
  01806	0f 9e c1	 setle	 cl
  01809	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv162[ebp], ecx
$LN27@RewardQues:
  0180f	83 bd 24 ff ff
	ff 00		 cmp	 DWORD PTR tv162[ebp], 0
  01816	75 17		 jne	 SHORT $LN9@RewardQues

; 443  : 		{
; 444  : 			return;

  01818	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0181f	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  01825	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  0182a	e9 9c 01 00 00	 jmp	 $LN24@RewardQues
$LN9@RewardQues:

; 445  : 		}
; 446  : 
; 447  : 		if (data.rewards[i].Type == RewardType::ZEN)

  0182f	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$229715[ebp]
  01835	50		 push	 eax
  01836	8d 4d d4	 lea	 ecx, DWORD PTR _data$[ebp+88]
  01839	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  0183e	83 38 01	 cmp	 DWORD PTR [eax], 1
  01841	75 49		 jne	 SHORT $LN8@RewardQues

; 448  : 		{	
; 449  : 			MapC[lpUser->MapNumber].MoneyItemDrop(data.rewards[i].Count, lpUser->X, lpUser->Y);

  01843	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01846	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  0184d	51		 push	 ecx
  0184e	8b 55 e8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01851	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  01858	50		 push	 eax
  01859	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _i$229715[ebp]
  0185f	51		 push	 ecx
  01860	8d 4d d4	 lea	 ecx, DWORD PTR _data$[ebp+88]
  01863	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  01868	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0186b	52		 push	 edx
  0186c	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0186f	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  01876	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  0187c	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  01882	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop
  01887	e9 d1 00 00 00	 jmp	 $LN7@RewardQues
$LN8@RewardQues:

; 450  : 		}
; 451  : 		else if (data.rewards[i].Type == RewardType::ITEM)

  0188c	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$229715[ebp]
  01892	50		 push	 eax
  01893	8d 4d d4	 lea	 ecx, DWORD PTR _data$[ebp+88]
  01896	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  0189b	83 38 03	 cmp	 DWORD PTR [eax], 3
  0189e	0f 85 b9 00 00
	00		 jne	 $LN7@RewardQues

; 452  : 		{
; 453  : 			for(int c = 0; c < data.rewards[i].Count; c++)

  018a4	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _c$229723[ebp], 0
  018ae	eb 0f		 jmp	 SHORT $LN5@RewardQues
$LN4@RewardQues:
  018b0	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _c$229723[ebp]
  018b6	83 c0 01	 add	 eax, 1
  018b9	89 85 68 ff ff
	ff		 mov	 DWORD PTR _c$229723[ebp], eax
$LN5@RewardQues:
  018bf	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$229715[ebp]
  018c5	50		 push	 eax
  018c6	8d 4d d4	 lea	 ecx, DWORD PTR _data$[ebp+88]
  018c9	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  018ce	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _c$229723[ebp]
  018d4	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  018d7	0f 8d 80 00 00
	00		 jge	 $LN7@RewardQues

; 454  : 			{
; 455  : 				ItemSerialCreateSend(aIndex, lpUser->MapNumber, lpUser->X, lpUser->Y, ITEMGET(data.rewards[i].ItemType, data.rewards[i].ItemIdx),
; 456  : 					data.rewards[i].ItemLvl, 0, 0, 0, 0, lpUser->m_Index, 0, 0);

  018dd	6a 00		 push	 0
  018df	6a 00		 push	 0
  018e1	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  018e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  018e6	51		 push	 ecx
  018e7	6a 00		 push	 0
  018e9	6a 00		 push	 0
  018eb	6a 00		 push	 0
  018ed	6a 00		 push	 0
  018ef	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _i$229715[ebp]
  018f5	52		 push	 edx
  018f6	8d 4d d4	 lea	 ecx, DWORD PTR _data$[ebp+88]
  018f9	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  018fe	0f b6 40 10	 movzx	 eax, BYTE PTR [eax+16]
  01902	50		 push	 eax
  01903	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _i$229715[ebp]
  01909	51		 push	 ecx
  0190a	8d 4d d4	 lea	 ecx, DWORD PTR _data$[ebp+88]
  0190d	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  01912	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  01915	c1 e6 09	 shl	 esi, 9
  01918	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _i$229715[ebp]
  0191e	52		 push	 edx
  0191f	8d 4d d4	 lea	 ecx, DWORD PTR _data$[ebp+88]
  01922	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
  01927	03 70 0c	 add	 esi, DWORD PTR [eax+12]
  0192a	56		 push	 esi
  0192b	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0192e	0f b6 88 46 01
	00 00		 movzx	 ecx, BYTE PTR [eax+326]
  01935	51		 push	 ecx
  01936	8b 55 e8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01939	0f b6 82 44 01
	00 00		 movzx	 eax, BYTE PTR [edx+324]
  01940	50		 push	 eax
  01941	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01944	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  0194b	52		 push	 edx
  0194c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0194f	50		 push	 eax
  01950	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  01955	83 c4 34	 add	 esp, 52			; 00000034H

; 457  : 			}

  01958	e9 53 ff ff ff	 jmp	 $LN4@RewardQues
$LN7@RewardQues:

; 458  : 		}
; 459  : 	}

  0195d	e9 58 fe ff ff	 jmp	 $LN11@RewardQues
$LN10@RewardQues:

; 460  : 
; 461  : 	if (type == CQ_DAILY_QUEST)

  01962	83 7d 0c 01	 cmp	 DWORD PTR _type$[ebp], 1
  01966	75 18		 jne	 SHORT $LN2@RewardQues

; 462  : 		lpUser->ExWQuestNum[type] = GetTodayDaysCount();

  01968	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0196b	e8 00 00 00 00	 call	 ?GetTodayDaysCount@CCustomQuestSystem@@ABEHXZ ; CCustomQuestSystem::GetTodayDaysCount
  01970	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  01973	8b 55 e8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01976	66 89 84 4a f0
	2a 00 00	 mov	 WORD PTR [edx+ecx*2+10992], ax

; 463  : 	else

  0197e	eb 20		 jmp	 SHORT $LN1@RewardQues
$LN2@RewardQues:

; 464  : 		lpUser->ExWQuestNum[type]++;

  01980	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  01983	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01986	66 8b 94 41 f0
	2a 00 00	 mov	 dx, WORD PTR [ecx+eax*2+10992]
  0198e	66 83 c2 01	 add	 dx, 1
  01992	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  01995	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01998	66 89 94 41 f0
	2a 00 00	 mov	 WORD PTR [ecx+eax*2+10992], dx
$LN1@RewardQues:

; 465  : 
; 466  : 	lpUser->ExWQuestStart[type] = false;

  019a0	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  019a3	03 45 0c	 add	 eax, DWORD PTR _type$[ebp]
  019a6	c6 80 ec 2a 00
	00 00		 mov	 BYTE PTR [eax+10988], 0

; 467  : 	this->GC_MainInfo(lpUser);

  019ad	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  019b0	50		 push	 eax
  019b1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  019b4	e8 00 00 00 00	 call	 ?GC_MainInfo@CCustomQuestSystem@@AAEXPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::GC_MainInfo

; 468  : }

  019b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  019c0	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  019c6	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
$LN24@RewardQues:
  019cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  019ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  019d5	59		 pop	 ecx
  019d6	5f		 pop	 edi
  019d7	5e		 pop	 esi
  019d8	5b		 pop	 ebx
  019d9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  019dc	33 cd		 xor	 ecx, ebp
  019de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  019e3	8b e5		 mov	 esp, ebp
  019e5	5d		 pop	 ebp
  019e6	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RewardQuest@CCustomQuestSystem@@AAEXHH@Z$0:
  0014a	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _data$[ebp]
  00150	e9 00 00 00 00	 jmp	 ??1CustomQuestData@@QAE@XZ
__ehhandler$?RewardQuest@CCustomQuestSystem@@AAEXHH@Z:
  00155	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00159	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0015c	8b 8a 20 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-224]
  00162	33 c8		 xor	 ecx, eax
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0016c	33 c8		 xor	 ecx, eax
  0016e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00173	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RewardQuest@CCustomQuestSystem@@AAEXHH@Z
  00178	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RewardQuest@CCustomQuestSystem@@AAEXHH@Z ENDP		; CCustomQuestSystem::RewardQuest
PUBLIC	__$ArrayPad$
PUBLIC	?UserConnect@CCustomQuestSystem@@QAEXH@Z	; CCustomQuestSystem::UserConnect
EXTRN	_memset:PROC
xdata$x	SEGMENT
__unwindtable$?UserConnect@CCustomQuestSystem@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UserConnect@CCustomQuestSystem@@QAEXH@Z$0
__ehfuncinfo$?UserConnect@CCustomQuestSystem@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UserConnect@CCustomQuestSystem@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_i$229744 = -424					; size = 4
_data$229742 = -420					; size = 104
_cur_quest_id$229740 = -316				; size = 4
_t$229736 = -312					; size = 4
_pReq$ = -308						; size = 282
_lpUser$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_aIndex$ = 8						; size = 4
?UserConnect@CCustomQuestSystem@@QAEXH@Z PROC		; CCustomQuestSystem::UserConnect
; _this$ = ecx

; 471  : {

  019f0	55		 push	 ebp
  019f1	8b ec		 mov	 ebp, esp
  019f3	6a ff		 push	 -1
  019f5	68 00 00 00 00	 push	 __ehhandler$?UserConnect@CCustomQuestSystem@@QAEXH@Z
  019fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  01a00	50		 push	 eax
  01a01	81 ec dc 01 00
	00		 sub	 esp, 476		; 000001dcH
  01a07	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01a0c	33 c5		 xor	 eax, ebp
  01a0e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01a11	53		 push	 ebx
  01a12	56		 push	 esi
  01a13	57		 push	 edi
  01a14	50		 push	 eax
  01a15	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  01a18	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  01a1e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 472  : 	LPOBJ lpUser = &gObj[aIndex];

  01a21	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01a24	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01a2a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01a30	89 45 e8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 473  : 
; 474  : 	GC_CQMiniInfo pReq = { 0 };

  01a33	c6 85 cc fe ff
	ff 00		 mov	 BYTE PTR _pReq$[ebp], 0
  01a3a	68 19 01 00 00	 push	 281			; 00000119H
  01a3f	6a 00		 push	 0
  01a41	8d 85 cd fe ff
	ff		 lea	 eax, DWORD PTR _pReq$[ebp+1]
  01a47	50		 push	 eax
  01a48	e8 00 00 00 00	 call	 _memset
  01a4d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 475  : 	pReq.h.set((LPBYTE)&pReq, 0xFA, 0xCD, sizeof(pReq));

  01a50	68 1a 01 00 00	 push	 282			; 0000011aH
  01a55	68 cd 00 00 00	 push	 205			; 000000cdH
  01a5a	68 fa 00 00 00	 push	 250			; 000000faH
  01a5f	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _pReq$[ebp]
  01a65	50		 push	 eax
  01a66	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _pReq$[ebp]
  01a6c	e8 00 00 00 00	 call	 ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ; PWMSG_HEAD2::set

; 476  : 
; 477  : 	for(int t = 0; t < CQ_QUEST_TP_CNT; t++)

  01a71	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _t$229736[ebp], 0
  01a7b	eb 0f		 jmp	 SHORT $LN7@UserConnec
$LN6@UserConnec:
  01a7d	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _t$229736[ebp]
  01a83	83 c0 01	 add	 eax, 1
  01a86	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _t$229736[ebp], eax
$LN7@UserConnec:
  01a8c	83 bd c8 fe ff
	ff 03		 cmp	 DWORD PTR _t$229736[ebp], 3
  01a93	0f 8d a0 01 00
	00		 jge	 $LN5@UserConnec

; 478  : 	{
; 479  : 		int cur_quest_id = lpUser->ExWQuestNum[t];

  01a99	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _t$229736[ebp]
  01a9f	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01aa2	0f b7 94 41 f0
	2a 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+10992]
  01aaa	89 95 c4 fe ff
	ff		 mov	 DWORD PTR _cur_quest_id$229740[ebp], edx

; 480  : 
; 481  : 		if (cur_quest_id == 0)

  01ab0	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _cur_quest_id$229740[ebp], 0
  01ab7	75 19		 jne	 SHORT $LN4@UserConnec

; 482  : 		{
; 483  : 			cur_quest_id = FindNextQuest(t, lpUser);

  01ab9	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01abc	50		 push	 eax
  01abd	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229736[ebp]
  01ac3	51		 push	 ecx
  01ac4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01ac7	e8 00 00 00 00	 call	 ?FindNextQuest@CCustomQuestSystem@@AAEHHPAUOBJECTSTRUCT@@@Z ; CCustomQuestSystem::FindNextQuest
  01acc	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _cur_quest_id$229740[ebp], eax
$LN4@UserConnec:

; 484  : 		}
; 485  : 
; 486  : 		CustomQuestData data = FindQuestData(t, cur_quest_id);

  01ad2	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _cur_quest_id$229740[ebp]
  01ad8	50		 push	 eax
  01ad9	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229736[ebp]
  01adf	51		 push	 ecx
  01ae0	8d 95 5c fe ff
	ff		 lea	 edx, DWORD PTR _data$229742[ebp]
  01ae6	52		 push	 edx
  01ae7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01aea	e8 00 00 00 00	 call	 ?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z ; CCustomQuestSystem::FindQuestData
  01aef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 487  : 
; 488  : 		strncpy(pReq.cqQuest[t].NameQuest, data.NameQuest, 25);

  01af6	6a 19		 push	 25			; 00000019H
  01af8	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR _data$229742[ebp+4]
  01afe	50		 push	 eax
  01aff	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229736[ebp]
  01b05	6b c9 5c	 imul	 ecx, 92			; 0000005cH
  01b08	8d 94 0d d2 fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+6]
  01b0f	52		 push	 edx
  01b10	e8 00 00 00 00	 call	 _strncpy
  01b15	83 c4 0c	 add	 esp, 12			; 0000000cH

; 489  : 		pReq.cqQuest[t].Start = lpUser->ExWQuestStart[t];

  01b18	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _t$229736[ebp]
  01b1e	6b c0 5c	 imul	 eax, 92			; 0000005cH
  01b21	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01b24	03 8d c8 fe ff
	ff		 add	 ecx, DWORD PTR _t$229736[ebp]
  01b2a	8a 91 ec 2a 00
	00		 mov	 dl, BYTE PTR [ecx+10988]
  01b30	88 94 05 eb fe
	ff ff		 mov	 BYTE PTR _pReq$[ebp+eax+31], dl

; 490  : 
; 491  : 		for(int i = 0; i < data.missions.size(); i++)

  01b37	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$229744[ebp], 0
  01b41	eb 0f		 jmp	 SHORT $LN3@UserConnec
$LN2@UserConnec:
  01b43	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$229744[ebp]
  01b49	83 c0 01	 add	 eax, 1
  01b4c	89 85 58 fe ff
	ff		 mov	 DWORD PTR _i$229744[ebp], eax
$LN3@UserConnec:
  01b52	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _data$229742[ebp+72]
  01b58	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  01b5d	39 85 58 fe ff
	ff		 cmp	 DWORD PTR _i$229744[ebp], eax
  01b63	0f 83 b9 00 00
	00		 jae	 $LN1@UserConnec

; 492  : 		{
; 493  : 			pReq.cqQuest[t].ExWQuestCount[i] = lpUser->ExWQuestCount[t][i];

  01b69	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _t$229736[ebp]
  01b6f	6b c0 0a	 imul	 eax, 10			; 0000000aH
  01b72	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01b75	8d 94 01 f6 2a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+10998]
  01b7c	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _t$229736[ebp]
  01b82	6b c0 5c	 imul	 eax, 92			; 0000005cH
  01b85	8d 8c 05 d2 fe
	ff ff		 lea	 ecx, DWORD PTR _pReq$[ebp+eax+6]
  01b8c	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$229744[ebp]
  01b92	8b b5 58 fe ff
	ff		 mov	 esi, DWORD PTR _i$229744[ebp]
  01b98	66 8b 14 72	 mov	 dx, WORD PTR [edx+esi*2]
  01b9c	66 89 54 41 1a	 mov	 WORD PTR [ecx+eax*2+26], dx

; 494  : 			pReq.cqQuest[t].MissionType[i] = 1; //Hunting;

  01ba1	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _t$229736[ebp]
  01ba7	6b c0 5c	 imul	 eax, 92			; 0000005cH
  01baa	8d 8c 05 d2 fe
	ff ff		 lea	 ecx, DWORD PTR _pReq$[ebp+eax+6]
  01bb1	8b 95 58 fe ff
	ff		 mov	 edx, DWORD PTR _i$229744[ebp]
  01bb7	c6 44 11 24 01	 mov	 BYTE PTR [ecx+edx+36], 1

; 495  : 			pReq.cqQuest[t].MissionID[i] = data.missions[i].MobID;

  01bbc	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$229744[ebp]
  01bc2	50		 push	 eax
  01bc3	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _data$229742[ebp+72]
  01bc9	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
  01bce	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229736[ebp]
  01bd4	6b c9 5c	 imul	 ecx, 92			; 0000005cH
  01bd7	8d 94 0d d2 fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+6]
  01bde	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _i$229744[ebp]
  01be4	66 8b 00	 mov	 ax, WORD PTR [eax]
  01be7	66 89 44 4a 2a	 mov	 WORD PTR [edx+ecx*2+42], ax

; 496  : 			pReq.cqQuest[t].MissionCount[i] = data.missions[i].MobCount;

  01bec	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$229744[ebp]
  01bf2	50		 push	 eax
  01bf3	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _data$229742[ebp+72]
  01bf9	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
  01bfe	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _t$229736[ebp]
  01c04	6b c9 5c	 imul	 ecx, 92			; 0000005cH
  01c07	8d 94 0d d2 fe
	ff ff		 lea	 edx, DWORD PTR _pReq$[ebp+ecx+6]
  01c0e	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _i$229744[ebp]
  01c14	66 8b 40 04	 mov	 ax, WORD PTR [eax+4]
  01c18	66 89 44 4a 52	 mov	 WORD PTR [edx+ecx*2+82], ax

; 497  : 		}

  01c1d	e9 21 ff ff ff	 jmp	 $LN2@UserConnec
$LN1@UserConnec:

; 498  : 	}

  01c22	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01c29	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _data$229742[ebp]
  01c2f	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  01c34	e9 44 fe ff ff	 jmp	 $LN6@UserConnec
$LN5@UserConnec:

; 499  : 	DataSend(aIndex, (LPBYTE)&pReq, sizeof(pReq));

  01c39	68 1a 01 00 00	 push	 282			; 0000011aH
  01c3e	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _pReq$[ebp]
  01c44	50		 push	 eax
  01c45	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01c48	51		 push	 ecx
  01c49	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01c4e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 500  : }

  01c51	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01c54	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01c5b	59		 pop	 ecx
  01c5c	5f		 pop	 edi
  01c5d	5e		 pop	 esi
  01c5e	5b		 pop	 ebx
  01c5f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01c62	33 cd		 xor	 ecx, ebp
  01c64	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01c69	8b e5		 mov	 esp, ebp
  01c6b	5d		 pop	 ebp
  01c6c	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UserConnect@CCustomQuestSystem@@QAEXH@Z$0:
  0017d	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _data$229742[ebp]
  00183	e9 00 00 00 00	 jmp	 ??1CustomQuestData@@QAE@XZ
__ehhandler$?UserConnect@CCustomQuestSystem@@QAEXH@Z:
  00188	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0018c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0018f	8b 8a 14 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-492]
  00195	33 c8		 xor	 ecx, eax
  00197	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0019f	33 c8		 xor	 ecx, eax
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UserConnect@CCustomQuestSystem@@QAEXH@Z
  001ab	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UserConnect@CCustomQuestSystem@@QAEXH@Z ENDP		; CCustomQuestSystem::UserConnect
PUBLIC	?GC_MiniInfoEx@CCustomQuestSystem@@QAEXHHH@Z	; CCustomQuestSystem::GC_MiniInfoEx
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_exSend$ = -12						; size = 6
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_type$ = 12						; size = 4
_mission$ = 16						; size = 4
?GC_MiniInfoEx@CCustomQuestSystem@@QAEXHHH@Z PROC	; CCustomQuestSystem::GC_MiniInfoEx
; _this$ = ecx

; 503  : {

  01c70	55		 push	 ebp
  01c71	8b ec		 mov	 ebp, esp
  01c73	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01c76	53		 push	 ebx
  01c77	56		 push	 esi
  01c78	57		 push	 edi
  01c79	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 504  : 	if(!gObjIsConnectedEx(aIndex))

  01c7c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01c7f	50		 push	 eax
  01c80	e8 00 00 00 00	 call	 ?gObjIsConnectedEx@@YA_NH@Z ; gObjIsConnectedEx
  01c85	83 c4 04	 add	 esp, 4
  01c88	0f b6 c8	 movzx	 ecx, al
  01c8b	85 c9		 test	 ecx, ecx
  01c8d	75 02		 jne	 SHORT $LN1@GC_MiniInf

; 505  : 	{
; 506  : 		return;

  01c8f	eb 45		 jmp	 SHORT $LN2@GC_MiniInf
$LN1@GC_MiniInf:

; 507  : 	}
; 508  : 
; 509  : 	GC_CQMiniInfoEx exSend = { 0 };

  01c91	c6 45 f4 00	 mov	 BYTE PTR _exSend$[ebp], 0
  01c95	33 c0		 xor	 eax, eax
  01c97	89 45 f5	 mov	 DWORD PTR _exSend$[ebp+1], eax
  01c9a	88 45 f9	 mov	 BYTE PTR _exSend$[ebp+5], al

; 510  : 	exSend.h.set((LPBYTE)&exSend, 0xFB, 0xC3, sizeof(exSend));

  01c9d	6a 06		 push	 6
  01c9f	68 c3 00 00 00	 push	 195			; 000000c3H
  01ca4	68 fb 00 00 00	 push	 251			; 000000fbH
  01ca9	8d 45 f4	 lea	 eax, DWORD PTR _exSend$[ebp]
  01cac	50		 push	 eax
  01cad	8d 4d f4	 lea	 ecx, DWORD PTR _exSend$[ebp]
  01cb0	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 511  : 
; 512  : 	exSend.a = type;

  01cb5	8a 45 0c	 mov	 al, BYTE PTR _type$[ebp]
  01cb8	88 45 f8	 mov	 BYTE PTR _exSend$[ebp+4], al

; 513  : 	exSend.m = mission;

  01cbb	8a 45 10	 mov	 al, BYTE PTR _mission$[ebp]
  01cbe	88 45 f9	 mov	 BYTE PTR _exSend$[ebp+5], al

; 514  : 
; 515  : 	DataSend(aIndex, (LPBYTE)&exSend, exSend.h.size);

  01cc1	0f b6 45 f5	 movzx	 eax, BYTE PTR _exSend$[ebp+1]
  01cc5	50		 push	 eax
  01cc6	8d 4d f4	 lea	 ecx, DWORD PTR _exSend$[ebp]
  01cc9	51		 push	 ecx
  01cca	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  01ccd	52		 push	 edx
  01cce	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01cd3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@GC_MiniInf:

; 516  : }

  01cd6	5f		 pop	 edi
  01cd7	5e		 pop	 esi
  01cd8	5b		 pop	 ebx
  01cd9	8b e5		 mov	 esp, ebp
  01cdb	5d		 pop	 ebp
  01cdc	c2 0c 00	 ret	 12			; 0000000cH
?GC_MiniInfoEx@CCustomQuestSystem@@QAEXHHH@Z ENDP	; CCustomQuestSystem::GC_MiniInfoEx
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z	; CCustomQuestSystem::MonsterKiller
xdata$x	SEGMENT
__unwindtable$?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z$0
__ehfuncinfo$?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
$T232948 = -209						; size = 1
_i$229776 = -144					; size = 4
_data$229773 = -140					; size = 104
_cur_quest_id$229772 = -36				; size = 4
_t$229767 = -32						; size = 4
_lpMonster$ = -28					; size = 4
_lpUser$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_aIndexMonster$ = 8					; size = 4
_aIndexUser$ = 12					; size = 4
?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z PROC	; CCustomQuestSystem::MonsterKiller
; _this$ = ecx

; 519  : {

  01ce0	55		 push	 ebp
  01ce1	8b ec		 mov	 ebp, esp
  01ce3	6a ff		 push	 -1
  01ce5	68 00 00 00 00	 push	 __ehhandler$?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z
  01cea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  01cf0	50		 push	 eax
  01cf1	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  01cf7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01cfc	33 c5		 xor	 eax, ebp
  01cfe	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01d01	53		 push	 ebx
  01d02	56		 push	 esi
  01d03	57		 push	 edi
  01d04	50		 push	 eax
  01d05	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  01d08	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  01d0e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 520  : 	if (!this->m_bEnabled)

  01d11	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01d14	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  01d18	75 07		 jne	 SHORT $LN11@MonsterKil

; 521  : 		return false;

  01d1a	32 c0		 xor	 al, al
  01d1c	e9 ab 01 00 00	 jmp	 $LN12@MonsterKil
$LN11@MonsterKil:

; 522  : 
; 523  : 	LPOBJ lpUser = &gObj[aIndexUser];

  01d21	8b 45 0c	 mov	 eax, DWORD PTR _aIndexUser$[ebp]
  01d24	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01d2a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01d30	89 45 e8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 524  : 	LPOBJ lpMonster = &gObj[aIndexMonster];

  01d33	8b 45 08	 mov	 eax, DWORD PTR _aIndexMonster$[ebp]
  01d36	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01d3c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01d42	89 45 e4	 mov	 DWORD PTR _lpMonster$[ebp], eax

; 525  : 
; 526  : 	for (int t = 0; t < CQ_QUEST_TP_CNT; t++)

  01d45	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _t$229767[ebp], 0
  01d4c	eb 09		 jmp	 SHORT $LN10@MonsterKil
$LN9@MonsterKil:
  01d4e	8b 45 e0	 mov	 eax, DWORD PTR _t$229767[ebp]
  01d51	83 c0 01	 add	 eax, 1
  01d54	89 45 e0	 mov	 DWORD PTR _t$229767[ebp], eax
$LN10@MonsterKil:
  01d57	83 7d e0 03	 cmp	 DWORD PTR _t$229767[ebp], 3
  01d5b	0f 8d 69 01 00
	00		 jge	 $LN8@MonsterKil

; 527  : 	{
; 528  : 		if (!lpUser->ExWQuestStart[t])

  01d61	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01d64	03 45 e0	 add	 eax, DWORD PTR _t$229767[ebp]
  01d67	0f b6 88 ec 2a
	00 00		 movzx	 ecx, BYTE PTR [eax+10988]
  01d6e	85 c9		 test	 ecx, ecx
  01d70	75 02		 jne	 SHORT $LN7@MonsterKil

; 529  : 			continue;

  01d72	eb da		 jmp	 SHORT $LN9@MonsterKil
$LN7@MonsterKil:

; 530  : 
; 531  : 		int cur_quest_id = lpUser->ExWQuestNum[t];

  01d74	8b 45 e0	 mov	 eax, DWORD PTR _t$229767[ebp]
  01d77	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01d7a	0f b7 94 41 f0
	2a 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+10992]
  01d82	89 55 dc	 mov	 DWORD PTR _cur_quest_id$229772[ebp], edx

; 532  : 		CustomQuestData data = FindQuestData(t, cur_quest_id);

  01d85	8b 45 dc	 mov	 eax, DWORD PTR _cur_quest_id$229772[ebp]
  01d88	50		 push	 eax
  01d89	8b 4d e0	 mov	 ecx, DWORD PTR _t$229767[ebp]
  01d8c	51		 push	 ecx
  01d8d	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _data$229773[ebp]
  01d93	52		 push	 edx
  01d94	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01d97	e8 00 00 00 00	 call	 ?FindQuestData@CCustomQuestSystem@@AAE?AUCustomQuestData@@HH@Z ; CCustomQuestSystem::FindQuestData
  01d9c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 533  : 
; 534  : 		if (data.id == 0)

  01da3	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _data$229773[ebp], 0
  01daa	75 14		 jne	 SHORT $LN6@MonsterKil

; 535  : 			continue;

  01dac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01db3	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _data$229773[ebp]
  01db9	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  01dbe	eb 8e		 jmp	 SHORT $LN9@MonsterKil
$LN6@MonsterKil:

; 536  : 
; 537  : 		for(int i = 0; i < data.missions.size(); i++)

  01dc0	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$229776[ebp], 0
  01dca	eb 0f		 jmp	 SHORT $LN5@MonsterKil
$LN4@MonsterKil:
  01dcc	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _i$229776[ebp]
  01dd2	83 c0 01	 add	 eax, 1
  01dd5	89 85 70 ff ff
	ff		 mov	 DWORD PTR _i$229776[ebp], eax
$LN5@MonsterKil:
  01ddb	8d 4d bc	 lea	 ecx, DWORD PTR _data$229773[ebp+72]
  01dde	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  01de3	39 85 70 ff ff
	ff		 cmp	 DWORD PTR _i$229776[ebp], eax
  01de9	0f 83 c4 00 00
	00		 jae	 $LN3@MonsterKil

; 538  : 		{
; 539  : 			if (data.missions[i].MobCount > lpUser->ExWQuestCount[t][i])

  01def	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _i$229776[ebp]
  01df5	50		 push	 eax
  01df6	8d 4d bc	 lea	 ecx, DWORD PTR _data$229773[ebp+72]
  01df9	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
  01dfe	8b 4d e0	 mov	 ecx, DWORD PTR _t$229767[ebp]
  01e01	6b c9 0a	 imul	 ecx, 10			; 0000000aH
  01e04	8b 55 e8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  01e07	8d 8c 0a f6 2a
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+10998]
  01e0e	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _i$229776[ebp]
  01e14	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  01e18	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  01e1b	0f 8e 8d 00 00
	00		 jle	 $LN2@MonsterKil

; 540  : 			{
; 541  : 				if (data.missions[i].MobID == lpMonster->Class)

  01e21	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _i$229776[ebp]
  01e27	50		 push	 eax
  01e28	8d 4d bc	 lea	 ecx, DWORD PTR _data$229773[ebp+72]
  01e2b	e8 00 00 00 00	 call	 ??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
  01e30	8b 4d e4	 mov	 ecx, DWORD PTR _lpMonster$[ebp]
  01e33	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  01e3a	39 10		 cmp	 DWORD PTR [eax], edx
  01e3c	75 70		 jne	 SHORT $LN2@MonsterKil

; 542  : 				{
; 543  : 					lpUser->ExWQuestCount[t][i]++;

  01e3e	8b 45 e0	 mov	 eax, DWORD PTR _t$229767[ebp]
  01e41	6b c0 0a	 imul	 eax, 10			; 0000000aH
  01e44	8b 4d e8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  01e47	8d 94 01 f6 2a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+10998]
  01e4e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _i$229776[ebp]
  01e54	66 8b 0c 42	 mov	 cx, WORD PTR [edx+eax*2]
  01e58	66 83 c1 01	 add	 cx, 1
  01e5c	8b 55 e0	 mov	 edx, DWORD PTR _t$229767[ebp]
  01e5f	6b d2 0a	 imul	 edx, 10			; 0000000aH
  01e62	8b 45 e8	 mov	 eax, DWORD PTR _lpUser$[ebp]
  01e65	8d 94 10 f6 2a
	00 00		 lea	 edx, DWORD PTR [eax+edx+10998]
  01e6c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _i$229776[ebp]
  01e72	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx

; 544  : 					this->GC_MiniInfoEx(aIndexUser, t, i);

  01e76	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _i$229776[ebp]
  01e7c	50		 push	 eax
  01e7d	8b 4d e0	 mov	 ecx, DWORD PTR _t$229767[ebp]
  01e80	51		 push	 ecx
  01e81	8b 55 0c	 mov	 edx, DWORD PTR _aIndexUser$[ebp]
  01e84	52		 push	 edx
  01e85	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01e88	e8 00 00 00 00	 call	 ?GC_MiniInfoEx@CCustomQuestSystem@@QAEXHHH@Z ; CCustomQuestSystem::GC_MiniInfoEx

; 545  : 					return true;

  01e8d	c6 85 2f ff ff
	ff 01		 mov	 BYTE PTR $T232948[ebp], 1
  01e94	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01e9b	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _data$229773[ebp]
  01ea1	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  01ea6	8a 85 2f ff ff
	ff		 mov	 al, BYTE PTR $T232948[ebp]
  01eac	eb 1e		 jmp	 SHORT $LN12@MonsterKil
$LN2@MonsterKil:

; 546  : 				}
; 547  : 			}
; 548  : 		}

  01eae	e9 19 ff ff ff	 jmp	 $LN4@MonsterKil
$LN3@MonsterKil:

; 549  : 	}

  01eb3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01eba	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _data$229773[ebp]
  01ec0	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  01ec5	e9 84 fe ff ff	 jmp	 $LN9@MonsterKil
$LN8@MonsterKil:

; 550  : 	return false;

  01eca	32 c0		 xor	 al, al
$LN12@MonsterKil:

; 551  : }

  01ecc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01ecf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01ed6	59		 pop	 ecx
  01ed7	5f		 pop	 edi
  01ed8	5e		 pop	 esi
  01ed9	5b		 pop	 ebx
  01eda	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01edd	33 cd		 xor	 ecx, ebp
  01edf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01ee4	8b e5		 mov	 esp, ebp
  01ee6	5d		 pop	 ebp
  01ee7	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z$0:
  001b0	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _data$229773[ebp]
  001b6	e9 00 00 00 00	 jmp	 ??1CustomQuestData@@QAE@XZ
__ehhandler$?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z:
  001bb	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  001bf	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  001c2	8b 8a 28 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-216]
  001c8	33 c8		 xor	 ecx, eax
  001ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cf	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  001d2	33 c8		 xor	 ecx, eax
  001d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d9	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z
  001de	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MonsterKiller@CCustomQuestSystem@@QAE_NHH@Z ENDP	; CCustomQuestSystem::MonsterKiller
PUBLIC	??0?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@V?$allocator@UCustomQuestMission@@@1@@Z ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >
PUBLIC	??0?$allocator@UCustomQuestMission@@@std@@QAE@XZ ; std::allocator<CustomQuestMission>::allocator<CustomQuestMission>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T232955 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::vector<CustomQuestMission,std::allocator<CustomQuestMission> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T232955[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UCustomQuestMission@@@std@@QAE@XZ ; std::allocator<CustomQuestMission>::allocator<CustomQuestMission>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@V?$allocator@UCustomQuestMission@@@1@@Z ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::vector<CustomQuestMission,std::allocator<CustomQuestMission> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::~_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >
PUBLIC	?_Tidy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@1@0PAU2@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > > >
PUBLIC	?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::begin
PUBLIC	?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::end
PUBLIC	?_Buy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAE_NI@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Buy
PUBLIC	??0?$allocator@UCustomQuestMission@@@std@@QAE@ABV01@@Z ; std::allocator<CustomQuestMission>::allocator<CustomQuestMission>
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv157 = -108						; size = 4
tv156 = -104						; size = 4
tv69 = -100						; size = 4
$T232959 = -96						; size = 4
$T232960 = -92						; size = 4
$T232961 = -88						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::vector<CustomQuestMission,std::allocator<CustomQuestMission> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00032	83 c0 0c	 add	 eax, 12			; 0000000cH
  00035	51		 push	 ecx
  00036	8b cc		 mov	 ecx, esp
  00038	89 65 a0	 mov	 DWORD PTR $T232959[ebp], esp
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??0?$allocator@UCustomQuestMission@@@std@@QAE@ABV01@@Z ; std::allocator<CustomQuestMission>::allocator<CustomQuestMission>
  00041	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@V?$allocator@UCustomQuestMission@@@1@@Z ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 536  : 		if (_Buy(_Right.size()))

  00050	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00053	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  00058	50		 push	 eax
  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAE_NI@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Buy
  00061	0f b6 c0	 movzx	 eax, al
  00064	85 c0		 test	 eax, eax
  00066	74 6f		 je	 SHORT $LN3@vector@2

; 537  : 			_TRY_BEGIN

  00068	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  0006c	8d 45 a4	 lea	 eax, DWORD PTR $T232960[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00073	e8 00 00 00 00	 call	 ?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::end
  00078	89 45 9c	 mov	 DWORD PTR tv69[ebp], eax
  0007b	8d 4d a8	 lea	 ecx, DWORD PTR $T232961[ebp]
  0007e	51		 push	 ecx
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00082	e8 00 00 00 00	 call	 ?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::begin
  00087	89 45 98	 mov	 DWORD PTR tv156[ebp], eax
  0008a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0008d	8b 02		 mov	 eax, DWORD PTR [edx]
  0008f	50		 push	 eax
  00090	8b 4d 9c	 mov	 ecx, DWORD PTR tv69[ebp]
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	52		 push	 edx
  00096	8b 45 98	 mov	 eax, DWORD PTR tv156[ebp]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	51		 push	 ecx
  0009c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@1@0PAU2@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > > >
  000a4	89 45 94	 mov	 DWORD PTR tv157[ebp], eax
  000a7	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	8b 45 94	 mov	 eax, DWORD PTR tv157[ebp]
  000ad	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000b0	eb 1e		 jmp	 SHORT $LN5@vector@2
__catch$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  000b2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Tidy

; 542  : 			_RERAISE;

  000ba	6a 00		 push	 0
  000bc	6a 00		 push	 0
  000be	e8 00 00 00 00	 call	 __CxxThrowException@8

; 543  : 			_CATCH_END

  000c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ca	b8 00 00 00 00	 mov	 eax, $LN3@vector@2
  000cf	c3		 ret	 0
$LN5@vector@2:
  000d0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@2:

; 544  : 		}

  000d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000de	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
  000e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000eb	59		 pop	 ecx
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::~_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >
__ehhandler$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::vector<CustomQuestMission,std::allocator<CustomQuestMission> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::~vector<CustomQuestMission,std::allocator<CustomQuestMission> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::~_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::~_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >
__ehhandler$??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::~vector<CustomQuestMission,std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	8b 55 08	 mov	 edx, DWORD PTR __Pos$[ebp]
  00014	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAUCustomQuestMission@@I@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@V?$allocator@UCustomQuestReward@@@1@@Z ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >
PUBLIC	??0?$allocator@UCustomQuestReward@@@std@@QAE@XZ	; std::allocator<CustomQuestReward>::allocator<CustomQuestReward>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T232992 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::vector<CustomQuestReward,std::allocator<CustomQuestReward> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T232992[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UCustomQuestReward@@@std@@QAE@XZ ; std::allocator<CustomQuestReward>::allocator<CustomQuestReward>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@V?$allocator@UCustomQuestReward@@@1@@Z ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::vector<CustomQuestReward,std::allocator<CustomQuestReward> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::~_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >
PUBLIC	?_Tidy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@1@0PAU2@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > > >
PUBLIC	?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::begin
PUBLIC	?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::end
PUBLIC	?_Buy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAE_NI@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Buy
PUBLIC	??0?$allocator@UCustomQuestReward@@@std@@QAE@ABV01@@Z ; std::allocator<CustomQuestReward>::allocator<CustomQuestReward>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv157 = -108						; size = 4
tv156 = -104						; size = 4
tv69 = -100						; size = 4
$T232996 = -96						; size = 4
$T232997 = -92						; size = 4
$T232998 = -88						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::vector<CustomQuestReward,std::allocator<CustomQuestReward> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00032	83 c0 0c	 add	 eax, 12			; 0000000cH
  00035	51		 push	 ecx
  00036	8b cc		 mov	 ecx, esp
  00038	89 65 a0	 mov	 DWORD PTR $T232996[ebp], esp
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??0?$allocator@UCustomQuestReward@@@std@@QAE@ABV01@@Z ; std::allocator<CustomQuestReward>::allocator<CustomQuestReward>
  00041	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@V?$allocator@UCustomQuestReward@@@1@@Z ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 536  : 		if (_Buy(_Right.size()))

  00050	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00053	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  00058	50		 push	 eax
  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAE_NI@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Buy
  00061	0f b6 c0	 movzx	 eax, al
  00064	85 c0		 test	 eax, eax
  00066	74 6f		 je	 SHORT $LN3@vector@3

; 537  : 			_TRY_BEGIN

  00068	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  0006c	8d 45 a4	 lea	 eax, DWORD PTR $T232997[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00073	e8 00 00 00 00	 call	 ?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::end
  00078	89 45 9c	 mov	 DWORD PTR tv69[ebp], eax
  0007b	8d 4d a8	 lea	 ecx, DWORD PTR $T232998[ebp]
  0007e	51		 push	 ecx
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00082	e8 00 00 00 00	 call	 ?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::begin
  00087	89 45 98	 mov	 DWORD PTR tv156[ebp], eax
  0008a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0008d	8b 02		 mov	 eax, DWORD PTR [edx]
  0008f	50		 push	 eax
  00090	8b 4d 9c	 mov	 ecx, DWORD PTR tv69[ebp]
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	52		 push	 edx
  00096	8b 45 98	 mov	 eax, DWORD PTR tv156[ebp]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	51		 push	 ecx
  0009c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@1@0PAU2@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > > >
  000a4	89 45 94	 mov	 DWORD PTR tv157[ebp], eax
  000a7	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	8b 45 94	 mov	 eax, DWORD PTR tv157[ebp]
  000ad	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000b0	eb 1e		 jmp	 SHORT $LN5@vector@3
__catch$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  000b2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Tidy

; 542  : 			_RERAISE;

  000ba	6a 00		 push	 0
  000bc	6a 00		 push	 0
  000be	e8 00 00 00 00	 call	 __CxxThrowException@8

; 543  : 			_CATCH_END

  000c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ca	b8 00 00 00 00	 mov	 eax, $LN3@vector@3
  000cf	c3		 ret	 0
$LN5@vector@3:
  000d0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@3:

; 544  : 		}

  000d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000de	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
  000e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000eb	59		 pop	 ecx
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::~_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >
__ehhandler$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::vector<CustomQuestReward,std::allocator<CustomQuestReward> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::~vector<CustomQuestReward,std::allocator<CustomQuestReward> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::~_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::~_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >
__ehhandler$??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::~vector<CustomQuestReward,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	f7 f9		 idiv	 ecx

; 880  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0000f	6b c0 14	 imul	 eax, 20			; 00000014H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAUCustomQuestReward@@I@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@V?$allocator@UCustomQuestData@@@1@@Z ; std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >
PUBLIC	??0?$allocator@UCustomQuestData@@@std@@QAE@XZ	; std::allocator<CustomQuestData>::allocator<CustomQuestData>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T233028 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::vector<CustomQuestData,std::allocator<CustomQuestData> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T233028[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UCustomQuestData@@@std@@QAE@XZ ; std::allocator<CustomQuestData>::allocator<CustomQuestData>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@V?$allocator@UCustomQuestData@@@1@@Z ; std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::vector<CustomQuestData,std::allocator<CustomQuestData> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >::~_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >
PUBLIC	?_Tidy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >::~_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ; std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >::~_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >
__ehhandler$??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::~vector<CustomQuestData,std::allocator<CustomQuestData> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  0001d	f7 f9		 idiv	 ecx

; 880  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0000f	6b c0 68	 imul	 eax, 104		; 00000068H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEAAUCustomQuestData@@I@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::operator[]
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@0@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::erase
PUBLIC	?begin@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::begin
PUBLIC	?end@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T233045 = -88						; size = 4
$T233046 = -84						; size = 4
$T233047 = -80						; size = 4
$T233048 = -76						; size = 4
$T233049 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXXZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T233046[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T233045[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T233048[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T233047[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T233045[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T233047[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T233049[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@0@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXXZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 787  : 		return (const_iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 788  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 797  : 		return (const_iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 798  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::end
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCustomQuestMission@@@std@@QAEPAUCustomQuestMission@@I@Z ; std::allocator<CustomQuestMission>::allocate
PUBLIC	?_Xlen@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Xlen
PUBLIC	?max_size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Buy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1251 : 		this->_Myfirst = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1252 : 		this->_Mylast = 0;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1253 : 		this->_Myend = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00029	83 7d 08 00	 cmp	 DWORD PTR __Capacity$[ebp], 0
  0002d	75 06		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  0002f	32 c0		 xor	 al, al
  00031	eb 4b		 jmp	 SHORT $LN6@Buy
  00033	eb 47		 jmp	 SHORT $LN3@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::max_size
  0003d	3b 45 08	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00040	73 0a		 jae	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Xlen

; 1259 : 		else

  0004a	eb 30		 jmp	 SHORT $LN3@Buy
$LN2@Buy:

; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0004c	8b 45 08	 mov	 eax, DWORD PTR __Capacity$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00056	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCustomQuestMission@@@std@@QAEPAUCustomQuestMission@@I@Z ; std::allocator<CustomQuestMission>::allocate
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	89 01		 mov	 DWORD PTR [ecx], eax

; 1262 : 			this->_Mylast = this->_Myfirst;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	8b 11		 mov	 edx, DWORD PTR [ecx]
  00068	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	8b 55 08	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00073	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN3@Buy:

; 1264 : 			}
; 1265 : 		return (true);

  0007c	b0 01		 mov	 al, 1
$LN6@Buy:

; 1266 : 		}

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?_Buy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Buy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@I@Z ; std::allocator<CustomQuestMission>::deallocate
PUBLIC	?_Destroy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXPAUCustomQuestMission@@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Destroy
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXXZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXPAUCustomQuestMission@@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 03	 sar	 edx, 3
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@I@Z ; std::allocator<CustomQuestMission>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXXZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@V?$allocator@UCustomQuestMission@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@V?$allocator@UCustomQuestMission@@@1@@Z PROC ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UCustomQuestMission@@@std@@QAE@ABV01@@Z ; std::allocator<CustomQuestMission>::allocator<CustomQuestMission>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@V?$allocator@UCustomQuestMission@@@1@@Z ENDP ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::~_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >::~_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCustomQuestMission@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCustomQuestMission@@@std@@QAE@XZ PROC	; std::allocator<CustomQuestMission>::allocator<CustomQuestMission>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UCustomQuestMission@@@std@@QAE@XZ ENDP	; std::allocator<CustomQuestMission>::allocator<CustomQuestMission>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCustomQuestMission@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCustomQuestMission@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CustomQuestMission>::allocator<CustomQuestMission>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UCustomQuestMission@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CustomQuestMission>::allocator<CustomQuestMission>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 787  : 		return (const_iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 788  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 797  : 		return (const_iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 798  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::end
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCustomQuestReward@@@std@@QAEPAUCustomQuestReward@@I@Z ; std::allocator<CustomQuestReward>::allocate
PUBLIC	?_Xlen@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Xlen
PUBLIC	?max_size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Buy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1251 : 		this->_Myfirst = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1252 : 		this->_Mylast = 0;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1253 : 		this->_Myend = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00029	83 7d 08 00	 cmp	 DWORD PTR __Capacity$[ebp], 0
  0002d	75 06		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  0002f	32 c0		 xor	 al, al
  00031	eb 4b		 jmp	 SHORT $LN6@Buy@2
  00033	eb 47		 jmp	 SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::max_size
  0003d	3b 45 08	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00040	73 0a		 jae	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Xlen

; 1259 : 		else

  0004a	eb 30		 jmp	 SHORT $LN3@Buy@2
$LN2@Buy@2:

; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0004c	8b 45 08	 mov	 eax, DWORD PTR __Capacity$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00056	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCustomQuestReward@@@std@@QAEPAUCustomQuestReward@@I@Z ; std::allocator<CustomQuestReward>::allocate
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	89 01		 mov	 DWORD PTR [ecx], eax

; 1262 : 			this->_Mylast = this->_Myfirst;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	8b 11		 mov	 edx, DWORD PTR [ecx]
  00068	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  0006b	8b 45 08	 mov	 eax, DWORD PTR __Capacity$[ebp]
  0006e	6b c0 14	 imul	 eax, 20			; 00000014H
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	03 01		 add	 eax, DWORD PTR [ecx]
  00076	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00079	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN3@Buy@2:

; 1264 : 			}
; 1265 : 		return (true);

  0007c	b0 01		 mov	 al, 1
$LN6@Buy@2:

; 1266 : 		}

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?_Buy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Buy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@I@Z ; std::allocator<CustomQuestReward>::deallocate
PUBLIC	?_Destroy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXPAUCustomQuestReward@@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Destroy
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXXZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 42		 je	 SHORT $LN1@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXPAUCustomQuestReward@@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0003c	99		 cdq
  0003d	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00042	f7 f9		 idiv	 ecx
  00044	50		 push	 eax
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@I@Z ; std::allocator<CustomQuestReward>::deallocate
$LN1@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Tidy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXXZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@V?$allocator@UCustomQuestReward@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@V?$allocator@UCustomQuestReward@@@1@@Z PROC ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UCustomQuestReward@@@std@@QAE@ABV01@@Z ; std::allocator<CustomQuestReward>::allocator<CustomQuestReward>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@V?$allocator@UCustomQuestReward@@@1@@Z ENDP ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::~_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >::~_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCustomQuestReward@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCustomQuestReward@@@std@@QAE@XZ PROC	; std::allocator<CustomQuestReward>::allocator<CustomQuestReward>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UCustomQuestReward@@@std@@QAE@XZ ENDP	; std::allocator<CustomQuestReward>::allocator<CustomQuestReward>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCustomQuestReward@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCustomQuestReward@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CustomQuestReward>::allocator<CustomQuestReward>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UCustomQuestReward@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CustomQuestReward>::allocator<CustomQuestReward>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXPAUCustomQuestData@@0@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Destroy
PUBLIC	??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00@Z ; std::_Move<CustomQuestData *,CustomQuestData *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T233088 = -84						; size = 4
__Ptr$230240 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@0@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00@Z ; std::_Move<CustomQuestData *,CustomQuestData *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$230240[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$230240[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXPAUCustomQuestData@@0@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$230240[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T233088[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T233088[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@0@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::erase
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@I@Z ; std::allocator<CustomQuestData>::deallocate
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXXZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 42		 je	 SHORT $LN1@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXPAUCustomQuestData@@0@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0003c	99		 cdq
  0003d	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  00042	f7 f9		 idiv	 ecx
  00044	50		 push	 eax
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@I@Z ; std::allocator<CustomQuestData>::deallocate
$LN1@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Tidy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXXZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$allocator@UCustomQuestData@@@std@@QAE@ABV01@@Z ; std::allocator<CustomQuestData>::allocator<CustomQuestData>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@V?$allocator@UCustomQuestData@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@V?$allocator@UCustomQuestData@@@1@@Z PROC ; std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UCustomQuestData@@@std@@QAE@ABV01@@Z ; std::allocator<CustomQuestData>::allocator<CustomQuestData>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@V?$allocator@UCustomQuestData@@@1@@Z ENDP ; std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >::~_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >::~_Vector_val<CustomQuestData,std::allocator<CustomQuestData> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCustomQuestData@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCustomQuestData@@@std@@QAE@XZ PROC	; std::allocator<CustomQuestData>::allocator<CustomQuestData>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UCustomQuestData@@@std@@QAE@XZ ENDP	; std::allocator<CustomQuestData>::allocator<CustomQuestData>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCustomQuestMission@@@std@@QBEIXZ ; std::allocator<CustomQuestMission>::max_size
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UCustomQuestMission@@@std@@QBEIXZ ; std::allocator<CustomQuestMission>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXPAUCustomQuestMission@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXPAUCustomQuestMission@@0@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestMission> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXPAUCustomQuestMission@@0@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Destroy
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXXZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXXZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@I@Z PROC ; std::allocator<CustomQuestMission>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@I@Z ENDP ; std::allocator<CustomQuestMission>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UCustomQuestMission@@@std@@YAPAUCustomQuestMission@@IPAU1@@Z ; std::_Allocate<CustomQuestMission>
; Function compile flags: /Odtp /ZI
;	COMDAT ?allocate@?$allocator@UCustomQuestMission@@@std@@QAEPAUCustomQuestMission@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCustomQuestMission@@@std@@QAEPAUCustomQuestMission@@I@Z PROC ; std::allocator<CustomQuestMission>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UCustomQuestMission@@@std@@YAPAUCustomQuestMission@@IPAU1@@Z ; std::_Allocate<CustomQuestMission>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UCustomQuestMission@@@std@@QAEPAUCustomQuestMission@@I@Z ENDP ; std::allocator<CustomQuestMission>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCustomQuestReward@@@std@@QBEIXZ ; std::allocator<CustomQuestReward>::max_size
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UCustomQuestReward@@@std@@QBEIXZ ; std::allocator<CustomQuestReward>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXPAUCustomQuestReward@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXPAUCustomQuestReward@@0@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestReward> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXPAUCustomQuestReward@@0@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXXZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen@2:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXXZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@I@Z PROC ; std::allocator<CustomQuestReward>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@I@Z ENDP ; std::allocator<CustomQuestReward>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UCustomQuestReward@@@std@@YAPAUCustomQuestReward@@IPAU1@@Z ; std::_Allocate<CustomQuestReward>
; Function compile flags: /Odtp /ZI
;	COMDAT ?allocate@?$allocator@UCustomQuestReward@@@std@@QAEPAUCustomQuestReward@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCustomQuestReward@@@std@@QAEPAUCustomQuestReward@@I@Z PROC ; std::allocator<CustomQuestReward>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UCustomQuestReward@@@std@@YAPAUCustomQuestReward@@IPAU1@@Z ; std::_Allocate<CustomQuestReward>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UCustomQuestReward@@@std@@QAEPAUCustomQuestReward@@I@Z ENDP ; std::allocator<CustomQuestReward>::allocate
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@2@@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestData> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXPAUCustomQuestData@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXPAUCustomQuestData@@0@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestData> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXPAUCustomQuestData@@0@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UCustomQuestData@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCustomQuestData@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CustomQuestData>::allocator<CustomQuestData>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UCustomQuestData@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CustomQuestData>::allocator<CustomQuestData>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@I@Z PROC ; std::allocator<CustomQuestData>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@I@Z ENDP ; std::allocator<CustomQuestData>::deallocate
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::operator!=
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCustomQuestMission@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UCustomQuestMission@@@std@@QBEIXZ PROC ; std::allocator<CustomQuestMission>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UCustomQuestMission@@@std@@QBEIXZ ENDP ; std::allocator<CustomQuestMission>::max_size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCustomQuestReward@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UCustomQuestReward@@@std@@QBEIXZ PROC ; std::allocator<CustomQuestReward>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 cc cc
	cc 0c		 mov	 DWORD PTR __Count$[ebp], 214748364 ; 0cccccccH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size@2
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size@2
$LN3@max_size@2:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UCustomQuestReward@@@std@@QBEIXZ ENDP ; std::allocator<CustomQuestReward>::max_size
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QAE@PAUCustomQuestData@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestData,std::allocator<CustomQuestData> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@AAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission &>
PUBLIC	??$forward@AAUCustomQuestMission@@@std@@YAAAUCustomQuestMission@@AAU1@@Z ; std::forward<CustomQuestMission &>
PUBLIC	?_Orphan_range@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXPAUCustomQuestMission@@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXI@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ??$emplace_back@AAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXAAUCustomQuestMission@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??$emplace_back@AAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXAAUCustomQuestMission@@@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::emplace_back<CustomQuestMission &>, COMDAT
; _this$ = ecx

; 661  : 		void emplace_back(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 662  : 		{	// insert element at end
; 663  : 		if (this->_Mylast == this->_Myend)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00015	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00018	75 0a		 jne	 SHORT $LN1@emplace_ba

; 664  : 			_Reserve(1);

  0001a	6a 01		 push	 1
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXI@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Reserve
$LN1@emplace_ba:

; 665  : 		_Orphan_range(this->_Mylast, this->_Mylast);

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	51		 push	 ecx
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXPAUCustomQuestMission@@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Orphan_range

; 666  : 		_Cons_val(this->_Alval,
; 667  : 			this->_Mylast,
; 668  : 			_STD forward<_Valty>(_Val));

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$forward@AAUCustomQuestMission@@@std@@YAAAUCustomQuestMission@@AAU1@@Z ; std::forward<CustomQuestMission &>
  00043	83 c4 04	 add	 esp, 4
  00046	50		 push	 eax
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004d	52		 push	 edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	83 c0 0c	 add	 eax, 12			; 0000000cH
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@AAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission &>
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 669  : 		++this->_Mylast;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	83 c1 08	 add	 ecx, 8
  00066	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00069	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 670  : 		}

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??$emplace_back@AAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXAAUCustomQuestMission@@@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::emplace_back<CustomQuestMission &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@AAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward &>
PUBLIC	??$forward@AAUCustomQuestReward@@@std@@YAAAUCustomQuestReward@@AAU1@@Z ; std::forward<CustomQuestReward &>
PUBLIC	?_Orphan_range@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXPAUCustomQuestReward@@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXI@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ??$emplace_back@AAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXAAUCustomQuestReward@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??$emplace_back@AAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXAAUCustomQuestReward@@@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::emplace_back<CustomQuestReward &>, COMDAT
; _this$ = ecx

; 661  : 		void emplace_back(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 662  : 		{	// insert element at end
; 663  : 		if (this->_Mylast == this->_Myend)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00015	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00018	75 0a		 jne	 SHORT $LN1@emplace_ba@2

; 664  : 			_Reserve(1);

  0001a	6a 01		 push	 1
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXI@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Reserve
$LN1@emplace_ba@2:

; 665  : 		_Orphan_range(this->_Mylast, this->_Mylast);

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	51		 push	 ecx
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXPAUCustomQuestReward@@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Orphan_range

; 666  : 		_Cons_val(this->_Alval,
; 667  : 			this->_Mylast,
; 668  : 			_STD forward<_Valty>(_Val));

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$forward@AAUCustomQuestReward@@@std@@YAAAUCustomQuestReward@@AAU1@@Z ; std::forward<CustomQuestReward &>
  00043	83 c4 04	 add	 esp, 4
  00046	50		 push	 eax
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004d	52		 push	 edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	83 c0 0c	 add	 eax, 12			; 0000000cH
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@AAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward &>
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 669  : 		++this->_Mylast;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	83 c1 14	 add	 ecx, 20			; 00000014H
  00066	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00069	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 670  : 		}

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??$emplace_back@AAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXAAUCustomQuestReward@@@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::emplace_back<CustomQuestReward &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@AAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestData>,CustomQuestData,CustomQuestData &>
PUBLIC	??$forward@AAUCustomQuestData@@@std@@YAAAUCustomQuestData@@AAU1@@Z ; std::forward<CustomQuestData &>
PUBLIC	?_Orphan_range@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXPAUCustomQuestData@@0@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXI@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ??$emplace_back@AAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXAAUCustomQuestData@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??$emplace_back@AAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXAAUCustomQuestData@@@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::emplace_back<CustomQuestData &>, COMDAT
; _this$ = ecx

; 661  : 		void emplace_back(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 662  : 		{	// insert element at end
; 663  : 		if (this->_Mylast == this->_Myend)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00015	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00018	75 0a		 jne	 SHORT $LN1@emplace_ba@3

; 664  : 			_Reserve(1);

  0001a	6a 01		 push	 1
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXI@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Reserve
$LN1@emplace_ba@3:

; 665  : 		_Orphan_range(this->_Mylast, this->_Mylast);

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	51		 push	 ecx
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXPAUCustomQuestData@@0@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Orphan_range

; 666  : 		_Cons_val(this->_Alval,
; 667  : 			this->_Mylast,
; 668  : 			_STD forward<_Valty>(_Val));

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$forward@AAUCustomQuestData@@@std@@YAAAUCustomQuestData@@AAU1@@Z ; std::forward<CustomQuestData &>
  00043	83 c4 04	 add	 esp, 4
  00046	50		 push	 eax
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004d	52		 push	 edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	83 c0 0c	 add	 eax, 12			; 0000000cH
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@AAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestData>,CustomQuestData,CustomQuestData &>
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 669  : 		++this->_Mylast;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	83 c1 68	 add	 ecx, 104		; 00000068H
  00066	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00069	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 670  : 		}

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??$emplace_back@AAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXAAUCustomQuestData@@@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::emplace_back<CustomQuestData &>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *,std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *,std::allocator<CustomQuestMission> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1319 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > > >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *,std::allocator<CustomQuestReward> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1319 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > > >
_TEXT	ENDS
PUBLIC	??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CustomQuestData *,CustomQuestData *>
PUBLIC	??$_Ptr_cat@UCustomQuestData@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestData@@0@Z ; std::_Ptr_cat<CustomQuestData,CustomQuestData>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00@Z
_TEXT	SEGMENT
$T233159 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00@Z PROC ; std::_Move<CustomQuestData *,CustomQuestData *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestData@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestData@@0@Z ; std::_Ptr_cat<CustomQuestData,CustomQuestData>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233159[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233159[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CustomQuestData *,CustomQuestData *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00@Z ENDP ; std::_Move<CustomQuestData *,CustomQuestData *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestMission> >
PUBLIC	??$_Ptr_cat@UCustomQuestMission@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestMission@@0@Z ; std::_Ptr_cat<CustomQuestMission,CustomQuestMission>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@@Z
_TEXT	SEGMENT
$T233162 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CustomQuestMission> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestMission@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestMission@@0@Z ; std::_Ptr_cat<CustomQuestMission,CustomQuestMission>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233162[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233162[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestMission> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CustomQuestMission> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@UCustomQuestMission@@@std@@YAPAUCustomQuestMission@@IPAU1@@Z
_TEXT	SEGMENT
$T233165 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCustomQuestMission@@@std@@YAPAUCustomQuestMission@@IPAU1@@Z PROC ; std::_Allocate<CustomQuestMission>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	c1 e0 03	 shl	 eax, 3
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T233165[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T233165[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UCustomQuestMission@@@std@@YAPAUCustomQuestMission@@IPAU1@@Z ENDP ; std::_Allocate<CustomQuestMission>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestReward> >
PUBLIC	??$_Ptr_cat@UCustomQuestReward@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestReward@@0@Z ; std::_Ptr_cat<CustomQuestReward,CustomQuestReward>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@@Z
_TEXT	SEGMENT
$T233168 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CustomQuestReward> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestReward@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestReward@@0@Z ; std::_Ptr_cat<CustomQuestReward,CustomQuestReward>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233168[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233168[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestReward> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@UCustomQuestReward@@@std@@YAPAUCustomQuestReward@@IPAU1@@Z
_TEXT	SEGMENT
$T233171 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCustomQuestReward@@@std@@YAPAUCustomQuestReward@@IPAU1@@Z PROC ; std::_Allocate<CustomQuestReward>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate@2

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate@2
$LN4@Allocate@2:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 cc cc
	cc 0c		 cmp	 DWORD PTR __Count$[ebp], 214748364 ; 0cccccccH
  00026	77 18		 ja	 SHORT $LN1@Allocate@2
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	6b c0 14	 imul	 eax, 20			; 00000014H
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T233171[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T233171[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate@2:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@2:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UCustomQuestReward@@@std@@YAPAUCustomQuestReward@@IPAU1@@Z ENDP ; std::_Allocate<CustomQuestReward>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestData> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@@Z
_TEXT	SEGMENT
$T233174 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CustomQuestData> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestData@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestData@@0@Z ; std::_Ptr_cat<CustomQuestData,CustomQuestData>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233174[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233174[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CustomQuestData> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CustomQuestData> >
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::reserve
PUBLIC	?_Grow_to@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEII@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Grow_to
PUBLIC	?capacity@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::capacity
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXI@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEII@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::reserve
$LN6@Reserve:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Reserve
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXPAUCustomQuestMission@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXPAUCustomQuestMission@@0@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXPAUCustomQuestMission@@0@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::reserve
PUBLIC	?_Grow_to@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEII@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Grow_to
PUBLIC	?capacity@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::capacity
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXI@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve@2
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve@2

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve@2
$LN2@Reserve@2:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEII@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::reserve
$LN6@Reserve@2:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Reserve
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXPAUCustomQuestReward@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXPAUCustomQuestReward@@0@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXPAUCustomQuestReward@@0@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::reserve
PUBLIC	?_Grow_to@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEII@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Grow_to
PUBLIC	?capacity@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::capacity
PUBLIC	?_Xlen@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Xlen
PUBLIC	?max_size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXI@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve@3

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve@3
$LN4@Reserve@3:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve@3

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve@3
$LN2@Reserve@3:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEII@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::reserve
$LN6@Reserve@3:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Reserve
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXPAUCustomQuestData@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXPAUCustomQuestData@@0@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXPAUCustomQuestData@@0@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Umove<CustomQuestMission *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$231193 = -28					; size = 4
__Ptr$231186 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Xlen
  00044	e9 eb 00 00 00	 jmp	 $LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 da 00 00
	00		 jae	 $LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCustomQuestMission@@@std@@QAEPAUCustomQuestMission@@I@Z ; std::allocator<CustomQuestMission>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$231186[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$231186[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Umove<CustomQuestMission *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve
__catch$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$231186[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@I@Z ; std::allocator<CustomQuestMission>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$231193[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 35		 je	 SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXPAUCustomQuestMission@@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ef	2b 11		 sub	 edx, DWORD PTR [ecx]
  000f1	c1 fa 03	 sar	 edx, 3
  000f4	52		 push	 edx
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	51		 push	 ecx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00101	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@I@Z ; std::allocator<CustomQuestMission>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00111	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$231186[ebp]
  00114	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00117	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR __Size$231193[ebp]
  00120	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$231186[ebp]
  00123	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00126	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00129	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  0012c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$231186[ebp]
  00132	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?capacity@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEII@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IBEII@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Grow_to
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Umove<CustomQuestReward *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$231213 = -28					; size = 4
__Ptr$231206 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Xlen
  00044	e9 f0 00 00 00	 jmp	 $LN7@reserve@2
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 df 00 00
	00		 jae	 $LN7@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCustomQuestReward@@@std@@QAEPAUCustomQuestReward@@I@Z ; std::allocator<CustomQuestReward>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$231206[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$231206[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Umove<CustomQuestReward *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve@2
__catch$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$231206[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@I@Z ; std::allocator<CustomQuestReward>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve@2:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$231213[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 3a		 je	 SHORT $LN1@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXPAUCustomQuestReward@@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ef	2b 01		 sub	 eax, DWORD PTR [ecx]
  000f1	99		 cdq
  000f2	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  000f7	f7 f9		 idiv	 ecx
  000f9	50		 push	 eax
  000fa	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 02		 mov	 eax, DWORD PTR [edx]
  000ff	50		 push	 eax
  00100	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00106	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@I@Z ; std::allocator<CustomQuestReward>::deallocate
$LN1@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0010b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  00113	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00116	6b c0 14	 imul	 eax, 20			; 00000014H
  00119	03 45 e8	 add	 eax, DWORD PTR __Ptr$231206[ebp]
  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  00122	8b 45 e4	 mov	 eax, DWORD PTR __Size$231213[ebp]
  00125	6b c0 14	 imul	 eax, 20			; 00000014H
  00128	03 45 e8	 add	 eax, DWORD PTR __Ptr$231206[ebp]
  0012b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  00131	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$231206[ebp]
  00137	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve@2:

; 772  : 			}
; 773  : 		}

  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	f7 f9		 idiv	 ecx

; 778  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?capacity@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEII@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to@2
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to@2:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to@2:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IBEII@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Grow_to
_TEXT	ENDS
PUBLIC	??$_Umove@PAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEPAUCustomQuestData@@PAU2@00@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Umove<CustomQuestData *>
PUBLIC	?allocate@?$allocator@UCustomQuestData@@@std@@QAEPAUCustomQuestData@@I@Z ; std::allocator<CustomQuestData>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$231233 = -28					; size = 4
__Ptr$231226 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve@3

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Xlen
  00044	e9 f0 00 00 00	 jmp	 $LN7@reserve@3
$LN5@reserve@3:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 df 00 00
	00		 jae	 $LN7@reserve@3

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCustomQuestData@@@std@@QAEPAUCustomQuestData@@I@Z ; std::allocator<CustomQuestData>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$231226[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$231226[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEPAUCustomQuestData@@PAU2@00@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Umove<CustomQuestData *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve@3
__catch$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$231226[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@I@Z ; std::allocator<CustomQuestData>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve@3:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$231233[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 3a		 je	 SHORT $LN1@reserve@3

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEXPAUCustomQuestData@@0@Z ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ef	2b 01		 sub	 eax, DWORD PTR [ecx]
  000f1	99		 cdq
  000f2	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  000f7	f7 f9		 idiv	 ecx
  000f9	50		 push	 eax
  000fa	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 02		 mov	 eax, DWORD PTR [edx]
  000ff	50		 push	 eax
  00100	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00106	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@I@Z ; std::allocator<CustomQuestData>::deallocate
$LN1@reserve@3:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0010b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  00113	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00116	6b c0 68	 imul	 eax, 104		; 00000068H
  00119	03 45 e8	 add	 eax, DWORD PTR __Ptr$231226[ebp]
  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  00122	8b 45 e4	 mov	 eax, DWORD PTR __Size$231233[ebp]
  00125	6b c0 68	 imul	 eax, 104		; 00000068H
  00128	03 45 e8	 add	 eax, DWORD PTR __Ptr$231226[ebp]
  0012b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  00131	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$231226[ebp]
  00137	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve@3:

; 772  : 			}
; 773  : 		}

  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	99		 cdq
  00018	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  0001d	f7 f9		 idiv	 ecx

; 778  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?capacity@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCustomQuestData@@@std@@QBEIXZ ; std::allocator<CustomQuestData>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UCustomQuestData@@@std@@QBEIXZ ; std::allocator<CustomQuestData>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::max_size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEII@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to@3
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to@3
$LN4@Grow_to@3:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to@3:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to@3

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to@3:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEII@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Grow_to
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXXZ PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen@3:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IBEXXZ ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Xlen
_TEXT	ENDS
PUBLIC	??$_Allocate@UCustomQuestData@@@std@@YAPAUCustomQuestData@@IPAU1@@Z ; std::_Allocate<CustomQuestData>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UCustomQuestData@@@std@@QAEPAUCustomQuestData@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCustomQuestData@@@std@@QAEPAUCustomQuestData@@I@Z PROC ; std::allocator<CustomQuestData>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UCustomQuestData@@@std@@YAPAUCustomQuestData@@IPAU1@@Z ; std::_Allocate<CustomQuestData>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UCustomQuestData@@@std@@QAEPAUCustomQuestData@@I@Z ENDP ; std::allocator<CustomQuestData>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCustomQuestData@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UCustomQuestData@@@std@@QBEIXZ PROC ; std::allocator<CustomQuestData>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 62 27
	76 02		 mov	 DWORD PTR __Count$[ebp], 41297762 ; 02762762H

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size@3
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size@3
$LN3@max_size@3:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UCustomQuestData@@@std@@QBEIXZ ENDP ; std::allocator<CustomQuestData>::max_size
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUCustomQuestMission@@@std@@YAAAUCustomQuestMission@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCustomQuestMission@@@std@@YAAAUCustomQuestMission@@AAU1@@Z PROC ; std::forward<CustomQuestMission &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUCustomQuestMission@@@std@@YAAAUCustomQuestMission@@AAU1@@Z ENDP ; std::forward<CustomQuestMission &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z ; std::allocator<CustomQuestMission>::construct<CustomQuestMission &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUCustomQuestMission@@@std@@YAAAUCustomQuestMission@@AAU1@@Z ; std::forward<CustomQuestMission &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z ; std::allocator<CustomQuestMission>::construct<CustomQuestMission &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUCustomQuestReward@@@std@@YAAAUCustomQuestReward@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCustomQuestReward@@@std@@YAAAUCustomQuestReward@@AAU1@@Z PROC ; std::forward<CustomQuestReward &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUCustomQuestReward@@@std@@YAAAUCustomQuestReward@@AAU1@@Z ENDP ; std::forward<CustomQuestReward &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z ; std::allocator<CustomQuestReward>::construct<CustomQuestReward &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUCustomQuestReward@@@std@@YAAAUCustomQuestReward@@AAU1@@Z ; std::forward<CustomQuestReward &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z ; std::allocator<CustomQuestReward>::construct<CustomQuestReward &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUCustomQuestData@@@std@@YAAAUCustomQuestData@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCustomQuestData@@@std@@YAAAUCustomQuestData@@AAU1@@Z PROC ; std::forward<CustomQuestData &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUCustomQuestData@@@std@@YAAAUCustomQuestData@@AAU1@@Z ENDP ; std::forward<CustomQuestData &>
_TEXT	ENDS
PUBLIC	??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z ; std::allocator<CustomQuestData>::construct<CustomQuestData &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<CustomQuestData>,CustomQuestData,CustomQuestData &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUCustomQuestData@@@std@@YAAAUCustomQuestData@@AAU1@@Z ; std::forward<CustomQuestData &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z ; std::allocator<CustomQuestData>::construct<CustomQuestData &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<CustomQuestData>,CustomQuestData,CustomQuestData &>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *,std::allocator<CustomQuestMission> >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@AAPAUCustomQuestMission@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@@Z
_TEXT	SEGMENT
$T233274 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *,std::allocator<CustomQuestMission> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00009	8d 45 10	 lea	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@AAPAUCustomQuestMission@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233274[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233274[ebp]
  00020	52		 push	 edx
  00021	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0002c	52		 push	 edx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *,std::allocator<CustomQuestMission> >
  00036	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *,std::allocator<CustomQuestMission> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *,std::allocator<CustomQuestReward> >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@AAPAUCustomQuestReward@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@@Z
_TEXT	SEGMENT
$T233277 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *,std::allocator<CustomQuestReward> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00009	8d 45 10	 lea	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@AAPAUCustomQuestReward@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233277[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233277[ebp]
  00020	52		 push	 edx
  00021	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0002c	52		 push	 edx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *,std::allocator<CustomQuestReward> >
  00036	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UCustomQuestData@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestData@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCustomQuestData@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestData@@0@Z PROC ; std::_Ptr_cat<CustomQuestData,CustomQuestData>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UCustomQuestData@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestData@@0@Z ENDP ; std::_Ptr_cat<CustomQuestData,CustomQuestData>
_TEXT	ENDS
PUBLIC	??4CustomQuestData@@QAEAAU0@ABU0@@Z		; CustomQuestData::operator=
PUBLIC	??$move@AAUCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z ; std::move<CustomQuestData &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CustomQuestData *,CustomQuestData *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 68	 add	 eax, 104		; 00000068H
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 68	 add	 ecx, 104		; 00000068H
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 17		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z ; std::move<CustomQuestData &>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00035	e8 00 00 00 00	 call	 ??4CustomQuestData@@QAEAAU0@ABU0@@Z
  0003a	eb cf		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Move@PAUCustomQuestData@@PAU1@@std@@YAPAUCustomQuestData@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CustomQuestData *,CustomQuestData *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UCustomQuestMission@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestMission@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCustomQuestMission@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestMission@@0@Z PROC ; std::_Ptr_cat<CustomQuestMission,CustomQuestMission>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UCustomQuestMission@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestMission@@0@Z ENDP ; std::_Ptr_cat<CustomQuestMission,CustomQuestMission>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@@Z ; std::_Dest_val<std::allocator<CustomQuestMission>,CustomQuestMission>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CustomQuestMission> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 08	 add	 eax, 8
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@@Z ; std::_Dest_val<std::allocator<CustomQuestMission>,CustomQuestMission>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCustomQuestMission@@@std@@@std@@YAXPAUCustomQuestMission@@0AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UCustomQuestReward@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestReward@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCustomQuestReward@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestReward@@0@Z PROC ; std::_Ptr_cat<CustomQuestReward,CustomQuestReward>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UCustomQuestReward@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestReward@@0@Z ENDP ; std::_Ptr_cat<CustomQuestReward,CustomQuestReward>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@@Z ; std::_Dest_val<std::allocator<CustomQuestReward>,CustomQuestReward>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CustomQuestReward> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 14	 add	 eax, 20			; 00000014H
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra@2

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@@Z ; std::_Dest_val<std::allocator<CustomQuestReward>,CustomQuestReward>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCustomQuestReward@@@std@@@std@@YAXPAUCustomQuestReward@@0AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CustomQuestReward> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@@Z ; std::_Dest_val<std::allocator<CustomQuestData>,CustomQuestData>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CustomQuestData> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra@3
$LN2@Destroy_ra@3:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 68	 add	 eax, 104		; 00000068H
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@3:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra@3

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@@Z ; std::_Dest_val<std::allocator<CustomQuestData>,CustomQuestData>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra@3
$LN4@Destroy_ra@3:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UCustomQuestData@@@std@@@std@@YAXPAUCustomQuestData@@0AAV?$allocator@UCustomQuestData@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CustomQuestData> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z ; std::_Uninitialized_move<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Umove<CustomQuestMission *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z ; std::_Uninitialized_move<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Umove<CustomQuestMission *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z ; std::_Uninitialized_move<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Umove@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Umove<CustomQuestReward *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z ; std::_Uninitialized_move<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Umove<CustomQuestReward *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@@Z ; std::_Uninitialized_move<CustomQuestData *,CustomQuestData *,std::allocator<CustomQuestData> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Umove@PAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEPAUCustomQuestData@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEPAUCustomQuestData@@PAU2@00@Z PROC ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Umove<CustomQuestData *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@@Z ; std::_Uninitialized_move<CustomQuestData *,CustomQuestData *,std::allocator<CustomQuestData> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCustomQuestData@@@?$vector@UCustomQuestData@@V?$allocator@UCustomQuestData@@@std@@@std@@IAEPAUCustomQuestData@@PAU2@00@Z ENDP ; std::vector<CustomQuestData,std::allocator<CustomQuestData> >::_Umove<CustomQuestData *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@UCustomQuestData@@@std@@YAPAUCustomQuestData@@IPAU1@@Z
_TEXT	SEGMENT
$T233300 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCustomQuestData@@@std@@YAPAUCustomQuestData@@IPAU1@@Z PROC ; std::_Allocate<CustomQuestData>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate@3

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate@3
$LN4@Allocate@3:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 62 27
	76 02		 cmp	 DWORD PTR __Count$[ebp], 41297762 ; 02762762H
  00026	77 18		 ja	 SHORT $LN1@Allocate@3
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	6b c0 68	 imul	 eax, 104		; 00000068H
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T233300[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T233300[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate@3:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@3:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UCustomQuestData@@@std@@YAPAUCustomQuestData@@IPAU1@@Z ENDP ; std::_Allocate<CustomQuestData>
_TEXT	ENDS
PUBLIC	??4?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator=
PUBLIC	??4?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator=
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CustomQuestData@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_$S1$231466 = -8					; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CustomQuestData@@QAEAAU0@ABU0@@Z PROC		; CustomQuestData::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	89 10		 mov	 DWORD PTR [eax], edx
  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _$S1$231466[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN3@operator
$LN2@operator:
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _$S1$231466[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _$S1$231466[ebp], eax
$LN3@operator:
  00028	83 7d f8 19	 cmp	 DWORD PTR _$S1$231466[ebp], 25 ; 00000019H
  0002c	73 14		 jae	 SHORT $LN1@operator
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	03 45 f8	 add	 eax, DWORD PTR _$S1$231466[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00037	03 4d f8	 add	 ecx, DWORD PTR _$S1$231466[ebp]
  0003a	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  0003d	88 50 04	 mov	 BYTE PTR [eax+4], dl
  00040	eb dd		 jmp	 SHORT $LN2@operator
$LN1@operator:
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00048	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0004b	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00054	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00057	89 50 24	 mov	 DWORD PTR [eax+36], edx
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00060	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00063	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0006c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0006f	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00078	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0007b	89 50 30	 mov	 DWORD PTR [eax+48], edx
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00084	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00087	89 50 34	 mov	 DWORD PTR [eax+52], edx
  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00090	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00093	89 50 38	 mov	 DWORD PTR [eax+56], edx
  00096	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0009c	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0009f	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  000a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000a8	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  000ab	89 50 40	 mov	 DWORD PTR [eax+64], edx
  000ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000b4	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000b7	89 50 44	 mov	 DWORD PTR [eax+68], edx
  000ba	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  000bd	83 c0 48	 add	 eax, 72			; 00000048H
  000c0	50		 push	 eax
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	83 c1 48	 add	 ecx, 72			; 00000048H
  000c7	e8 00 00 00 00	 call	 ??4?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator=
  000cc	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  000cf	83 c0 58	 add	 eax, 88			; 00000058H
  000d2	50		 push	 eax
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	83 c1 58	 add	 ecx, 88			; 00000058H
  000d9	e8 00 00 00 00	 call	 ??4?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator=
  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
??4CustomQuestData@@QAEAAU0@ABU0@@Z ENDP		; CustomQuestData::operator=
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Ucopy<CustomQuestMission *>
PUBLIC	??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z ; std::_Copy_impl<CustomQuestMission *,CustomQuestMission *>
PUBLIC	?clear@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::clear
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??4?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Ptr$231486 = -12					; size = 4
__Ptr$231476 = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator=, COMDAT
; _this$ = ecx

; 709  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 710  : 		if (this != &_Right)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	3b 45 08	 cmp	 eax, DWORD PTR __Right$[ebp]
  00012	0f 84 5c 01 00
	00		 je	 $LN9@operator@2

; 711  : 			{	// worth doing
; 712  : 			this->_Orphan_all();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 713  : 
; 714  : 			if (_Right.size() == 0)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00023	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  00028	85 c0		 test	 eax, eax
  0002a	75 0d		 jne	 SHORT $LN8@operator@2

; 715  : 				clear();	// new sequence empty, erase existing sequence

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?clear@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::clear
  00034	e9 3b 01 00 00	 jmp	 $LN9@operator@2
$LN8@operator@2:

; 716  : 			else if (_Right.size() <= size())

  00039	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003c	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  00041	8b f0		 mov	 esi, eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  0004b	3b f0		 cmp	 esi, eax
  0004d	77 4c		 ja	 SHORT $LN6@operator@2

; 717  : 				{	// enough elements, copy new and destroy old
; 718  : 				pointer _Ptr = _STD _Copy_impl(_Right._Myfirst, _Right._Mylast,
; 719  : 					this->_Myfirst);	// copy new

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	51		 push	 ecx
  00055	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00058	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005b	50		 push	 eax
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z ; std::_Copy_impl<CustomQuestMission *,CustomQuestMission *>
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	89 45 f8	 mov	 DWORD PTR __Ptr$231476[ebp], eax

; 720  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00073	51		 push	 ecx
  00074	8b 55 f8	 mov	 edx, DWORD PTR __Ptr$231476[ebp]
  00077	52		 push	 edx
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXPAUCustomQuestMission@@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Destroy

; 721  : 				this->_Mylast = this->_Myfirst + _Right.size();

  00080	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00083	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008d	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00096	e9 d9 00 00 00	 jmp	 $LN9@operator@2
$LN6@operator@2:

; 722  : 				}
; 723  : 			else if (_Right.size() <= capacity())

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0009e	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  000a3	8b f0		 mov	 esi, eax
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::capacity
  000ad	3b f0		 cmp	 esi, eax
  000af	77 4d		 ja	 SHORT $LN4@operator@2

; 724  : 				{	// enough room, copy and construct new
; 725  : 				pointer _Ptr = _Right._Myfirst + size();

  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  000bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000be	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  000c1	89 45 f4	 mov	 DWORD PTR __Ptr$231486[ebp], eax

; 726  : 				_STD _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	51		 push	 ecx
  000ca	8b 55 f4	 mov	 edx, DWORD PTR __Ptr$231486[ebp]
  000cd	52		 push	 edx
  000ce	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  000d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z ; std::_Copy_impl<CustomQuestMission *,CustomQuestMission *>
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 727  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e2	51		 push	 ecx
  000e3	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  000e6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e9	50		 push	 eax
  000ea	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$231486[ebp]
  000ed	51		 push	 ecx
  000ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	e8 00 00 00 00	 call	 ??$_Ucopy@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Ucopy<CustomQuestMission *>
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 728  : 				}
; 729  : 			else

  000fc	eb 76		 jmp	 SHORT $LN9@operator@2
$LN4@operator@2:

; 730  : 				{	// not enough room, allocate new array and construct new
; 731  : 				if (this->_Myfirst != 0)

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00101	83 38 00	 cmp	 DWORD PTR [eax], 0
  00104	74 35		 je	 SHORT $LN2@operator@2

; 732  : 					{	// discard old array
; 733  : 					_Destroy(this->_Myfirst, this->_Mylast);

  00106	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010c	51		 push	 ecx
  0010d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00110	8b 02		 mov	 eax, DWORD PTR [edx]
  00112	50		 push	 eax
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXPAUCustomQuestMission@@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Destroy

; 734  : 					this->_Alval.deallocate(this->_Myfirst,
; 735  : 						this->_Myend - this->_Myfirst);

  0011b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00124	2b 11		 sub	 edx, DWORD PTR [ecx]
  00126	c1 fa 03	 sar	 edx, 3
  00129	52		 push	 edx
  0012a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012f	51		 push	 ecx
  00130	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00133	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00136	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@I@Z ; std::allocator<CustomQuestMission>::deallocate
$LN2@operator@2:

; 736  : 					}
; 737  : 				if (_Buy(_Right.size()))

  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0013e	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::size
  00143	50		 push	 eax
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	e8 00 00 00 00	 call	 ?_Buy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAE_NI@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Buy
  0014c	0f b6 c0	 movzx	 eax, al
  0014f	85 c0		 test	 eax, eax
  00151	74 21		 je	 SHORT $LN9@operator@2

; 738  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 739  : 						this->_Myfirst);

  00153	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00156	8b 08		 mov	 ecx, DWORD PTR [eax]
  00158	51		 push	 ecx
  00159	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0015c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0015f	50		 push	 eax
  00160	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00163	8b 11		 mov	 edx, DWORD PTR [ecx]
  00165	52		 push	 edx
  00166	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00169	e8 00 00 00 00	 call	 ??$_Ucopy@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Ucopy<CustomQuestMission *>
  0016e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00171	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN9@operator@2:

; 740  : 				}
; 741  : 			}
; 742  : 		return (*this);

  00174	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 743  : 		}

  00177	5f		 pop	 edi
  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 04 00	 ret	 4
??4?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::operator=
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Ucopy<CustomQuestReward *>
PUBLIC	??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z ; std::_Copy_impl<CustomQuestReward *,CustomQuestReward *>
PUBLIC	?clear@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::clear
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Ptr$231511 = -12					; size = 4
__Ptr$231501 = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator=, COMDAT
; _this$ = ecx

; 709  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 710  : 		if (this != &_Right)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	3b 45 08	 cmp	 eax, DWORD PTR __Right$[ebp]
  00012	0f 84 61 01 00
	00		 je	 $LN9@operator@3

; 711  : 			{	// worth doing
; 712  : 			this->_Orphan_all();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 713  : 
; 714  : 			if (_Right.size() == 0)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00023	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  00028	85 c0		 test	 eax, eax
  0002a	75 0d		 jne	 SHORT $LN8@operator@3

; 715  : 				clear();	// new sequence empty, erase existing sequence

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?clear@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::clear
  00034	e9 40 01 00 00	 jmp	 $LN9@operator@3
$LN8@operator@3:

; 716  : 			else if (_Right.size() <= size())

  00039	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003c	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  00041	8b f0		 mov	 esi, eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  0004b	3b f0		 cmp	 esi, eax
  0004d	77 4c		 ja	 SHORT $LN6@operator@3

; 717  : 				{	// enough elements, copy new and destroy old
; 718  : 				pointer _Ptr = _STD _Copy_impl(_Right._Myfirst, _Right._Mylast,
; 719  : 					this->_Myfirst);	// copy new

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	51		 push	 ecx
  00055	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00058	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005b	50		 push	 eax
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z ; std::_Copy_impl<CustomQuestReward *,CustomQuestReward *>
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	89 45 f8	 mov	 DWORD PTR __Ptr$231501[ebp], eax

; 720  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00073	51		 push	 ecx
  00074	8b 55 f8	 mov	 edx, DWORD PTR __Ptr$231501[ebp]
  00077	52		 push	 edx
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXPAUCustomQuestReward@@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Destroy

; 721  : 				this->_Mylast = this->_Myfirst + _Right.size();

  00080	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00083	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  00088	6b c0 14	 imul	 eax, 20			; 00000014H
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	03 01		 add	 eax, DWORD PTR [ecx]
  00090	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00093	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00096	e9 de 00 00 00	 jmp	 $LN9@operator@3
$LN6@operator@3:

; 722  : 				}
; 723  : 			else if (_Right.size() <= capacity())

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0009e	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  000a3	8b f0		 mov	 esi, eax
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	e8 00 00 00 00	 call	 ?capacity@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::capacity
  000ad	3b f0		 cmp	 esi, eax
  000af	77 4d		 ja	 SHORT $LN4@operator@3

; 724  : 				{	// enough room, copy and construct new
; 725  : 				pointer _Ptr = _Right._Myfirst + size();

  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  000b9	6b c0 14	 imul	 eax, 20			; 00000014H
  000bc	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  000bf	03 01		 add	 eax, DWORD PTR [ecx]
  000c1	89 45 f4	 mov	 DWORD PTR __Ptr$231511[ebp], eax

; 726  : 				_STD _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	51		 push	 ecx
  000ca	8b 55 f4	 mov	 edx, DWORD PTR __Ptr$231511[ebp]
  000cd	52		 push	 edx
  000ce	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  000d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z ; std::_Copy_impl<CustomQuestReward *,CustomQuestReward *>
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 727  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e2	51		 push	 ecx
  000e3	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  000e6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e9	50		 push	 eax
  000ea	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$231511[ebp]
  000ed	51		 push	 ecx
  000ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	e8 00 00 00 00	 call	 ??$_Ucopy@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Ucopy<CustomQuestReward *>
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 728  : 				}
; 729  : 			else

  000fc	eb 7b		 jmp	 SHORT $LN9@operator@3
$LN4@operator@3:

; 730  : 				{	// not enough room, allocate new array and construct new
; 731  : 				if (this->_Myfirst != 0)

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00101	83 38 00	 cmp	 DWORD PTR [eax], 0
  00104	74 3a		 je	 SHORT $LN2@operator@3

; 732  : 					{	// discard old array
; 733  : 					_Destroy(this->_Myfirst, this->_Mylast);

  00106	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010c	51		 push	 ecx
  0010d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00110	8b 02		 mov	 eax, DWORD PTR [edx]
  00112	50		 push	 eax
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXPAUCustomQuestReward@@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Destroy

; 734  : 					this->_Alval.deallocate(this->_Myfirst,
; 735  : 						this->_Myend - this->_Myfirst);

  0011b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00124	2b 01		 sub	 eax, DWORD PTR [ecx]
  00126	99		 cdq
  00127	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0012c	f7 f9		 idiv	 ecx
  0012e	50		 push	 eax
  0012f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00132	8b 02		 mov	 eax, DWORD PTR [edx]
  00134	50		 push	 eax
  00135	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0013b	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@I@Z ; std::allocator<CustomQuestReward>::deallocate
$LN2@operator@3:

; 736  : 					}
; 737  : 				if (_Buy(_Right.size()))

  00140	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00143	e8 00 00 00 00	 call	 ?size@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBEIXZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::size
  00148	50		 push	 eax
  00149	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAE_NI@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Buy
  00151	0f b6 c0	 movzx	 eax, al
  00154	85 c0		 test	 eax, eax
  00156	74 21		 je	 SHORT $LN9@operator@3

; 738  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 739  : 						this->_Myfirst);

  00158	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	51		 push	 ecx
  0015e	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00161	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00164	50		 push	 eax
  00165	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00168	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016a	52		 push	 edx
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	e8 00 00 00 00	 call	 ??$_Ucopy@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Ucopy<CustomQuestReward *>
  00173	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00176	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN9@operator@3:

; 740  : 				}
; 741  : 			}
; 742  : 		return (*this);

  00179	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 743  : 		}

  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 04 00	 ret	 4
??4?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::operator=
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::erase
PUBLIC	?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::begin
PUBLIC	?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T233309 = -88						; size = 4
$T233310 = -84						; size = 4
$T233311 = -80						; size = 4
$T233312 = -76						; size = 4
$T233313 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXXZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T233310[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T233309[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T233312[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T233311[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T233309[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T233311[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T233313[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAEXXZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::clear
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::erase
PUBLIC	?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::begin
PUBLIC	?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T233316 = -88						; size = 4
$T233317 = -84						; size = 4
$T233318 = -80						; size = 4
$T233319 = -76						; size = 4
$T233320 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXXZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T233317[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T233316[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T233319[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T233318[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T233316[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T233318[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T233320[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAEXXZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::end
_TEXT	ENDS
PUBLIC	??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z ; std::_Move<CustomQuestMission *,CustomQuestMission *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T233327 = -84						; size = 4
__Ptr$231654 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@0@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z ; std::_Move<CustomQuestMission *,CustomQuestMission *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$231654[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$231654[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEXPAUCustomQuestMission@@0@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$231654[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T233327[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T233327[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@@Z ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@0@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@XZ ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::end
_TEXT	ENDS
PUBLIC	??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z ; std::_Move<CustomQuestReward *,CustomQuestReward *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T233334 = -84						; size = 4
__Ptr$231696 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@0@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase@3

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z ; std::_Move<CustomQuestReward *,CustomQuestReward *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$231696[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$231696[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEXPAUCustomQuestReward@@0@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$231696[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase@3:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T233334[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T233334[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@@Z ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@0@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@2@@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Make_iter
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@2@@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Make_iter
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator!=
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAE@PAUCustomQuestMission@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Vector_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAE@PAUCustomQuestReward@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Vector_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator==
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::_Compat
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::_Compat
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T233357 = -88						; size = 4
$T233358 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z PROC ; std::allocator<CustomQuestMission>::construct<CustomQuestMission &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 08		 push	 8
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T233358[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T233358[ebp], 0
  00047	74 21		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUCustomQuestMission@@@std@@YAAAUCustomQuestMission@@AAU1@@Z ; std::forward<CustomQuestMission &>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005a	8b 4d ac	 mov	 ecx, DWORD PTR $T233358[ebp]
  0005d	89 11		 mov	 DWORD PTR [ecx], edx
  0005f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00062	8b 55 ac	 mov	 edx, DWORD PTR $T233358[ebp]
  00065	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00068	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0006a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  00071	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00074	89 45 a8	 mov	 DWORD PTR $T233357[ebp], eax
  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T233358[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUCustomQuestMission@@@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@AAU2@@Z ENDP ; std::allocator<CustomQuestMission>::construct<CustomQuestMission &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T233374 = -88						; size = 4
$T233375 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z PROC ; std::allocator<CustomQuestReward>::construct<CustomQuestReward &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 14		 push	 20			; 00000014H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T233375[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T233375[ebp], 0
  00047	74 33		 je	 SHORT $LN3@construct@2
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUCustomQuestReward@@@std@@YAAAUCustomQuestReward@@AAU1@@Z ; std::forward<CustomQuestReward &>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 ac	 mov	 edx, DWORD PTR $T233375[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	89 0a		 mov	 DWORD PTR [edx], ecx
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00068	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006b	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0006e	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00071	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00074	8b 4d ac	 mov	 ecx, DWORD PTR $T233375[ebp]
  00077	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  0007a	eb 07		 jmp	 SHORT $LN4@construct@2
$LN3@construct@2:
  0007c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@2:
  00083	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00086	89 55 a8	 mov	 DWORD PTR $T233374[ebp], edx
  00089	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T233375[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUCustomQuestReward@@@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@AAU2@@Z ENDP ; std::allocator<CustomQuestReward>::construct<CustomQuestReward &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z
_TEXT	SEGMENT
tv76 = -92						; size = 4
$T233387 = -88						; size = 4
$T233388 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z PROC ; std::allocator<CustomQuestData>::construct<CustomQuestData &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 68		 push	 104			; 00000068H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T233388[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T233388[ebp], 0
  00047	74 1a		 je	 SHORT $LN3@construct@3
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUCustomQuestData@@@std@@YAAAUCustomQuestData@@AAU1@@Z ; std::forward<CustomQuestData &>
  00052	83 c4 04	 add	 esp, 4
  00055	50		 push	 eax
  00056	8b 4d ac	 mov	 ecx, DWORD PTR $T233388[ebp]
  00059	e8 00 00 00 00	 call	 ??0CustomQuestData@@QAE@ABU0@@Z
  0005e	89 45 a4	 mov	 DWORD PTR tv76[ebp], eax
  00061	eb 07		 jmp	 SHORT $LN4@construct@3
$LN3@construct@3:
  00063	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@construct@3:
  0006a	8b 55 a4	 mov	 edx, DWORD PTR tv76[ebp]
  0006d	89 55 a8	 mov	 DWORD PTR $T233387[ebp], edx
  00070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T233388[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUCustomQuestData@@@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@AAU2@@Z ENDP ; std::allocator<CustomQuestData>::construct<CustomQuestData &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@AAPAUCustomQuestMission@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@AAPAUCustomQuestMission@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@AAPAUCustomQuestMission@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@ABU2@@Z ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission const &>
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEABUCustomQuestMission@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator++
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -88						; size = 4
tv83 = -85						; size = 1
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *,std::allocator<CustomQuestMission> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 48	 sub	 esp, 72			; 00000048H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 373  : 
; 374  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 11		 jmp	 SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 08	 add	 eax, 8
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00047	e8 00 00 00 00	 call	 ??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator++
$LN6@Uninit_cop:
  0004c	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0004f	50		 push	 eax
  00050	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00053	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator!=
  00058	88 45 ab	 mov	 BYTE PTR tv83[ebp], al
  0005b	0f b6 4d ab	 movzx	 ecx, BYTE PTR tv83[ebp]
  0005f	85 c9		 test	 ecx, ecx
  00061	74 21		 je	 SHORT $LN4@Uninit_cop

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00063	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00066	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEABUCustomQuestMission@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator*
  0006b	89 45 a8	 mov	 DWORD PTR tv84[ebp], eax
  0006e	8b 45 a8	 mov	 eax, DWORD PTR tv84[ebp]
  00071	50		 push	 eax
  00072	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00075	51		 push	 ecx
  00076	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@ABU2@@Z ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission const &>
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	eb b7		 jmp	 SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
  00084	eb 3b		 jmp	 SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL

  00086	eb 09		 jmp	 SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:

; 378  : 	for (; _Next != _Dest; ++_Next)

  00088	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0008b	83 c0 08	 add	 eax, 8
  0008e	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
  00091	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00094	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  00097	74 12		 je	 SHORT $LN1@Uninit_cop

; 379  : 		_Dest_val(_Al, _Next);

  00099	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@@Z ; std::_Dest_val<std::allocator<CustomQuestMission>,CustomQuestMission>
  000a6	83 c4 08	 add	 esp, 8
  000a9	eb dd		 jmp	 SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 380  : 	_RERAISE;

  000ab	6a 00		 push	 0
  000ad	6a 00		 push	 0
  000af	e8 00 00 00 00	 call	 __CxxThrowException@8

; 381  : 	_CATCH_END

  000b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000bb	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000c0	c3		 ret	 0
$LN10@Uninit_cop:
  000c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 382  : 	return (_Dest);

  000c8	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 383  : 	}

  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@PAUCustomQuestMission@@V?$allocator@UCustomQuestMission@@@2@@std@@YAPAUCustomQuestMission@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >,CustomQuestMission *,std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@AAPAUCustomQuestReward@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@AAPAUCustomQuestReward@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@AAPAUCustomQuestReward@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@ABU2@@Z ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward const &>
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEABUCustomQuestReward@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator++
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -88						; size = 4
tv83 = -85						; size = 1
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *,std::allocator<CustomQuestReward> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 48	 sub	 esp, 72			; 00000048H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 373  : 
; 374  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 11		 jmp	 SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 14	 add	 eax, 20			; 00000014H
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00047	e8 00 00 00 00	 call	 ??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator++
$LN6@Uninit_cop@2:
  0004c	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0004f	50		 push	 eax
  00050	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00053	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator!=
  00058	88 45 ab	 mov	 BYTE PTR tv83[ebp], al
  0005b	0f b6 4d ab	 movzx	 ecx, BYTE PTR tv83[ebp]
  0005f	85 c9		 test	 ecx, ecx
  00061	74 21		 je	 SHORT $LN4@Uninit_cop@2

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00063	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00066	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEABUCustomQuestReward@@XZ ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator*
  0006b	89 45 a8	 mov	 DWORD PTR tv84[ebp], eax
  0006e	8b 45 a8	 mov	 eax, DWORD PTR tv84[ebp]
  00071	50		 push	 eax
  00072	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00075	51		 push	 ecx
  00076	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@ABU2@@Z ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward const &>
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	eb b7		 jmp	 SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
  00084	eb 3b		 jmp	 SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL

  00086	eb 09		 jmp	 SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:

; 378  : 	for (; _Next != _Dest; ++_Next)

  00088	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0008b	83 c0 14	 add	 eax, 20			; 00000014H
  0008e	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@2:
  00091	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00094	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  00097	74 12		 je	 SHORT $LN1@Uninit_cop@2

; 379  : 		_Dest_val(_Al, _Next);

  00099	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@@Z ; std::_Dest_val<std::allocator<CustomQuestReward>,CustomQuestReward>
  000a6	83 c4 08	 add	 esp, 8
  000a9	eb dd		 jmp	 SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 380  : 	_RERAISE;

  000ab	6a 00		 push	 0
  000ad	6a 00		 push	 0
  000af	e8 00 00 00 00	 call	 __CxxThrowException@8

; 381  : 	_CATCH_END

  000b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000bb	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000c0	c3		 ret	 0
$LN10@Uninit_cop@2:
  000c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 382  : 	return (_Dest);

  000c8	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 383  : 	}

  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@PAUCustomQuestReward@@V?$allocator@UCustomQuestReward@@@2@@std@@YAPAUCustomQuestReward@@V?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@0@0PAU1@AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >,CustomQuestReward *,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z PROC ; std::move<CustomQuestData &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z ENDP ; std::move<CustomQuestData &>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@@Z ; std::allocator<CustomQuestMission>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@@Z PROC ; std::_Dest_val<std::allocator<CustomQuestMission>,CustomQuestMission>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@@Z ; std::allocator<CustomQuestMission>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@@Z ENDP ; std::_Dest_val<std::allocator<CustomQuestMission>,CustomQuestMission>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@@Z ; std::allocator<CustomQuestReward>::destroy
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Dest_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@@Z PROC ; std::_Dest_val<std::allocator<CustomQuestReward>,CustomQuestReward>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@@Z ; std::allocator<CustomQuestReward>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@@Z ENDP ; std::_Dest_val<std::allocator<CustomQuestReward>,CustomQuestReward>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@@Z ; std::allocator<CustomQuestData>::destroy
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Dest_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@@Z PROC ; std::_Dest_val<std::allocator<CustomQuestData>,CustomQuestData>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@@Z ; std::allocator<CustomQuestData>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@@Z ENDP ; std::_Dest_val<std::allocator<CustomQuestData>,CustomQuestData>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission>,CustomQuestMission>
PUBLIC	??$_Val_type@PAUCustomQuestMission@@@std@@YAPAUCustomQuestMission@@PAU1@@Z ; std::_Val_type<CustomQuestMission *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z
_TEXT	SEGMENT
$T233442 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z PROC ; std::_Uninitialized_move<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestMission@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestMission@@0@Z ; std::_Ptr_cat<CustomQuestMission,CustomQuestMission>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233442[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233442[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUCustomQuestMission@@@std@@YAPAUCustomQuestMission@@PAU1@@Z ; std::_Val_type<CustomQuestMission *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission>,CustomQuestMission>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z ENDP ; std::_Uninitialized_move<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward>,CustomQuestReward>
PUBLIC	??$_Val_type@PAUCustomQuestReward@@@std@@YAPAUCustomQuestReward@@PAU1@@Z ; std::_Val_type<CustomQuestReward *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Uninitialized_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z
_TEXT	SEGMENT
$T233445 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z PROC ; std::_Uninitialized_move<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestReward@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestReward@@0@Z ; std::_Ptr_cat<CustomQuestReward,CustomQuestReward>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233445[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233445[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUCustomQuestReward@@@std@@YAPAUCustomQuestReward@@PAU1@@Z ; std::_Val_type<CustomQuestReward *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward>,CustomQuestReward>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z ENDP ; std::_Uninitialized_move<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CustomQuestData *,CustomQuestData *,std::allocator<CustomQuestData>,CustomQuestData>
PUBLIC	??$_Val_type@PAUCustomQuestData@@@std@@YAPAUCustomQuestData@@PAU1@@Z ; std::_Val_type<CustomQuestData *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Uninitialized_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@@Z
_TEXT	SEGMENT
$T233448 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@@Z PROC ; std::_Uninitialized_move<CustomQuestData *,CustomQuestData *,std::allocator<CustomQuestData> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestData@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestData@@0@Z ; std::_Ptr_cat<CustomQuestData,CustomQuestData>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233448[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233448[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUCustomQuestData@@@std@@YAPAUCustomQuestData@@PAU1@@Z ; std::_Val_type<CustomQuestData *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CustomQuestData *,CustomQuestData *,std::allocator<CustomQuestData>,CustomQuestData>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@@Z ENDP ; std::_Uninitialized_move<CustomQuestData *,CustomQuestData *,std::allocator<CustomQuestData> >
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<CustomQuestMission *,CustomQuestMission *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z
_TEXT	SEGMENT
$T233451 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z PROC ; std::_Copy_impl<CustomQuestMission *,CustomQuestMission *>, COMDAT

; 2163 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2164 : 	return (_Copy_impl(_First, _Last,
; 2165 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestMission@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestMission@@0@Z ; std::_Ptr_cat<CustomQuestMission,CustomQuestMission>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233451[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233451[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<CustomQuestMission *,CustomQuestMission *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2166 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z ENDP ; std::_Copy_impl<CustomQuestMission *,CustomQuestMission *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z ; std::_Uninitialized_copy<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z PROC ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Ucopy<CustomQuestMission *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z ; std::_Uninitialized_copy<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1319 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUCustomQuestMission@@@?$vector@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@IAEPAUCustomQuestMission@@PAU2@00@Z ENDP ; std::vector<CustomQuestMission,std::allocator<CustomQuestMission> >::_Ucopy<CustomQuestMission *>
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<CustomQuestReward *,CustomQuestReward *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z
_TEXT	SEGMENT
$T233456 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z PROC ; std::_Copy_impl<CustomQuestReward *,CustomQuestReward *>, COMDAT

; 2163 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2164 : 	return (_Copy_impl(_First, _Last,
; 2165 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestReward@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestReward@@0@Z ; std::_Ptr_cat<CustomQuestReward,CustomQuestReward>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233456[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233456[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<CustomQuestReward *,CustomQuestReward *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2166 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z ENDP ; std::_Copy_impl<CustomQuestReward *,CustomQuestReward *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z ; std::_Uninitialized_copy<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z PROC ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Ucopy<CustomQuestReward *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z ; std::_Uninitialized_copy<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1319 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUCustomQuestReward@@@?$vector@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@IAEPAUCustomQuestReward@@PAU2@00@Z ENDP ; std::vector<CustomQuestReward,std::allocator<CustomQuestReward> >::_Ucopy<CustomQuestReward *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CustomQuestMission *,CustomQuestMission *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z
_TEXT	SEGMENT
$T233461 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z PROC ; std::_Move<CustomQuestMission *,CustomQuestMission *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestMission@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestMission@@0@Z ; std::_Ptr_cat<CustomQuestMission,CustomQuestMission>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233461[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233461[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CustomQuestMission *,CustomQuestMission *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00@Z ENDP ; std::_Move<CustomQuestMission *,CustomQuestMission *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CustomQuestReward *,CustomQuestReward *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z
_TEXT	SEGMENT
$T233464 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z PROC ; std::_Move<CustomQuestReward *,CustomQuestReward *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestReward@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestReward@@0@Z ; std::_Ptr_cat<CustomQuestReward,CustomQuestReward>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233464[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233464[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<CustomQuestReward *,CustomQuestReward *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00@Z ENDP ; std::_Move<CustomQuestReward *,CustomQuestReward *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UCustomQuestMission@@@std@@YAXPAUCustomQuestMission@@@Z ; std::_Destroy<CustomQuestMission>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@@Z PROC ; std::allocator<CustomQuestMission>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UCustomQuestMission@@@std@@YAXPAUCustomQuestMission@@@Z ; std::_Destroy<CustomQuestMission>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@@Z ENDP ; std::allocator<CustomQuestMission>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UCustomQuestReward@@@std@@YAXPAUCustomQuestReward@@@Z ; std::_Destroy<CustomQuestReward>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@@Z PROC ; std::allocator<CustomQuestReward>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UCustomQuestReward@@@std@@YAXPAUCustomQuestReward@@@Z ; std::_Destroy<CustomQuestReward>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@@Z ENDP ; std::allocator<CustomQuestReward>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UCustomQuestData@@@std@@YAXPAUCustomQuestData@@@Z ; std::_Destroy<CustomQuestData>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@@Z PROC ; std::allocator<CustomQuestData>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UCustomQuestData@@@std@@YAXPAUCustomQuestData@@@Z ; std::_Destroy<CustomQuestData>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@@Z ENDP ; std::allocator<CustomQuestData>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEABUCustomQuestMission@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEABUCustomQuestMission@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator*, COMDAT
; _this$ = ecx

; 63   : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@operator@4:

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);

  0000c	33 c0		 xor	 eax, eax
  0000e	75 fc		 jne	 SHORT $LN2@operator@4

; 83   : 
; 84   : 		return (*this->_Ptr);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]

; 85   : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QBEABUCustomQuestMission@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator*
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	83 c1 08	 add	 ecx, 8
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx

; 111  : 		return (*this);

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 112  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestMission@@V?$allocator@UCustomQuestMission@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestMission,std::allocator<CustomQuestMission> > >::operator++
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEABUCustomQuestReward@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEABUCustomQuestReward@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator*, COMDAT
; _this$ = ecx

; 63   : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@operator@5:

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);

  0000c	33 c0		 xor	 eax, eax
  0000e	75 fc		 jne	 SHORT $LN2@operator@5

; 83   : 
; 84   : 		return (*this->_Ptr);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]

; 85   : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QBEABUCustomQuestReward@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator*
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	83 c1 14	 add	 ecx, 20			; 00000014H
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx

; 111  : 		return (*this);

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 112  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UCustomQuestReward@@V?$allocator@UCustomQuestReward@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<CustomQuestReward,std::allocator<CustomQuestReward> > >::operator++
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@ABU3@@Z ; std::allocator<CustomQuestMission>::construct
PUBLIC	??$forward@ABUCustomQuestMission@@@std@@YAABUCustomQuestMission@@ABU1@@Z ; std::forward<CustomQuestMission const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUCustomQuestMission@@@std@@YAABUCustomQuestMission@@ABU1@@Z ; std::forward<CustomQuestMission const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@ABU3@@Z ; std::allocator<CustomQuestMission>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission const &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@ABU3@@Z ; std::allocator<CustomQuestReward>::construct
PUBLIC	??$forward@ABUCustomQuestReward@@@std@@YAABUCustomQuestReward@@ABU1@@Z ; std::forward<CustomQuestReward const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUCustomQuestReward@@@std@@YAABUCustomQuestReward@@ABU1@@Z ; std::forward<CustomQuestReward const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@ABU3@@Z ; std::allocator<CustomQuestReward>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@ABU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUCustomQuestMission@@@std@@YAPAUCustomQuestMission@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCustomQuestMission@@@std@@YAPAUCustomQuestMission@@PAU1@@Z PROC ; std::_Val_type<CustomQuestMission *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUCustomQuestMission@@@std@@YAPAUCustomQuestMission@@PAU1@@Z ENDP ; std::_Val_type<CustomQuestMission *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@U3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission>,CustomQuestMission>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 08	 add	 eax, 8
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 08	 add	 ecx, 8
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@U3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 08	 add	 eax, 8
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@@Z ; std::_Dest_val<std::allocator<CustomQuestMission>,CustomQuestMission>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@U1@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission>,CustomQuestMission>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUCustomQuestReward@@@std@@YAPAUCustomQuestReward@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCustomQuestReward@@@std@@YAPAUCustomQuestReward@@PAU1@@Z PROC ; std::_Val_type<CustomQuestReward *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUCustomQuestReward@@@std@@YAPAUCustomQuestReward@@PAU1@@Z ENDP ; std::_Val_type<CustomQuestReward *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@U3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward>,CustomQuestReward>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov@2
$LN5@Uninit_mov@2:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 14	 add	 eax, 20			; 00000014H
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 14	 add	 ecx, 20			; 00000014H
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov@2:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov@2

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@U3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov@2
$LN4@Uninit_mov@2:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov@2
__catch$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov@2
$LN2@Uninit_mov@2:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 14	 add	 eax, 20			; 00000014H
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov@2:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov@2

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@@Z ; std::_Dest_val<std::allocator<CustomQuestReward>,CustomQuestReward>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov@2
$LN1@Uninit_mov@2:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov@2:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov@2:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@U1@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward>,CustomQuestReward>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUCustomQuestData@@@std@@YAPAUCustomQuestData@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCustomQuestData@@@std@@YAPAUCustomQuestData@@PAU1@@Z PROC ; std::_Val_type<CustomQuestData *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUCustomQuestData@@@std@@YAPAUCustomQuestData@@PAU1@@Z ENDP ; std::_Val_type<CustomQuestData *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@U3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestData>,CustomQuestData,CustomQuestData>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CustomQuestData *,CustomQuestData *,std::allocator<CustomQuestData>,CustomQuestData>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov@3
$LN5@Uninit_mov@3:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 68	 add	 eax, 104		; 00000068H
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 68	 add	 ecx, 104		; 00000068H
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov@3:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov@3

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@U3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@$$QAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestData>,CustomQuestData,CustomQuestData>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov@3
$LN4@Uninit_mov@3:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov@3
__catch$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov@3
$LN2@Uninit_mov@3:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 68	 add	 eax, 104		; 00000068H
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov@3:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov@3

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@@Z ; std::_Dest_val<std::allocator<CustomQuestData>,CustomQuestData>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov@3
$LN1@Uninit_mov@3:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov@3:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov@3:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUCustomQuestData@@PAU1@V?$allocator@UCustomQuestData@@@std@@U1@@std@@YAPAUCustomQuestData@@PAU1@00AAV?$allocator@UCustomQuestData@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CustomQuestData *,CustomQuestData *,std::allocator<CustomQuestData>,CustomQuestData>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<CustomQuestMission *,CustomQuestMission *>, COMDAT

; 2142 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Copy_impl
$LN2@Copy_impl:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 08	 add	 eax, 8
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 08	 add	 ecx, 8
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Copy_impl:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 12		 je	 SHORT $LN1@Copy_impl

; 2144 : 		*_Dest = *_First;

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx
  00032	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00035	eb d4		 jmp	 SHORT $LN2@Copy_impl
$LN1@Copy_impl:

; 2145 : 	return (_Dest);

  00037	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2146 : 	}

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$_Copy_impl@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<CustomQuestMission *,CustomQuestMission *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z
_TEXT	SEGMENT
$T233538 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z PROC ; std::_Uninitialized_copy<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestMission@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestMission@@0@Z ; std::_Ptr_cat<CustomQuestMission,CustomQuestMission>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233538[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233538[ebp]
  00020	52		 push	 edx
  00021	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0002c	52		 push	 edx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >
  00036	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Uninitialized_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@@Z ENDP ; std::_Uninitialized_copy<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<CustomQuestReward *,CustomQuestReward *>, COMDAT

; 2142 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Copy_impl@2
$LN2@Copy_impl@2:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 14	 add	 eax, 20			; 00000014H
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 14	 add	 ecx, 20			; 00000014H
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Copy_impl@2:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 24		 je	 SHORT $LN1@Copy_impl@2

; 2144 : 		*_Dest = *_First;

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	89 11		 mov	 DWORD PTR [ecx], edx
  0002f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00032	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00035	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00038	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0003b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0003e	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00041	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00044	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00047	eb c2		 jmp	 SHORT $LN2@Copy_impl@2
$LN1@Copy_impl@2:

; 2145 : 	return (_Dest);

  00049	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2146 : 	}

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$_Copy_impl@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<CustomQuestReward *,CustomQuestReward *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z
_TEXT	SEGMENT
$T233543 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z PROC ; std::_Uninitialized_copy<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UCustomQuestReward@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCustomQuestReward@@0@Z ; std::_Ptr_cat<CustomQuestReward,CustomQuestReward>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T233543[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T233543[ebp]
  00020	52		 push	 edx
  00021	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0002c	52		 push	 edx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >
  00036	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Uninitialized_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@@Z ENDP ; std::_Uninitialized_copy<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >
_TEXT	ENDS
PUBLIC	??$move@AAUCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z ; std::move<CustomQuestMission &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CustomQuestMission *,CustomQuestMission *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move@2
$LN2@Move@2:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 08	 add	 eax, 8
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 08	 add	 ecx, 8
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move@2:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 1b		 je	 SHORT $LN1@Move@2

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z ; std::move<CustomQuestMission &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00036	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00039	89 08		 mov	 DWORD PTR [eax], ecx
  0003b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003e	eb cb		 jmp	 SHORT $LN2@Move@2
$LN1@Move@2:

; 2515 : 	return (_Dest);

  00040	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Move@PAUCustomQuestMission@@PAU1@@std@@YAPAUCustomQuestMission@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CustomQuestMission *,CustomQuestMission *>
_TEXT	ENDS
PUBLIC	??$move@AAUCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z ; std::move<CustomQuestReward &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CustomQuestReward *,CustomQuestReward *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move@3
$LN2@Move@3:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 14	 add	 eax, 20			; 00000014H
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 14	 add	 ecx, 20			; 00000014H
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move@3:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 2d		 je	 SHORT $LN1@Move@3

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z ; std::move<CustomQuestReward &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0003e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00041	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00044	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00047	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0004a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004d	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00050	eb b9		 jmp	 SHORT $LN2@Move@3
$LN1@Move@3:

; 2515 : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$_Move@PAUCustomQuestReward@@PAU1@@std@@YAPAUCustomQuestReward@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CustomQuestReward *,CustomQuestReward *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@UCustomQuestMission@@@std@@YAXPAUCustomQuestMission@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCustomQuestMission@@@std@@YAXPAUCustomQuestMission@@@Z PROC ; std::_Destroy<CustomQuestMission>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UCustomQuestMission@@@std@@YAXPAUCustomQuestMission@@@Z ENDP ; std::_Destroy<CustomQuestMission>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UCustomQuestReward@@@std@@YAXPAUCustomQuestReward@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCustomQuestReward@@@std@@YAXPAUCustomQuestReward@@@Z PROC ; std::_Destroy<CustomQuestReward>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UCustomQuestReward@@@std@@YAXPAUCustomQuestReward@@@Z ENDP ; std::_Destroy<CustomQuestReward>
_TEXT	ENDS
PUBLIC	??_GCustomQuestData@@QAEPAXI@Z			; CustomQuestData::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Destroy@UCustomQuestData@@@std@@YAXPAUCustomQuestData@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCustomQuestData@@@std@@YAXPAUCustomQuestData@@@Z PROC ; std::_Destroy<CustomQuestData>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();

  00009	6a 00		 push	 0
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000e	e8 00 00 00 00	 call	 ??_GCustomQuestData@@QAEPAXI@Z

; 64   : 	}

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Destroy@UCustomQuestData@@@std@@YAXPAUCustomQuestData@@@Z ENDP ; std::_Destroy<CustomQuestData>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GCustomQuestData@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCustomQuestData@@QAEPAXI@Z PROC			; CustomQuestData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CustomQuestData@@QAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCustomQuestData@@QAEPAXI@Z ENDP			; CustomQuestData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z ; std::_Construct<CustomQuestMission,CustomQuestMission const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@ABU3@@Z PROC ; std::allocator<CustomQuestMission>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z ; std::_Construct<CustomQuestMission,CustomQuestMission const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@ABU3@@Z ENDP ; std::allocator<CustomQuestMission>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z ; std::_Construct<CustomQuestReward,CustomQuestReward const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@ABU3@@Z PROC ; std::allocator<CustomQuestReward>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z ; std::_Construct<CustomQuestReward,CustomQuestReward const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@ABU3@@Z ENDP ; std::allocator<CustomQuestReward>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUCustomQuestMission@@@std@@YAABUCustomQuestMission@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCustomQuestMission@@@std@@YAABUCustomQuestMission@@ABU1@@Z PROC ; std::forward<CustomQuestMission const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUCustomQuestMission@@@std@@YAABUCustomQuestMission@@ABU1@@Z ENDP ; std::forward<CustomQuestMission const &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@ABUCustomQuestReward@@@std@@YAABUCustomQuestReward@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCustomQuestReward@@@std@@YAABUCustomQuestReward@@ABU1@@Z PROC ; std::forward<CustomQuestReward const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUCustomQuestReward@@@std@@YAABUCustomQuestReward@@ABU1@@Z ENDP ; std::forward<CustomQuestReward const &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z ; std::allocator<CustomQuestMission>::construct
PUBLIC	??$forward@UCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z ; std::forward<CustomQuestMission>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@U3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@U3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z ; std::forward<CustomQuestMission>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z ; std::allocator<CustomQuestMission>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@U3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z ; std::allocator<CustomQuestReward>::construct
PUBLIC	??$forward@UCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z ; std::forward<CustomQuestReward>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@U3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@U3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z ; std::forward<CustomQuestReward>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z ; std::allocator<CustomQuestReward>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@U3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z ; std::allocator<CustomQuestData>::construct
PUBLIC	??$forward@UCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z ; std::forward<CustomQuestData>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@U3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@U3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<CustomQuestData>,CustomQuestData,CustomQuestData>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z ; std::forward<CustomQuestData>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z ; std::allocator<CustomQuestData>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UCustomQuestData@@@std@@UCustomQuestData@@U3@@std@@YAXAAV?$allocator@UCustomQuestData@@@0@PAUCustomQuestData@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<CustomQuestData>,CustomQuestData,CustomQuestData>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 373  : 
; 374  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 08	 add	 eax, 8
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 08	 add	 ecx, 8
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_cop@3:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_cop@3

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@AAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestMission>,CustomQuestMission,CustomQuestMission &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:

; 378  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 08	 add	 eax, 8
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@3:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_cop@3

; 379  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestMission@@@std@@UCustomQuestMission@@@std@@YAXAAV?$allocator@UCustomQuestMission@@@0@PAUCustomQuestMission@@@Z ; std::_Dest_val<std::allocator<CustomQuestMission>,CustomQuestMission>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 380  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 381  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_cop@3:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 382  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 383  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUCustomQuestMission@@PAU1@V?$allocator@UCustomQuestMission@@@std@@@std@@YAPAUCustomQuestMission@@PAU1@00AAV?$allocator@UCustomQuestMission@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CustomQuestMission *,CustomQuestMission *,std::allocator<CustomQuestMission> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 373  : 
; 374  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_cop@4
$LN5@Uninit_cop@4:

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 14	 add	 eax, 20			; 00000014H
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 14	 add	 ecx, 20			; 00000014H
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_cop@4:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_cop@4

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@AAU3@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@AAU2@@Z ; std::_Cons_val<std::allocator<CustomQuestReward>,CustomQuestReward,CustomQuestReward &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_cop@4
$LN4@Uninit_cop@4:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_cop@4
__catch$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_cop@4
$LN2@Uninit_cop@4:

; 378  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 14	 add	 eax, 20			; 00000014H
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@4:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_cop@4

; 379  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UCustomQuestReward@@@std@@UCustomQuestReward@@@std@@YAXAAV?$allocator@UCustomQuestReward@@@0@PAUCustomQuestReward@@@Z ; std::_Dest_val<std::allocator<CustomQuestReward>,CustomQuestReward>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_cop@4
$LN1@Uninit_cop@4:

; 380  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 381  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_cop@4:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 382  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@4:

; 383  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUCustomQuestReward@@PAU1@V?$allocator@UCustomQuestReward@@@std@@@std@@YAPAUCustomQuestReward@@PAU1@00AAV?$allocator@UCustomQuestReward@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CustomQuestReward *,CustomQuestReward *,std::allocator<CustomQuestReward> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z PROC ; std::move<CustomQuestMission &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z ENDP ; std::move<CustomQuestMission &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$move@AAUCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z PROC ; std::move<CustomQuestReward &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z ENDP ; std::move<CustomQuestReward &>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T233606 = -88						; size = 4
$T233607 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z PROC ; std::_Construct<CustomQuestMission,CustomQuestMission const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 08		 push	 8
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T233607[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T233607[ebp], 0
  0004a	74 21		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUCustomQuestMission@@@std@@YAABUCustomQuestMission@@ABU1@@Z ; std::forward<CustomQuestMission const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005d	8b 4d ac	 mov	 ecx, DWORD PTR $T233607[ebp]
  00060	89 11		 mov	 DWORD PTR [ecx], edx
  00062	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00065	8b 55 ac	 mov	 edx, DWORD PTR $T233607[ebp]
  00068	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  0006b	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  0006d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  00074	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00077	89 45 a8	 mov	 DWORD PTR $T233606[ebp], eax
  0007a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T233607[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UCustomQuestMission@@ABU1@@std@@YAXPAUCustomQuestMission@@ABU1@@Z ENDP ; std::_Construct<CustomQuestMission,CustomQuestMission const &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T233619 = -88						; size = 4
$T233620 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z PROC ; std::_Construct<CustomQuestReward,CustomQuestReward const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 14		 push	 20			; 00000014H
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T233620[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T233620[ebp], 0
  0004a	74 33		 je	 SHORT $LN3@Construct@2
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUCustomQuestReward@@@std@@YAABUCustomQuestReward@@ABU1@@Z ; std::forward<CustomQuestReward const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 55 ac	 mov	 edx, DWORD PTR $T233620[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	89 0a		 mov	 DWORD PTR [edx], ecx
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00065	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00068	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0006b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006e	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00071	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00074	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00077	8b 4d ac	 mov	 ecx, DWORD PTR $T233620[ebp]
  0007a	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  0007d	eb 07		 jmp	 SHORT $LN4@Construct@2
$LN3@Construct@2:
  0007f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct@2:
  00086	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00089	89 55 a8	 mov	 DWORD PTR $T233619[ebp], edx
  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T233620[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UCustomQuestReward@@ABU1@@std@@YAXPAUCustomQuestReward@@ABU1@@Z ENDP ; std::_Construct<CustomQuestReward,CustomQuestReward const &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T233632 = -88						; size = 4
$T233633 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z PROC ; std::allocator<CustomQuestMission>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 08		 push	 8
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T233633[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T233633[ebp], 0
  00047	74 21		 je	 SHORT $LN3@construct@4
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z ; std::forward<CustomQuestMission>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005a	8b 4d ac	 mov	 ecx, DWORD PTR $T233633[ebp]
  0005d	89 11		 mov	 DWORD PTR [ecx], edx
  0005f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00062	8b 55 ac	 mov	 edx, DWORD PTR $T233633[ebp]
  00065	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00068	eb 07		 jmp	 SHORT $LN4@construct@4
$LN3@construct@4:
  0006a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@4:
  00071	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00074	89 45 a8	 mov	 DWORD PTR $T233632[ebp], eax
  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T233633[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UCustomQuestMission@@@std@@QAEXPAUCustomQuestMission@@$$QAU3@@Z ENDP ; std::allocator<CustomQuestMission>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T233645 = -88						; size = 4
$T233646 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z PROC ; std::allocator<CustomQuestReward>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 14		 push	 20			; 00000014H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T233646[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T233646[ebp], 0
  00047	74 33		 je	 SHORT $LN3@construct@5
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z ; std::forward<CustomQuestReward>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 ac	 mov	 edx, DWORD PTR $T233646[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	89 0a		 mov	 DWORD PTR [edx], ecx
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00068	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006b	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0006e	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00071	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00074	8b 4d ac	 mov	 ecx, DWORD PTR $T233646[ebp]
  00077	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  0007a	eb 07		 jmp	 SHORT $LN4@construct@5
$LN3@construct@5:
  0007c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@5:
  00083	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00086	89 55 a8	 mov	 DWORD PTR $T233645[ebp], edx
  00089	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T233646[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UCustomQuestReward@@@std@@QAEXPAUCustomQuestReward@@$$QAU3@@Z ENDP ; std::allocator<CustomQuestReward>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z
_TEXT	SEGMENT
tv76 = -92						; size = 4
$T233658 = -88						; size = 4
$T233659 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z PROC ; std::allocator<CustomQuestData>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 68		 push	 104			; 00000068H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T233659[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T233659[ebp], 0
  00047	74 1a		 je	 SHORT $LN3@construct@6
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z ; std::forward<CustomQuestData>
  00052	83 c4 04	 add	 esp, 4
  00055	50		 push	 eax
  00056	8b 4d ac	 mov	 ecx, DWORD PTR $T233659[ebp]
  00059	e8 00 00 00 00	 call	 ??0CustomQuestData@@QAE@ABU0@@Z
  0005e	89 45 a4	 mov	 DWORD PTR tv76[ebp], eax
  00061	eb 07		 jmp	 SHORT $LN4@construct@6
$LN3@construct@6:
  00063	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@construct@6:
  0006a	8b 55 a4	 mov	 edx, DWORD PTR tv76[ebp]
  0006d	89 55 a8	 mov	 DWORD PTR $T233658[ebp], edx
  00070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T233659[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UCustomQuestData@@@std@@QAEXPAUCustomQuestData@@$$QAU3@@Z ENDP ; std::allocator<CustomQuestData>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z PROC ; std::forward<CustomQuestMission>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UCustomQuestMission@@@std@@YA$$QAUCustomQuestMission@@AAU1@@Z ENDP ; std::forward<CustomQuestMission>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@UCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z PROC ; std::forward<CustomQuestReward>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UCustomQuestReward@@@std@@YA$$QAUCustomQuestReward@@AAU1@@Z ENDP ; std::forward<CustomQuestReward>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$forward@UCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z PROC ; std::forward<CustomQuestData>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UCustomQuestData@@@std@@YA$$QAUCustomQuestData@@AAU1@@Z ENDP ; std::forward<CustomQuestData>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@3
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@3:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\customquestsystem.cpp
;	COMDAT ??__Eg_CustomQuestSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_CustomQuestSystem@@YAXXZ PROC			; `dynamic initializer for 'g_CustomQuestSystem'', COMDAT

; 14   : CCustomQuestSystem g_CustomQuestSystem;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CustomQuestSystem@@3VCCustomQuestSystem@@A ; g_CustomQuestSystem
  0000e	e8 00 00 00 00	 call	 ??0CCustomQuestSystem@@QAE@XZ ; CCustomQuestSystem::CCustomQuestSystem
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_CustomQuestSystem@@YAXXZ ; `dynamic atexit destructor for 'g_CustomQuestSystem''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_CustomQuestSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_CustomQuestSystem''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_CustomQuestSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_CustomQuestSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CustomQuestSystem'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CustomQuestSystem@@3VCCustomQuestSystem@@A ; g_CustomQuestSystem
  0000e	e8 00 00 00 00	 call	 ??1CCustomQuestSystem@@UAE@XZ ; CCustomQuestSystem::~CCustomQuestSystem
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_CustomQuestSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CustomQuestSystem''
text$yd	ENDS
PUBLIC	?g_CustomQuestSystem@@3VCCustomQuestSystem@@A	; g_CustomQuestSystem
_BSS	SEGMENT
?g_CustomQuestSystem@@3VCCustomQuestSystem@@A DB 03cH DUP (?) ; g_CustomQuestSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CustomQuestSystem$initializer$ DD FLAT:??__Eg_CustomQuestSystem@@YAXXZ
CRT$XCU	ENDS
END
