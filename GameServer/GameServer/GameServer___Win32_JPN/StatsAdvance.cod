; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\StatsAdvance.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CStatsAdvance@@QAE@XZ			; CStatsAdvance::CStatsAdvance
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\statsadvance.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStatsAdvance@@QAE@XZ PROC				; CStatsAdvance::CStatsAdvance
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 13   : 	this->m_Enable = false;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 14   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CStatsAdvance@@QAE@XZ ENDP				; CStatsAdvance::CStatsAdvance
_TEXT	ENDS
PUBLIC	??1CStatsAdvance@@QAE@XZ			; CStatsAdvance::~CStatsAdvance
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CStatsAdvance@@QAE@XZ PROC				; CStatsAdvance::~CStatsAdvance
; _this$ = ecx

; 17   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CStatsAdvance@@QAE@XZ ENDP				; CStatsAdvance::~CStatsAdvance
_TEXT	ENDS
PUBLIC	?Load@CStatsAdvance@@QAEXXZ			; CStatsAdvance::Load
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CStatsAdvance@@QAEXXZ PROC			; CStatsAdvance::Load
; _this$ = ecx

; 21   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 44	 sub	 esp, 68			; 00000044H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 	this->m_Enable = false;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 23   : 
; 24   : 	if(g_ExLicense.CheckUser(eExUB::Local) || g_ExLicense.CheckUser(eExUB::NSGames) || g_ExLicense.CheckUser(eExUB::eternalmu))

  00055	6a 00		 push	 0
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0005c	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00061	0f b6 c0	 movzx	 eax, al
  00064	85 c0		 test	 eax, eax
  00066	75 26		 jne	 SHORT $LN1@Load
  00068	6a 51		 push	 81			; 00000051H
  0006a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0006f	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00074	0f b6 c0	 movzx	 eax, al
  00077	85 c0		 test	 eax, eax
  00079	75 13		 jne	 SHORT $LN1@Load
  0007b	6a 4f		 push	 79			; 0000004fH
  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00082	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00087	0f b6 c0	 movzx	 eax, al
  0008a	85 c0		 test	 eax, eax
  0008c	74 09		 je	 SHORT $LN3@Load
$LN1@Load:

; 25   : 	{
; 26   : 		this->m_Enable = true;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00091	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN3@Load:

; 27   : 	}
; 28   : }

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
?Load@CStatsAdvance@@QAEXXZ ENDP			; CStatsAdvance::Load
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
PUBLIC	__$ArrayPad$
PUBLIC	?Send@CStatsAdvance@@QAEXH@Z			; CStatsAdvance::Send
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv68 = -232						; size = 4
_pMsg$ = -164						; size = 152
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?Send@CStatsAdvance@@QAEXH@Z PROC			; CStatsAdvance::Send
; _this$ = ecx

; 31   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000ae	33 c5		 xor	 eax, ebp
  000b0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000b3	53		 push	 ebx
  000b4	56		 push	 esi
  000b5	57		 push	 edi
  000b6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	if(!this->m_Enable)

  000b9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000bf	75 05		 jne	 SHORT $LN2@Send

; 33   : 	{
; 34   : 		return;

  000c1	e9 04 02 00 00	 jmp	 $LN3@Send
$LN2@Send:

; 35   : 	}
; 36   : 
; 37   : 	if(!OBJMAX_RANGE(aIndex))

  000c6	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  000ca	7d 0c		 jge	 SHORT $LN5@Send
  000cc	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
  000d6	eb 12		 jmp	 SHORT $LN6@Send
$LN5@Send:
  000d8	33 c0		 xor	 eax, eax
  000da	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  000e1	0f 9e c0	 setle	 al
  000e4	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
$LN6@Send:
  000ea	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR tv68[ebp], 0
  000f1	75 05		 jne	 SHORT $LN1@Send

; 38   : 	{
; 39   : 		return;

  000f3	e9 d2 01 00 00	 jmp	 $LN3@Send
$LN1@Send:

; 40   : 	}
; 41   : 
; 42   : 	LPOBJ lpUser = &gObj[aIndex];

  000f8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000fb	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00101	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00107	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 43   : 
; 44   : 	PMSG_STATS_ADVANCE pMsg;
; 45   : 
; 46   : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xDA, sizeof(pMsg));

  0010a	68 98 00 00 00	 push	 152			; 00000098H
  0010f	68 da 00 00 00	 push	 218			; 000000daH
  00114	68 fb 00 00 00	 push	 251			; 000000fbH
  00119	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0011f	50		 push	 eax
  00120	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00126	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 47   : 
; 48   : 	pMsg.Result = true;

  0012b	c6 85 60 ff ff
	ff 01		 mov	 BYTE PTR _pMsg$[ebp+4], 1

; 49   : 
; 50   : 	pMsg.StatInfo.Level = lpUser->Level;

  00132	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00135	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  0013c	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 51   : 	pMsg.StatInfo.MasterLevel = 0;

  00142	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMsg$[ebp+12], 0

; 52   : 	pMsg.StatInfo.Reset = lpUser->Reset;

  0014c	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0014f	8b 88 90 22 00
	00		 mov	 ecx, DWORD PTR [eax+8848]
  00155	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 53   : 	pMsg.StatInfo.GrandReset = lpUser->GReset;

  0015b	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0015e	8b 88 94 22 00
	00		 mov	 ecx, DWORD PTR [eax+8852]
  00164	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 54   : 	pMsg.StatInfo.TotalDamageReflect = lpUser->DamageReflect;

  0016a	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0016d	0f b6 88 71 01
	00 00		 movzx	 ecx, BYTE PTR [eax+369]
  00174	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+24], ecx

; 55   : 	pMsg.StatInfo.FullDamageReflectRate = lpUser->DamageReflect;

  0017a	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0017d	0f b6 88 71 01
	00 00		 movzx	 ecx, BYTE PTR [eax+369]
  00184	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 56   : 	pMsg.StatInfo.CriticalDamageRate = lpUser->m_CriticalDamage;

  0018a	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0018d	8b 88 bc 04 00
	00		 mov	 ecx, DWORD PTR [eax+1212]
  00193	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 57   : 	pMsg.StatInfo.CriticalDamagePower = lpUser->m_CriticalDamage;

  00199	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0019c	8b 88 bc 04 00
	00		 mov	 ecx, DWORD PTR [eax+1212]
  001a2	89 4d 80	 mov	 DWORD PTR _pMsg$[ebp+36], ecx

; 58   : 	pMsg.StatInfo.ExellentDamageRate = lpUser->m_ExcelentDamage;

  001a5	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  001a8	8b 88 c0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1216]
  001ae	89 4d 84	 mov	 DWORD PTR _pMsg$[ebp+40], ecx

; 59   : 	pMsg.StatInfo.ExellentDamagePower = lpUser->m_ExcelentDamage;

  001b1	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  001b4	8b 88 c0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1216]
  001ba	89 4d 88	 mov	 DWORD PTR _pMsg$[ebp+44], ecx

; 60   : 	pMsg.StatInfo.DoubleDamageRate = lpUser->SetOpDoubleDamage;

  001bd	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  001c0	0f b6 88 3f 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4415]
  001c7	89 4d 8c	 mov	 DWORD PTR _pMsg$[ebp+48], ecx

; 61   : 	pMsg.StatInfo.TripleDamageRate = 0;

  001ca	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+52], 0

; 62   : 	pMsg.StatInfo.DamageReductionRate = lpUser->DamageMinus;

  001d1	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  001d4	0f b6 88 70 01
	00 00		 movzx	 ecx, BYTE PTR [eax+368]
  001db	89 4d 94	 mov	 DWORD PTR _pMsg$[ebp+56], ecx

; 63   : 	pMsg.StatInfo.ShieldSkillDamageReductionRate = 0;

  001de	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+60], 0

; 64   : 	pMsg.StatInfo.SDDamageReductionRate = 0;

  001e5	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+64], 0

; 65   : 	pMsg.StatInfo.SDDecreaseDamageRate = 0;

  001ec	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+68], 0

; 66   : 	pMsg.StatInfo.IgnoreDefenceRate = lpUser->SetOpIgnoreDefense;

  001f3	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  001f6	0f b6 88 3e 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4414]
  001fd	89 4d a4	 mov	 DWORD PTR _pMsg$[ebp+72], ecx

; 67   : 	pMsg.StatInfo.IgnoreSDRate = 0;

  00200	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+76], 0

; 68   : 	pMsg.StatInfo.IncreaseDamagePvP = 0;

  00207	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+80], 0

; 69   : 	pMsg.StatInfo.IncreaseDefencePvP = 0;

  0020e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+84], 0

; 70   : 	pMsg.StatInfo.ResistDoubleDamageRate = 0;

  00215	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+88], 0

; 71   : 	pMsg.StatInfo.ResistIgnoreDefenceRate = 0;

  0021c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+92], 0

; 72   : 	pMsg.StatInfo.ResistIgnoreSDRate = 0;

  00223	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+96], 0

; 73   : 	pMsg.StatInfo.ResistCriticalDamageRate = 0;

  0022a	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+100], 0

; 74   : 	pMsg.StatInfo.ResistExellentDamageRate = 0;

  00231	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+104], 0

; 75   : 	pMsg.StatInfo.ResistStumRate = 0;

  00238	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+108], 0

; 76   : 	pMsg.StatInfo.ResistIce = lpUser->m_Resistance[R_ICE];

  0023f	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00242	0f be 88 f8 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1272]
  00249	89 4d cc	 mov	 DWORD PTR _pMsg$[ebp+112], ecx

; 77   : 	pMsg.StatInfo.ResistPoison = lpUser->m_Resistance[R_POISON];

  0024c	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0024f	0f be 88 f9 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1273]
  00256	89 4d d0	 mov	 DWORD PTR _pMsg$[ebp+116], ecx

; 78   : 	pMsg.StatInfo.ResistLighting = lpUser->m_Resistance[R_LIGHTNING];

  00259	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0025c	0f be 88 fa 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1274]
  00263	89 4d d4	 mov	 DWORD PTR _pMsg$[ebp+120], ecx

; 79   : 	pMsg.StatInfo.ResistFire = lpUser->m_Resistance[R_FIRE];

  00266	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00269	0f be 88 fb 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1275]
  00270	89 4d d8	 mov	 DWORD PTR _pMsg$[ebp+124], ecx

; 80   : 	pMsg.StatInfo.ResistEarth = lpUser->m_Resistance[R_EARTH];

  00273	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00276	0f be 88 fc 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1276]
  0027d	89 4d dc	 mov	 DWORD PTR _pMsg$[ebp+128], ecx

; 81   : 	pMsg.StatInfo.ResistWind = lpUser->m_Resistance[R_WIND];

  00280	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00283	0f be 88 fd 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1277]
  0028a	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+132], ecx

; 82   : 	pMsg.StatInfo.ResistWater = lpUser->m_Resistance[R_WATER];

  0028d	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00290	0f be 88 fe 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1278]
  00297	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+136], ecx

; 83   : 	pMsg.StatInfo.FullHPRestoreRate = 0;

  0029a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+140], 0

; 84   : 	pMsg.StatInfo.FullMPRestoreRate = 0;

  002a1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+144], 0

; 85   : 	pMsg.StatInfo.FullSDRestoreRate = 0;

  002a8	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+148], 0

; 86   : 
; 87   : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  002af	0f b6 85 5d ff
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002b6	50		 push	 eax
  002b7	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  002bd	51		 push	 ecx
  002be	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  002c1	52		 push	 edx
  002c2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002c7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@Send:

; 88   : }

  002ca	5f		 pop	 edi
  002cb	5e		 pop	 esi
  002cc	5b		 pop	 ebx
  002cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d0	33 cd		 xor	 ecx, ebp
  002d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d7	8b e5		 mov	 esp, ebp
  002d9	5d		 pop	 ebp
  002da	c2 04 00	 ret	 4
?Send@CStatsAdvance@@QAEXH@Z ENDP			; CStatsAdvance::Send
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 106  : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 107  : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 108  : 		lpBuf[3] = sub;

  00024	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00027	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0002a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\statsadvance.cpp
;	COMDAT ??__Eg_StatsAdvance@@YAXXZ
text$yc	SEGMENT
??__Eg_StatsAdvance@@YAXXZ PROC				; `dynamic initializer for 'g_StatsAdvance'', COMDAT

; 9    : CStatsAdvance g_StatsAdvance;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_StatsAdvance@@3VCStatsAdvance@@A ; g_StatsAdvance
  0000e	e8 00 00 00 00	 call	 ??0CStatsAdvance@@QAE@XZ ; CStatsAdvance::CStatsAdvance
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_StatsAdvance@@YAXXZ ; `dynamic atexit destructor for 'g_StatsAdvance''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_StatsAdvance@@YAXXZ ENDP				; `dynamic initializer for 'g_StatsAdvance''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_StatsAdvance@@YAXXZ
text$yd	SEGMENT
??__Fg_StatsAdvance@@YAXXZ PROC				; `dynamic atexit destructor for 'g_StatsAdvance'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_StatsAdvance@@3VCStatsAdvance@@A ; g_StatsAdvance
  0000e	e8 00 00 00 00	 call	 ??1CStatsAdvance@@QAE@XZ ; CStatsAdvance::~CStatsAdvance
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_StatsAdvance@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_StatsAdvance''
text$yd	ENDS
PUBLIC	?g_StatsAdvance@@3VCStatsAdvance@@A		; g_StatsAdvance
_BSS	SEGMENT
?g_StatsAdvance@@3VCStatsAdvance@@A DD 01H DUP (?)	; g_StatsAdvance
_BSS	ENDS
CRT$XCU	SEGMENT
_g_StatsAdvance$initializer$ DD FLAT:??__Eg_StatsAdvance@@YAXXZ
CRT$XCU	ENDS
END
