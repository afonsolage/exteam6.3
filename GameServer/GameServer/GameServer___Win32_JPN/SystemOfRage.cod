; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\SystemOfRage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gSystemOfRage@@3VcSystemOfRage@@A		; gSystemOfRage
_BSS	SEGMENT
?gSystemOfRage@@3VcSystemOfRage@@A DB 024a8d0H DUP (?)	; gSystemOfRage
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?int_binary@@YAHHHPAE@Z				; int_binary
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\systemofrage.cpp
_TEXT	SEGMENT
_loWord$ = -8						; size = 2
_hiWord$ = -4						; size = 2
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_buf$ = 16						; size = 4
?int_binary@@YAHHHPAE@Z PROC				; int_binary

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 18   : 	WORD hiWord = SET_NUMBERHW(a);

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0000f	66 89 45 fc	 mov	 WORD PTR _hiWord$[ebp], ax

; 19   : 	WORD loWord = SET_NUMBERLW(a);

  00013	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00016	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0001b	66 89 45 f8	 mov	 WORD PTR _loWord$[ebp], ax

; 20   : 	buf[b] = SET_NUMBERH(hiWord);

  0001f	0f b7 45 fc	 movzx	 eax, WORD PTR _hiWord$[ebp]
  00023	c1 e8 08	 shr	 eax, 8
  00026	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00029	03 4d 0c	 add	 ecx, DWORD PTR _b$[ebp]
  0002c	88 01		 mov	 BYTE PTR [ecx], al

; 21   : 	b++;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 0c	 mov	 DWORD PTR _b$[ebp], eax

; 22   : 	buf[b] = SET_NUMBERL(hiWord);

  00037	0f b7 45 fc	 movzx	 eax, WORD PTR _hiWord$[ebp]
  0003b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00040	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00043	03 4d 0c	 add	 ecx, DWORD PTR _b$[ebp]
  00046	88 01		 mov	 BYTE PTR [ecx], al

; 23   : 	b++;

  00048	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004b	83 c0 01	 add	 eax, 1
  0004e	89 45 0c	 mov	 DWORD PTR _b$[ebp], eax

; 24   : 	buf[b] = SET_NUMBERH(loWord);

  00051	0f b7 45 f8	 movzx	 eax, WORD PTR _loWord$[ebp]
  00055	c1 e8 08	 shr	 eax, 8
  00058	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  0005b	03 4d 0c	 add	 ecx, DWORD PTR _b$[ebp]
  0005e	88 01		 mov	 BYTE PTR [ecx], al

; 25   : 	b++;

  00060	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00063	83 c0 01	 add	 eax, 1
  00066	89 45 0c	 mov	 DWORD PTR _b$[ebp], eax

; 26   : 	buf[b] = SET_NUMBERL(loWord);

  00069	0f b7 45 f8	 movzx	 eax, WORD PTR _loWord$[ebp]
  0006d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00072	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00075	03 4d 0c	 add	 ecx, DWORD PTR _b$[ebp]
  00078	88 01		 mov	 BYTE PTR [ecx], al

; 27   : 	b++;

  0007a	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 0c	 mov	 DWORD PTR _b$[ebp], eax

; 28   : 	return b;

  00083	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]

; 29   : }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
?int_binary@@YAHHHPAE@Z ENDP				; int_binary
_TEXT	ENDS
PUBLIC	?bynary_int@@YAHAAHHPAE@Z			; bynary_int
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_loword$ = -8						; size = 2
_hiword$ = -4						; size = 2
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_buf$ = 16						; size = 4
?bynary_int@@YAHAAHHPAE@Z PROC				; bynary_int

; 32   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 48	 sub	 esp, 72			; 00000048H
  00096	53		 push	 ebx
  00097	56		 push	 esi
  00098	57		 push	 edi

; 33   : 	a = 0;

  00099	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0009c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 34   : 	WORD hiword = MAKE_NUMBERW(buf[b], buf[b+1]);

  000a2	8b 45 10	 mov	 eax, DWORD PTR _buf$[ebp]
  000a5	03 45 0c	 add	 eax, DWORD PTR _b$[ebp]
  000a8	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000ac	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000b2	0f b6 d1	 movzx	 edx, cl
  000b5	8b 45 10	 mov	 eax, DWORD PTR _buf$[ebp]
  000b8	03 45 0c	 add	 eax, DWORD PTR _b$[ebp]
  000bb	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000be	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000c4	0f b6 c1	 movzx	 eax, cl
  000c7	c1 e0 08	 shl	 eax, 8
  000ca	0b d0		 or	 edx, eax
  000cc	66 89 55 fc	 mov	 WORD PTR _hiword$[ebp], dx

; 35   : 	WORD loword = MAKE_NUMBERW(buf[b+2], buf[b+3]);

  000d0	8b 45 10	 mov	 eax, DWORD PTR _buf$[ebp]
  000d3	03 45 0c	 add	 eax, DWORD PTR _b$[ebp]
  000d6	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  000da	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000e0	0f b6 d1	 movzx	 edx, cl
  000e3	8b 45 10	 mov	 eax, DWORD PTR _buf$[ebp]
  000e6	03 45 0c	 add	 eax, DWORD PTR _b$[ebp]
  000e9	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  000ed	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000f3	0f b6 c1	 movzx	 eax, cl
  000f6	c1 e0 08	 shl	 eax, 8
  000f9	0b d0		 or	 edx, eax
  000fb	66 89 55 f8	 mov	 WORD PTR _loword$[ebp], dx

; 36   : 	a = MAKE_NUMBERDW(hiword, loword);

  000ff	0f b7 45 f8	 movzx	 eax, WORD PTR _loword$[ebp]
  00103	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00108	0f b7 c8	 movzx	 ecx, ax
  0010b	0f b7 55 fc	 movzx	 edx, WORD PTR _hiword$[ebp]
  0010f	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00115	0f b7 c2	 movzx	 eax, dx
  00118	c1 e0 10	 shl	 eax, 16			; 00000010H
  0011b	0b c8		 or	 ecx, eax
  0011d	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00120	89 0a		 mov	 DWORD PTR [edx], ecx

; 37   : 	return b+4;

  00122	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00125	83 c0 04	 add	 eax, 4

; 38   : }

  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c3		 ret	 0
?bynary_int@@YAHAAHHPAE@Z ENDP				; bynary_int
_TEXT	ENDS
PUBLIC	?LoadSkill@cSystemOfRage@@QAEXHPADHHH_N@Z	; cSystemOfRage::LoadSkill
EXTRN	_strcpy:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_cName$ = 12						; size = 4
_a1$ = 16						; size = 4
_a2$ = 20						; size = 4
_NextPoint$ = 24					; size = 4
_Percent$ = 28						; size = 1
?LoadSkill@cSystemOfRage@@QAEXHPADHHH_N@Z PROC		; cSystemOfRage::LoadSkill
; _this$ = ecx

; 45   : {

  00130	55		 push	 ebp
  00131	8b ec		 mov	 ebp, esp
  00133	83 ec 44	 sub	 esp, 68			; 00000044H
  00136	53		 push	 ebx
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   : 	strcpy(this->rSkill[ID].Name,cName);

  0013c	8b 45 0c	 mov	 eax, DWORD PTR _cName$[ebp]
  0013f	50		 push	 eax
  00140	8b 4d 08	 mov	 ecx, DWORD PTR _ID$[ebp]
  00143	6b c9 44	 imul	 ecx, 68			; 00000044H
  00146	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00149	8d 84 0a 30 9f
	24 00		 lea	 eax, DWORD PTR [edx+ecx+2400048]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _strcpy
  00156	83 c4 08	 add	 esp, 8

; 47   : 	this->rSkill[ID].StartDamage = a1;

  00159	8b 45 08	 mov	 eax, DWORD PTR _ID$[ebp]
  0015c	6b c0 44	 imul	 eax, 68			; 00000044H
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00162	8b 55 10	 mov	 edx, DWORD PTR _a1$[ebp]
  00165	89 94 01 64 9f
	24 00		 mov	 DWORD PTR [ecx+eax+2400100], edx

; 48   : 	this->rSkill[ID].MaxPoint = a2;

  0016c	8b 45 08	 mov	 eax, DWORD PTR _ID$[ebp]
  0016f	6b c0 44	 imul	 eax, 68			; 00000044H
  00172	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00175	8b 55 14	 mov	 edx, DWORD PTR _a2$[ebp]
  00178	89 94 01 68 9f
	24 00		 mov	 DWORD PTR [ecx+eax+2400104], edx

; 49   : 	this->rSkill[ID].PointNext = NextPoint;

  0017f	8b 45 08	 mov	 eax, DWORD PTR _ID$[ebp]
  00182	6b c0 44	 imul	 eax, 68			; 00000044H
  00185	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00188	8b 55 18	 mov	 edx, DWORD PTR _NextPoint$[ebp]
  0018b	89 94 01 70 9f
	24 00		 mov	 DWORD PTR [ecx+eax+2400112], edx

; 50   : 	this->rSkill[ID].Percent = Percent;

  00192	8b 45 08	 mov	 eax, DWORD PTR _ID$[ebp]
  00195	6b c0 44	 imul	 eax, 68			; 00000044H
  00198	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019b	8a 55 1c	 mov	 dl, BYTE PTR _Percent$[ebp]
  0019e	88 94 01 6c 9f
	24 00		 mov	 BYTE PTR [ecx+eax+2400108], dl

; 51   : }

  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	5b		 pop	 ebx
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c2 18 00	 ret	 24			; 00000018H
?LoadSkill@cSystemOfRage@@QAEXHPADHHH_N@Z ENDP		; cSystemOfRage::LoadSkill
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@		; `string'
PUBLIC	??_C@_0BO@OOIHKAPG@?4?4?2Data?2ExData?2RageSystem?4ini?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cSystemOfRage@@QAEXXZ			; cSystemOfRage::Load
EXTRN	_fclose:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
CONST	SEGMENT
??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@ DB 'CRITICAL ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OOIHKAPG@?4?4?2Data?2ExData?2RageSystem?4ini?$AA@
CONST	SEGMENT
??_C@_0BO@OOIHKAPG@?4?4?2Data?2ExData?2RageSystem?4ini?$AA@ DB '..\Data\E'
	DB	'xData\RageSystem.ini', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv402 = -172						; size = 4
tv392 = -172						; size = 4
tv382 = -172						; size = 4
tv400 = -168						; size = 4
tv390 = -168						; size = 4
tv380 = -168						; size = 4
tv397 = -162						; size = 2
tv387 = -162						; size = 2
tv377 = -162						; size = 2
tv95 = -161						; size = 1
_sProc$221662 = -96					; size = 4
_NextPoint$221661 = -92					; size = 4
_MaxPoint$221660 = -88					; size = 4
_Damage$221659 = -84					; size = 4
_sName$221658 = -80					; size = 50
_sN$221657 = -28					; size = 4
_lNum$ = -24						; size = 4
_sNum$ = -20						; size = 4
_type$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Load@cSystemOfRage@@QAEXXZ PROC			; cSystemOfRage::Load
; _this$ = ecx

; 54   : {

  001b0	55		 push	 ebp
  001b1	8b ec		 mov	 ebp, esp
  001b3	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001be	33 c5		 xor	 eax, ebp
  001c0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  001c3	53		 push	 ebx
  001c4	56		 push	 esi
  001c5	57		 push	 edi
  001c6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	this->Enable = g_ExLicense.user.Rage;

  001c9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001cc	8a 0d c9 00 00
	00		 mov	 cl, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+201
  001d2	88 08		 mov	 BYTE PTR [eax], cl

; 56   : 
; 57   : 	if(!this->Enable)

  001d4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001d7	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001da	85 c9		 test	 ecx, ecx
  001dc	75 05		 jne	 SHORT $LN21@Load

; 58   : 	{
; 59   : 		return;

  001de	e9 d1 04 00 00	 jmp	 $LN22@Load
$LN21@Load:

; 60   : 	}
; 61   : 
; 62   : 	this->m_sNPC_Class = 0;

  001e3	33 c0		 xor	 eax, eax
  001e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	66 89 81 c0 a8
	24 00		 mov	 WORD PTR [ecx+2402496], ax

; 63   : 	this->m_btNPC_Map = 0;

  001ef	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f2	c6 80 c2 a8 24
	00 00		 mov	 BYTE PTR [eax+2402498], 0

; 64   : 	this->m_btNPC_X = 0;

  001f9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001fc	c6 80 c3 a8 24
	00 00		 mov	 BYTE PTR [eax+2402499], 0

; 65   : 	this->m_btNPC_Y = 0;

  00203	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00206	c6 80 c4 a8 24
	00 00		 mov	 BYTE PTR [eax+2402500], 0

; 66   : 	this->m_ResetRageWCoin = 0;

  0020d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00210	c7 80 c8 a8 24
	00 00 00 00 00	 mov	 DWORD PTR [eax+2402504], 0

; 67   : 	this->m_ResetRageCredit = 0;

  0021a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0021d	c7 80 cc a8 24
	00 00 00 00 00	 mov	 DWORD PTR [eax+2402508], 0

; 68   : 
; 69   : 	//ZeroMemory(&this->rUser,sizeof(this->rUser));
; 70   : 
; 71   : 	SMDFile = fopen(RAGE_SYSTEM_DIR, "r");

  00227	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OOIHKAPG@?4?4?2Data?2ExData?2RageSystem?4ini?$AA@
  00231	e8 00 00 00 00	 call	 _fopen
  00236	83 c4 08	 add	 esp, 8
  00239	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 72   : 
; 73   : 	if ( SMDFile == NULL )

  0023e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00245	75 1f		 jne	 SHORT $LN20@Load

; 74   : 	{
; 75   : 		MessageBoxA(0,RAGE_SYSTEM_DIR,"CRITICAL ERROR",0);

  00247	6a 00		 push	 0
  00249	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OOIHKAPG@?4?4?2Data?2ExData?2RageSystem?4ini?$AA@
  00253	6a 00		 push	 0
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 76   : 		this->Enable = false;

  0025b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0025e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 77   : 		return;

  00261	e9 4e 04 00 00	 jmp	 $LN22@Load
$LN20@Load:

; 78   : 	}
; 79   : 
; 80   : 	int Token;
; 81   : 	int type = -1;

  00266	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _type$[ebp], -1

; 82   : 
; 83   : 	int sNum = 1;

  0026d	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _sNum$[ebp], 1

; 84   : 	int lNum = 1;

  00274	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _lNum$[ebp], 1
$LN19@Load:

; 85   : 
; 86   : 	while ( true )

  0027b	b8 01 00 00 00	 mov	 eax, 1
  00280	85 c0		 test	 eax, eax
  00282	0f 84 1e 04 00
	00		 je	 $LN18@Load

; 87   : 	{
; 88   : 	    Token = GetToken();

  00288	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0028d	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 89   : 
; 90   :         if( Token == END)

  00290	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00294	75 05		 jne	 SHORT $LN17@Load

; 91   : 		{
; 92   :             break;

  00296	e9 0b 04 00 00	 jmp	 $LN18@Load
$LN17@Load:

; 93   : 		}
; 94   : 
; 95   : 		type = (int)TokenNumber;

  0029b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002a1	e8 00 00 00 00	 call	 __ftol2_sse
  002a6	89 45 f0	 mov	 DWORD PTR _type$[ebp], eax

; 96   : 
; 97   : 		if(type == 3)

  002a9	83 7d f0 03	 cmp	 DWORD PTR _type$[ebp], 3
  002ad	75 0e		 jne	 SHORT $LN15@Load

; 98   : 		{
; 99   : 			if(!THINNAKORN_MAC)

  002af	b8 01 00 00 00	 mov	 eax, 1
  002b4	85 c0		 test	 eax, eax
  002b6	74 05		 je	 SHORT $LN15@Load

; 100  : 			{
; 101  : 				break;

  002b8	e9 e9 03 00 00	 jmp	 $LN18@Load
$LN15@Load:

; 102  : 			}
; 103  : 		}
; 104  : 
; 105  : 		while ( true )

  002bd	b8 01 00 00 00	 mov	 eax, 1
  002c2	85 c0		 test	 eax, eax
  002c4	0f 84 d7 03 00
	00		 je	 $LN13@Load

; 106  : 		{
; 107  : 			if(type == 0)

  002ca	83 7d f0 00	 cmp	 DWORD PTR _type$[ebp], 0
  002ce	0f 85 1c 01 00
	00		 jne	 $LN12@Load

; 108  : 			{
; 109  : 				Token = GetToken();

  002d4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002d9	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 110  : 
; 111  : 				if (strcmp("end", TokenString ) == 0)

  002dc	68 00 00 00 00	 push	 OFFSET _TokenString
  002e1	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  002e6	e8 00 00 00 00	 call	 _strcmp
  002eb	83 c4 08	 add	 esp, 8
  002ee	85 c0		 test	 eax, eax
  002f0	75 05		 jne	 SHORT $LN11@Load

; 112  : 				{
; 113  : 					break;

  002f2	e9 aa 03 00 00	 jmp	 $LN13@Load
$LN11@Load:

; 114  : 				}
; 115  : 
; 116  : 				this->Enable = TokenNumber;

  002f7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002fd	d9 ee		 fldz
  002ff	da e9		 fucompp
  00301	df e0		 fnstsw	 ax
  00303	f6 c4 44	 test	 ah, 68			; 00000044H
  00306	7b 09		 jnp	 SHORT $LN24@Load
  00308	c6 85 5f ff ff
	ff 01		 mov	 BYTE PTR tv95[ebp], 1
  0030f	eb 07		 jmp	 SHORT $LN25@Load
$LN24@Load:
  00311	c6 85 5f ff ff
	ff 00		 mov	 BYTE PTR tv95[ebp], 0
$LN25@Load:
  00318	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0031b	8a 8d 5f ff ff
	ff		 mov	 cl, BYTE PTR tv95[ebp]
  00321	88 08		 mov	 BYTE PTR [eax], cl

; 117  : 
; 118  : 				Token = GetToken();

  00323	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00328	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 119  : 				this->AddExp = TokenNumber;

  0032b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00331	e8 00 00 00 00	 call	 __ftol2_sse
  00336	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00339	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 120  : 
; 121  : 				Token = GetToken();

  0033c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00341	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 122  : 				this->CreateMob = TokenNumber;

  00344	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0034a	e8 00 00 00 00	 call	 __ftol2_sse
  0034f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00352	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 123  : 
; 124  : 				Token = GetToken();

  00355	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0035a	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 125  : 				this->MaxLevel = TokenNumber;

  0035d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00363	e8 00 00 00 00	 call	 __ftol2_sse
  00368	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0036b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 126  : 
; 127  : 				Token = GetToken();

  0036e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00373	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 128  : 				this->rPointLvl = TokenNumber;

  00376	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0037c	e8 00 00 00 00	 call	 __ftol2_sse
  00381	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00384	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 129  : 
; 130  : 				Token = GetToken();

  00387	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0038c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 131  : 				this->NextExp = TokenNumber;

  0038f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00395	e8 00 00 00 00	 call	 __ftol2_sse
  0039a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0039d	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 132  : 
; 133  : 				Token = GetToken();

  003a0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003a5	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 134  : 				this->MobExpLvL = TokenNumber;

  003a8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003ae	e8 00 00 00 00	 call	 __ftol2_sse
  003b3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003b6	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 135  : 
; 136  : 				Token = GetToken();

  003b9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003be	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 137  : 				this->NeedLevel = TokenNumber;

  003c1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003c7	e8 00 00 00 00	 call	 __ftol2_sse
  003cc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003cf	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 138  : 
; 139  : 				Token = GetToken();

  003d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003d7	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 140  : 				this->NeedMasterLevel = TokenNumber;

  003da	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003e0	e8 00 00 00 00	 call	 __ftol2_sse
  003e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003e8	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  003eb	e9 ac 02 00 00	 jmp	 $LN2@Load
$LN12@Load:

; 141  : 			}	
; 142  : 			else if(type == 1)

  003f0	83 7d f0 01	 cmp	 DWORD PTR _type$[ebp], 1
  003f4	75 6b		 jne	 SHORT $LN9@Load

; 143  : 			{
; 144  : 				Token = GetToken();

  003f6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003fb	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 145  : 
; 146  : 				if ( strcmp("end", TokenString ) == 0)

  003fe	68 00 00 00 00	 push	 OFFSET _TokenString
  00403	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00408	e8 00 00 00 00	 call	 _strcmp
  0040d	83 c4 08	 add	 esp, 8
  00410	85 c0		 test	 eax, eax
  00412	75 05		 jne	 SHORT $LN8@Load

; 147  : 				{
; 148  : 					break;

  00414	e9 88 02 00 00	 jmp	 $LN13@Load
$LN8@Load:

; 149  : 				}
; 150  : 
; 151  : 				this->TeleportMap = TokenNumber;

  00419	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0041f	e8 00 00 00 00	 call	 __ftol2_sse
  00424	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00427	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 152  : 
; 153  : 				Token = GetToken();

  0042a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0042f	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 154  : 				this->TeleportX = TokenNumber;

  00432	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00438	e8 00 00 00 00	 call	 __ftol2_sse
  0043d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00440	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 155  : 
; 156  : 				Token = GetToken();

  00443	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00448	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 157  : 				this->TeleportY = TokenNumber;

  0044b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00451	e8 00 00 00 00	 call	 __ftol2_sse
  00456	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00459	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0045c	e9 3b 02 00 00	 jmp	 $LN2@Load
$LN9@Load:

; 158  : 			}
; 159  : 			else if(type == 2)

  00461	83 7d f0 02	 cmp	 DWORD PTR _type$[ebp], 2
  00465	0f 85 e2 00 00
	00		 jne	 $LN6@Load

; 160  : 			{
; 161  : 				Token = GetToken();

  0046b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00470	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 162  : 
; 163  : 				if ( strcmp("end", TokenString ) == 0)

  00473	68 00 00 00 00	 push	 OFFSET _TokenString
  00478	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0047d	e8 00 00 00 00	 call	 _strcmp
  00482	83 c4 08	 add	 esp, 8
  00485	85 c0		 test	 eax, eax
  00487	75 05		 jne	 SHORT $LN5@Load

; 164  : 				{
; 165  : 					break;

  00489	e9 13 02 00 00	 jmp	 $LN13@Load
$LN5@Load:

; 166  : 				}
; 167  : 
; 168  : 				if(sNum >= R_MAX_SKILL)

  0048e	83 7d ec 24	 cmp	 DWORD PTR _sNum$[ebp], 36 ; 00000024H
  00492	7c 05		 jl	 SHORT $LN4@Load

; 169  : 				{
; 170  : 					break;

  00494	e9 08 02 00 00	 jmp	 $LN13@Load
$LN4@Load:

; 171  : 				}
; 172  : 
; 173  : 				int sN = TokenNumber;

  00499	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0049f	e8 00 00 00 00	 call	 __ftol2_sse
  004a4	89 45 e4	 mov	 DWORD PTR _sN$221657[ebp], eax

; 174  : 
; 175  : 				char sName[50];
; 176  : 				Token = GetToken();

  004a7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004ac	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 177  : 				strcpy(sName, TokenString );

  004af	68 00 00 00 00	 push	 OFFSET _TokenString
  004b4	8d 45 b0	 lea	 eax, DWORD PTR _sName$221658[ebp]
  004b7	50		 push	 eax
  004b8	e8 00 00 00 00	 call	 _strcpy
  004bd	83 c4 08	 add	 esp, 8

; 178  : 
; 179  : 				Token = GetToken();

  004c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004c5	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 180  : 				int Damage = TokenNumber;

  004c8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004ce	e8 00 00 00 00	 call	 __ftol2_sse
  004d3	89 45 ac	 mov	 DWORD PTR _Damage$221659[ebp], eax

; 181  : 
; 182  : 				Token = GetToken();

  004d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004db	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 183  : 				int MaxPoint = TokenNumber;

  004de	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004e4	e8 00 00 00 00	 call	 __ftol2_sse
  004e9	89 45 a8	 mov	 DWORD PTR _MaxPoint$221660[ebp], eax

; 184  : 
; 185  : 				Token = GetToken();

  004ec	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004f1	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 186  : 				int NextPoint = TokenNumber;

  004f4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004fa	e8 00 00 00 00	 call	 __ftol2_sse
  004ff	89 45 a4	 mov	 DWORD PTR _NextPoint$221661[ebp], eax

; 187  : 
; 188  : 				Token = GetToken();

  00502	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00507	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 189  : 				int sProc = TokenNumber;

  0050a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00510	e8 00 00 00 00	 call	 __ftol2_sse
  00515	89 45 a0	 mov	 DWORD PTR _sProc$221662[ebp], eax

; 190  : 
; 191  : 				this->LoadSkill(sN, sName,Damage,MaxPoint,NextPoint,(bool)sProc);

  00518	83 7d a0 00	 cmp	 DWORD PTR _sProc$221662[ebp], 0
  0051c	0f 95 c0	 setne	 al
  0051f	0f b6 c8	 movzx	 ecx, al
  00522	51		 push	 ecx
  00523	8b 55 a4	 mov	 edx, DWORD PTR _NextPoint$221661[ebp]
  00526	52		 push	 edx
  00527	8b 45 a8	 mov	 eax, DWORD PTR _MaxPoint$221660[ebp]
  0052a	50		 push	 eax
  0052b	8b 4d ac	 mov	 ecx, DWORD PTR _Damage$221659[ebp]
  0052e	51		 push	 ecx
  0052f	8d 55 b0	 lea	 edx, DWORD PTR _sName$221658[ebp]
  00532	52		 push	 edx
  00533	8b 45 e4	 mov	 eax, DWORD PTR _sN$221657[ebp]
  00536	50		 push	 eax
  00537	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0053a	e8 00 00 00 00	 call	 ?LoadSkill@cSystemOfRage@@QAEXHPADHHH_N@Z ; cSystemOfRage::LoadSkill

; 192  : 
; 193  : 				sNum++;

  0053f	8b 45 ec	 mov	 eax, DWORD PTR _sNum$[ebp]
  00542	83 c0 01	 add	 eax, 1
  00545	89 45 ec	 mov	 DWORD PTR _sNum$[ebp], eax
  00548	e9 4f 01 00 00	 jmp	 $LN2@Load
$LN6@Load:

; 194  : 			}
; 195  : 			else if(type == 3)

  0054d	83 7d f0 03	 cmp	 DWORD PTR _type$[ebp], 3
  00551	0f 85 45 01 00
	00		 jne	 $LN2@Load

; 196  : 			{
; 197  : 				Token = GetToken();

  00557	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0055c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 198  : 
; 199  : 				if ( strcmp("end", TokenString ) == 0)

  0055f	68 00 00 00 00	 push	 OFFSET _TokenString
  00564	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00569	e8 00 00 00 00	 call	 _strcmp
  0056e	83 c4 08	 add	 esp, 8
  00571	85 c0		 test	 eax, eax
  00573	75 05		 jne	 SHORT $LN1@Load

; 200  : 				{
; 201  : 					break;

  00575	e9 27 01 00 00	 jmp	 $LN13@Load
$LN1@Load:

; 202  : 				}
; 203  : 
; 204  : 				this->m_sNPC_Class = TokenNumber;

  0057a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00580	e8 00 00 00 00	 call	 __ftol2_sse
  00585	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00588	66 89 81 c0 a8
	24 00		 mov	 WORD PTR [ecx+2402496], ax

; 205  : 
; 206  : 				Token = GetToken();

  0058f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00594	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 207  : 				this->m_btNPC_Map = TokenNumber;

  00597	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0059d	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv377[ebp]
  005a3	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv377[ebp]
  005aa	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005af	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv380[ebp], eax
  005b5	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv380[ebp]
  005bb	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv382[ebp]
  005c1	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv377[ebp]
  005c7	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv382[ebp]
  005cd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005d0	88 81 c2 a8 24
	00		 mov	 BYTE PTR [ecx+2402498], al

; 208  : 
; 209  : 				Token = GetToken();

  005d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005db	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 210  : 				this->m_btNPC_X = TokenNumber;

  005de	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005e4	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv387[ebp]
  005ea	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv387[ebp]
  005f1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005f6	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv390[ebp], eax
  005fc	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv390[ebp]
  00602	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv392[ebp]
  00608	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv387[ebp]
  0060e	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv392[ebp]
  00614	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00617	88 81 c3 a8 24
	00		 mov	 BYTE PTR [ecx+2402499], al

; 211  : 
; 212  : 				Token = GetToken();

  0061d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00622	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 213  : 				this->m_btNPC_Y = TokenNumber;

  00625	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0062b	d9 bd 5e ff ff
	ff		 fnstcw	 WORD PTR tv397[ebp]
  00631	0f b7 85 5e ff
	ff ff		 movzx	 eax, WORD PTR tv397[ebp]
  00638	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0063d	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv400[ebp], eax
  00643	d9 ad 58 ff ff
	ff		 fldcw	 WORD PTR tv400[ebp]
  00649	db 9d 54 ff ff
	ff		 fistp	 DWORD PTR tv402[ebp]
  0064f	d9 ad 5e ff ff
	ff		 fldcw	 WORD PTR tv397[ebp]
  00655	8a 85 54 ff ff
	ff		 mov	 al, BYTE PTR tv402[ebp]
  0065b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0065e	88 81 c4 a8 24
	00		 mov	 BYTE PTR [ecx+2402500], al

; 214  : 
; 215  : 				Token = GetToken();

  00664	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00669	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 216  : 				this->m_ResetRageWCoin = TokenNumber;

  0066c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00672	e8 00 00 00 00	 call	 __ftol2_sse
  00677	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0067a	89 81 c8 a8 24
	00		 mov	 DWORD PTR [ecx+2402504], eax

; 217  : 
; 218  : 				Token = GetToken();

  00680	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00685	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 219  : 				this->m_ResetRageCredit = TokenNumber;

  00688	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0068e	e8 00 00 00 00	 call	 __ftol2_sse
  00693	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00696	89 81 cc a8 24
	00		 mov	 DWORD PTR [ecx+2402508], eax
$LN2@Load:

; 220  : 			}
; 221  : 		}

  0069c	e9 1c fc ff ff	 jmp	 $LN15@Load
$LN13@Load:

; 222  :     }

  006a1	e9 d5 fb ff ff	 jmp	 $LN19@Load
$LN18@Load:

; 223  : 
; 224  : 	fclose(SMDFile);

  006a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006ab	50		 push	 eax
  006ac	e8 00 00 00 00	 call	 _fclose
  006b1	83 c4 04	 add	 esp, 4
$LN22@Load:

; 225  : }

  006b4	5f		 pop	 edi
  006b5	5e		 pop	 esi
  006b6	5b		 pop	 ebx
  006b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006ba	33 cd		 xor	 ecx, ebp
  006bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006c1	8b e5		 mov	 esp, ebp
  006c3	5d		 pop	 ebp
  006c4	c3		 ret	 0
?Load@cSystemOfRage@@QAEXXZ ENDP			; cSystemOfRage::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  006d0	55		 push	 ebp
  006d1	8b ec		 mov	 ebp, esp
  006d3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  006d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  006de	33 c5		 xor	 eax, ebp
  006e0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  006e3	53		 push	 ebx
  006e4	56		 push	 esi
  006e5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  006e6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  006ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006f2	50		 push	 eax
  006f3	e8 00 00 00 00	 call	 _fgetc
  006f8	83 c4 04	 add	 esp, 4
  006fb	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  006fe	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00702	83 f9 ff	 cmp	 ecx, -1
  00705	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00707	b8 02 00 00 00	 mov	 eax, 2
  0070c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00711	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00713	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00717	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0071a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0071c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00721	50		 push	 eax
  00722	e8 00 00 00 00	 call	 _fgetc
  00727	83 c4 04	 add	 esp, 4
  0072a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0072d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00731	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00734	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00736	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0073a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0073d	74 1c		 je	 SHORT $LN23@GetToken
  0073f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00743	83 f8 ff	 cmp	 eax, -1
  00746	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00748	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0074d	50		 push	 eax
  0074e	e8 00 00 00 00	 call	 _fgetc
  00753	83 c4 04	 add	 esp, 4
  00756	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00759	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0075b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0075f	83 f8 ff	 cmp	 eax, -1
  00762	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00764	b8 02 00 00 00	 mov	 eax, 2
  00769	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0076e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00772	50		 push	 eax
  00773	e8 00 00 00 00	 call	 _isspace
  00778	83 c4 04	 add	 esp, 4
  0077b	85 c0		 test	 eax, eax
  0077d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00783	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00787	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0078d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00793	83 e9 22	 sub	 ecx, 34			; 00000022H
  00796	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0079c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  007a3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  007a9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  007af	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  007b6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  007bd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  007c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007cc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  007d1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  007d6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  007e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007e5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  007ea	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  007ef	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  007f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007fe	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00803	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00808	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00812	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00817	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0081c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00821	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0082b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00830	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00835	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0083a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0083f	50		 push	 eax
  00840	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00844	51		 push	 ecx
  00845	e8 00 00 00 00	 call	 _ungetc
  0084a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0084d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00850	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00853	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00858	50		 push	 eax
  00859	e8 00 00 00 00	 call	 _getc
  0085e	83 c4 04	 add	 esp, 4
  00861	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00864	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00868	83 f9 ff	 cmp	 ecx, -1
  0086b	74 36		 je	 SHORT $LN12@GetToken
  0086d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00871	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00874	74 1a		 je	 SHORT $LN11@GetToken
  00876	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0087a	50		 push	 eax
  0087b	e8 00 00 00 00	 call	 _isdigit
  00880	83 c4 04	 add	 esp, 4
  00883	85 c0		 test	 eax, eax
  00885	75 09		 jne	 SHORT $LN11@GetToken
  00887	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0088b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0088e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00890	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00893	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00896	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00898	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0089b	83 c0 01	 add	 eax, 1
  0089e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  008a1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  008a3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  008a9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  008ac	50		 push	 eax
  008ad	e8 00 00 00 00	 call	 _atof
  008b2	83 c4 04	 add	 esp, 4
  008b5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  008bb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  008c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008ca	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  008cf	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  008d4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  008db	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008e0	50		 push	 eax
  008e1	e8 00 00 00 00	 call	 _getc
  008e6	83 c4 04	 add	 esp, 4
  008e9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  008ec	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008f0	83 f9 ff	 cmp	 ecx, -1
  008f3	74 1c		 je	 SHORT $LN8@GetToken
  008f5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008f9	83 f8 22	 cmp	 eax, 34			; 00000022H
  008fc	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  008fe	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00901	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00904	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00906	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00909	83 c0 01	 add	 eax, 1
  0090c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0090f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00911	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00915	83 f8 22	 cmp	 eax, 34			; 00000022H
  00918	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0091a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0091f	50		 push	 eax
  00920	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00924	51		 push	 ecx
  00925	e8 00 00 00 00	 call	 _ungetc
  0092a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0092d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00930	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00933	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0093d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00942	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00947	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0094c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00950	50		 push	 eax
  00951	e8 00 00 00 00	 call	 _isalpha
  00956	83 c4 04	 add	 esp, 4
  00959	85 c0		 test	 eax, eax
  0095b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00961	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00968	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0096b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0096e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00970	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00973	83 c0 01	 add	 eax, 1
  00976	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00979	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0097e	50		 push	 eax
  0097f	e8 00 00 00 00	 call	 _getc
  00984	83 c4 04	 add	 esp, 4
  00987	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0098a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0098e	83 f9 ff	 cmp	 ecx, -1
  00991	74 36		 je	 SHORT $LN3@GetToken
  00993	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00997	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0099a	74 1a		 je	 SHORT $LN2@GetToken
  0099c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009a0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  009a3	74 11		 je	 SHORT $LN2@GetToken
  009a5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009a9	50		 push	 eax
  009aa	e8 00 00 00 00	 call	 _isalnum
  009af	83 c4 04	 add	 esp, 4
  009b2	85 c0		 test	 eax, eax
  009b4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  009b6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  009b9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  009bc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  009be	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  009c1	83 c0 01	 add	 eax, 1
  009c4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  009c7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  009c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009ce	50		 push	 eax
  009cf	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  009d3	51		 push	 ecx
  009d4	e8 00 00 00 00	 call	 _ungetc
  009d9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  009dc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  009df	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  009e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  009ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  009f1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  009f3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  009f5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  009ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a04	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00a06	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00a08	5f		 pop	 edi
  00a09	5e		 pop	 esi
  00a0a	5b		 pop	 ebx
  00a0b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a0e	33 cd		 xor	 ecx, ebp
  00a10	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a15	8b e5		 mov	 esp, ebp
  00a17	5d		 pop	 ebp
  00a18	c3		 ret	 0
  00a19	8d 49 00	 npad	 3
$LN35@GetToken:
  00a1c	00 00 00 00	 DD	 $LN10@GetToken
  00a20	00 00 00 00	 DD	 $LN19@GetToken
  00a24	00 00 00 00	 DD	 $LN17@GetToken
  00a28	00 00 00 00	 DD	 $LN14@GetToken
  00a2c	00 00 00 00	 DD	 $LN18@GetToken
  00a30	00 00 00 00	 DD	 $LN16@GetToken
  00a34	00 00 00 00	 DD	 $LN15@GetToken
  00a38	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00a3c	00		 DB	 0
  00a3d	01		 DB	 1
  00a3e	07		 DB	 7
  00a3f	07		 DB	 7
  00a40	07		 DB	 7
  00a41	07		 DB	 7
  00a42	07		 DB	 7
  00a43	07		 DB	 7
  00a44	07		 DB	 7
  00a45	07		 DB	 7
  00a46	02		 DB	 2
  00a47	03		 DB	 3
  00a48	03		 DB	 3
  00a49	07		 DB	 7
  00a4a	03		 DB	 3
  00a4b	03		 DB	 3
  00a4c	03		 DB	 3
  00a4d	03		 DB	 3
  00a4e	03		 DB	 3
  00a4f	03		 DB	 3
  00a50	03		 DB	 3
  00a51	03		 DB	 3
  00a52	03		 DB	 3
  00a53	03		 DB	 3
  00a54	07		 DB	 7
  00a55	04		 DB	 4
  00a56	07		 DB	 7
  00a57	07		 DB	 7
  00a58	07		 DB	 7
  00a59	07		 DB	 7
  00a5a	07		 DB	 7
  00a5b	07		 DB	 7
  00a5c	07		 DB	 7
  00a5d	07		 DB	 7
  00a5e	07		 DB	 7
  00a5f	07		 DB	 7
  00a60	07		 DB	 7
  00a61	07		 DB	 7
  00a62	07		 DB	 7
  00a63	07		 DB	 7
  00a64	07		 DB	 7
  00a65	07		 DB	 7
  00a66	07		 DB	 7
  00a67	07		 DB	 7
  00a68	07		 DB	 7
  00a69	07		 DB	 7
  00a6a	07		 DB	 7
  00a6b	07		 DB	 7
  00a6c	07		 DB	 7
  00a6d	07		 DB	 7
  00a6e	07		 DB	 7
  00a6f	07		 DB	 7
  00a70	07		 DB	 7
  00a71	07		 DB	 7
  00a72	07		 DB	 7
  00a73	07		 DB	 7
  00a74	07		 DB	 7
  00a75	07		 DB	 7
  00a76	07		 DB	 7
  00a77	07		 DB	 7
  00a78	07		 DB	 7
  00a79	07		 DB	 7
  00a7a	07		 DB	 7
  00a7b	07		 DB	 7
  00a7c	07		 DB	 7
  00a7d	07		 DB	 7
  00a7e	07		 DB	 7
  00a7f	07		 DB	 7
  00a80	07		 DB	 7
  00a81	07		 DB	 7
  00a82	07		 DB	 7
  00a83	07		 DB	 7
  00a84	07		 DB	 7
  00a85	07		 DB	 7
  00a86	07		 DB	 7
  00a87	07		 DB	 7
  00a88	07		 DB	 7
  00a89	07		 DB	 7
  00a8a	07		 DB	 7
  00a8b	07		 DB	 7
  00a8c	07		 DB	 7
  00a8d	07		 DB	 7
  00a8e	07		 DB	 7
  00a8f	07		 DB	 7
  00a90	07		 DB	 7
  00a91	07		 DB	 7
  00a92	07		 DB	 7
  00a93	07		 DB	 7
  00a94	07		 DB	 7
  00a95	05		 DB	 5
  00a96	07		 DB	 7
  00a97	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?FilterSkill@cSystemOfRage@@QAEXHH@Z		; cSystemOfRage::FilterSkill
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\systemofrage.cpp
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_SkillID$ = 12						; size = 4
?FilterSkill@cSystemOfRage@@QAEXHH@Z PROC		; cSystemOfRage::FilterSkill
; _this$ = ecx

; 228  : {

  00aa0	55		 push	 ebp
  00aa1	8b ec		 mov	 ebp, esp
  00aa3	83 ec 48	 sub	 esp, 72			; 00000048H
  00aa6	53		 push	 ebx
  00aa7	56		 push	 esi
  00aa8	57		 push	 edi
  00aa9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	switch(SkillID)

  00aac	8b 45 0c	 mov	 eax, DWORD PTR _SkillID$[ebp]
  00aaf	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00ab2	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00ab5	83 e9 01	 sub	 ecx, 1
  00ab8	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  00abb	83 7d b8 22	 cmp	 DWORD PTR tv64[ebp], 34	; 00000022H
  00abf	0f 87 ec 05 00
	00		 ja	 $LN38@FilterSkil
  00ac5	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00ac8	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN40@FilterSkil[edx*4]
$LN35@FilterSkil:

; 230  : 	{
; 231  : 	case eSkill1:  this->rUser[aIndex].Damage++;		break;

  00acf	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ad2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00ad8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00adb	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  00adf	83 c2 01	 add	 edx, 1
  00ae2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ae5	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00aeb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aee	89 54 01 44	 mov	 DWORD PTR [ecx+eax+68], edx
  00af2	e9 ba 05 00 00	 jmp	 $LN38@FilterSkil
$LN34@FilterSkil:

; 232  : 	case eSkill2:  this->rUser[aIndex].FreePoints++;		break;

  00af7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00afa	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00b00	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b03	8b 54 01 48	 mov	 edx, DWORD PTR [ecx+eax+72]
  00b07	83 c2 01	 add	 edx, 1
  00b0a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00b0d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00b13	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b16	89 54 01 48	 mov	 DWORD PTR [ecx+eax+72], edx
  00b1a	e9 92 05 00 00	 jmp	 $LN38@FilterSkil
$LN33@FilterSkil:

; 233  : 	case eSkill3:  this->rUser[aIndex].SummonPet++;		break;

  00b1f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00b22	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00b28	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b2b	8b 54 01 4c	 mov	 edx, DWORD PTR [ecx+eax+76]
  00b2f	83 c2 01	 add	 edx, 1
  00b32	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00b35	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00b3b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b3e	89 54 01 4c	 mov	 DWORD PTR [ecx+eax+76], edx
  00b42	e9 6a 05 00 00	 jmp	 $LN38@FilterSkil
$LN32@FilterSkil:

; 234  : 	case eSkill4:  this->rUser[aIndex].WingsDamagePlus++;		break;

  00b47	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00b4a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00b50	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b53	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  00b57	83 c2 01	 add	 edx, 1
  00b5a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00b5d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00b63	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b66	89 54 01 50	 mov	 DWORD PTR [ecx+eax+80], edx
  00b6a	e9 42 05 00 00	 jmp	 $LN38@FilterSkil
$LN31@FilterSkil:

; 235  : 	case eSkill5:  this->rUser[aIndex].FinalMana++;		break;

  00b6f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00b72	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00b78	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b7b	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  00b7f	83 c2 01	 add	 edx, 1
  00b82	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00b85	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00b8b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b8e	89 54 01 54	 mov	 DWORD PTR [ecx+eax+84], edx
  00b92	e9 1a 05 00 00	 jmp	 $LN38@FilterSkil
$LN30@FilterSkil:

; 236  : 	case eSkill6:  this->rUser[aIndex].IgnoreDefence++;		break;

  00b97	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00b9a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00ba0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ba3	8b 54 01 58	 mov	 edx, DWORD PTR [ecx+eax+88]
  00ba7	83 c2 01	 add	 edx, 1
  00baa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00bad	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00bb3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bb6	89 54 01 58	 mov	 DWORD PTR [ecx+eax+88], edx
  00bba	e9 f2 04 00 00	 jmp	 $LN38@FilterSkil
$LN29@FilterSkil:

; 237  : 	case eSkill7:  this->rUser[aIndex].ResetLevel++;		break;

  00bbf	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00bc2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00bc8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bcb	8b 54 01 5c	 mov	 edx, DWORD PTR [ecx+eax+92]
  00bcf	83 c2 01	 add	 edx, 1
  00bd2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00bd5	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00bdb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bde	89 54 01 5c	 mov	 DWORD PTR [ecx+eax+92], edx
  00be2	e9 ca 04 00 00	 jmp	 $LN38@FilterSkil
$LN28@FilterSkil:

; 238  : 	case eSkill8:  this->rUser[aIndex].Teleport++;		break;

  00be7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00bea	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00bf0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bf3	8b 54 01 60	 mov	 edx, DWORD PTR [ecx+eax+96]
  00bf7	83 c2 01	 add	 edx, 1
  00bfa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00bfd	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00c03	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c06	89 54 01 60	 mov	 DWORD PTR [ecx+eax+96], edx
  00c0a	e9 a2 04 00 00	 jmp	 $LN38@FilterSkil
$LN27@FilterSkil:

; 239  : 	case eSkill9:  this->rUser[aIndex].CriticalDamageRate++;		break;

  00c0f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c12	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00c18	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c1b	8b 54 01 64	 mov	 edx, DWORD PTR [ecx+eax+100]
  00c1f	83 c2 01	 add	 edx, 1
  00c22	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c25	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00c2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c2e	89 54 01 64	 mov	 DWORD PTR [ecx+eax+100], edx
  00c32	e9 7a 04 00 00	 jmp	 $LN38@FilterSkil
$LN26@FilterSkil:

; 240  : 	case eSkill10: this->rUser[aIndex].AbsordDamage++;	break;

  00c37	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c3a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00c40	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c43	8b 54 01 68	 mov	 edx, DWORD PTR [ecx+eax+104]
  00c47	83 c2 01	 add	 edx, 1
  00c4a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c4d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00c53	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c56	89 54 01 68	 mov	 DWORD PTR [ecx+eax+104], edx
  00c5a	e9 52 04 00 00	 jmp	 $LN38@FilterSkil
$LN25@FilterSkil:

; 241  : 	case eSkill11: this->rUser[aIndex].PetDamageBonus++;	break;

  00c5f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c62	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00c68	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c6b	8b 54 01 6c	 mov	 edx, DWORD PTR [ecx+eax+108]
  00c6f	83 c2 01	 add	 edx, 1
  00c72	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c75	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00c7b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c7e	89 54 01 6c	 mov	 DWORD PTR [ecx+eax+108], edx
  00c82	e9 2a 04 00 00	 jmp	 $LN38@FilterSkil
$LN24@FilterSkil:

; 242  : 	case eSkill12: this->rUser[aIndex].FinalLife++;	break;

  00c87	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c8a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00c90	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c93	8b 54 01 70	 mov	 edx, DWORD PTR [ecx+eax+112]
  00c97	83 c2 01	 add	 edx, 1
  00c9a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00c9d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00ca3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ca6	89 54 01 70	 mov	 DWORD PTR [ecx+eax+112], edx
  00caa	e9 02 04 00 00	 jmp	 $LN38@FilterSkil
$LN23@FilterSkil:

; 243  : 	case eSkill13: this->rUser[aIndex].Strength++;	break;

  00caf	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00cb2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00cb8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cbb	8b 54 01 74	 mov	 edx, DWORD PTR [ecx+eax+116]
  00cbf	83 c2 01	 add	 edx, 1
  00cc2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00cc5	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00ccb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cce	89 54 01 74	 mov	 DWORD PTR [ecx+eax+116], edx
  00cd2	e9 da 03 00 00	 jmp	 $LN38@FilterSkil
$LN22@FilterSkil:

; 244  : 	case eSkill14: this->rUser[aIndex].DefenceRate++;	break;

  00cd7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00cda	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00ce0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ce3	8b 54 01 78	 mov	 edx, DWORD PTR [ecx+eax+120]
  00ce7	83 c2 01	 add	 edx, 1
  00cea	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ced	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00cf3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cf6	89 54 01 78	 mov	 DWORD PTR [ecx+eax+120], edx
  00cfa	e9 b2 03 00 00	 jmp	 $LN38@FilterSkil
$LN21@FilterSkil:

; 245  : 	case eSkill15: this->rUser[aIndex].FireDamage++;	break;

  00cff	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d02	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00d08	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d0b	8b 54 01 7c	 mov	 edx, DWORD PTR [ecx+eax+124]
  00d0f	83 c2 01	 add	 edx, 1
  00d12	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d15	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00d1b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d1e	89 54 01 7c	 mov	 DWORD PTR [ecx+eax+124], edx
  00d22	e9 8a 03 00 00	 jmp	 $LN38@FilterSkil
$LN20@FilterSkil:

; 246  : 	case eSkill16: this->rUser[aIndex].Energy++;	break;

  00d27	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d2a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00d30	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d33	8b 94 01 80 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+128]
  00d3a	83 c2 01	 add	 edx, 1
  00d3d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d40	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00d46	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d49	89 94 01 80 00
	00 00		 mov	 DWORD PTR [ecx+eax+128], edx
  00d50	e9 5c 03 00 00	 jmp	 $LN38@FilterSkil
$LN19@FilterSkil:

; 247  : 	case eSkill17: this->rUser[aIndex].Agility++;	break;

  00d55	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d58	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00d5e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d61	8b 94 01 84 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+132]
  00d68	83 c2 01	 add	 edx, 1
  00d6b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d6e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00d74	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d77	89 94 01 84 00
	00 00		 mov	 DWORD PTR [ecx+eax+132], edx
  00d7e	e9 2e 03 00 00	 jmp	 $LN38@FilterSkil
$LN18@FilterSkil:

; 248  : 	case eSkill18: this->rUser[aIndex].DoubleDamage++;	break;

  00d83	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d86	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00d8c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d8f	8b 94 01 88 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+136]
  00d96	83 c2 01	 add	 edx, 1
  00d99	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00d9c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00da2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00da5	89 94 01 88 00
	00 00		 mov	 DWORD PTR [ecx+eax+136], edx
  00dac	e9 00 03 00 00	 jmp	 $LN38@FilterSkil
$LN17@FilterSkil:

; 249  : 	case eSkill19: this->rUser[aIndex].FinalSD++;	break;

  00db1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00db4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00dba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dbd	8b 94 01 8c 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+140]
  00dc4	83 c2 01	 add	 edx, 1
  00dc7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00dca	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00dd0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dd3	89 94 01 8c 00
	00 00		 mov	 DWORD PTR [ecx+eax+140], edx
  00dda	e9 d2 02 00 00	 jmp	 $LN38@FilterSkil
$LN16@FilterSkil:

; 250  : 	case eSkill20: this->rUser[aIndex].FinalDefence++;	break;

  00ddf	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00de2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00de8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00deb	8b 94 01 90 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+144]
  00df2	83 c2 01	 add	 edx, 1
  00df5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00df8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00dfe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e01	89 94 01 90 00
	00 00		 mov	 DWORD PTR [ecx+eax+144], edx
  00e08	e9 a4 02 00 00	 jmp	 $LN38@FilterSkil
$LN15@FilterSkil:

; 251  : 	case eSkill21: this->rUser[aIndex].ZenDrop++;	break;

  00e0d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00e10	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e16	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e19	8b 94 01 94 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+148]
  00e20	83 c2 01	 add	 edx, 1
  00e23	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00e26	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e2c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e2f	89 94 01 94 00
	00 00		 mov	 DWORD PTR [ecx+eax+148], edx
  00e36	e9 76 02 00 00	 jmp	 $LN38@FilterSkil
$LN14@FilterSkil:

; 252  : 	case eSkill22: this->rUser[aIndex].GuildBonus++;	break;

  00e3b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00e3e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e44	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e47	8b 94 01 98 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+152]
  00e4e	83 c2 01	 add	 edx, 1
  00e51	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00e54	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e5a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e5d	89 94 01 98 00
	00 00		 mov	 DWORD PTR [ecx+eax+152], edx
  00e64	e9 48 02 00 00	 jmp	 $LN38@FilterSkil
$LN13@FilterSkil:

; 253  : 	case eSkill23: this->rUser[aIndex].ReflectDamage++;	break;

  00e69	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00e6c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e72	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e75	8b 94 01 9c 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+156]
  00e7c	83 c2 01	 add	 edx, 1
  00e7f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00e82	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00e88	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e8b	89 94 01 9c 00
	00 00		 mov	 DWORD PTR [ecx+eax+156], edx
  00e92	e9 1a 02 00 00	 jmp	 $LN38@FilterSkil
$LN12@FilterSkil:

; 254  : 	case eSkill24: this->rUser[aIndex].ExellentDamageRate++;	break;

  00e97	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00e9a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00ea0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ea3	8b 94 01 a0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+160]
  00eaa	83 c2 01	 add	 edx, 1
  00ead	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00eb0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00eb6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00eb9	89 94 01 a0 00
	00 00		 mov	 DWORD PTR [ecx+eax+160], edx
  00ec0	e9 ec 01 00 00	 jmp	 $LN38@FilterSkil
$LN11@FilterSkil:

; 255  : 	case eSkill25: this->rUser[aIndex].PvPBonusPlus++;	break;

  00ec5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ec8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00ece	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ed1	8b 94 01 a4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+164]
  00ed8	83 c2 01	 add	 edx, 1
  00edb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ede	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00ee4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ee7	89 94 01 a4 00
	00 00		 mov	 DWORD PTR [ecx+eax+164], edx
  00eee	e9 be 01 00 00	 jmp	 $LN38@FilterSkil
$LN10@FilterSkil:

; 256  : 	case eSkill26: this->rUser[aIndex].MinDefence++;	break;

  00ef3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ef6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00efc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00eff	8b 94 01 a8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+168]
  00f06	83 c2 01	 add	 edx, 1
  00f09	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00f0c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00f12	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f15	89 94 01 a8 00
	00 00		 mov	 DWORD PTR [ecx+eax+168], edx
  00f1c	e9 90 01 00 00	 jmp	 $LN38@FilterSkil
$LN9@FilterSkil:

; 257  : 	case eSkill27: this->rUser[aIndex].Experience++;	break;

  00f21	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00f24	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00f2a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f2d	8b 94 01 ac 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+172]
  00f34	83 c2 01	 add	 edx, 1
  00f37	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00f3a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00f40	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f43	89 94 01 ac 00
	00 00		 mov	 DWORD PTR [ecx+eax+172], edx
  00f4a	e9 62 01 00 00	 jmp	 $LN38@FilterSkil
$LN8@FilterSkil:

; 258  : 	case eSkill28: this->rUser[aIndex].StartSD++;	break;

  00f4f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00f52	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00f58	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f5b	8b 94 01 b0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+176]
  00f62	83 c2 01	 add	 edx, 1
  00f65	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00f68	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00f6e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f71	89 94 01 b0 00
	00 00		 mov	 DWORD PTR [ecx+eax+176], edx
  00f78	e9 34 01 00 00	 jmp	 $LN38@FilterSkil
$LN7@FilterSkil:

; 259  : 	case eSkill29: this->rUser[aIndex].PartyBonus++;	break;

  00f7d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00f80	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00f86	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f89	8b 94 01 b4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+180]
  00f90	83 c2 01	 add	 edx, 1
  00f93	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00f96	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00f9c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f9f	89 94 01 b4 00
	00 00		 mov	 DWORD PTR [ecx+eax+180], edx
  00fa6	e9 06 01 00 00	 jmp	 $LN38@FilterSkil
$LN6@FilterSkil:

; 260  : 	case eSkill30: this->rUser[aIndex].IceDamage++;	break;

  00fab	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00fae	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00fb4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fb7	8b 94 01 b8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+184]
  00fbe	83 c2 01	 add	 edx, 1
  00fc1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00fc4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00fca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fcd	89 94 01 b8 00
	00 00		 mov	 DWORD PTR [ecx+eax+184], edx
  00fd4	e9 d8 00 00 00	 jmp	 $LN38@FilterSkil
$LN5@FilterSkil:

; 261  : 	case eSkill31: this->rUser[aIndex].DistanceAttack++;	break;

  00fd9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00fdc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00fe2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fe5	8b 94 01 bc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+188]
  00fec	83 c2 01	 add	 edx, 1
  00fef	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ff2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  00ff8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ffb	89 94 01 bc 00
	00 00		 mov	 DWORD PTR [ecx+eax+188], edx
  01002	e9 aa 00 00 00	 jmp	 $LN38@FilterSkil
$LN4@FilterSkil:

; 262  : 	case eSkill32: this->rUser[aIndex].AttackRate++;	break;

  01007	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0100a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01013	8b 94 01 c0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+192]
  0101a	83 c2 01	 add	 edx, 1
  0101d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01020	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01029	89 94 01 c0 00
	00 00		 mov	 DWORD PTR [ecx+eax+192], edx
  01030	eb 7f		 jmp	 SHORT $LN38@FilterSkil
$LN3@FilterSkil:

; 263  : 	case eSkill33: this->rUser[aIndex].WeaponBonus++;	break;

  01032	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01035	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0103b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0103e	8b 94 01 c4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+196]
  01045	83 c2 01	 add	 edx, 1
  01048	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0104b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01054	89 94 01 c4 00
	00 00		 mov	 DWORD PTR [ecx+eax+196], edx
  0105b	eb 54		 jmp	 SHORT $LN38@FilterSkil
$LN2@FilterSkil:

; 264  : 	case eSkill34: this->rUser[aIndex].ExellentDamage++;	break;

  0105d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01060	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01069	8b 94 01 c8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+200]
  01070	83 c2 01	 add	 edx, 1
  01073	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01076	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0107c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0107f	89 94 01 c8 00
	00 00		 mov	 DWORD PTR [ecx+eax+200], edx
  01086	eb 29		 jmp	 SHORT $LN38@FilterSkil
$LN1@FilterSkil:

; 265  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  01088	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0108b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01094	8b 94 01 cc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+204]
  0109b	83 c2 01	 add	 edx, 1
  0109e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  010a1	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  010a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010aa	89 94 01 cc 00
	00 00		 mov	 DWORD PTR [ecx+eax+204], edx
$LN38@FilterSkil:

; 266  : 	}
; 267  : 
; 268  : 	//LPOBJ lpObj =&gObj[aIndex];
; 269  : 	//if(SkillID == eSkill2)
; 270  : 	//{
; 271  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 272  : 	//	lpObj->ExFreePoints += this->rSkill[eSkill2].StartDamage;
; 273  : 	//}
; 274  : 	////Fix Debug
; 275  : 	////Strength
; 276  : 	//if(SkillID == eSkill13)
; 277  : 	//{
; 278  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 279  : 	//}
; 280  : 	////Energy
; 281  : 	//if(SkillID == eSkill16)
; 282  : 	//{
; 283  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 284  : 	//}
; 285  : 	////Agility
; 286  : 	//if(SkillID == eSkill17)
; 287  : 	//{
; 288  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 289  : 	//}
; 290  : }

  010b1	5f		 pop	 edi
  010b2	5e		 pop	 esi
  010b3	5b		 pop	 ebx
  010b4	8b e5		 mov	 esp, ebp
  010b6	5d		 pop	 ebp
  010b7	c2 08 00	 ret	 8
  010ba	8b ff		 npad	 2
$LN40@FilterSkil:
  010bc	00 00 00 00	 DD	 $LN35@FilterSkil
  010c0	00 00 00 00	 DD	 $LN34@FilterSkil
  010c4	00 00 00 00	 DD	 $LN33@FilterSkil
  010c8	00 00 00 00	 DD	 $LN32@FilterSkil
  010cc	00 00 00 00	 DD	 $LN31@FilterSkil
  010d0	00 00 00 00	 DD	 $LN30@FilterSkil
  010d4	00 00 00 00	 DD	 $LN29@FilterSkil
  010d8	00 00 00 00	 DD	 $LN28@FilterSkil
  010dc	00 00 00 00	 DD	 $LN27@FilterSkil
  010e0	00 00 00 00	 DD	 $LN26@FilterSkil
  010e4	00 00 00 00	 DD	 $LN25@FilterSkil
  010e8	00 00 00 00	 DD	 $LN24@FilterSkil
  010ec	00 00 00 00	 DD	 $LN23@FilterSkil
  010f0	00 00 00 00	 DD	 $LN22@FilterSkil
  010f4	00 00 00 00	 DD	 $LN21@FilterSkil
  010f8	00 00 00 00	 DD	 $LN20@FilterSkil
  010fc	00 00 00 00	 DD	 $LN19@FilterSkil
  01100	00 00 00 00	 DD	 $LN18@FilterSkil
  01104	00 00 00 00	 DD	 $LN17@FilterSkil
  01108	00 00 00 00	 DD	 $LN16@FilterSkil
  0110c	00 00 00 00	 DD	 $LN15@FilterSkil
  01110	00 00 00 00	 DD	 $LN14@FilterSkil
  01114	00 00 00 00	 DD	 $LN13@FilterSkil
  01118	00 00 00 00	 DD	 $LN12@FilterSkil
  0111c	00 00 00 00	 DD	 $LN11@FilterSkil
  01120	00 00 00 00	 DD	 $LN10@FilterSkil
  01124	00 00 00 00	 DD	 $LN9@FilterSkil
  01128	00 00 00 00	 DD	 $LN8@FilterSkil
  0112c	00 00 00 00	 DD	 $LN7@FilterSkil
  01130	00 00 00 00	 DD	 $LN6@FilterSkil
  01134	00 00 00 00	 DD	 $LN5@FilterSkil
  01138	00 00 00 00	 DD	 $LN4@FilterSkil
  0113c	00 00 00 00	 DD	 $LN3@FilterSkil
  01140	00 00 00 00	 DD	 $LN2@FilterSkil
  01144	00 00 00 00	 DD	 $LN1@FilterSkil
?FilterSkill@cSystemOfRage@@QAEXHH@Z ENDP		; cSystemOfRage::FilterSkill
_TEXT	ENDS
PUBLIC	?ReturnPoint@cSystemOfRage@@QAEHHH@Z		; cSystemOfRage::ReturnPoint
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_SkillID$ = 12						; size = 4
?ReturnPoint@cSystemOfRage@@QAEHHH@Z PROC		; cSystemOfRage::ReturnPoint
; _this$ = ecx

; 293  : {

  01150	55		 push	 ebp
  01151	8b ec		 mov	 ebp, esp
  01153	83 ec 48	 sub	 esp, 72			; 00000048H
  01156	53		 push	 ebx
  01157	56		 push	 esi
  01158	57		 push	 edi
  01159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 294  : 	switch(SkillID)

  0115c	8b 45 0c	 mov	 eax, DWORD PTR _SkillID$[ebp]
  0115f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  01162	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  01165	83 e9 01	 sub	 ecx, 1
  01168	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  0116b	83 7d b8 22	 cmp	 DWORD PTR tv64[ebp], 34	; 00000022H
  0116f	0f 87 b1 03 00
	00		 ja	 $LN36@ReturnPoin
  01175	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  01178	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN40@ReturnPoin[edx*4]
$LN35@ReturnPoin:

; 295  : 	{
; 296  : 	case eSkill1:  return this->rUser[aIndex].Damage;		break;

  0117f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01182	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01188	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0118b	8b 44 01 44	 mov	 eax, DWORD PTR [ecx+eax+68]
  0118f	e9 a1 03 00 00	 jmp	 $LN38@ReturnPoin
  01194	e9 8d 03 00 00	 jmp	 $LN36@ReturnPoin
$LN34@ReturnPoin:

; 297  : 	case eSkill2:  return this->rUser[aIndex].FreePoints;		break;

  01199	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0119c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  011a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011a5	8b 44 01 48	 mov	 eax, DWORD PTR [ecx+eax+72]
  011a9	e9 87 03 00 00	 jmp	 $LN38@ReturnPoin
  011ae	e9 73 03 00 00	 jmp	 $LN36@ReturnPoin
$LN33@ReturnPoin:

; 298  : 	case eSkill3:  return this->rUser[aIndex].SummonPet;		break;

  011b3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  011b6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  011bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011bf	8b 44 01 4c	 mov	 eax, DWORD PTR [ecx+eax+76]
  011c3	e9 6d 03 00 00	 jmp	 $LN38@ReturnPoin
  011c8	e9 59 03 00 00	 jmp	 $LN36@ReturnPoin
$LN32@ReturnPoin:

; 299  : 	case eSkill4:  return this->rUser[aIndex].WingsDamagePlus;		break;

  011cd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  011d0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  011d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011d9	8b 44 01 50	 mov	 eax, DWORD PTR [ecx+eax+80]
  011dd	e9 53 03 00 00	 jmp	 $LN38@ReturnPoin
  011e2	e9 3f 03 00 00	 jmp	 $LN36@ReturnPoin
$LN31@ReturnPoin:

; 300  : 	case eSkill5:  return this->rUser[aIndex].FinalMana;		break;

  011e7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  011ea	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  011f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011f3	8b 44 01 54	 mov	 eax, DWORD PTR [ecx+eax+84]
  011f7	e9 39 03 00 00	 jmp	 $LN38@ReturnPoin
  011fc	e9 25 03 00 00	 jmp	 $LN36@ReturnPoin
$LN30@ReturnPoin:

; 301  : 	case eSkill6:  return this->rUser[aIndex].IgnoreDefence;		break;

  01201	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01204	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0120a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0120d	8b 44 01 58	 mov	 eax, DWORD PTR [ecx+eax+88]
  01211	e9 1f 03 00 00	 jmp	 $LN38@ReturnPoin
  01216	e9 0b 03 00 00	 jmp	 $LN36@ReturnPoin
$LN29@ReturnPoin:

; 302  : 	case eSkill7:  return this->rUser[aIndex].ResetLevel;		break;

  0121b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0121e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01224	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01227	8b 44 01 5c	 mov	 eax, DWORD PTR [ecx+eax+92]
  0122b	e9 05 03 00 00	 jmp	 $LN38@ReturnPoin
  01230	e9 f1 02 00 00	 jmp	 $LN36@ReturnPoin
$LN28@ReturnPoin:

; 303  : 	case eSkill8:  return this->rUser[aIndex].Teleport;		break;

  01235	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01238	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0123e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01241	8b 44 01 60	 mov	 eax, DWORD PTR [ecx+eax+96]
  01245	e9 eb 02 00 00	 jmp	 $LN38@ReturnPoin
  0124a	e9 d7 02 00 00	 jmp	 $LN36@ReturnPoin
$LN27@ReturnPoin:

; 304  : 	case eSkill9:  return this->rUser[aIndex].CriticalDamageRate;		break;

  0124f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01252	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01258	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0125b	8b 44 01 64	 mov	 eax, DWORD PTR [ecx+eax+100]
  0125f	e9 d1 02 00 00	 jmp	 $LN38@ReturnPoin
  01264	e9 bd 02 00 00	 jmp	 $LN36@ReturnPoin
$LN26@ReturnPoin:

; 305  : 	case eSkill10: return this->rUser[aIndex].AbsordDamage;	break;

  01269	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0126c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01272	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01275	8b 44 01 68	 mov	 eax, DWORD PTR [ecx+eax+104]
  01279	e9 b7 02 00 00	 jmp	 $LN38@ReturnPoin
  0127e	e9 a3 02 00 00	 jmp	 $LN36@ReturnPoin
$LN25@ReturnPoin:

; 306  : 	case eSkill11: return this->rUser[aIndex].PetDamageBonus;	break;

  01283	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01286	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0128c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0128f	8b 44 01 6c	 mov	 eax, DWORD PTR [ecx+eax+108]
  01293	e9 9d 02 00 00	 jmp	 $LN38@ReturnPoin
  01298	e9 89 02 00 00	 jmp	 $LN36@ReturnPoin
$LN24@ReturnPoin:

; 307  : 	case eSkill12: return this->rUser[aIndex].FinalLife;	break;

  0129d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  012a0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  012a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012a9	8b 44 01 70	 mov	 eax, DWORD PTR [ecx+eax+112]
  012ad	e9 83 02 00 00	 jmp	 $LN38@ReturnPoin
  012b2	e9 6f 02 00 00	 jmp	 $LN36@ReturnPoin
$LN23@ReturnPoin:

; 308  : 	case eSkill13: return this->rUser[aIndex].Strength;	break;

  012b7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  012ba	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  012c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012c3	8b 44 01 74	 mov	 eax, DWORD PTR [ecx+eax+116]
  012c7	e9 69 02 00 00	 jmp	 $LN38@ReturnPoin
  012cc	e9 55 02 00 00	 jmp	 $LN36@ReturnPoin
$LN22@ReturnPoin:

; 309  : 	case eSkill14: return this->rUser[aIndex].DefenceRate;	break;

  012d1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  012d4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  012da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012dd	8b 44 01 78	 mov	 eax, DWORD PTR [ecx+eax+120]
  012e1	e9 4f 02 00 00	 jmp	 $LN38@ReturnPoin
  012e6	e9 3b 02 00 00	 jmp	 $LN36@ReturnPoin
$LN21@ReturnPoin:

; 310  : 	case eSkill15: return this->rUser[aIndex].FireDamage;	break;

  012eb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  012ee	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  012f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012f7	8b 44 01 7c	 mov	 eax, DWORD PTR [ecx+eax+124]
  012fb	e9 35 02 00 00	 jmp	 $LN38@ReturnPoin
  01300	e9 21 02 00 00	 jmp	 $LN36@ReturnPoin
$LN20@ReturnPoin:

; 311  : 	case eSkill16: return this->rUser[aIndex].Energy;	break;

  01305	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01308	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0130e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01311	8b 84 01 80 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+128]
  01318	e9 18 02 00 00	 jmp	 $LN38@ReturnPoin
  0131d	e9 04 02 00 00	 jmp	 $LN36@ReturnPoin
$LN19@ReturnPoin:

; 312  : 	case eSkill17: return this->rUser[aIndex].Agility;	break;

  01322	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01325	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0132b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0132e	8b 84 01 84 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+132]
  01335	e9 fb 01 00 00	 jmp	 $LN38@ReturnPoin
  0133a	e9 e7 01 00 00	 jmp	 $LN36@ReturnPoin
$LN18@ReturnPoin:

; 313  : 	case eSkill18: return this->rUser[aIndex].DoubleDamage;	break;

  0133f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01342	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01348	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0134b	8b 84 01 88 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+136]
  01352	e9 de 01 00 00	 jmp	 $LN38@ReturnPoin
  01357	e9 ca 01 00 00	 jmp	 $LN36@ReturnPoin
$LN17@ReturnPoin:

; 314  : 	case eSkill19: return this->rUser[aIndex].FinalSD;	break;

  0135c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0135f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01365	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01368	8b 84 01 8c 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+140]
  0136f	e9 c1 01 00 00	 jmp	 $LN38@ReturnPoin
  01374	e9 ad 01 00 00	 jmp	 $LN36@ReturnPoin
$LN16@ReturnPoin:

; 315  : 	case eSkill20: return this->rUser[aIndex].FinalDefence;	break;

  01379	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0137c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01382	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01385	8b 84 01 90 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+144]
  0138c	e9 a4 01 00 00	 jmp	 $LN38@ReturnPoin
  01391	e9 90 01 00 00	 jmp	 $LN36@ReturnPoin
$LN15@ReturnPoin:

; 316  : 	case eSkill21: return this->rUser[aIndex].ZenDrop;	break;

  01396	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01399	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0139f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013a2	8b 84 01 94 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+148]
  013a9	e9 87 01 00 00	 jmp	 $LN38@ReturnPoin
  013ae	e9 73 01 00 00	 jmp	 $LN36@ReturnPoin
$LN14@ReturnPoin:

; 317  : 	case eSkill22: return this->rUser[aIndex].GuildBonus;	break;

  013b3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  013b6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  013bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013bf	8b 84 01 98 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+152]
  013c6	e9 6a 01 00 00	 jmp	 $LN38@ReturnPoin
  013cb	e9 56 01 00 00	 jmp	 $LN36@ReturnPoin
$LN13@ReturnPoin:

; 318  : 	case eSkill23: return this->rUser[aIndex].ReflectDamage;	break;

  013d0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  013d3	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  013d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013dc	8b 84 01 9c 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+156]
  013e3	e9 4d 01 00 00	 jmp	 $LN38@ReturnPoin
  013e8	e9 39 01 00 00	 jmp	 $LN36@ReturnPoin
$LN12@ReturnPoin:

; 319  : 	case eSkill24: return this->rUser[aIndex].ExellentDamageRate;	break;

  013ed	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  013f0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  013f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013f9	8b 84 01 a0 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+160]
  01400	e9 30 01 00 00	 jmp	 $LN38@ReturnPoin
  01405	e9 1c 01 00 00	 jmp	 $LN36@ReturnPoin
$LN11@ReturnPoin:

; 320  : 	case eSkill25: return this->rUser[aIndex].PvPBonusPlus;	break;

  0140a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0140d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01413	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01416	8b 84 01 a4 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+164]
  0141d	e9 13 01 00 00	 jmp	 $LN38@ReturnPoin
  01422	e9 ff 00 00 00	 jmp	 $LN36@ReturnPoin
$LN10@ReturnPoin:

; 321  : 	case eSkill26: return this->rUser[aIndex].MinDefence;	break;

  01427	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0142a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01430	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01433	8b 84 01 a8 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+168]
  0143a	e9 f6 00 00 00	 jmp	 $LN38@ReturnPoin
  0143f	e9 e2 00 00 00	 jmp	 $LN36@ReturnPoin
$LN9@ReturnPoin:

; 322  : 	case eSkill27: return this->rUser[aIndex].Experience;	break;

  01444	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01447	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0144d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01450	8b 84 01 ac 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+172]
  01457	e9 d9 00 00 00	 jmp	 $LN38@ReturnPoin
  0145c	e9 c5 00 00 00	 jmp	 $LN36@ReturnPoin
$LN8@ReturnPoin:

; 323  : 	case eSkill28: return this->rUser[aIndex].StartSD;	break;

  01461	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01464	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0146a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0146d	8b 84 01 b0 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+176]
  01474	e9 bc 00 00 00	 jmp	 $LN38@ReturnPoin
  01479	e9 a8 00 00 00	 jmp	 $LN36@ReturnPoin
$LN7@ReturnPoin:

; 324  : 	case eSkill29: return this->rUser[aIndex].PartyBonus;	break;

  0147e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01481	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01487	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0148a	8b 84 01 b4 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+180]
  01491	e9 9f 00 00 00	 jmp	 $LN38@ReturnPoin
  01496	e9 8b 00 00 00	 jmp	 $LN36@ReturnPoin
$LN6@ReturnPoin:

; 325  : 	case eSkill30: return this->rUser[aIndex].IceDamage;	break;

  0149b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0149e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  014a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014a7	8b 84 01 b8 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+184]
  014ae	e9 82 00 00 00	 jmp	 $LN38@ReturnPoin
  014b3	eb 71		 jmp	 SHORT $LN36@ReturnPoin
$LN5@ReturnPoin:

; 326  : 	case eSkill31: return this->rUser[aIndex].DistanceAttack;	break;

  014b5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014b8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  014be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014c1	8b 84 01 bc 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+188]
  014c8	eb 6b		 jmp	 SHORT $LN38@ReturnPoin
  014ca	eb 5a		 jmp	 SHORT $LN36@ReturnPoin
$LN4@ReturnPoin:

; 327  : 	case eSkill32: return this->rUser[aIndex].AttackRate;	break;

  014cc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014cf	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  014d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014d8	8b 84 01 c0 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+192]
  014df	eb 54		 jmp	 SHORT $LN38@ReturnPoin
  014e1	eb 43		 jmp	 SHORT $LN36@ReturnPoin
$LN3@ReturnPoin:

; 328  : 	case eSkill33: return this->rUser[aIndex].WeaponBonus;	break;

  014e3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014e6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  014ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014ef	8b 84 01 c4 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+196]
  014f6	eb 3d		 jmp	 SHORT $LN38@ReturnPoin
  014f8	eb 2c		 jmp	 SHORT $LN36@ReturnPoin
$LN2@ReturnPoin:

; 329  : 	case eSkill34: return this->rUser[aIndex].ExellentDamage;	break;

  014fa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  014fd	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01503	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01506	8b 84 01 c8 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+200]
  0150d	eb 26		 jmp	 SHORT $LN38@ReturnPoin
  0150f	eb 15		 jmp	 SHORT $LN36@ReturnPoin
$LN1@ReturnPoin:

; 330  : 	case eSkill35: return this->rUser[aIndex].CriticalDamage;	break;

  01511	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01514	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0151a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0151d	8b 84 01 cc 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+204]
  01524	eb 0f		 jmp	 SHORT $LN38@ReturnPoin
$LN36@ReturnPoin:

; 331  : 	}
; 332  : 	CloseClient(aIndex);

  01526	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01529	50		 push	 eax
  0152a	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  0152f	83 c4 04	 add	 esp, 4

; 333  : 	return -1;

  01532	83 c8 ff	 or	 eax, -1
$LN38@ReturnPoin:

; 334  : }

  01535	5f		 pop	 edi
  01536	5e		 pop	 esi
  01537	5b		 pop	 ebx
  01538	8b e5		 mov	 esp, ebp
  0153a	5d		 pop	 ebp
  0153b	c2 08 00	 ret	 8
  0153e	8b ff		 npad	 2
$LN40@ReturnPoin:
  01540	00 00 00 00	 DD	 $LN35@ReturnPoin
  01544	00 00 00 00	 DD	 $LN34@ReturnPoin
  01548	00 00 00 00	 DD	 $LN33@ReturnPoin
  0154c	00 00 00 00	 DD	 $LN32@ReturnPoin
  01550	00 00 00 00	 DD	 $LN31@ReturnPoin
  01554	00 00 00 00	 DD	 $LN30@ReturnPoin
  01558	00 00 00 00	 DD	 $LN29@ReturnPoin
  0155c	00 00 00 00	 DD	 $LN28@ReturnPoin
  01560	00 00 00 00	 DD	 $LN27@ReturnPoin
  01564	00 00 00 00	 DD	 $LN26@ReturnPoin
  01568	00 00 00 00	 DD	 $LN25@ReturnPoin
  0156c	00 00 00 00	 DD	 $LN24@ReturnPoin
  01570	00 00 00 00	 DD	 $LN23@ReturnPoin
  01574	00 00 00 00	 DD	 $LN22@ReturnPoin
  01578	00 00 00 00	 DD	 $LN21@ReturnPoin
  0157c	00 00 00 00	 DD	 $LN20@ReturnPoin
  01580	00 00 00 00	 DD	 $LN19@ReturnPoin
  01584	00 00 00 00	 DD	 $LN18@ReturnPoin
  01588	00 00 00 00	 DD	 $LN17@ReturnPoin
  0158c	00 00 00 00	 DD	 $LN16@ReturnPoin
  01590	00 00 00 00	 DD	 $LN15@ReturnPoin
  01594	00 00 00 00	 DD	 $LN14@ReturnPoin
  01598	00 00 00 00	 DD	 $LN13@ReturnPoin
  0159c	00 00 00 00	 DD	 $LN12@ReturnPoin
  015a0	00 00 00 00	 DD	 $LN11@ReturnPoin
  015a4	00 00 00 00	 DD	 $LN10@ReturnPoin
  015a8	00 00 00 00	 DD	 $LN9@ReturnPoin
  015ac	00 00 00 00	 DD	 $LN8@ReturnPoin
  015b0	00 00 00 00	 DD	 $LN7@ReturnPoin
  015b4	00 00 00 00	 DD	 $LN6@ReturnPoin
  015b8	00 00 00 00	 DD	 $LN5@ReturnPoin
  015bc	00 00 00 00	 DD	 $LN4@ReturnPoin
  015c0	00 00 00 00	 DD	 $LN3@ReturnPoin
  015c4	00 00 00 00	 DD	 $LN2@ReturnPoin
  015c8	00 00 00 00	 DD	 $LN1@ReturnPoin
?ReturnPoint@cSystemOfRage@@QAEHHH@Z ENDP		; cSystemOfRage::ReturnPoint
_TEXT	ENDS
PUBLIC	?ReturnCalc@cSystemOfRage@@QAEHHHH@Z		; cSystemOfRage::ReturnCalc
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv64 = -76						; size = 4
_Result$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_SkillID$ = 12						; size = 4
_Pw$ = 16						; size = 4
?ReturnCalc@cSystemOfRage@@QAEHHHH@Z PROC		; cSystemOfRage::ReturnCalc
; _this$ = ecx

; 337  : {

  015d0	55		 push	 ebp
  015d1	8b ec		 mov	 ebp, esp
  015d3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  015d6	53		 push	 ebx
  015d7	56		 push	 esi
  015d8	57		 push	 edi
  015d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 338  : 	int Result = 0;

  015dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Result$[ebp], 0

; 339  : 	switch(SkillID)

  015e3	8b 45 0c	 mov	 eax, DWORD PTR _SkillID$[ebp]
  015e6	89 45 b4	 mov	 DWORD PTR tv64[ebp], eax
  015e9	8b 4d b4	 mov	 ecx, DWORD PTR tv64[ebp]
  015ec	83 e9 01	 sub	 ecx, 1
  015ef	89 4d b4	 mov	 DWORD PTR tv64[ebp], ecx
  015f2	83 7d b4 22	 cmp	 DWORD PTR tv64[ebp], 34	; 00000022H
  015f6	0f 87 d3 05 00
	00		 ja	 $LN40@ReturnCalc
  015fc	8b 55 b4	 mov	 edx, DWORD PTR tv64[ebp]
  015ff	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN44@ReturnCalc[edx*4]
$LN39@ReturnCalc:

; 340  : 	{
; 341  : 	case eSkill1:  Result = this->rUser[aIndex].Damage * this->rSkill[SkillID].StartDamage;		break;

  01606	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01609	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0160f	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01612	6b c9 44	 imul	 ecx, 68			; 00000044H
  01615	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01618	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0161b	8b 44 02 44	 mov	 eax, DWORD PTR [edx+eax+68]
  0161f	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01627	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  0162a	e9 a0 05 00 00	 jmp	 $LN40@ReturnCalc
$LN38@ReturnCalc:

; 342  : 	case eSkill2:  Result = this->rUser[aIndex].FreePoints * this->rSkill[SkillID].StartDamage;		break;

  0162f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01632	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01638	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  0163b	6b c9 44	 imul	 ecx, 68			; 00000044H
  0163e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01641	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01644	8b 44 02 48	 mov	 eax, DWORD PTR [edx+eax+72]
  01648	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01650	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01653	e9 77 05 00 00	 jmp	 $LN40@ReturnCalc
$LN37@ReturnCalc:

; 343  : 	case eSkill3:  Result = this->rUser[aIndex].SummonPet * this->rSkill[SkillID].StartDamage;		break;

  01658	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0165b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01661	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01664	6b c9 44	 imul	 ecx, 68			; 00000044H
  01667	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0166a	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0166d	8b 44 02 4c	 mov	 eax, DWORD PTR [edx+eax+76]
  01671	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01679	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  0167c	e9 4e 05 00 00	 jmp	 $LN40@ReturnCalc
$LN36@ReturnCalc:

; 344  : 	case eSkill4:  Result = this->rUser[aIndex].WingsDamagePlus * this->rSkill[SkillID].StartDamage;		break;

  01681	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01684	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0168a	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  0168d	6b c9 44	 imul	 ecx, 68			; 00000044H
  01690	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01693	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01696	8b 44 02 50	 mov	 eax, DWORD PTR [edx+eax+80]
  0169a	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  016a2	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  016a5	e9 25 05 00 00	 jmp	 $LN40@ReturnCalc
$LN35@ReturnCalc:

; 345  : 	case eSkill5:  Result = this->rUser[aIndex].FinalMana * this->rSkill[SkillID].StartDamage;		break;

  016aa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  016ad	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  016b3	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  016b6	6b c9 44	 imul	 ecx, 68			; 00000044H
  016b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  016bc	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  016bf	8b 44 02 54	 mov	 eax, DWORD PTR [edx+eax+84]
  016c3	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  016cb	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  016ce	e9 fc 04 00 00	 jmp	 $LN40@ReturnCalc
$LN34@ReturnCalc:

; 346  : 	case eSkill6:  Result = this->rUser[aIndex].IgnoreDefence * this->rSkill[SkillID].StartDamage;		break;

  016d3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  016d6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  016dc	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  016df	6b c9 44	 imul	 ecx, 68			; 00000044H
  016e2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  016e5	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  016e8	8b 44 02 58	 mov	 eax, DWORD PTR [edx+eax+88]
  016ec	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  016f4	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  016f7	e9 d3 04 00 00	 jmp	 $LN40@ReturnCalc
$LN33@ReturnCalc:

; 347  : 	case eSkill7:  Result = this->rUser[aIndex].ResetLevel * this->rSkill[SkillID].StartDamage;		break;

  016fc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  016ff	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01705	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01708	6b c9 44	 imul	 ecx, 68			; 00000044H
  0170b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0170e	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01711	8b 44 02 5c	 mov	 eax, DWORD PTR [edx+eax+92]
  01715	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  0171d	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01720	e9 aa 04 00 00	 jmp	 $LN40@ReturnCalc
$LN32@ReturnCalc:

; 348  : 	case eSkill8:  Result = this->rUser[aIndex].Teleport * this->rSkill[SkillID].StartDamage;		break;

  01725	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01728	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0172e	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01731	6b c9 44	 imul	 ecx, 68			; 00000044H
  01734	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01737	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0173a	8b 44 02 60	 mov	 eax, DWORD PTR [edx+eax+96]
  0173e	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01746	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01749	e9 81 04 00 00	 jmp	 $LN40@ReturnCalc
$LN31@ReturnCalc:

; 349  : 	case eSkill9:  Result = this->rUser[aIndex].CriticalDamageRate * this->rSkill[SkillID].StartDamage;		break;

  0174e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01751	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01757	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  0175a	6b c9 44	 imul	 ecx, 68			; 00000044H
  0175d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01760	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01763	8b 44 02 64	 mov	 eax, DWORD PTR [edx+eax+100]
  01767	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  0176f	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01772	e9 58 04 00 00	 jmp	 $LN40@ReturnCalc
$LN30@ReturnCalc:

; 350  : 	case eSkill10: Result = this->rUser[aIndex].AbsordDamage * this->rSkill[SkillID].StartDamage;	break;

  01777	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0177a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01780	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01783	6b c9 44	 imul	 ecx, 68			; 00000044H
  01786	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01789	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0178c	8b 44 02 68	 mov	 eax, DWORD PTR [edx+eax+104]
  01790	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01798	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  0179b	e9 2f 04 00 00	 jmp	 $LN40@ReturnCalc
$LN29@ReturnCalc:

; 351  : 	case eSkill11: Result = this->rUser[aIndex].PetDamageBonus * this->rSkill[SkillID].StartDamage;	break;

  017a0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  017a3	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  017a9	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  017ac	6b c9 44	 imul	 ecx, 68			; 00000044H
  017af	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  017b2	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  017b5	8b 44 02 6c	 mov	 eax, DWORD PTR [edx+eax+108]
  017b9	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  017c1	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  017c4	e9 06 04 00 00	 jmp	 $LN40@ReturnCalc
$LN28@ReturnCalc:

; 352  : 	case eSkill12: Result = this->rUser[aIndex].FinalLife * this->rSkill[SkillID].StartDamage;	break;

  017c9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  017cc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  017d2	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  017d5	6b c9 44	 imul	 ecx, 68			; 00000044H
  017d8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  017db	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  017de	8b 44 02 70	 mov	 eax, DWORD PTR [edx+eax+112]
  017e2	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  017ea	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  017ed	e9 dd 03 00 00	 jmp	 $LN40@ReturnCalc
$LN27@ReturnCalc:

; 353  : 	case eSkill13: Result = this->rUser[aIndex].Strength * this->rSkill[SkillID].StartDamage;	break;

  017f2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  017f5	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  017fb	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  017fe	6b c9 44	 imul	 ecx, 68			; 00000044H
  01801	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01804	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01807	8b 44 02 74	 mov	 eax, DWORD PTR [edx+eax+116]
  0180b	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01813	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01816	e9 b4 03 00 00	 jmp	 $LN40@ReturnCalc
$LN26@ReturnCalc:

; 354  : 	case eSkill14: Result = this->rUser[aIndex].DefenceRate * this->rSkill[SkillID].StartDamage;	break;

  0181b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0181e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01824	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01827	6b c9 44	 imul	 ecx, 68			; 00000044H
  0182a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0182d	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01830	8b 44 02 78	 mov	 eax, DWORD PTR [edx+eax+120]
  01834	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  0183c	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  0183f	e9 8b 03 00 00	 jmp	 $LN40@ReturnCalc
$LN25@ReturnCalc:

; 355  : 	case eSkill15: Result = this->rUser[aIndex].FireDamage * this->rSkill[SkillID].StartDamage;	break;

  01844	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01847	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0184d	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01850	6b c9 44	 imul	 ecx, 68			; 00000044H
  01853	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01856	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01859	8b 44 02 7c	 mov	 eax, DWORD PTR [edx+eax+124]
  0185d	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01865	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01868	e9 62 03 00 00	 jmp	 $LN40@ReturnCalc
$LN24@ReturnCalc:

; 356  : 	case eSkill16: Result = this->rUser[aIndex].Energy * this->rSkill[SkillID].StartDamage;	break;

  0186d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01870	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01876	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01879	6b c9 44	 imul	 ecx, 68			; 00000044H
  0187c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0187f	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01882	8b 84 02 80 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+128]
  01889	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01891	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01894	e9 36 03 00 00	 jmp	 $LN40@ReturnCalc
$LN23@ReturnCalc:

; 357  : 	case eSkill17: Result = this->rUser[aIndex].Agility * this->rSkill[SkillID].StartDamage;	break;

  01899	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0189c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  018a2	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  018a5	6b c9 44	 imul	 ecx, 68			; 00000044H
  018a8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  018ab	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  018ae	8b 84 02 84 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+132]
  018b5	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  018bd	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  018c0	e9 0a 03 00 00	 jmp	 $LN40@ReturnCalc
$LN22@ReturnCalc:

; 358  : 	case eSkill18: Result = this->rUser[aIndex].DoubleDamage * this->rSkill[SkillID].StartDamage;	break;

  018c5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  018c8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  018ce	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  018d1	6b c9 44	 imul	 ecx, 68			; 00000044H
  018d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  018d7	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  018da	8b 84 02 88 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+136]
  018e1	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  018e9	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  018ec	e9 de 02 00 00	 jmp	 $LN40@ReturnCalc
$LN21@ReturnCalc:

; 359  : 	case eSkill19: Result = this->rUser[aIndex].FinalSD * this->rSkill[SkillID].StartDamage;	break;

  018f1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  018f4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  018fa	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  018fd	6b c9 44	 imul	 ecx, 68			; 00000044H
  01900	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01903	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01906	8b 84 02 8c 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+140]
  0190d	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01915	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01918	e9 b2 02 00 00	 jmp	 $LN40@ReturnCalc
$LN20@ReturnCalc:

; 360  : 	case eSkill20: Result = this->rUser[aIndex].FinalDefence * this->rSkill[SkillID].StartDamage;	break;

  0191d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01920	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01926	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01929	6b c9 44	 imul	 ecx, 68			; 00000044H
  0192c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0192f	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01932	8b 84 02 90 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+144]
  01939	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01941	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01944	e9 86 02 00 00	 jmp	 $LN40@ReturnCalc
$LN19@ReturnCalc:

; 361  : 	case eSkill21: Result = this->rUser[aIndex].ZenDrop * this->rSkill[SkillID].StartDamage;	break;

  01949	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0194c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01952	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01955	6b c9 44	 imul	 ecx, 68			; 00000044H
  01958	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0195b	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0195e	8b 84 02 94 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+148]
  01965	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  0196d	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01970	e9 5a 02 00 00	 jmp	 $LN40@ReturnCalc
$LN18@ReturnCalc:

; 362  : 	case eSkill22: Result = this->rUser[aIndex].GuildBonus * this->rSkill[SkillID].StartDamage;	break;

  01975	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01978	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0197e	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01981	6b c9 44	 imul	 ecx, 68			; 00000044H
  01984	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01987	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0198a	8b 84 02 98 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+152]
  01991	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01999	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  0199c	e9 2e 02 00 00	 jmp	 $LN40@ReturnCalc
$LN17@ReturnCalc:

; 363  : 	case eSkill23: Result = this->rUser[aIndex].ReflectDamage * this->rSkill[SkillID].StartDamage;	break;

  019a1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  019a4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  019aa	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  019ad	6b c9 44	 imul	 ecx, 68			; 00000044H
  019b0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  019b3	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  019b6	8b 84 02 9c 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+156]
  019bd	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  019c5	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  019c8	e9 02 02 00 00	 jmp	 $LN40@ReturnCalc
$LN16@ReturnCalc:

; 364  : 	case eSkill24: Result = this->rUser[aIndex].ExellentDamageRate * this->rSkill[SkillID].StartDamage;	break;

  019cd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  019d0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  019d6	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  019d9	6b c9 44	 imul	 ecx, 68			; 00000044H
  019dc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  019df	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  019e2	8b 84 02 a0 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+160]
  019e9	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  019f1	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  019f4	e9 d6 01 00 00	 jmp	 $LN40@ReturnCalc
$LN15@ReturnCalc:

; 365  : 	case eSkill25: Result = this->rUser[aIndex].PvPBonusPlus * this->rSkill[SkillID].StartDamage;	break;

  019f9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  019fc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01a02	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01a05	6b c9 44	 imul	 ecx, 68			; 00000044H
  01a08	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a0b	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01a0e	8b 84 02 a4 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+164]
  01a15	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01a1d	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01a20	e9 aa 01 00 00	 jmp	 $LN40@ReturnCalc
$LN14@ReturnCalc:

; 366  : 	case eSkill26: Result = this->rUser[aIndex].MinDefence * this->rSkill[SkillID].StartDamage;	break;

  01a25	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01a28	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01a2e	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01a31	6b c9 44	 imul	 ecx, 68			; 00000044H
  01a34	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a37	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01a3a	8b 84 02 a8 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+168]
  01a41	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01a49	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01a4c	e9 7e 01 00 00	 jmp	 $LN40@ReturnCalc
$LN13@ReturnCalc:

; 367  : 	case eSkill27: Result = this->rUser[aIndex].Experience * this->rSkill[SkillID].StartDamage;	break;

  01a51	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01a54	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01a5a	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01a5d	6b c9 44	 imul	 ecx, 68			; 00000044H
  01a60	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a63	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01a66	8b 84 02 ac 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+172]
  01a6d	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01a75	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01a78	e9 52 01 00 00	 jmp	 $LN40@ReturnCalc
$LN12@ReturnCalc:

; 368  : 	case eSkill28: Result = this->rUser[aIndex].StartSD * this->rSkill[SkillID].StartDamage;	break;

  01a7d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01a80	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01a86	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01a89	6b c9 44	 imul	 ecx, 68			; 00000044H
  01a8c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a8f	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01a92	8b 84 02 b0 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+176]
  01a99	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01aa1	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01aa4	e9 26 01 00 00	 jmp	 $LN40@ReturnCalc
$LN11@ReturnCalc:

; 369  : 	case eSkill29: Result = this->rUser[aIndex].PartyBonus * this->rSkill[SkillID].StartDamage;	break;

  01aa9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01aac	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01ab2	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01ab5	6b c9 44	 imul	 ecx, 68			; 00000044H
  01ab8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01abb	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01abe	8b 84 02 b4 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+180]
  01ac5	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01acd	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01ad0	e9 fa 00 00 00	 jmp	 $LN40@ReturnCalc
$LN10@ReturnCalc:

; 370  : 	case eSkill30: Result = this->rUser[aIndex].IceDamage * this->rSkill[SkillID].StartDamage;	break;

  01ad5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01ad8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01ade	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01ae1	6b c9 44	 imul	 ecx, 68			; 00000044H
  01ae4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01ae7	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01aea	8b 84 02 b8 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+184]
  01af1	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01af9	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01afc	e9 ce 00 00 00	 jmp	 $LN40@ReturnCalc
$LN9@ReturnCalc:

; 371  : 	case eSkill31: Result = this->rUser[aIndex].DistanceAttack * this->rSkill[SkillID].StartDamage;	break;

  01b01	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01b04	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01b0a	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01b0d	6b c9 44	 imul	 ecx, 68			; 00000044H
  01b10	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b13	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01b16	8b 84 02 bc 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+188]
  01b1d	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01b25	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01b28	e9 a2 00 00 00	 jmp	 $LN40@ReturnCalc
$LN8@ReturnCalc:

; 372  : 	case eSkill32: Result = this->rUser[aIndex].AttackRate * this->rSkill[SkillID].StartDamage;	break;

  01b2d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01b30	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01b36	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01b39	6b c9 44	 imul	 ecx, 68			; 00000044H
  01b3c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b3f	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01b42	8b 84 02 c0 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+192]
  01b49	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01b51	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01b54	eb 79		 jmp	 SHORT $LN40@ReturnCalc
$LN7@ReturnCalc:

; 373  : 	case eSkill33: Result = this->rUser[aIndex].WeaponBonus * this->rSkill[SkillID].StartDamage;	break;

  01b56	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01b59	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01b5f	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01b62	6b c9 44	 imul	 ecx, 68			; 00000044H
  01b65	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b68	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01b6b	8b 84 02 c4 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+196]
  01b72	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01b7a	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01b7d	eb 50		 jmp	 SHORT $LN40@ReturnCalc
$LN6@ReturnCalc:

; 374  : 	case eSkill34: Result = this->rUser[aIndex].ExellentDamage * this->rSkill[SkillID].StartDamage;	break;

  01b7f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01b82	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01b88	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01b8b	6b c9 44	 imul	 ecx, 68			; 00000044H
  01b8e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b91	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01b94	8b 84 02 c8 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+200]
  01b9b	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01ba3	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
  01ba6	eb 27		 jmp	 SHORT $LN40@ReturnCalc
$LN5@ReturnCalc:

; 375  : 	case eSkill35: Result = this->rUser[aIndex].CriticalDamage * this->rSkill[SkillID].StartDamage;	break;

  01ba8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01bab	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01bb1	8b 4d 0c	 mov	 ecx, DWORD PTR _SkillID$[ebp]
  01bb4	6b c9 44	 imul	 ecx, 68			; 00000044H
  01bb7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01bba	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  01bbd	8b 84 02 cc 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+204]
  01bc4	0f af 84 0e 64
	9f 24 00	 imul	 eax, DWORD PTR [esi+ecx+2400100]
  01bcc	89 45 f8	 mov	 DWORD PTR _Result$[ebp], eax
$LN40@ReturnCalc:

; 376  : 	}
; 377  : 
; 378  : 	if(Pw > 0)

  01bcf	83 7d 10 00	 cmp	 DWORD PTR _Pw$[ebp], 0
  01bd3	7e 13		 jle	 SHORT $LN4@ReturnCalc

; 379  : 	{
; 380  : #if(RAGE_DEBUG==1)
; 381  : 		LogAddC(2,"%s : ( %d * %d ) / 100 = %d",this->rSkill[SkillID].Name,Result,Pw,( Result * Pw ) / 100);
; 382  : #endif
; 383  : 		return ( Result * Pw ) / 100;

  01bd5	8b 45 f8	 mov	 eax, DWORD PTR _Result$[ebp]
  01bd8	0f af 45 10	 imul	 eax, DWORD PTR _Pw$[ebp]
  01bdc	99		 cdq
  01bdd	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01be2	f7 f9		 idiv	 ecx
  01be4	eb 2d		 jmp	 SHORT $LN42@ReturnCalc
  01be6	eb 2b		 jmp	 SHORT $LN42@ReturnCalc
$LN4@ReturnCalc:

; 384  : 	}
; 385  : 	else if(this->rSkill[SkillID].Percent == true)

  01be8	8b 45 0c	 mov	 eax, DWORD PTR _SkillID$[ebp]
  01beb	6b c0 44	 imul	 eax, 68			; 00000044H
  01bee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bf1	0f b6 94 01 6c
	9f 24 00	 movzx	 edx, BYTE PTR [ecx+eax+2400108]
  01bf9	83 fa 01	 cmp	 edx, 1
  01bfc	75 12		 jne	 SHORT $LN2@ReturnCalc

; 386  : 	{
; 387  : #if(RAGE_DEBUG==1)
; 388  : 		LogAddC(2,"%s : ( %d * 100 ) / 100 = %d",this->rSkill[SkillID].Name,Result,( Result * 100 ) / 100);
; 389  : #endif
; 390  : 		return ( Result * 100 ) / 100;

  01bfe	8b 45 f8	 mov	 eax, DWORD PTR _Result$[ebp]
  01c01	6b c0 64	 imul	 eax, 100		; 00000064H
  01c04	99		 cdq
  01c05	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01c0a	f7 f9		 idiv	 ecx
  01c0c	eb 05		 jmp	 SHORT $LN42@ReturnCalc

; 391  : 	}
; 392  : 	else

  01c0e	eb 03		 jmp	 SHORT $LN42@ReturnCalc
$LN2@ReturnCalc:

; 393  : 	{
; 394  : 		return Result;

  01c10	8b 45 f8	 mov	 eax, DWORD PTR _Result$[ebp]
$LN42@ReturnCalc:

; 395  : 	}
; 396  : }

  01c13	5f		 pop	 edi
  01c14	5e		 pop	 esi
  01c15	5b		 pop	 ebx
  01c16	8b e5		 mov	 esp, ebp
  01c18	5d		 pop	 ebp
  01c19	c2 0c 00	 ret	 12			; 0000000cH
$LN44@ReturnCalc:
  01c1c	00 00 00 00	 DD	 $LN39@ReturnCalc
  01c20	00 00 00 00	 DD	 $LN38@ReturnCalc
  01c24	00 00 00 00	 DD	 $LN37@ReturnCalc
  01c28	00 00 00 00	 DD	 $LN36@ReturnCalc
  01c2c	00 00 00 00	 DD	 $LN35@ReturnCalc
  01c30	00 00 00 00	 DD	 $LN34@ReturnCalc
  01c34	00 00 00 00	 DD	 $LN33@ReturnCalc
  01c38	00 00 00 00	 DD	 $LN32@ReturnCalc
  01c3c	00 00 00 00	 DD	 $LN31@ReturnCalc
  01c40	00 00 00 00	 DD	 $LN30@ReturnCalc
  01c44	00 00 00 00	 DD	 $LN29@ReturnCalc
  01c48	00 00 00 00	 DD	 $LN28@ReturnCalc
  01c4c	00 00 00 00	 DD	 $LN27@ReturnCalc
  01c50	00 00 00 00	 DD	 $LN26@ReturnCalc
  01c54	00 00 00 00	 DD	 $LN25@ReturnCalc
  01c58	00 00 00 00	 DD	 $LN24@ReturnCalc
  01c5c	00 00 00 00	 DD	 $LN23@ReturnCalc
  01c60	00 00 00 00	 DD	 $LN22@ReturnCalc
  01c64	00 00 00 00	 DD	 $LN21@ReturnCalc
  01c68	00 00 00 00	 DD	 $LN20@ReturnCalc
  01c6c	00 00 00 00	 DD	 $LN19@ReturnCalc
  01c70	00 00 00 00	 DD	 $LN18@ReturnCalc
  01c74	00 00 00 00	 DD	 $LN17@ReturnCalc
  01c78	00 00 00 00	 DD	 $LN16@ReturnCalc
  01c7c	00 00 00 00	 DD	 $LN15@ReturnCalc
  01c80	00 00 00 00	 DD	 $LN14@ReturnCalc
  01c84	00 00 00 00	 DD	 $LN13@ReturnCalc
  01c88	00 00 00 00	 DD	 $LN12@ReturnCalc
  01c8c	00 00 00 00	 DD	 $LN11@ReturnCalc
  01c90	00 00 00 00	 DD	 $LN10@ReturnCalc
  01c94	00 00 00 00	 DD	 $LN9@ReturnCalc
  01c98	00 00 00 00	 DD	 $LN8@ReturnCalc
  01c9c	00 00 00 00	 DD	 $LN7@ReturnCalc
  01ca0	00 00 00 00	 DD	 $LN6@ReturnCalc
  01ca4	00 00 00 00	 DD	 $LN5@ReturnCalc
?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ENDP		; cSystemOfRage::ReturnCalc
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
PUBLIC	?DataRecv@cSystemOfRage@@QAEXPAUClickSend@@H@Z	; cSystemOfRage::DataRecv
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_rSend$221812 = -16					; size = 8
_iSkill$ = -8						; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?DataRecv@cSystemOfRage@@QAEXPAUClickSend@@H@Z PROC	; cSystemOfRage::DataRecv
; _this$ = ecx

; 399  : {

  01cb0	55		 push	 ebp
  01cb1	8b ec		 mov	 ebp, esp
  01cb3	83 ec 50	 sub	 esp, 80			; 00000050H
  01cb6	53		 push	 ebx
  01cb7	56		 push	 esi
  01cb8	57		 push	 edi
  01cb9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 400  : 	int iSkill = aRecv->SkillID;

  01cbc	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01cbf	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01cc3	89 4d f8	 mov	 DWORD PTR _iSkill$[ebp], ecx

; 401  : 
; 402  : 	if(this->rUser[aIndex].rPoints > 0 && this->rSkill[iSkill].MaxPoint > this->ReturnPoint(aIndex,iSkill))

  01cc6	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01cc9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01ccf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01cd2	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  01cd7	0f 8e 99 00 00
	00		 jle	 $LN2@DataRecv
  01cdd	8b 75 f8	 mov	 esi, DWORD PTR _iSkill$[ebp]
  01ce0	6b f6 44	 imul	 esi, 68			; 00000044H
  01ce3	8b 45 f8	 mov	 eax, DWORD PTR _iSkill$[ebp]
  01ce6	50		 push	 eax
  01ce7	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01cea	51		 push	 ecx
  01ceb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01cee	e8 00 00 00 00	 call	 ?ReturnPoint@cSystemOfRage@@QAEHHH@Z ; cSystemOfRage::ReturnPoint
  01cf3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01cf6	39 84 32 68 9f
	24 00		 cmp	 DWORD PTR [edx+esi+2400104], eax
  01cfd	7e 77		 jle	 SHORT $LN2@DataRecv

; 403  : 	{
; 404  : 		this->rUser[aIndex].rPoints--;

  01cff	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01d02	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01d08	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d0b	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  01d0f	83 ea 01	 sub	 edx, 1
  01d12	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01d15	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  01d1b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d1e	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx

; 405  : 		this->FilterSkill(aIndex,iSkill);

  01d22	8b 45 f8	 mov	 eax, DWORD PTR _iSkill$[ebp]
  01d25	50		 push	 eax
  01d26	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01d29	51		 push	 ecx
  01d2a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d2d	e8 00 00 00 00	 call	 ?FilterSkill@cSystemOfRage@@QAEXHH@Z ; cSystemOfRage::FilterSkill

; 406  : 
; 407  : 		ClickSend rSend;
; 408  : 		rSend.h.set((LPBYTE)&rSend, 0xFB, 1, sizeof(rSend));

  01d32	6a 08		 push	 8
  01d34	6a 01		 push	 1
  01d36	68 fb 00 00 00	 push	 251			; 000000fbH
  01d3b	8d 45 f0	 lea	 eax, DWORD PTR _rSend$221812[ebp]
  01d3e	50		 push	 eax
  01d3f	8d 4d f0	 lea	 ecx, DWORD PTR _rSend$221812[ebp]
  01d42	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 409  : 		rSend.Click = 1;

  01d47	c6 45 f4 01	 mov	 BYTE PTR _rSend$221812[ebp+4], 1

; 410  : 		rSend.SkillID = aRecv->SkillID;

  01d4b	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  01d4e	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  01d52	66 89 4d f6	 mov	 WORD PTR _rSend$221812[ebp+6], cx

; 411  : 		DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  01d56	6a 08		 push	 8
  01d58	8d 45 f0	 lea	 eax, DWORD PTR _rSend$221812[ebp]
  01d5b	50		 push	 eax
  01d5c	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01d5f	51		 push	 ecx
  01d60	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01d65	83 c4 0c	 add	 esp, 12			; 0000000cH

; 412  : 		gObjCalCharacter(aIndex);

  01d68	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01d6b	50		 push	 eax
  01d6c	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  01d71	83 c4 04	 add	 esp, 4

; 413  : 	}
; 414  : 	else

  01d74	eb 0c		 jmp	 SHORT $LN3@DataRecv
$LN2@DataRecv:

; 415  : 	{
; 416  : 		CloseClient(aIndex);

  01d76	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01d79	50		 push	 eax
  01d7a	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  01d7f	83 c4 04	 add	 esp, 4
$LN3@DataRecv:

; 417  : 	}
; 418  : }

  01d82	5f		 pop	 edi
  01d83	5e		 pop	 esi
  01d84	5b		 pop	 ebx
  01d85	8b e5		 mov	 esp, ebp
  01d87	5d		 pop	 ebp
  01d88	c2 08 00	 ret	 8
?DataRecv@cSystemOfRage@@QAEXPAUClickSend@@H@Z ENDP	; cSystemOfRage::DataRecv
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 106  : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 107  : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 108  : 		lpBuf[3] = sub;

  00024	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00027	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0002a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?CalcCharacter@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::CalcCharacter
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjWingSprite
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\systemofrage.cpp
_TEXT	SEGMENT
_iAddFinallife$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?CalcCharacter@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::CalcCharacter
; _this$ = ecx

; 421  : {

  01d90	55		 push	 ebp
  01d91	8b ec		 mov	 ebp, esp
  01d93	83 ec 4c	 sub	 esp, 76			; 0000004cH
  01d96	53		 push	 ebx
  01d97	56		 push	 esi
  01d98	57		 push	 edi
  01d99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 422  : 	if(!Enable)return;

  01d9c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d9f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01da2	85 c9		 test	 ecx, ecx
  01da4	75 05		 jne	 SHORT $LN13@CalcCharac
  01da6	e9 6f 08 00 00	 jmp	 $LN14@CalcCharac
$LN13@CalcCharac:

; 423  : 	LPOBJ lpObj = &gObj[aIndex];

  01dab	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01dae	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01db4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01dba	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 424  : 	//Damage
; 425  : 	lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill1,0);	// 6

  01dbd	6a 00		 push	 0
  01dbf	6a 01		 push	 1
  01dc1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01dc4	50		 push	 eax
  01dc5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dc8	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01dcd	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01dd0	03 81 84 04 00
	00		 add	 eax, DWORD PTR [ecx+1156]
  01dd6	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01dd9	89 82 84 04 00
	00		 mov	 DWORD PTR [edx+1156], eax

; 426  : 	lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill1,0);// 4

  01ddf	6a 00		 push	 0
  01de1	6a 01		 push	 1
  01de3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01de6	50		 push	 eax
  01de7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dea	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01def	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01df2	03 81 80 04 00
	00		 add	 eax, DWORD PTR [ecx+1152]
  01df8	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01dfb	89 82 80 04 00
	00		 mov	 DWORD PTR [edx+1152], eax

; 427  : 	lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill1,0);	// 6

  01e01	6a 00		 push	 0
  01e03	6a 01		 push	 1
  01e05	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01e08	50		 push	 eax
  01e09	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e0c	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01e11	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e14	03 81 7c 04 00
	00		 add	 eax, DWORD PTR [ecx+1148]
  01e1a	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01e1d	89 82 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], eax

; 428  : 	lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill1,0);	// 4

  01e23	6a 00		 push	 0
  01e25	6a 01		 push	 1
  01e27	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01e2a	50		 push	 eax
  01e2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e2e	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01e33	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e36	03 81 78 04 00
	00		 add	 eax, DWORD PTR [ecx+1144]
  01e3c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01e3f	89 82 78 04 00
	00		 mov	 DWORD PTR [edx+1144], eax

; 429  : 	lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill1,0);

  01e45	6a 00		 push	 0
  01e47	6a 01		 push	 1
  01e49	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01e4c	50		 push	 eax
  01e4d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e50	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01e55	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e58	03 81 68 04 00
	00		 add	 eax, DWORD PTR [ecx+1128]
  01e5e	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01e61	89 82 68 04 00
	00		 mov	 DWORD PTR [edx+1128], eax

; 430  : 	lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill1,0);

  01e67	6a 00		 push	 0
  01e69	6a 01		 push	 1
  01e6b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01e6e	50		 push	 eax
  01e6f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e72	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01e77	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01e7a	03 81 6c 04 00
	00		 add	 eax, DWORD PTR [ecx+1132]
  01e80	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01e83	89 82 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], eax

; 431  : 	//WingsDamagePlus
; 432  : 	if(gObjWingSprite(lpObj))

  01e89	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01e8c	50		 push	 eax
  01e8d	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  01e92	83 c4 04	 add	 esp, 4
  01e95	85 c0		 test	 eax, eax
  01e97	0f 84 cc 00 00
	00		 je	 $LN12@CalcCharac

; 433  : 	{
; 434  : 		lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill4,0);

  01e9d	6a 00		 push	 0
  01e9f	6a 04		 push	 4
  01ea1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01ea4	50		 push	 eax
  01ea5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ea8	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01ead	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01eb0	03 81 84 04 00
	00		 add	 eax, DWORD PTR [ecx+1156]
  01eb6	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01eb9	89 82 84 04 00
	00		 mov	 DWORD PTR [edx+1156], eax

; 435  : 		lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill4,0);

  01ebf	6a 00		 push	 0
  01ec1	6a 04		 push	 4
  01ec3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01ec6	50		 push	 eax
  01ec7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01eca	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01ecf	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01ed2	03 81 80 04 00
	00		 add	 eax, DWORD PTR [ecx+1152]
  01ed8	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01edb	89 82 80 04 00
	00		 mov	 DWORD PTR [edx+1152], eax

; 436  : 		lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill4,0);

  01ee1	6a 00		 push	 0
  01ee3	6a 04		 push	 4
  01ee5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01ee8	50		 push	 eax
  01ee9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01eec	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01ef1	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01ef4	03 81 7c 04 00
	00		 add	 eax, DWORD PTR [ecx+1148]
  01efa	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01efd	89 82 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], eax

; 437  : 		lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill4,0);

  01f03	6a 00		 push	 0
  01f05	6a 04		 push	 4
  01f07	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01f0a	50		 push	 eax
  01f0b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f0e	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01f13	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01f16	03 81 78 04 00
	00		 add	 eax, DWORD PTR [ecx+1144]
  01f1c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01f1f	89 82 78 04 00
	00		 mov	 DWORD PTR [edx+1144], eax

; 438  : 		lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill4,0);

  01f25	6a 00		 push	 0
  01f27	6a 04		 push	 4
  01f29	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01f2c	50		 push	 eax
  01f2d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f30	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01f35	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01f38	03 81 68 04 00
	00		 add	 eax, DWORD PTR [ecx+1128]
  01f3e	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01f41	89 82 68 04 00
	00		 mov	 DWORD PTR [edx+1128], eax

; 439  : 		lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill4,0);

  01f47	6a 00		 push	 0
  01f49	6a 04		 push	 4
  01f4b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01f4e	50		 push	 eax
  01f4f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f52	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01f57	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01f5a	03 81 6c 04 00
	00		 add	 eax, DWORD PTR [ecx+1132]
  01f60	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01f63	89 82 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], eax
$LN12@CalcCharac:

; 440  : 	}
; 441  : 	//FinalMana
; 442  : 	lpObj->AddMana +=  this->ReturnCalc(aIndex, eSkill5,(lpObj->Mana));

  01f69	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01f6c	d9 80 10 01 00
	00		 fld	 DWORD PTR [eax+272]
  01f72	e8 00 00 00 00	 call	 __ftol2_sse
  01f77	50		 push	 eax
  01f78	6a 05		 push	 5
  01f7a	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  01f7d	51		 push	 ecx
  01f7e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f81	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01f86	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01f89	03 82 50 01 00
	00		 add	 eax, DWORD PTR [edx+336]
  01f8f	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01f92	89 81 50 01 00
	00		 mov	 DWORD PTR [ecx+336], eax

; 443  : 	//IgnoreDefence
; 444  : 	lpObj->SetOpIgnoreDefense += this->ReturnCalc(aIndex, eSkill6,0);

  01f98	6a 00		 push	 0
  01f9a	6a 06		 push	 6
  01f9c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01f9f	50		 push	 eax
  01fa0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fa3	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01fa8	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01fab	0f b6 91 3e 11
	00 00		 movzx	 edx, BYTE PTR [ecx+4414]
  01fb2	03 d0		 add	 edx, eax
  01fb4	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01fb7	88 90 3e 11 00
	00		 mov	 BYTE PTR [eax+4414], dl

; 445  : 	if(lpObj->SetOpIgnoreDefense>90)

  01fbd	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01fc0	0f b6 88 3e 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4414]
  01fc7	83 f9 5a	 cmp	 ecx, 90			; 0000005aH
  01fca	7e 0a		 jle	 SHORT $LN11@CalcCharac

; 446  : 	{
; 447  : 		lpObj->SetOpIgnoreDefense = 90;

  01fcc	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01fcf	c6 80 3e 11 00
	00 5a		 mov	 BYTE PTR [eax+4414], 90	; 0000005aH
$LN11@CalcCharac:

; 448  : 	}
; 449  : 	//CriticalDamageRate
; 450  : 	lpObj->m_CriticalDamage += this->ReturnCalc(aIndex, eSkill9,0);

  01fd6	6a 00		 push	 0
  01fd8	6a 09		 push	 9
  01fda	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  01fdd	50		 push	 eax
  01fde	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fe1	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  01fe6	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01fe9	03 81 bc 04 00
	00		 add	 eax, DWORD PTR [ecx+1212]
  01fef	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01ff2	89 82 bc 04 00
	00		 mov	 DWORD PTR [edx+1212], eax

; 451  : 	if(lpObj->m_CriticalDamage>90)

  01ff8	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01ffb	83 b8 bc 04 00
	00 5a		 cmp	 DWORD PTR [eax+1212], 90 ; 0000005aH
  02002	7e 0d		 jle	 SHORT $LN10@CalcCharac

; 452  : 	{
; 453  : 		lpObj->m_CriticalDamage = 90;

  02004	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02007	c7 80 bc 04 00
	00 5a 00 00 00	 mov	 DWORD PTR [eax+1212], 90 ; 0000005aH
$LN10@CalcCharac:

; 454  : 	}
; 455  : 	//AbsordDamage
; 456  : 	lpObj->DamageMinus += this->ReturnCalc(aIndex, eSkill10,0);	//DeBug Error Fix

  02011	6a 00		 push	 0
  02013	6a 0a		 push	 10			; 0000000aH
  02015	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02018	50		 push	 eax
  02019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0201c	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02021	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02024	0f b6 91 70 01
	00 00		 movzx	 edx, BYTE PTR [ecx+368]
  0202b	03 d0		 add	 edx, eax
  0202d	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02030	88 90 70 01 00
	00		 mov	 BYTE PTR [eax+368], dl

; 457  : 	if(lpObj->DamageMinus > 50)

  02036	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02039	0f b6 88 70 01
	00 00		 movzx	 ecx, BYTE PTR [eax+368]
  02040	83 f9 32	 cmp	 ecx, 50			; 00000032H
  02043	7e 0a		 jle	 SHORT $LN9@CalcCharac

; 458  : 	{
; 459  : 		lpObj->DamageMinus = 50;

  02045	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02048	c6 80 70 01 00
	00 32		 mov	 BYTE PTR [eax+368], 50	; 00000032H
$LN9@CalcCharac:

; 460  : 	}
; 461  : 	//PetDamageBonus
; 462  : 	if(lpObj->pInventory[8].IsItem())

  0204f	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02052	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  02058	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  0205e	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  02063	85 c0		 test	 eax, eax
  02065	0f 84 cc 00 00
	00		 je	 $LN8@CalcCharac

; 463  : 	{
; 464  : 		lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill11,0);

  0206b	6a 00		 push	 0
  0206d	6a 0b		 push	 11			; 0000000bH
  0206f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02072	50		 push	 eax
  02073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02076	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0207b	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0207e	03 81 84 04 00
	00		 add	 eax, DWORD PTR [ecx+1156]
  02084	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02087	89 82 84 04 00
	00		 mov	 DWORD PTR [edx+1156], eax

; 465  : 		lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill11,0);

  0208d	6a 00		 push	 0
  0208f	6a 0b		 push	 11			; 0000000bH
  02091	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02094	50		 push	 eax
  02095	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02098	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0209d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  020a0	03 81 80 04 00
	00		 add	 eax, DWORD PTR [ecx+1152]
  020a6	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  020a9	89 82 80 04 00
	00		 mov	 DWORD PTR [edx+1152], eax

; 466  : 		lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill11,0);

  020af	6a 00		 push	 0
  020b1	6a 0b		 push	 11			; 0000000bH
  020b3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  020b6	50		 push	 eax
  020b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020ba	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  020bf	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  020c2	03 81 7c 04 00
	00		 add	 eax, DWORD PTR [ecx+1148]
  020c8	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  020cb	89 82 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], eax

; 467  : 		lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill11,0);

  020d1	6a 00		 push	 0
  020d3	6a 0b		 push	 11			; 0000000bH
  020d5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  020d8	50		 push	 eax
  020d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020dc	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  020e1	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  020e4	03 81 78 04 00
	00		 add	 eax, DWORD PTR [ecx+1144]
  020ea	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  020ed	89 82 78 04 00
	00		 mov	 DWORD PTR [edx+1144], eax

; 468  : 		lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill11,0);

  020f3	6a 00		 push	 0
  020f5	6a 0b		 push	 11			; 0000000bH
  020f7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  020fa	50		 push	 eax
  020fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020fe	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02103	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02106	03 81 68 04 00
	00		 add	 eax, DWORD PTR [ecx+1128]
  0210c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0210f	89 82 68 04 00
	00		 mov	 DWORD PTR [edx+1128], eax

; 469  : 		lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill11,0);

  02115	6a 00		 push	 0
  02117	6a 0b		 push	 11			; 0000000bH
  02119	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0211c	50		 push	 eax
  0211d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02120	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02125	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02128	03 81 6c 04 00
	00		 add	 eax, DWORD PTR [ecx+1132]
  0212e	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02131	89 82 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], eax
$LN8@CalcCharac:

; 470  : 	}
; 471  : 	//FinalLife
; 472  : 	int iAddFinallife = this->ReturnCalc(aIndex, eSkill12,(lpObj->MaxLife+lpObj->AddLife));

  02137	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0213a	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  02140	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02143	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  02149	e8 00 00 00 00	 call	 __ftol2_sse
  0214e	50		 push	 eax
  0214f	6a 0c		 push	 12			; 0000000cH
  02151	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  02154	52		 push	 edx
  02155	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02158	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0215d	89 45 f4	 mov	 DWORD PTR _iAddFinallife$[ebp], eax

; 473  : 	lpObj->AddLife += iAddFinallife;

  02160	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02163	8b 88 4c 01 00
	00		 mov	 ecx, DWORD PTR [eax+332]
  02169	03 4d f4	 add	 ecx, DWORD PTR _iAddFinallife$[ebp]
  0216c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0216f	89 8a 4c 01 00
	00		 mov	 DWORD PTR [edx+332], ecx

; 474  : 	//DoubleDamage
; 475  : 	lpObj->SetOpDoubleDamage +=  this->ReturnCalc(aIndex, eSkill18,0);

  02175	6a 00		 push	 0
  02177	6a 12		 push	 18			; 00000012H
  02179	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0217c	50		 push	 eax
  0217d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02180	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02185	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02188	0f b6 91 3f 11
	00 00		 movzx	 edx, BYTE PTR [ecx+4415]
  0218f	03 d0		 add	 edx, eax
  02191	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02194	88 90 3f 11 00
	00		 mov	 BYTE PTR [eax+4415], dl

; 476  : 	//FinalSD
; 477  : 	lpObj->iAddShield += this->ReturnCalc(aIndex, eSkill19,(lpObj->iMaxShield+lpObj->iAddShield));

  0219a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0219d	8b 88 58 01 00
	00		 mov	 ecx, DWORD PTR [eax+344]
  021a3	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  021a6	03 8a 5c 01 00
	00		 add	 ecx, DWORD PTR [edx+348]
  021ac	51		 push	 ecx
  021ad	6a 13		 push	 19			; 00000013H
  021af	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  021b2	50		 push	 eax
  021b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021b6	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  021bb	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  021be	03 81 5c 01 00
	00		 add	 eax, DWORD PTR [ecx+348]
  021c4	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  021c7	89 82 5c 01 00
	00		 mov	 DWORD PTR [edx+348], eax

; 478  : 	//FinalDefence
; 479  : 	lpObj->m_Defense += this->ReturnCalc(aIndex, eSkill20,lpObj->m_Defense);

  021cd	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  021d0	8b 88 94 04 00
	00		 mov	 ecx, DWORD PTR [eax+1172]
  021d6	51		 push	 ecx
  021d7	6a 14		 push	 20			; 00000014H
  021d9	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  021dc	52		 push	 edx
  021dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021e0	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  021e5	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  021e8	03 81 94 04 00
	00		 add	 eax, DWORD PTR [ecx+1172]
  021ee	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  021f1	89 82 94 04 00
	00		 mov	 DWORD PTR [edx+1172], eax

; 480  : 
; 481  : 	//GuildBonus
; 482  : 	if ( lpObj->GuildNumber > 0 )

  021f7	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  021fa	83 b8 34 04 00
	00 00		 cmp	 DWORD PTR [eax+1076], 0
  02201	7e 44		 jle	 SHORT $LN7@CalcCharac

; 483  : 	{
; 484  : 		lpObj->AddLife += this->ReturnCalc(aIndex, eSkill22,0);

  02203	6a 00		 push	 0
  02205	6a 16		 push	 22			; 00000016H
  02207	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0220a	50		 push	 eax
  0220b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0220e	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02213	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02216	03 81 4c 01 00
	00		 add	 eax, DWORD PTR [ecx+332]
  0221c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0221f	89 82 4c 01 00
	00		 mov	 DWORD PTR [edx+332], eax

; 485  : 		lpObj->m_Defense += this->ReturnCalc(aIndex, eSkill22,0);

  02225	6a 00		 push	 0
  02227	6a 16		 push	 22			; 00000016H
  02229	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0222c	50		 push	 eax
  0222d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02230	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02235	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02238	03 81 94 04 00
	00		 add	 eax, DWORD PTR [ecx+1172]
  0223e	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02241	89 82 94 04 00
	00		 mov	 DWORD PTR [edx+1172], eax
$LN7@CalcCharac:

; 486  : 	}
; 487  : 	//ReflectDamage
; 488  : 	lpObj->DamageReflect += this->ReturnCalc(aIndex, eSkill23,0);

  02247	6a 00		 push	 0
  02249	6a 17		 push	 23			; 00000017H
  0224b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0224e	50		 push	 eax
  0224f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02252	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02257	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0225a	0f b6 91 71 01
	00 00		 movzx	 edx, BYTE PTR [ecx+369]
  02261	03 d0		 add	 edx, eax
  02263	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02266	88 90 71 01 00
	00		 mov	 BYTE PTR [eax+369], dl

; 489  : 	if(lpObj->DamageReflect>90)

  0226c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0226f	0f b6 88 71 01
	00 00		 movzx	 ecx, BYTE PTR [eax+369]
  02276	83 f9 5a	 cmp	 ecx, 90			; 0000005aH
  02279	7e 0a		 jle	 SHORT $LN6@CalcCharac

; 490  : 	{
; 491  : 		lpObj->DamageReflect = 90;

  0227b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0227e	c6 80 71 01 00
	00 5a		 mov	 BYTE PTR [eax+369], 90	; 0000005aH
$LN6@CalcCharac:

; 492  : 	}
; 493  : 	//MinDefence
; 494  : 	lpObj->m_Defense += this->ReturnCalc(aIndex, eSkill26,0);

  02285	6a 00		 push	 0
  02287	6a 1a		 push	 26			; 0000001aH
  02289	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0228c	50		 push	 eax
  0228d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02290	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02295	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02298	03 81 94 04 00
	00		 add	 eax, DWORD PTR [ecx+1172]
  0229e	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  022a1	89 82 94 04 00
	00		 mov	 DWORD PTR [edx+1172], eax

; 495  : 	//StartSD
; 496  : 	lpObj->iAddShield += this->ReturnCalc(aIndex, eSkill28,0);

  022a7	6a 00		 push	 0
  022a9	6a 1c		 push	 28			; 0000001cH
  022ab	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  022ae	50		 push	 eax
  022af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  022b2	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  022b7	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  022ba	03 81 5c 01 00
	00		 add	 eax, DWORD PTR [ecx+348]
  022c0	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  022c3	89 82 5c 01 00
	00		 mov	 DWORD PTR [edx+348], eax

; 497  : 	//PartyBonus
; 498  : 	if(lpObj->PartyNumber >= 0)

  022c9	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  022cc	83 b8 2c 04 00
	00 00		 cmp	 DWORD PTR [eax+1068], 0
  022d3	0f 8c ee 00 00
	00		 jl	 $LN5@CalcCharac

; 499  : 	{
; 500  : 		lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill29,0);

  022d9	6a 00		 push	 0
  022db	6a 1d		 push	 29			; 0000001dH
  022dd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  022e0	50		 push	 eax
  022e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  022e4	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  022e9	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  022ec	03 81 84 04 00
	00		 add	 eax, DWORD PTR [ecx+1156]
  022f2	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  022f5	89 82 84 04 00
	00		 mov	 DWORD PTR [edx+1156], eax

; 501  : 		lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill29,0);

  022fb	6a 00		 push	 0
  022fd	6a 1d		 push	 29			; 0000001dH
  022ff	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02302	50		 push	 eax
  02303	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02306	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0230b	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0230e	03 81 80 04 00
	00		 add	 eax, DWORD PTR [ecx+1152]
  02314	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02317	89 82 80 04 00
	00		 mov	 DWORD PTR [edx+1152], eax

; 502  : 		lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill29,0);

  0231d	6a 00		 push	 0
  0231f	6a 1d		 push	 29			; 0000001dH
  02321	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02324	50		 push	 eax
  02325	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02328	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0232d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02330	03 81 7c 04 00
	00		 add	 eax, DWORD PTR [ecx+1148]
  02336	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02339	89 82 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], eax

; 503  : 		lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill29,0);

  0233f	6a 00		 push	 0
  02341	6a 1d		 push	 29			; 0000001dH
  02343	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02346	50		 push	 eax
  02347	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0234a	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0234f	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02352	03 81 78 04 00
	00		 add	 eax, DWORD PTR [ecx+1144]
  02358	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0235b	89 82 78 04 00
	00		 mov	 DWORD PTR [edx+1144], eax

; 504  : 		lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill29,0);

  02361	6a 00		 push	 0
  02363	6a 1d		 push	 29			; 0000001dH
  02365	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02368	50		 push	 eax
  02369	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0236c	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02371	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02374	03 81 68 04 00
	00		 add	 eax, DWORD PTR [ecx+1128]
  0237a	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0237d	89 82 68 04 00
	00		 mov	 DWORD PTR [edx+1128], eax

; 505  : 		lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill29,0);

  02383	6a 00		 push	 0
  02385	6a 1d		 push	 29			; 0000001dH
  02387	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0238a	50		 push	 eax
  0238b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0238e	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02393	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02396	03 81 6c 04 00
	00		 add	 eax, DWORD PTR [ecx+1132]
  0239c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0239f	89 82 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], eax

; 506  : 		lpObj->AddLife += this->ReturnCalc(aIndex, eSkill29,0);

  023a5	6a 00		 push	 0
  023a7	6a 1d		 push	 29			; 0000001dH
  023a9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  023ac	50		 push	 eax
  023ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  023b0	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  023b5	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  023b8	03 81 4c 01 00
	00		 add	 eax, DWORD PTR [ecx+332]
  023be	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  023c1	89 82 4c 01 00
	00		 mov	 DWORD PTR [edx+332], eax
$LN5@CalcCharac:

; 507  : 	}
; 508  : 	//WeaponBonus
; 509  : 	if(lpObj->pInventory[0].IsItem() || lpObj->pInventory[1].IsItem())

  023c7	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  023ca	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  023d0	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  023d5	85 c0		 test	 eax, eax
  023d7	75 1c		 jne	 SHORT $LN3@CalcCharac
  023d9	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  023dc	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  023e2	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  023e8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  023ed	85 c0		 test	 eax, eax
  023ef	0f 84 cc 00 00
	00		 je	 $LN4@CalcCharac
$LN3@CalcCharac:

; 510  : 	{
; 511  : 		lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill33,0);

  023f5	6a 00		 push	 0
  023f7	6a 21		 push	 33			; 00000021H
  023f9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  023fc	50		 push	 eax
  023fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02400	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02405	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02408	03 81 84 04 00
	00		 add	 eax, DWORD PTR [ecx+1156]
  0240e	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02411	89 82 84 04 00
	00		 mov	 DWORD PTR [edx+1156], eax

; 512  : 		lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill33,0);

  02417	6a 00		 push	 0
  02419	6a 21		 push	 33			; 00000021H
  0241b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0241e	50		 push	 eax
  0241f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02422	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02427	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0242a	03 81 80 04 00
	00		 add	 eax, DWORD PTR [ecx+1152]
  02430	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02433	89 82 80 04 00
	00		 mov	 DWORD PTR [edx+1152], eax

; 513  : 		lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill33,0);

  02439	6a 00		 push	 0
  0243b	6a 21		 push	 33			; 00000021H
  0243d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02440	50		 push	 eax
  02441	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02444	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02449	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0244c	03 81 7c 04 00
	00		 add	 eax, DWORD PTR [ecx+1148]
  02452	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02455	89 82 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], eax

; 514  : 		lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill33,0);

  0245b	6a 00		 push	 0
  0245d	6a 21		 push	 33			; 00000021H
  0245f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02462	50		 push	 eax
  02463	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02466	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0246b	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0246e	03 81 78 04 00
	00		 add	 eax, DWORD PTR [ecx+1144]
  02474	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02477	89 82 78 04 00
	00		 mov	 DWORD PTR [edx+1144], eax

; 515  : 		lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill33,0);

  0247d	6a 00		 push	 0
  0247f	6a 21		 push	 33			; 00000021H
  02481	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02484	50		 push	 eax
  02485	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02488	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0248d	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02490	03 81 68 04 00
	00		 add	 eax, DWORD PTR [ecx+1128]
  02496	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02499	89 82 68 04 00
	00		 mov	 DWORD PTR [edx+1128], eax

; 516  : 		lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill33,0);

  0249f	6a 00		 push	 0
  024a1	6a 21		 push	 33			; 00000021H
  024a3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  024a6	50		 push	 eax
  024a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  024aa	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  024af	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  024b2	03 81 6c 04 00
	00		 add	 eax, DWORD PTR [ecx+1132]
  024b8	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  024bb	89 82 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], eax
$LN4@CalcCharac:

; 517  : 	}
; 518  : 	//ExellentDamageRate
; 519  : 	lpObj->m_ExcelentDamage += this->ReturnCalc(aIndex, eSkill24,0);		

  024c1	6a 00		 push	 0
  024c3	6a 18		 push	 24			; 00000018H
  024c5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  024c8	50		 push	 eax
  024c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  024cc	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  024d1	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  024d4	03 81 c0 04 00
	00		 add	 eax, DWORD PTR [ecx+1216]
  024da	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  024dd	89 82 c0 04 00
	00		 mov	 DWORD PTR [edx+1216], eax

; 520  : 	if(lpObj->m_ExcelentDamage>90)

  024e3	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  024e6	83 b8 c0 04 00
	00 5a		 cmp	 DWORD PTR [eax+1216], 90 ; 0000005aH
  024ed	7e 0d		 jle	 SHORT $LN2@CalcCharac

; 521  : 	{
; 522  : 		lpObj->m_ExcelentDamage = 90;

  024ef	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  024f2	c7 80 c0 04 00
	00 5a 00 00 00	 mov	 DWORD PTR [eax+1216], 90 ; 0000005aH
$LN2@CalcCharac:

; 523  : 	}
; 524  : 
; 525  : 	//LPOBJ lpObj =&gObj[aIndex];
; 526  : 	//if(SkillID == eSkill2)
; 527  : 	//{
; 528  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 529  : 	//	lpObj->ExFreePoints += this->rSkill[eSkill2].StartDamage;
; 530  : 	//}
; 531  : 	//Fix Debug
; 532  : 	//Strength
; 533  : 	lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill13,0);

  024fc	6a 00		 push	 0
  024fe	6a 0d		 push	 13			; 0000000dH
  02500	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02503	50		 push	 eax
  02504	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02507	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0250c	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0250f	03 81 84 04 00
	00		 add	 eax, DWORD PTR [ecx+1156]
  02515	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02518	89 82 84 04 00
	00		 mov	 DWORD PTR [edx+1156], eax

; 534  : 	lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill13,0);

  0251e	6a 00		 push	 0
  02520	6a 0d		 push	 13			; 0000000dH
  02522	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02525	50		 push	 eax
  02526	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02529	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0252e	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02531	03 81 80 04 00
	00		 add	 eax, DWORD PTR [ecx+1152]
  02537	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0253a	89 82 80 04 00
	00		 mov	 DWORD PTR [edx+1152], eax

; 535  : 	lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill13,0);

  02540	6a 00		 push	 0
  02542	6a 0d		 push	 13			; 0000000dH
  02544	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02547	50		 push	 eax
  02548	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0254b	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02550	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02553	03 81 7c 04 00
	00		 add	 eax, DWORD PTR [ecx+1148]
  02559	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0255c	89 82 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], eax

; 536  : 	lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill13,0);

  02562	6a 00		 push	 0
  02564	6a 0d		 push	 13			; 0000000dH
  02566	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02569	50		 push	 eax
  0256a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0256d	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02572	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02575	03 81 78 04 00
	00		 add	 eax, DWORD PTR [ecx+1144]
  0257b	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0257e	89 82 78 04 00
	00		 mov	 DWORD PTR [edx+1144], eax

; 537  : 	//if(SkillID == eSkill13)
; 538  : 	//{
; 539  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 540  : 	//}
; 541  : 	////Energy
; 542  : 	lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill16,0);

  02584	6a 00		 push	 0
  02586	6a 10		 push	 16			; 00000010H
  02588	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0258b	50		 push	 eax
  0258c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0258f	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02594	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02597	03 81 68 04 00
	00		 add	 eax, DWORD PTR [ecx+1128]
  0259d	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  025a0	89 82 68 04 00
	00		 mov	 DWORD PTR [edx+1128], eax

; 543  : 	lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill16,0);

  025a6	6a 00		 push	 0
  025a8	6a 10		 push	 16			; 00000010H
  025aa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  025ad	50		 push	 eax
  025ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025b1	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  025b6	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  025b9	03 81 6c 04 00
	00		 add	 eax, DWORD PTR [ecx+1132]
  025bf	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  025c2	89 82 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], eax

; 544  : 	//if(SkillID == eSkill16)
; 545  : 	//{
; 546  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 547  : 	//}
; 548  : 	////Agility
; 549  : 	if(lpObj->pInventory[1].m_Type >= ITEMGET(6,0) && lpObj->pInventory[1].m_Type <= ITEMGET(6,255))

  025c8	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  025cb	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  025d1	0f bf 91 da 00
	00 00		 movsx	 edx, WORD PTR [ecx+218]
  025d8	81 fa 00 0c 00
	00		 cmp	 edx, 3072		; 00000c00H
  025de	7c 3a		 jl	 SHORT $LN1@CalcCharac
  025e0	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  025e3	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  025e9	0f bf 91 da 00
	00 00		 movsx	 edx, WORD PTR [ecx+218]
  025f0	81 fa ff 0c 00
	00		 cmp	 edx, 3327		; 00000cffH
  025f6	7f 22		 jg	 SHORT $LN1@CalcCharac

; 550  : 	{
; 551  : 		lpObj->m_Defense += this->ReturnCalc(aIndex, eSkill17,0);

  025f8	6a 00		 push	 0
  025fa	6a 11		 push	 17			; 00000011H
  025fc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  025ff	50		 push	 eax
  02600	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02603	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02608	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0260b	03 81 94 04 00
	00		 add	 eax, DWORD PTR [ecx+1172]
  02611	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  02614	89 82 94 04 00
	00		 mov	 DWORD PTR [edx+1172], eax
$LN1@CalcCharac:
$LN14@CalcCharac:

; 552  : 	}
; 553  : 	//if(SkillID == eSkill17)
; 554  : 	//{
; 555  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 556  : 	//}
; 557  : }

  0261a	5f		 pop	 edi
  0261b	5e		 pop	 esi
  0261c	5b		 pop	 ebx
  0261d	8b e5		 mov	 esp, ebp
  0261f	5d		 pop	 ebp
  02620	c2 04 00	 ret	 4
?CalcCharacter@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::CalcCharacter
_TEXT	ENDS
PUBLIC	?SummonPetSkill@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::SummonPetSkill
EXTRN	?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z:PROC	; CObjUseSkill::SkillMonsterCall
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_mObj$ = -16						; size = 4
_mIndex$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?SummonPetSkill@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::SummonPetSkill
; _this$ = ecx

; 560  : {

  02630	55		 push	 ebp
  02631	8b ec		 mov	 ebp, esp
  02633	83 ec 50	 sub	 esp, 80			; 00000050H
  02636	53		 push	 ebx
  02637	56		 push	 esi
  02638	57		 push	 edi
  02639	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 561  : 	LPOBJ lpObj = &gObj[aIndex];

  0263c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0263f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02645	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0264b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 562  : 	gObjUseSkill.SkillMonsterCall(lpObj->m_Index,this->CreateMob,lpObj->X-1,lpObj->Y+1);

  0264e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02651	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  02658	83 c1 01	 add	 ecx, 1
  0265b	51		 push	 ecx
  0265c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0265f	0f bf 82 44 01
	00 00		 movsx	 eax, WORD PTR [edx+324]
  02666	83 e8 01	 sub	 eax, 1
  02669	50		 push	 eax
  0266a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0266d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  02670	52		 push	 edx
  02671	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02674	8b 08		 mov	 ecx, DWORD PTR [eax]
  02676	51		 push	 ecx
  02677	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  0267c	e8 00 00 00 00	 call	 ?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z ; CObjUseSkill::SkillMonsterCall

; 563  : 
; 564  : 	int mIndex = gObj[aIndex].m_RecallMon;

  02681	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02684	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0268a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02690	8b 94 01 50 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1104]
  02697	89 55 f4	 mov	 DWORD PTR _mIndex$[ebp], edx

; 565  : 	LPOBJ mObj = &gObj[mIndex];

  0269a	8b 45 f4	 mov	 eax, DWORD PTR _mIndex$[ebp]
  0269d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  026a3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  026a9	89 45 f0	 mov	 DWORD PTR _mObj$[ebp], eax

; 566  : 
; 567  : 	mObj->m_AttackDamageMin += this->ReturnCalc(aIndex, eSkill3,0);

  026ac	6a 00		 push	 0
  026ae	6a 03		 push	 3
  026b0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  026b3	50		 push	 eax
  026b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  026b7	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  026bc	8b 4d f0	 mov	 ecx, DWORD PTR _mObj$[ebp]
  026bf	03 81 60 04 00
	00		 add	 eax, DWORD PTR [ecx+1120]
  026c5	8b 55 f0	 mov	 edx, DWORD PTR _mObj$[ebp]
  026c8	89 82 60 04 00
	00		 mov	 DWORD PTR [edx+1120], eax

; 568  : 	mObj->m_AttackDamageMax += this->ReturnCalc(aIndex, eSkill3,0);

  026ce	6a 00		 push	 0
  026d0	6a 03		 push	 3
  026d2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  026d5	50		 push	 eax
  026d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  026d9	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  026de	8b 4d f0	 mov	 ecx, DWORD PTR _mObj$[ebp]
  026e1	03 81 64 04 00
	00		 add	 eax, DWORD PTR [ecx+1124]
  026e7	8b 55 f0	 mov	 edx, DWORD PTR _mObj$[ebp]
  026ea	89 82 64 04 00
	00		 mov	 DWORD PTR [edx+1124], eax

; 569  : 	mObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill3,0);

  026f0	6a 00		 push	 0
  026f2	6a 03		 push	 3
  026f4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  026f7	50		 push	 eax
  026f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  026fb	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02700	8b 4d f0	 mov	 ecx, DWORD PTR _mObj$[ebp]
  02703	03 81 84 04 00
	00		 add	 eax, DWORD PTR [ecx+1156]
  02709	8b 55 f0	 mov	 edx, DWORD PTR _mObj$[ebp]
  0270c	89 82 84 04 00
	00		 mov	 DWORD PTR [edx+1156], eax

; 570  : 	mObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill3,0);

  02712	6a 00		 push	 0
  02714	6a 03		 push	 3
  02716	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02719	50		 push	 eax
  0271a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0271d	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02722	8b 4d f0	 mov	 ecx, DWORD PTR _mObj$[ebp]
  02725	03 81 80 04 00
	00		 add	 eax, DWORD PTR [ecx+1152]
  0272b	8b 55 f0	 mov	 edx, DWORD PTR _mObj$[ebp]
  0272e	89 82 80 04 00
	00		 mov	 DWORD PTR [edx+1152], eax

; 571  : 	mObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill3,0);

  02734	6a 00		 push	 0
  02736	6a 03		 push	 3
  02738	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0273b	50		 push	 eax
  0273c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0273f	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02744	8b 4d f0	 mov	 ecx, DWORD PTR _mObj$[ebp]
  02747	03 81 7c 04 00
	00		 add	 eax, DWORD PTR [ecx+1148]
  0274d	8b 55 f0	 mov	 edx, DWORD PTR _mObj$[ebp]
  02750	89 82 7c 04 00
	00		 mov	 DWORD PTR [edx+1148], eax

; 572  : 	mObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill3,0);

  02756	6a 00		 push	 0
  02758	6a 03		 push	 3
  0275a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0275d	50		 push	 eax
  0275e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02761	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02766	8b 4d f0	 mov	 ecx, DWORD PTR _mObj$[ebp]
  02769	03 81 78 04 00
	00		 add	 eax, DWORD PTR [ecx+1144]
  0276f	8b 55 f0	 mov	 edx, DWORD PTR _mObj$[ebp]
  02772	89 82 78 04 00
	00		 mov	 DWORD PTR [edx+1144], eax

; 573  : 	mObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill3,0);

  02778	6a 00		 push	 0
  0277a	6a 03		 push	 3
  0277c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0277f	50		 push	 eax
  02780	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02783	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02788	8b 4d f0	 mov	 ecx, DWORD PTR _mObj$[ebp]
  0278b	03 81 68 04 00
	00		 add	 eax, DWORD PTR [ecx+1128]
  02791	8b 55 f0	 mov	 edx, DWORD PTR _mObj$[ebp]
  02794	89 82 68 04 00
	00		 mov	 DWORD PTR [edx+1128], eax

; 574  : 	mObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill3,0);

  0279a	6a 00		 push	 0
  0279c	6a 03		 push	 3
  0279e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  027a1	50		 push	 eax
  027a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  027a5	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  027aa	8b 4d f0	 mov	 ecx, DWORD PTR _mObj$[ebp]
  027ad	03 81 6c 04 00
	00		 add	 eax, DWORD PTR [ecx+1132]
  027b3	8b 55 f0	 mov	 edx, DWORD PTR _mObj$[ebp]
  027b6	89 82 6c 04 00
	00		 mov	 DWORD PTR [edx+1132], eax

; 575  : 	mObj->m_Defense += this->ReturnCalc(aIndex, eSkill3,0);

  027bc	6a 00		 push	 0
  027be	6a 03		 push	 3
  027c0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  027c3	50		 push	 eax
  027c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  027c7	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  027cc	8b 4d f0	 mov	 ecx, DWORD PTR _mObj$[ebp]
  027cf	03 81 94 04 00
	00		 add	 eax, DWORD PTR [ecx+1172]
  027d5	8b 55 f0	 mov	 edx, DWORD PTR _mObj$[ebp]
  027d8	89 82 94 04 00
	00		 mov	 DWORD PTR [edx+1172], eax

; 576  : }

  027de	5f		 pop	 edi
  027df	5e		 pop	 esi
  027e0	5b		 pop	 ebx
  027e1	8b e5		 mov	 esp, ebp
  027e3	5d		 pop	 ebp
  027e4	c2 04 00	 ret	 4
?SummonPetSkill@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::SummonPetSkill
_TEXT	ENDS
PUBLIC	?TeleportSkill@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::TeleportSkill
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?TeleportSkill@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::TeleportSkill
; _this$ = ecx

; 579  : {

  027f0	55		 push	 ebp
  027f1	8b ec		 mov	 ebp, esp
  027f3	83 ec 44	 sub	 esp, 68			; 00000044H
  027f6	53		 push	 ebx
  027f7	56		 push	 esi
  027f8	57		 push	 edi
  027f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 580  : 	gObjTeleport(aIndex, this->TeleportMap, this->TeleportX, this->TeleportY);

  027fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  027ff	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  02802	51		 push	 ecx
  02803	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02806	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  02809	50		 push	 eax
  0280a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0280d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  02810	52		 push	 edx
  02811	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02814	50		 push	 eax
  02815	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  0281a	83 c4 10	 add	 esp, 16			; 00000010H

; 581  : }

  0281d	5f		 pop	 edi
  0281e	5e		 pop	 esi
  0281f	5b		 pop	 ebx
  02820	8b e5		 mov	 esp, ebp
  02822	5d		 pop	 ebp
  02823	c2 04 00	 ret	 4
?TeleportSkill@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::TeleportSkill
_TEXT	ENDS
PUBLIC	?CalcStats@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::CalcStats
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?CalcStats@cSystemOfRage@@QAEXH@Z PROC			; cSystemOfRage::CalcStats
; _this$ = ecx

; 584  : {

  02830	55		 push	 ebp
  02831	8b ec		 mov	 ebp, esp
  02833	83 ec 44	 sub	 esp, 68			; 00000044H
  02836	53		 push	 ebx
  02837	56		 push	 esi
  02838	57		 push	 edi
  02839	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 585  : 	//Fix
; 586  : 	//LPOBJ lpObj = &gObj[aIndex];
; 587  : 	////Strength
; 588  : 	//lpObj->AddStrength += this->ReturnCalc(aIndex, eSkill13,0);
; 589  : 	////Energy
; 590  : 	//lpObj->AddEnergy += this->ReturnCalc(aIndex, eSkill16,0);
; 591  : 	////Agility
; 592  : 	//lpObj->AddDexterity += this->ReturnCalc(aIndex, eSkill17,0);
; 593  : }

  0283c	5f		 pop	 edi
  0283d	5e		 pop	 esi
  0283e	5b		 pop	 ebx
  0283f	8b e5		 mov	 esp, ebp
  02841	5d		 pop	 ebp
  02842	c2 04 00	 ret	 4
?CalcStats@cSystemOfRage@@QAEXH@Z ENDP			; cSystemOfRage::CalcStats
_TEXT	ENDS
PUBLIC	?DropZen@cSystemOfRage@@QAEXHAAM@Z		; cSystemOfRage::DropZen
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv79 = -72						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_money$ = 12						; size = 4
?DropZen@cSystemOfRage@@QAEXHAAM@Z PROC			; cSystemOfRage::DropZen
; _this$ = ecx

; 596  : {

  02850	55		 push	 ebp
  02851	8b ec		 mov	 ebp, esp
  02853	83 ec 48	 sub	 esp, 72			; 00000048H
  02856	53		 push	 ebx
  02857	56		 push	 esi
  02858	57		 push	 edi
  02859	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 597  : 	if(!this->Enable) return;

  0285c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0285f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  02862	85 c9		 test	 ecx, ecx
  02864	75 02		 jne	 SHORT $LN1@DropZen
  02866	eb 20		 jmp	 SHORT $LN2@DropZen
$LN1@DropZen:

; 598  : 
; 599  : 	money += this->ReturnCalc(aIndex, eSkill17,0);

  02868	6a 00		 push	 0
  0286a	6a 11		 push	 17			; 00000011H
  0286c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0286f	50		 push	 eax
  02870	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02873	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02878	89 45 b8	 mov	 DWORD PTR tv79[ebp], eax
  0287b	db 45 b8	 fild	 DWORD PTR tv79[ebp]
  0287e	8b 4d 0c	 mov	 ecx, DWORD PTR _money$[ebp]
  02881	d8 01		 fadd	 DWORD PTR [ecx]
  02883	8b 55 0c	 mov	 edx, DWORD PTR _money$[ebp]
  02886	d9 1a		 fstp	 DWORD PTR [edx]
$LN2@DropZen:

; 600  : }

  02888	5f		 pop	 edi
  02889	5e		 pop	 esi
  0288a	5b		 pop	 ebx
  0288b	8b e5		 mov	 esp, ebp
  0288d	5d		 pop	 ebp
  0288e	c2 08 00	 ret	 8
?DropZen@cSystemOfRage@@QAEXHAAM@Z ENDP			; cSystemOfRage::DropZen
_TEXT	ENDS
PUBLIC	?ExpFunction@cSystemOfRage@@QAEXHAA_J@Z		; cSystemOfRage::ExpFunction
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_exp$ = 12						; size = 4
?ExpFunction@cSystemOfRage@@QAEXHAA_J@Z PROC		; cSystemOfRage::ExpFunction
; _this$ = ecx

; 603  : {

  028a0	55		 push	 ebp
  028a1	8b ec		 mov	 ebp, esp
  028a3	83 ec 44	 sub	 esp, 68			; 00000044H
  028a6	53		 push	 ebx
  028a7	56		 push	 esi
  028a8	57		 push	 edi
  028a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 604  : 	exp += this->ReturnCalc(aIndex, eSkill27,0);

  028ac	6a 00		 push	 0
  028ae	6a 1b		 push	 27			; 0000001bH
  028b0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  028b3	50		 push	 eax
  028b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  028b7	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  028bc	99		 cdq
  028bd	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  028c0	03 01		 add	 eax, DWORD PTR [ecx]
  028c2	13 51 04	 adc	 edx, DWORD PTR [ecx+4]
  028c5	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  028c8	89 01		 mov	 DWORD PTR [ecx], eax
  028ca	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 605  : }

  028cd	5f		 pop	 edi
  028ce	5e		 pop	 esi
  028cf	5b		 pop	 ebx
  028d0	8b e5		 mov	 esp, ebp
  028d2	5d		 pop	 ebp
  028d3	c2 08 00	 ret	 8
?ExpFunction@cSystemOfRage@@QAEXHAA_J@Z ENDP		; cSystemOfRage::ExpFunction
_TEXT	ENDS
PUBLIC	?AttackDefenceRate@cSystemOfRage@@QAEXHHAAM0@Z	; cSystemOfRage::AttackDefenceRate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv93 = -72						; size = 4
tv86 = -72						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_Target$ = 12						; size = 4
_Attack$ = 16						; size = 4
_Defence$ = 20						; size = 4
?AttackDefenceRate@cSystemOfRage@@QAEXHHAAM0@Z PROC	; cSystemOfRage::AttackDefenceRate
; _this$ = ecx

; 608  : {

  028e0	55		 push	 ebp
  028e1	8b ec		 mov	 ebp, esp
  028e3	83 ec 48	 sub	 esp, 72			; 00000048H
  028e6	53		 push	 ebx
  028e7	56		 push	 esi
  028e8	57		 push	 edi
  028e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 609  : 	Attack += this->ReturnCalc(aIndex, eSkill32,0);

  028ec	6a 00		 push	 0
  028ee	6a 20		 push	 32			; 00000020H
  028f0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  028f3	50		 push	 eax
  028f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  028f7	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  028fc	89 45 b8	 mov	 DWORD PTR tv86[ebp], eax
  028ff	db 45 b8	 fild	 DWORD PTR tv86[ebp]
  02902	8b 4d 10	 mov	 ecx, DWORD PTR _Attack$[ebp]
  02905	d8 01		 fadd	 DWORD PTR [ecx]
  02907	8b 55 10	 mov	 edx, DWORD PTR _Attack$[ebp]
  0290a	d9 1a		 fstp	 DWORD PTR [edx]

; 610  : 	Defence += this->ReturnCalc(Target, eSkill14,0);

  0290c	6a 00		 push	 0
  0290e	6a 0e		 push	 14			; 0000000eH
  02910	8b 45 0c	 mov	 eax, DWORD PTR _Target$[ebp]
  02913	50		 push	 eax
  02914	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02917	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0291c	89 45 b8	 mov	 DWORD PTR tv93[ebp], eax
  0291f	db 45 b8	 fild	 DWORD PTR tv93[ebp]
  02922	8b 4d 14	 mov	 ecx, DWORD PTR _Defence$[ebp]
  02925	d8 01		 fadd	 DWORD PTR [ecx]
  02927	8b 55 14	 mov	 edx, DWORD PTR _Defence$[ebp]
  0292a	d9 1a		 fstp	 DWORD PTR [edx]

; 611  : }

  0292c	5f		 pop	 edi
  0292d	5e		 pop	 esi
  0292e	5b		 pop	 ebx
  0292f	8b e5		 mov	 esp, ebp
  02931	5d		 pop	 ebp
  02932	c2 10 00	 ret	 16			; 00000010H
?AttackDefenceRate@cSystemOfRage@@QAEXHHAAM0@Z ENDP	; cSystemOfRage::AttackDefenceRate
_TEXT	ENDS
PUBLIC	?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z	; cSystemOfRage::ExlCritDamage
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_effect$ = 12						; size = 4
_AttackDamage$ = 16					; size = 4
?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z PROC		; cSystemOfRage::ExlCritDamage
; _this$ = ecx

; 614  : {

  02940	55		 push	 ebp
  02941	8b ec		 mov	 ebp, esp
  02943	83 ec 44	 sub	 esp, 68			; 00000044H
  02946	53		 push	 ebx
  02947	56		 push	 esi
  02948	57		 push	 edi
  02949	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 615  : 	if(effect == 2)//Exl Damage

  0294c	83 7d 0c 02	 cmp	 DWORD PTR _effect$[ebp], 2
  02950	75 1a		 jne	 SHORT $LN2@ExlCritDam

; 616  : 	{
; 617  : 		AttackDamage += this->ReturnCalc(aIndex, eSkill34,0);

  02952	6a 00		 push	 0
  02954	6a 22		 push	 34			; 00000022H
  02956	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02959	50		 push	 eax
  0295a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0295d	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02962	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  02965	03 01		 add	 eax, DWORD PTR [ecx]
  02967	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0296a	89 02		 mov	 DWORD PTR [edx], eax
$LN2@ExlCritDam:

; 618  : 	}
; 619  : 	if(effect == 3)//Critical Damage

  0296c	83 7d 0c 03	 cmp	 DWORD PTR _effect$[ebp], 3
  02970	75 1a		 jne	 SHORT $LN3@ExlCritDam

; 620  : 	{
; 621  : 		AttackDamage += this->ReturnCalc(aIndex, eSkill35,0);

  02972	6a 00		 push	 0
  02974	6a 23		 push	 35			; 00000023H
  02976	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02979	50		 push	 eax
  0297a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0297d	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02982	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  02985	03 01		 add	 eax, DWORD PTR [ecx]
  02987	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0298a	89 02		 mov	 DWORD PTR [edx], eax
$LN3@ExlCritDam:

; 622  : 	}
; 623  : }

  0298c	5f		 pop	 edi
  0298d	5e		 pop	 esi
  0298e	5b		 pop	 ebx
  0298f	8b e5		 mov	 esp, ebp
  02991	5d		 pop	 ebp
  02992	c2 0c 00	 ret	 12			; 0000000cH
?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z ENDP		; cSystemOfRage::ExlCritDamage
_TEXT	ENDS
PUBLIC	?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z ; cSystemOfRage::AttackDamageRG
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Magic$ = -12						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTarget$ = 12						; size = 4
_dmg$ = 16						; size = 4
_bDamageReflect$ = 20					; size = 1
?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z PROC ; cSystemOfRage::AttackDamageRG
; _this$ = ecx

; 626  : {

  029a0	55		 push	 ebp
  029a1	8b ec		 mov	 ebp, esp
  029a3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  029a6	53		 push	 ebx
  029a7	56		 push	 esi
  029a8	57		 push	 edi
  029a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 627  : 	if(bDamageReflect == true) return;

  029ac	0f b6 45 14	 movzx	 eax, BYTE PTR _bDamageReflect$[ebp]
  029b0	83 f8 01	 cmp	 eax, 1
  029b3	75 05		 jne	 SHORT $LN9@AttackDama
  029b5	e9 32 01 00 00	 jmp	 $LN10@AttackDama
$LN9@AttackDama:

; 628  : 	if(lpObj->Type != OBJ_USER)

  029ba	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029bd	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  029c1	83 f9 01	 cmp	 ecx, 1
  029c4	74 05		 je	 SHORT $LN8@AttackDama

; 629  : 	{
; 630  : 		return;

  029c6	e9 21 01 00 00	 jmp	 $LN10@AttackDama
$LN8@AttackDama:

; 631  : 	}
; 632  : 	int aIndex =  lpObj->m_Index;

  029cb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  029d0	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 633  : 	int Magic = lpObj->UseMagicNumber;

  029d3	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  029d6	0f b6 88 cd 04
	00 00		 movzx	 ecx, BYTE PTR [eax+1229]
  029dd	89 4d f4	 mov	 DWORD PTR _Magic$[ebp], ecx

; 634  : 	//Ice Damage
; 635  : 	if(Magic == 7 || Magic == 39 || Magic == 51 || Magic == 75 ||
; 636  : 		Magic == 450 || Magic == 451 || Magic == 452 || Magic == 453 || Magic == 454)

  029e0	83 7d f4 07	 cmp	 DWORD PTR _Magic$[ebp], 7
  029e4	74 3f		 je	 SHORT $LN6@AttackDama
  029e6	83 7d f4 27	 cmp	 DWORD PTR _Magic$[ebp], 39 ; 00000027H
  029ea	74 39		 je	 SHORT $LN6@AttackDama
  029ec	83 7d f4 33	 cmp	 DWORD PTR _Magic$[ebp], 51 ; 00000033H
  029f0	74 33		 je	 SHORT $LN6@AttackDama
  029f2	83 7d f4 4b	 cmp	 DWORD PTR _Magic$[ebp], 75 ; 0000004bH
  029f6	74 2d		 je	 SHORT $LN6@AttackDama
  029f8	81 7d f4 c2 01
	00 00		 cmp	 DWORD PTR _Magic$[ebp], 450 ; 000001c2H
  029ff	74 24		 je	 SHORT $LN6@AttackDama
  02a01	81 7d f4 c3 01
	00 00		 cmp	 DWORD PTR _Magic$[ebp], 451 ; 000001c3H
  02a08	74 1b		 je	 SHORT $LN6@AttackDama
  02a0a	81 7d f4 c4 01
	00 00		 cmp	 DWORD PTR _Magic$[ebp], 452 ; 000001c4H
  02a11	74 12		 je	 SHORT $LN6@AttackDama
  02a13	81 7d f4 c5 01
	00 00		 cmp	 DWORD PTR _Magic$[ebp], 453 ; 000001c5H
  02a1a	74 09		 je	 SHORT $LN6@AttackDama
  02a1c	81 7d f4 c6 01
	00 00		 cmp	 DWORD PTR _Magic$[ebp], 454 ; 000001c6H
  02a23	75 1c		 jne	 SHORT $LN7@AttackDama
$LN6@AttackDama:

; 637  : 	{
; 638  : 		dmg += this->ReturnCalc(aIndex, eSkill30,0);

  02a25	6a 00		 push	 0
  02a27	6a 1e		 push	 30			; 0000001eH
  02a29	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02a2c	50		 push	 eax
  02a2d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a30	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02a35	8b 4d 10	 mov	 ecx, DWORD PTR _dmg$[ebp]
  02a38	03 01		 add	 eax, DWORD PTR [ecx]
  02a3a	8b 55 10	 mov	 edx, DWORD PTR _dmg$[ebp]
  02a3d	89 02		 mov	 DWORD PTR [edx], eax

; 639  : 	}
; 640  : 	//Fire Damage
; 641  : 	else if(Magic == 4 || Magic == 10 || Magic == 49 || Magic == 61 ||

  02a3f	eb 4a		 jmp	 SHORT $LN5@AttackDama
$LN7@AttackDama:

; 642  : 		Magic == 74 ||Magic == 78 ||Magic == 14 || Magic == 55 )

  02a41	83 7d f4 04	 cmp	 DWORD PTR _Magic$[ebp], 4
  02a45	74 2a		 je	 SHORT $LN3@AttackDama
  02a47	83 7d f4 0a	 cmp	 DWORD PTR _Magic$[ebp], 10 ; 0000000aH
  02a4b	74 24		 je	 SHORT $LN3@AttackDama
  02a4d	83 7d f4 31	 cmp	 DWORD PTR _Magic$[ebp], 49 ; 00000031H
  02a51	74 1e		 je	 SHORT $LN3@AttackDama
  02a53	83 7d f4 3d	 cmp	 DWORD PTR _Magic$[ebp], 61 ; 0000003dH
  02a57	74 18		 je	 SHORT $LN3@AttackDama
  02a59	83 7d f4 4a	 cmp	 DWORD PTR _Magic$[ebp], 74 ; 0000004aH
  02a5d	74 12		 je	 SHORT $LN3@AttackDama
  02a5f	83 7d f4 4e	 cmp	 DWORD PTR _Magic$[ebp], 78 ; 0000004eH
  02a63	74 0c		 je	 SHORT $LN3@AttackDama
  02a65	83 7d f4 0e	 cmp	 DWORD PTR _Magic$[ebp], 14 ; 0000000eH
  02a69	74 06		 je	 SHORT $LN3@AttackDama
  02a6b	83 7d f4 37	 cmp	 DWORD PTR _Magic$[ebp], 55 ; 00000037H
  02a6f	75 1a		 jne	 SHORT $LN5@AttackDama
$LN3@AttackDama:

; 643  : 	{
; 644  : 		dmg += this->ReturnCalc(aIndex, eSkill15,0);

  02a71	6a 00		 push	 0
  02a73	6a 0f		 push	 15			; 0000000fH
  02a75	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02a78	50		 push	 eax
  02a79	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a7c	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02a81	8b 4d 10	 mov	 ecx, DWORD PTR _dmg$[ebp]
  02a84	03 01		 add	 eax, DWORD PTR [ecx]
  02a86	8b 55 10	 mov	 edx, DWORD PTR _dmg$[ebp]
  02a89	89 02		 mov	 DWORD PTR [edx], eax
$LN5@AttackDama:

; 645  : 	}
; 646  : 	//DistanceAttack
; 647  : 	if(gObjCalDistance(lpObj, lpTarget) > 2)

  02a8b	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  02a8e	50		 push	 eax
  02a8f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  02a92	51		 push	 ecx
  02a93	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  02a98	83 c4 08	 add	 esp, 8
  02a9b	83 f8 02	 cmp	 eax, 2
  02a9e	7e 1a		 jle	 SHORT $LN2@AttackDama

; 648  : 	{
; 649  : 		dmg += this->ReturnCalc(aIndex, eSkill31,0);

  02aa0	6a 00		 push	 0
  02aa2	6a 1f		 push	 31			; 0000001fH
  02aa4	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02aa7	50		 push	 eax
  02aa8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02aab	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02ab0	8b 4d 10	 mov	 ecx, DWORD PTR _dmg$[ebp]
  02ab3	03 01		 add	 eax, DWORD PTR [ecx]
  02ab5	8b 55 10	 mov	 edx, DWORD PTR _dmg$[ebp]
  02ab8	89 02		 mov	 DWORD PTR [edx], eax
$LN2@AttackDama:

; 650  : 	}
; 651  : 	if(lpObj->Type == OBJ_USER && lpTarget->Type == OBJ_USER)

  02aba	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02abd	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  02ac1	83 f9 01	 cmp	 ecx, 1
  02ac4	75 26		 jne	 SHORT $LN10@AttackDama
  02ac6	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  02ac9	0f b7 48 68	 movzx	 ecx, WORD PTR [eax+104]
  02acd	83 f9 01	 cmp	 ecx, 1
  02ad0	75 1a		 jne	 SHORT $LN10@AttackDama

; 652  : 	{
; 653  : 		dmg += this->ReturnCalc(aIndex, eSkill25,0);

  02ad2	6a 00		 push	 0
  02ad4	6a 19		 push	 25			; 00000019H
  02ad6	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02ad9	50		 push	 eax
  02ada	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02add	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  02ae2	8b 4d 10	 mov	 ecx, DWORD PTR _dmg$[ebp]
  02ae5	03 01		 add	 eax, DWORD PTR [ecx]
  02ae7	8b 55 10	 mov	 edx, DWORD PTR _dmg$[ebp]
  02aea	89 02		 mov	 DWORD PTR [edx], eax
$LN10@AttackDama:

; 654  : 	}
; 655  : }

  02aec	5f		 pop	 edi
  02aed	5e		 pop	 esi
  02aee	5b		 pop	 ebx
  02aef	8b e5		 mov	 esp, ebp
  02af1	5d		 pop	 ebp
  02af2	c2 10 00	 ret	 16			; 00000010H
?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z ENDP ; cSystemOfRage::AttackDamageRG
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendUser@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::SendUser
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_rSend$ = -172						; size = 160
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?SendUser@cSystemOfRage@@QAEXH@Z PROC			; cSystemOfRage::SendUser
; _this$ = ecx

; 658  : {

  02b00	55		 push	 ebp
  02b01	8b ec		 mov	 ebp, esp
  02b03	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  02b09	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  02b0e	33 c5		 xor	 eax, ebp
  02b10	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02b13	53		 push	 ebx
  02b14	56		 push	 esi
  02b15	57		 push	 edi
  02b16	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 659  : 	LPOBJ lpObj = &gObj[aIndex];

  02b19	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b1c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  02b22	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  02b28	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 660  : 
; 661  : 	sRageUserSend rSend;
; 662  : 
; 663  : 	rSend.h.set((LPBYTE)&rSend, 0xFB, 2, sizeof(rSend));

  02b2b	68 a0 00 00 00	 push	 160			; 000000a0H
  02b30	6a 02		 push	 2
  02b32	68 fb 00 00 00	 push	 251			; 000000fbH
  02b37	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _rSend$[ebp]
  02b3d	50		 push	 eax
  02b3e	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _rSend$[ebp]
  02b44	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 664  : 
; 665  : 	rSend.rLevel = this->rUser[aIndex].rLevel;

  02b49	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b4c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02b52	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02b55	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  02b59	89 95 58 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+4], edx

; 666  : 	rSend.rPoints = this->rUser[aIndex].rPoints;

  02b5f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b62	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02b68	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02b6b	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  02b6f	89 95 5c ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+8], edx

; 667  : 	rSend.rExperience = this->rUser[aIndex].rExperience;

  02b75	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b78	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02b7e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02b81	8b 54 01 3c	 mov	 edx, DWORD PTR [ecx+eax+60]
  02b85	89 95 60 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+12], edx

; 668  : 
; 669  : 	rSend.Damage = this->rUser[aIndex].Damage;

  02b8b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02b8e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02b94	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02b97	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  02b9b	89 95 64 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+16], edx

; 670  : 	rSend.FreePoints = this->rUser[aIndex].FreePoints;

  02ba1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02ba4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02baa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02bad	8b 54 01 48	 mov	 edx, DWORD PTR [ecx+eax+72]
  02bb1	89 95 68 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+20], edx

; 671  : 	rSend.SummonPet = this->rUser[aIndex].SummonPet;

  02bb7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02bba	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02bc0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02bc3	8b 54 01 4c	 mov	 edx, DWORD PTR [ecx+eax+76]
  02bc7	89 95 6c ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+24], edx

; 672  : 	rSend.WingsDamagePlus = this->rUser[aIndex].WingsDamagePlus;

  02bcd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02bd0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02bd6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02bd9	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  02bdd	89 95 70 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+28], edx

; 673  : 	rSend.FinalMana = this->rUser[aIndex].FinalMana;

  02be3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02be6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02bec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02bef	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  02bf3	89 95 74 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+32], edx

; 674  : 	rSend.IgnoreDefence = this->rUser[aIndex].IgnoreDefence;

  02bf9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02bfc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02c02	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c05	8b 54 01 58	 mov	 edx, DWORD PTR [ecx+eax+88]
  02c09	89 95 78 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+36], edx

; 675  : 	rSend.ResetLevel = this->rUser[aIndex].ResetLevel;

  02c0f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02c12	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02c18	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c1b	8b 54 01 5c	 mov	 edx, DWORD PTR [ecx+eax+92]
  02c1f	89 95 7c ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+40], edx

; 676  : 	rSend.Teleport = this->rUser[aIndex].Teleport;

  02c25	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02c28	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02c2e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c31	8b 54 01 60	 mov	 edx, DWORD PTR [ecx+eax+96]
  02c35	89 55 80	 mov	 DWORD PTR _rSend$[ebp+44], edx

; 677  : 	rSend.CriticalDamageRate = this->rUser[aIndex].CriticalDamageRate;

  02c38	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02c3b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02c41	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c44	8b 54 01 64	 mov	 edx, DWORD PTR [ecx+eax+100]
  02c48	89 55 84	 mov	 DWORD PTR _rSend$[ebp+48], edx

; 678  : 	rSend.AbsordDamage = this->rUser[aIndex].AbsordDamage;

  02c4b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02c4e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02c54	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c57	8b 54 01 68	 mov	 edx, DWORD PTR [ecx+eax+104]
  02c5b	89 55 88	 mov	 DWORD PTR _rSend$[ebp+52], edx

; 679  : 	rSend.PetDamageBonus = this->rUser[aIndex].PetDamageBonus;

  02c5e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02c61	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02c67	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c6a	8b 54 01 6c	 mov	 edx, DWORD PTR [ecx+eax+108]
  02c6e	89 55 8c	 mov	 DWORD PTR _rSend$[ebp+56], edx

; 680  : 	rSend.FinalLife = this->rUser[aIndex].FinalLife;

  02c71	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02c74	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02c7a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c7d	8b 54 01 70	 mov	 edx, DWORD PTR [ecx+eax+112]
  02c81	89 55 90	 mov	 DWORD PTR _rSend$[ebp+60], edx

; 681  : 	rSend.Strength = this->rUser[aIndex].Strength;

  02c84	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02c87	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02c8d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02c90	8b 54 01 74	 mov	 edx, DWORD PTR [ecx+eax+116]
  02c94	89 55 94	 mov	 DWORD PTR _rSend$[ebp+64], edx

; 682  : 	rSend.DefenceRate = this->rUser[aIndex].DefenceRate;

  02c97	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02c9a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02ca0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02ca3	8b 54 01 78	 mov	 edx, DWORD PTR [ecx+eax+120]
  02ca7	89 55 98	 mov	 DWORD PTR _rSend$[ebp+68], edx

; 683  : 	rSend.FireDamage = this->rUser[aIndex].FireDamage;

  02caa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02cad	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02cb3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02cb6	8b 54 01 7c	 mov	 edx, DWORD PTR [ecx+eax+124]
  02cba	89 55 9c	 mov	 DWORD PTR _rSend$[ebp+72], edx

; 684  : 	rSend.Energy = this->rUser[aIndex].Energy;

  02cbd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02cc0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02cc6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02cc9	8b 94 01 80 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+128]
  02cd0	89 55 a0	 mov	 DWORD PTR _rSend$[ebp+76], edx

; 685  : 	rSend.Agility = this->rUser[aIndex].Agility;

  02cd3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02cd6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02cdc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02cdf	8b 94 01 84 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+132]
  02ce6	89 55 a4	 mov	 DWORD PTR _rSend$[ebp+80], edx

; 686  : 	rSend.DoubleDamage = this->rUser[aIndex].DoubleDamage;

  02ce9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02cec	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02cf2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02cf5	8b 94 01 88 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+136]
  02cfc	89 55 a8	 mov	 DWORD PTR _rSend$[ebp+84], edx

; 687  : 	rSend.FinalSD = this->rUser[aIndex].FinalSD;

  02cff	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02d02	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02d08	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02d0b	8b 94 01 8c 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+140]
  02d12	89 55 ac	 mov	 DWORD PTR _rSend$[ebp+88], edx

; 688  : 	rSend.FinalDefence = this->rUser[aIndex].FinalDefence;

  02d15	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02d18	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02d1e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02d21	8b 94 01 90 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+144]
  02d28	89 55 b0	 mov	 DWORD PTR _rSend$[ebp+92], edx

; 689  : 	rSend.ZenDrop = this->rUser[aIndex].ZenDrop;

  02d2b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02d2e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02d34	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02d37	8b 94 01 94 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+148]
  02d3e	89 55 b4	 mov	 DWORD PTR _rSend$[ebp+96], edx

; 690  : 	rSend.GuildBonus = this->rUser[aIndex].GuildBonus;

  02d41	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02d44	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02d4a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02d4d	8b 94 01 98 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+152]
  02d54	89 55 b8	 mov	 DWORD PTR _rSend$[ebp+100], edx

; 691  : 	rSend.ReflectDamage = this->rUser[aIndex].ReflectDamage;

  02d57	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02d5a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02d60	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02d63	8b 94 01 9c 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+156]
  02d6a	89 55 bc	 mov	 DWORD PTR _rSend$[ebp+104], edx

; 692  : 	rSend.ExellentDamageRate = this->rUser[aIndex].ExellentDamageRate;

  02d6d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02d70	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02d76	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02d79	8b 94 01 a0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+160]
  02d80	89 55 c0	 mov	 DWORD PTR _rSend$[ebp+108], edx

; 693  : 	rSend.PvPBonusPlus = this->rUser[aIndex].PvPBonusPlus;

  02d83	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02d86	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02d8c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02d8f	8b 94 01 a4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+164]
  02d96	89 55 c4	 mov	 DWORD PTR _rSend$[ebp+112], edx

; 694  : 	rSend.MinDefence = this->rUser[aIndex].MinDefence;

  02d99	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02d9c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02da2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02da5	8b 94 01 a8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+168]
  02dac	89 55 c8	 mov	 DWORD PTR _rSend$[ebp+116], edx

; 695  : 	rSend.Experience = this->rUser[aIndex].Experience;

  02daf	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02db2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02db8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02dbb	8b 94 01 ac 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+172]
  02dc2	89 55 cc	 mov	 DWORD PTR _rSend$[ebp+120], edx

; 696  : 	rSend.StartSD = this->rUser[aIndex].StartSD;

  02dc5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02dc8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02dce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02dd1	8b 94 01 b0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+176]
  02dd8	89 55 d0	 mov	 DWORD PTR _rSend$[ebp+124], edx

; 697  : 	rSend.PartyBonus = this->rUser[aIndex].PartyBonus;

  02ddb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02dde	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02de4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02de7	8b 94 01 b4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+180]
  02dee	89 55 d4	 mov	 DWORD PTR _rSend$[ebp+128], edx

; 698  : 	rSend.IceDamage = this->rUser[aIndex].IceDamage;

  02df1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02df4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02dfa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02dfd	8b 94 01 b8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+184]
  02e04	89 55 d8	 mov	 DWORD PTR _rSend$[ebp+132], edx

; 699  : 	rSend.DistanceAttack = this->rUser[aIndex].DistanceAttack;

  02e07	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02e0a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02e10	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02e13	8b 94 01 bc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+188]
  02e1a	89 55 dc	 mov	 DWORD PTR _rSend$[ebp+136], edx

; 700  : 	rSend.AttackRate = this->rUser[aIndex].AttackRate;

  02e1d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02e20	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02e26	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02e29	8b 94 01 c0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+192]
  02e30	89 55 e0	 mov	 DWORD PTR _rSend$[ebp+140], edx

; 701  : 	rSend.WeaponBonus = this->rUser[aIndex].WeaponBonus;

  02e33	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02e36	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02e3c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02e3f	8b 94 01 c4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+196]
  02e46	89 55 e4	 mov	 DWORD PTR _rSend$[ebp+144], edx

; 702  : 	rSend.ExellentDamage = this->rUser[aIndex].ExellentDamage;

  02e49	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02e4c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02e52	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02e55	8b 94 01 c8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+200]
  02e5c	89 55 e8	 mov	 DWORD PTR _rSend$[ebp+148], edx

; 703  : 	rSend.CriticalDamage = this->rUser[aIndex].CriticalDamage;

  02e5f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02e62	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02e68	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02e6b	8b 94 01 cc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+204]
  02e72	89 55 ec	 mov	 DWORD PTR _rSend$[ebp+152], edx

; 704  : 
; 705  : 	rSend.NextExp = this->NextExp * this->rUser[aIndex].rLevel;

  02e75	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02e78	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02e7e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02e81	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02e84	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  02e87	0f af 4c 02 34	 imul	 ecx, DWORD PTR [edx+eax+52]
  02e8c	89 4d f0	 mov	 DWORD PTR _rSend$[ebp+156], ecx

; 706  : 
; 707  : 	DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  02e8f	68 a0 00 00 00	 push	 160			; 000000a0H
  02e94	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _rSend$[ebp]
  02e9a	50		 push	 eax
  02e9b	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  02e9e	51		 push	 ecx
  02e9f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  02ea4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 708  : }

  02ea7	5f		 pop	 edi
  02ea8	5e		 pop	 esi
  02ea9	5b		 pop	 ebx
  02eaa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02ead	33 cd		 xor	 ecx, ebp
  02eaf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02eb4	8b e5		 mov	 esp, ebp
  02eb6	5d		 pop	 ebp
  02eb7	c2 04 00	 ret	 4
?SendUser@cSystemOfRage@@QAEXH@Z ENDP			; cSystemOfRage::SendUser
_TEXT	ENDS
PUBLIC	??_C@_0P@HAENLNCN@Rage?5Level?3?5?$CFd?$AA@	; `string'
PUBLIC	?RageExpFunction@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z ; cSystemOfRage::RageExpFunction
EXTRN	?CheckLevels@cBMQuest@@QAEXH@Z:PROC		; cBMQuest::CheckLevels
EXTRN	?BMQuest@@3VcBMQuest@@A:BYTE			; BMQuest
EXTRN	?MsgNormal@@YAXHPADZZ:PROC			; MsgNormal
;	COMDAT ??_C@_0P@HAENLNCN@Rage?5Level?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@HAENLNCN@Rage?5Level?3?5?$CFd?$AA@ DB 'Rage Level: %d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_tExp$ = -12						; size = 4
_aIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_TargetObj$ = 12					; size = 4
?RageExpFunction@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; cSystemOfRage::RageExpFunction
; _this$ = ecx

; 711  : {

  02ec0	55		 push	 ebp
  02ec1	8b ec		 mov	 ebp, esp
  02ec3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  02ec6	53		 push	 ebx
  02ec7	56		 push	 esi
  02ec8	57		 push	 edi
  02ec9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 712  : 	int aIndex = lpObj->m_Index;

  02ecc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02ecf	8b 08		 mov	 ecx, DWORD PTR [eax]
  02ed1	89 4d f8	 mov	 DWORD PTR _aIndex$[ebp], ecx

; 713  : 	if(!this->Enable)

  02ed4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02ed7	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  02eda	85 c9		 test	 ecx, ecx
  02edc	75 05		 jne	 SHORT $LN5@RageExpFun

; 714  : 	{
; 715  : 		return;

  02ede	e9 37 01 00 00	 jmp	 $LN6@RageExpFun
$LN5@RageExpFun:

; 716  : 	}
; 717  : 
; 718  : 	if(this->rUser[aIndex].rLevel >= this->MaxLevel)

  02ee3	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02ee6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02eec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02eef	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02ef2	8b 44 01 34	 mov	 eax, DWORD PTR [ecx+eax+52]
  02ef6	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  02ef9	7c 05		 jl	 SHORT $LN4@RageExpFun

; 719  : 	{
; 720  : 		return;

  02efb	e9 1a 01 00 00	 jmp	 $LN6@RageExpFun
$LN4@RageExpFun:

; 721  : 	}
; 722  : 
; 723  : 	if(this->NeedLevel > lpObj->Level || this->NeedMasterLevel > lpObj->MLevel)

  02f00	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f03	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  02f0a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02f0d	39 4a 28	 cmp	 DWORD PTR [edx+40], ecx
  02f10	7f 12		 jg	 SHORT $LN2@RageExpFun
  02f12	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  02f15	0f bf 88 d0 00
	00 00		 movsx	 ecx, WORD PTR [eax+208]
  02f1c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02f1f	39 4a 2c	 cmp	 DWORD PTR [edx+44], ecx
  02f22	7e 05		 jle	 SHORT $LN3@RageExpFun
$LN2@RageExpFun:

; 724  : 	{
; 725  : 		return;

  02f24	e9 f1 00 00 00	 jmp	 $LN6@RageExpFun
$LN3@RageExpFun:

; 726  : 	}
; 727  : 
; 728  : 	int tExp = TargetObj->Level * this->AddExp;

  02f29	8b 45 0c	 mov	 eax, DWORD PTR _TargetObj$[ebp]
  02f2c	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  02f33	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02f36	0f af 4a 08	 imul	 ecx, DWORD PTR [edx+8]
  02f3a	89 4d f4	 mov	 DWORD PTR _tExp$[ebp], ecx

; 729  : 	//MsgNormal(aIndex,"Rage Exp: %d Obtainded",tExp);
; 730  : 	this->rUser[aIndex].rExperience += tExp;

  02f3d	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02f40	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02f46	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f49	8b 54 01 3c	 mov	 edx, DWORD PTR [ecx+eax+60]
  02f4d	03 55 f4	 add	 edx, DWORD PTR _tExp$[ebp]
  02f50	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02f53	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02f59	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f5c	89 54 01 3c	 mov	 DWORD PTR [ecx+eax+60], edx

; 731  : 	if(this->rUser[aIndex].rExperience > (this->NextExp * this->rUser[aIndex].rLevel))

  02f60	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02f63	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02f69	8b 4d f8	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  02f6c	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  02f72	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02f75	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  02f78	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  02f7b	0f af 54 0e 34	 imul	 edx, DWORD PTR [esi+ecx+52]
  02f80	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f83	39 54 01 3c	 cmp	 DWORD PTR [ecx+eax+60], edx
  02f87	0f 8e 8d 00 00
	00		 jle	 $LN6@RageExpFun

; 732  : 	{
; 733  : 		this->rUser[aIndex].rLevel++;

  02f8d	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02f90	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02f96	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02f99	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  02f9d	83 c2 01	 add	 edx, 1
  02fa0	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02fa3	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02fa9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fac	89 54 01 34	 mov	 DWORD PTR [ecx+eax+52], edx

; 734  : 		this->rUser[aIndex].rPoints += this->rPointLvl;

  02fb0	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02fb3	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02fb9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fbc	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  02fc0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02fc3	03 50 1c	 add	 edx, DWORD PTR [eax+28]
  02fc6	8b 4d f8	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  02fc9	69 c9 a0 00 00
	00		 imul	 ecx, 160		; 000000a0H
  02fcf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02fd2	89 54 08 38	 mov	 DWORD PTR [eax+ecx+56], edx

; 735  : 		this->rUser[aIndex].rExperience = 0;

  02fd6	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02fd9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02fdf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02fe2	c7 44 01 3c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+60], 0

; 736  : 		MsgNormal(aIndex,"Rage Level: %d",this->rUser[aIndex].rLevel);

  02fea	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  02fed	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  02ff3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ff6	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  02ffa	52		 push	 edx
  02ffb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HAENLNCN@Rage?5Level?3?5?$CFd?$AA@
  03000	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03003	50		 push	 eax
  03004	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  03009	83 c4 0c	 add	 esp, 12			; 0000000cH

; 737  : 
; 738  : 		BMQuest.CheckLevels(aIndex);

  0300c	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0300f	50		 push	 eax
  03010	b9 00 00 00 00	 mov	 ecx, OFFSET ?BMQuest@@3VcBMQuest@@A ; BMQuest
  03015	e8 00 00 00 00	 call	 ?CheckLevels@cBMQuest@@QAEXH@Z ; cBMQuest::CheckLevels
$LN6@RageExpFun:

; 739  : 	}
; 740  : 
; 741  : 	//RageExpSend rSend;
; 742  : 	//rSend.h.set((LPBYTE)&rSend, 0xFB, 3, sizeof(rSend));
; 743  : 	//rSend.Level = this->rUser[aIndex].rLevel;
; 744  : 	//rSend.Point = this->rUser[aIndex].rPoints;
; 745  : 	//rSend.Exp = this->rUser[aIndex].rExperience;
; 746  : 	//rSend.NextExp = (this->NextExp * this->rUser[aIndex].rLevel);
; 747  : 	//
; 748  : 	//DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));
; 749  : }

  0301a	5f		 pop	 edi
  0301b	5e		 pop	 esi
  0301c	5b		 pop	 ebx
  0301d	8b e5		 mov	 esp, ebp
  0301f	5d		 pop	 ebp
  03020	c2 08 00	 ret	 8
?RageExpFunction@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; cSystemOfRage::RageExpFunction
_TEXT	ENDS
PUBLIC	?EvoRageReset@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::EvoRageReset
PUBLIC	?RecvActiveSkill@cSystemOfRage@@QAEXPAUsRageTabSend@@H@Z ; cSystemOfRage::RecvActiveSkill
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?RecvActiveSkill@cSystemOfRage@@QAEXPAUsRageTabSend@@H@Z PROC ; cSystemOfRage::RecvActiveSkill
; _this$ = ecx

; 752  : {

  03030	55		 push	 ebp
  03031	8b ec		 mov	 ebp, esp
  03033	83 ec 44	 sub	 esp, 68			; 00000044H
  03036	53		 push	 ebx
  03037	56		 push	 esi
  03038	57		 push	 edi
  03039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 753  : 	if(aRecv->Num == eSkill8 && this->rUser[aIndex].Teleport > 0)	//Teleport

  0303c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0303f	83 78 04 08	 cmp	 DWORD PTR [eax+4], 8
  03043	75 21		 jne	 SHORT $LN6@RecvActive
  03045	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03048	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0304e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03051	83 7c 01 60 00	 cmp	 DWORD PTR [ecx+eax+96], 0
  03056	7e 0e		 jle	 SHORT $LN6@RecvActive

; 754  : 	{
; 755  : 		this->TeleportSkill(aIndex);

  03058	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0305b	50		 push	 eax
  0305c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0305f	e8 00 00 00 00	 call	 ?TeleportSkill@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::TeleportSkill
  03064	eb 28		 jmp	 SHORT $LN5@RecvActive
$LN6@RecvActive:

; 756  : 	}
; 757  : 	else if(aRecv->Num == eSkill3 && this->rUser[aIndex].SummonPet > 0)

  03066	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  03069	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0306d	75 1f		 jne	 SHORT $LN5@RecvActive
  0306f	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03072	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0307b	83 7c 01 4c 00	 cmp	 DWORD PTR [ecx+eax+76], 0
  03080	7e 0c		 jle	 SHORT $LN5@RecvActive

; 758  : 	{
; 759  : 		this->SummonPetSkill(aIndex);

  03082	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03085	50		 push	 eax
  03086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03089	e8 00 00 00 00	 call	 ?SummonPetSkill@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SummonPetSkill
$LN5@RecvActive:

; 760  : 	}
; 761  : 
; 762  : 	if( g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::Gredy2) || g_ExLicense.CheckUser(eExUB::GredyLocal) )

  0308e	6a 20		 push	 32			; 00000020H
  03090	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  03095	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0309a	0f b6 c0	 movzx	 eax, al
  0309d	85 c0		 test	 eax, eax
  0309f	75 26		 jne	 SHORT $LN2@RecvActive
  030a1	6a 22		 push	 34			; 00000022H
  030a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  030a8	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  030ad	0f b6 c0	 movzx	 eax, al
  030b0	85 c0		 test	 eax, eax
  030b2	75 13		 jne	 SHORT $LN2@RecvActive
  030b4	6a 21		 push	 33			; 00000021H
  030b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  030bb	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  030c0	0f b6 c0	 movzx	 eax, al
  030c3	85 c0		 test	 eax, eax
  030c5	74 15		 je	 SHORT $LN7@RecvActive
$LN2@RecvActive:

; 763  : 	{
; 764  : 		if(aRecv->Num == eSkillReset)

  030c7	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  030ca	83 78 04 24	 cmp	 DWORD PTR [eax+4], 36	; 00000024H
  030ce	75 0c		 jne	 SHORT $LN7@RecvActive

; 765  : 		{
; 766  : 			this->EvoRageReset(aIndex);

  030d0	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  030d3	50		 push	 eax
  030d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  030d7	e8 00 00 00 00	 call	 ?EvoRageReset@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::EvoRageReset
$LN7@RecvActive:

; 767  : 		}
; 768  : 	}
; 769  : }

  030dc	5f		 pop	 edi
  030dd	5e		 pop	 esi
  030de	5b		 pop	 ebx
  030df	8b e5		 mov	 esp, ebp
  030e1	5d		 pop	 ebp
  030e2	c2 08 00	 ret	 8
?RecvActiveSkill@cSystemOfRage@@QAEXPAUsRageTabSend@@H@Z ENDP ; cSystemOfRage::RecvActiveSkill
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ConfigSend@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::ConfigSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_rSend$221934 = -60					; size = 48
_i$221930 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?ConfigSend@cSystemOfRage@@QAEXH@Z PROC			; cSystemOfRage::ConfigSend
; _this$ = ecx

; 772  : {

  030f0	55		 push	 ebp
  030f1	8b ec		 mov	 ebp, esp
  030f3	83 ec 7c	 sub	 esp, 124		; 0000007cH
  030f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  030fb	33 c5		 xor	 eax, ebp
  030fd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  03100	53		 push	 ebx
  03101	56		 push	 esi
  03102	57		 push	 edi
  03103	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 773  : 	for(int i=1;i<R_MAX_SKILL;i++)

  03106	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _i$221930[ebp], 1
  0310d	eb 09		 jmp	 SHORT $LN3@ConfigSend
$LN2@ConfigSend:
  0310f	8b 45 f4	 mov	 eax, DWORD PTR _i$221930[ebp]
  03112	83 c0 01	 add	 eax, 1
  03115	89 45 f4	 mov	 DWORD PTR _i$221930[ebp], eax
$LN3@ConfigSend:
  03118	83 7d f4 24	 cmp	 DWORD PTR _i$221930[ebp], 36 ; 00000024H
  0311c	0f 8d 9b 00 00
	00		 jge	 $LN4@ConfigSend

; 774  : 	{
; 775  : 		sConfigStruct rSend;
; 776  : 		rSend.h.set((LPBYTE)&rSend, 0xFB, 0x00, sizeof(rSend));

  03122	6a 30		 push	 48			; 00000030H
  03124	6a 00		 push	 0
  03126	68 fb 00 00 00	 push	 251			; 000000fbH
  0312b	8d 45 c4	 lea	 eax, DWORD PTR _rSend$221934[ebp]
  0312e	50		 push	 eax
  0312f	8d 4d c4	 lea	 ecx, DWORD PTR _rSend$221934[ebp]
  03132	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 777  : 		rSend.SkillID = i;

  03137	8a 45 f4	 mov	 al, BYTE PTR _i$221930[ebp]
  0313a	88 45 c8	 mov	 BYTE PTR _rSend$221934[ebp+4], al

; 778  : 		strcpy(rSend.Name,this->rSkill[i].Name);

  0313d	8b 45 f4	 mov	 eax, DWORD PTR _i$221930[ebp]
  03140	6b c0 44	 imul	 eax, 68			; 00000044H
  03143	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03146	8d 94 01 30 9f
	24 00		 lea	 edx, DWORD PTR [ecx+eax+2400048]
  0314d	52		 push	 edx
  0314e	8d 45 c9	 lea	 eax, DWORD PTR _rSend$221934[ebp+5]
  03151	50		 push	 eax
  03152	e8 00 00 00 00	 call	 _strcpy
  03157	83 c4 08	 add	 esp, 8

; 779  : 		rSend.Damage = this->rSkill[i].StartDamage;

  0315a	8b 45 f4	 mov	 eax, DWORD PTR _i$221930[ebp]
  0315d	6b c0 44	 imul	 eax, 68			; 00000044H
  03160	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03163	8b 94 01 64 9f
	24 00		 mov	 edx, DWORD PTR [ecx+eax+2400100]
  0316a	89 55 e4	 mov	 DWORD PTR _rSend$221934[ebp+32], edx

; 780  : 		rSend.MaxPoint = this->rSkill[i].MaxPoint;

  0316d	8b 45 f4	 mov	 eax, DWORD PTR _i$221930[ebp]
  03170	6b c0 44	 imul	 eax, 68			; 00000044H
  03173	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03176	8b 94 01 68 9f
	24 00		 mov	 edx, DWORD PTR [ecx+eax+2400104]
  0317d	89 55 e8	 mov	 DWORD PTR _rSend$221934[ebp+36], edx

; 781  : 		rSend.PointNext = this->rSkill[i].PointNext;

  03180	8b 45 f4	 mov	 eax, DWORD PTR _i$221930[ebp]
  03183	6b c0 44	 imul	 eax, 68			; 00000044H
  03186	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03189	8b 94 01 70 9f
	24 00		 mov	 edx, DWORD PTR [ecx+eax+2400112]
  03190	89 55 ec	 mov	 DWORD PTR _rSend$221934[ebp+40], edx

; 782  : 		rSend.Percent = this->rSkill[i].Percent;

  03193	8b 45 f4	 mov	 eax, DWORD PTR _i$221930[ebp]
  03196	6b c0 44	 imul	 eax, 68			; 00000044H
  03199	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0319c	8a 94 01 6c 9f
	24 00		 mov	 dl, BYTE PTR [ecx+eax+2400108]
  031a3	88 55 f0	 mov	 BYTE PTR _rSend$221934[ebp+44], dl

; 783  : 		DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  031a6	6a 30		 push	 48			; 00000030H
  031a8	8d 45 c4	 lea	 eax, DWORD PTR _rSend$221934[ebp]
  031ab	50		 push	 eax
  031ac	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  031af	51		 push	 ecx
  031b0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  031b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 784  : 	}

  031b8	e9 52 ff ff ff	 jmp	 $LN2@ConfigSend
$LN4@ConfigSend:

; 785  : }

  031bd	5f		 pop	 edi
  031be	5e		 pop	 esi
  031bf	5b		 pop	 ebx
  031c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  031c3	33 cd		 xor	 ecx, ebp
  031c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  031ca	8b e5		 mov	 esp, ebp
  031cc	5d		 pop	 ebp
  031cd	c2 04 00	 ret	 4
?ConfigSend@cSystemOfRage@@QAEXH@Z ENDP			; cSystemOfRage::ConfigSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendDataServer@cSystemOfRage@@QAEXHPAD@Z	; cSystemOfRage::SendDataServer
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	_strncpy:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pInfo$ = -28						; size = 20
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_NAme$ = 12						; size = 4
?SendDataServer@cSystemOfRage@@QAEXHPAD@Z PROC		; cSystemOfRage::SendDataServer
; _this$ = ecx

; 788  : {

  031d0	55		 push	 ebp
  031d1	8b ec		 mov	 ebp, esp
  031d3	83 ec 5c	 sub	 esp, 92			; 0000005cH
  031d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  031db	33 c5		 xor	 eax, ebp
  031dd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  031e0	53		 push	 ebx
  031e1	56		 push	 esi
  031e2	57		 push	 edi
  031e3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 789  : 	DSQuerySend pInfo;
; 790  : 
; 791  : 	pInfo.h.c =0xC1;

  031e6	c6 45 e4 c1	 mov	 BYTE PTR _pInfo$[ebp], 193 ; 000000c1H

; 792  : 	pInfo.h.size = sizeof(DSQuerySend);

  031ea	c6 45 e5 14	 mov	 BYTE PTR _pInfo$[ebp+1], 20 ; 00000014H

; 793  : 	pInfo.h.headcode =0xE0;

  031ee	c6 45 e6 e0	 mov	 BYTE PTR _pInfo$[ebp+2], 224 ; 000000e0H

; 794  : 	pInfo.aIndex = aIndex;

  031f2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  031f5	89 45 e8	 mov	 DWORD PTR _pInfo$[ebp+4], eax

; 795  : 	//strncpy(pInfo.Accaunt,gObj[aIndex].AccountID,10);
; 796  : 	strncpy(pInfo.Name,NAme,10);

  031f8	6a 0a		 push	 10			; 0000000aH
  031fa	8b 45 0c	 mov	 eax, DWORD PTR _NAme$[ebp]
  031fd	50		 push	 eax
  031fe	8d 4d ec	 lea	 ecx, DWORD PTR _pInfo$[ebp+8]
  03201	51		 push	 ecx
  03202	e8 00 00 00 00	 call	 _strncpy
  03207	83 c4 0c	 add	 esp, 12			; 0000000cH

; 797  : 
; 798  : 	cDBSMng.Send((char*)&pInfo, pInfo.h.size);

  0320a	0f b6 45 e5	 movzx	 eax, BYTE PTR _pInfo$[ebp+1]
  0320e	50		 push	 eax
  0320f	8d 4d e4	 lea	 ecx, DWORD PTR _pInfo$[ebp]
  03212	51		 push	 ecx
  03213	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  03218	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 799  : }

  0321d	5f		 pop	 edi
  0321e	5e		 pop	 esi
  0321f	5b		 pop	 ebx
  03220	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03223	33 cd		 xor	 ecx, ebp
  03225	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0322a	8b e5		 mov	 esp, ebp
  0322c	5d		 pop	 ebp
  0322d	c2 08 00	 ret	 8
?SendDataServer@cSystemOfRage@@QAEXHPAD@Z ENDP		; cSystemOfRage::SendDataServer
_TEXT	ENDS
PUBLIC	?RageConnect@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::RageConnect
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?RageConnect@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::RageConnect
; _this$ = ecx

; 802  : {

  03230	55		 push	 ebp
  03231	8b ec		 mov	 ebp, esp
  03233	83 ec 48	 sub	 esp, 72			; 00000048H
  03236	53		 push	 ebx
  03237	56		 push	 esi
  03238	57		 push	 edi
  03239	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 803  : 	LPOBJ lpObj = &gObj[aIndex];

  0323c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0323f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  03245	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0324b	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 804  : 	this->SendDataServer(aIndex, lpObj->Name);

  0324e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  03251	83 c0 77	 add	 eax, 119		; 00000077H
  03254	50		 push	 eax
  03255	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  03258	51		 push	 ecx
  03259	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0325c	e8 00 00 00 00	 call	 ?SendDataServer@cSystemOfRage@@QAEXHPAD@Z ; cSystemOfRage::SendDataServer

; 805  : }

  03261	5f		 pop	 edi
  03262	5e		 pop	 esi
  03263	5b		 pop	 ebx
  03264	8b e5		 mov	 esp, ebp
  03266	5d		 pop	 ebp
  03267	c2 04 00	 ret	 4
?RageConnect@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::RageConnect
_TEXT	ENDS
PUBLIC	?NewDBLoad@cSystemOfRage@@QAEXHPAE@Z		; cSystemOfRage::NewDBLoad
PUBLIC	?RecvDSProtocol@cSystemOfRage@@QAEXPAUDSRageUser@@@Z ; cSystemOfRage::RecvDSProtocol
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?RecvDSProtocol@cSystemOfRage@@QAEXPAUDSRageUser@@@Z PROC ; cSystemOfRage::RecvDSProtocol
; _this$ = ecx

; 808  : {

  03270	55		 push	 ebp
  03271	8b ec		 mov	 ebp, esp
  03273	83 ec 44	 sub	 esp, 68			; 00000044H
  03276	53		 push	 ebx
  03277	56		 push	 esi
  03278	57		 push	 edi
  03279	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  : 
; 810  : 	if(g_ExLicense.user.Rage)

  0327c	0f b6 05 c9 00
	00 00		 movzx	 eax, BYTE PTR ?g_ExLicense@@3VCExLicense@@A+201
  03283	85 c0		 test	 eax, eax
  03285	74 18		 je	 SHORT $LN2@RecvDSProt

; 811  : 	{
; 812  : 		gSystemOfRage.NewDBLoad(aRecv->aIndex, aRecv->RageSystem);

  03287	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0328a	83 c0 14	 add	 eax, 20			; 00000014H
  0328d	50		 push	 eax
  0328e	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  03291	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  03294	52		 push	 edx
  03295	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  0329a	e8 00 00 00 00	 call	 ?NewDBLoad@cSystemOfRage@@QAEXHPAE@Z ; cSystemOfRage::NewDBLoad
$LN2@RecvDSProt:

; 813  : 	}
; 814  : 	return;
; 815  : }

  0329f	5f		 pop	 edi
  032a0	5e		 pop	 esi
  032a1	5b		 pop	 ebx
  032a2	8b e5		 mov	 esp, ebp
  032a4	5d		 pop	 ebp
  032a5	c2 04 00	 ret	 4
?RecvDSProtocol@cSystemOfRage@@QAEXPAUDSRageUser@@@Z ENDP ; cSystemOfRage::RecvDSProtocol
_TEXT	ENDS
PUBLIC	?NewDBSave@cSystemOfRage@@QAEXHPAE@Z		; cSystemOfRage::NewDBSave
PUBLIC	__$ArrayPad$
PUBLIC	?SendSaveData@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::SendSaveData
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pInfo$ = -180						; size = 166
_lpUser$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?SendSaveData@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::SendSaveData
; _this$ = ecx

; 818  : {

  032b0	55		 push	 ebp
  032b1	8b ec		 mov	 ebp, esp
  032b3	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  032b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  032be	33 c5		 xor	 eax, ebp
  032c0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  032c3	53		 push	 ebx
  032c4	56		 push	 esi
  032c5	57		 push	 edi
  032c6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 819  : 	if(!this->Enable) return;

  032c9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  032cc	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  032cf	85 c9		 test	 ecx, ecx
  032d1	75 05		 jne	 SHORT $LN2@SendSaveDa
  032d3	e9 82 00 00 00	 jmp	 $LN3@SendSaveDa
$LN2@SendSaveDa:

; 820  : 
; 821  : 	if(!this->rUser[aIndex].LoadInfo)

  032d8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  032db	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  032e1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  032e4	83 7c 01 30 00	 cmp	 DWORD PTR [ecx+eax+48], 0
  032e9	75 02		 jne	 SHORT $LN1@SendSaveDa

; 822  : 	{
; 823  : 		return;

  032eb	eb 6d		 jmp	 SHORT $LN3@SendSaveDa
$LN1@SendSaveDa:

; 824  : 	}
; 825  : 
; 826  : 	LPOBJ lpUser = &gObj[aIndex];

  032ed	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  032f0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  032f6	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  032fc	89 45 f4	 mov	 DWORD PTR _lpUser$[ebp], eax

; 827  : 
; 828  : 	DBRageUserSave pInfo;
; 829  : 	pInfo.h.c =0xC1;

  032ff	c6 85 4c ff ff
	ff c1		 mov	 BYTE PTR _pInfo$[ebp], 193 ; 000000c1H

; 830  : 	pInfo.h.size = sizeof(DBRageUserSave);

  03306	c6 85 4d ff ff
	ff a6		 mov	 BYTE PTR _pInfo$[ebp+1], 166 ; 000000a6H

; 831  : 	pInfo.h.headcode =0xE1;

  0330d	c6 85 4e ff ff
	ff e1		 mov	 BYTE PTR _pInfo$[ebp+2], 225 ; 000000e1H

; 832  : 	strncpy(pInfo.Name,lpUser->Name,10);

  03314	6a 0a		 push	 10			; 0000000aH
  03316	8b 45 f4	 mov	 eax, DWORD PTR _lpUser$[ebp]
  03319	83 c0 77	 add	 eax, 119		; 00000077H
  0331c	50		 push	 eax
  0331d	8d 8d 4f ff ff
	ff		 lea	 ecx, DWORD PTR _pInfo$[ebp+3]
  03323	51		 push	 ecx
  03324	e8 00 00 00 00	 call	 _strncpy
  03329	83 c4 0c	 add	 esp, 12			; 0000000cH

; 833  : 	gSystemOfRage.NewDBSave(aIndex, pInfo.RageSystem);

  0332c	8d 85 5a ff ff
	ff		 lea	 eax, DWORD PTR _pInfo$[ebp+14]
  03332	50		 push	 eax
  03333	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  03336	51		 push	 ecx
  03337	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  0333c	e8 00 00 00 00	 call	 ?NewDBSave@cSystemOfRage@@QAEXHPAE@Z ; cSystemOfRage::NewDBSave

; 834  : 	cDBSMng.Send((char*)&pInfo, pInfo.h.size);

  03341	0f b6 85 4d ff
	ff ff		 movzx	 eax, BYTE PTR _pInfo$[ebp+1]
  03348	50		 push	 eax
  03349	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _pInfo$[ebp]
  0334f	51		 push	 ecx
  03350	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  03355	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@SendSaveDa:

; 835  : }

  0335a	5f		 pop	 edi
  0335b	5e		 pop	 esi
  0335c	5b		 pop	 ebx
  0335d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03360	33 cd		 xor	 ecx, ebp
  03362	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03367	8b e5		 mov	 esp, ebp
  03369	5d		 pop	 ebp
  0336a	c2 04 00	 ret	 4
?SendSaveData@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::SendSaveData
_TEXT	ENDS
PUBLIC	?JewelsDropRate@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z ; cSystemOfRage::JewelsDropRate
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterTopHitDamageUser
EXTRN	_rand:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_num$221974 = -16					; size = 4
_Type$221973 = -12					; size = 4
_iTopHitUser$221972 = -8				; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpMobObj$ = 12						; size = 4
?JewelsDropRate@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; cSystemOfRage::JewelsDropRate
; _this$ = ecx

; 838  : {

  03370	55		 push	 ebp
  03371	8b ec		 mov	 ebp, esp
  03373	83 ec 50	 sub	 esp, 80			; 00000050H
  03376	53		 push	 ebx
  03377	56		 push	 esi
  03378	57		 push	 edi
  03379	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 839  : 	if(!this->Enable) return;

  0337c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0337f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  03382	85 c9		 test	 ecx, ecx
  03384	75 05		 jne	 SHORT $LN10@JewelsDrop
  03386	e9 d4 00 00 00	 jmp	 $LN11@JewelsDrop
$LN10@JewelsDrop:

; 840  : 	if ( (rand()%10000) < this->ReturnCalc(lpObj->m_Index, eSkill2,0) )

  0338b	e8 00 00 00 00	 call	 _rand
  03390	99		 cdq
  03391	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  03396	f7 f9		 idiv	 ecx
  03398	8b f2		 mov	 esi, edx
  0339a	6a 00		 push	 0
  0339c	6a 02		 push	 2
  0339e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  033a1	8b 02		 mov	 eax, DWORD PTR [edx]
  033a3	50		 push	 eax
  033a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  033a7	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  033ac	3b f0		 cmp	 esi, eax
  033ae	0f 8d ab 00 00
	00		 jge	 $LN11@JewelsDrop

; 841  : 	{
; 842  : 		int iTopHitUser = gObjMonsterTopHitDamageUser(lpMobObj);

  033b4	8b 45 0c	 mov	 eax, DWORD PTR _lpMobObj$[ebp]
  033b7	50		 push	 eax
  033b8	e8 00 00 00 00	 call	 ?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterTopHitDamageUser
  033bd	83 c4 04	 add	 esp, 4
  033c0	89 45 f8	 mov	 DWORD PTR _iTopHitUser$221972[ebp], eax

; 843  : 
; 844  : 		int Type;
; 845  : 		int num = rand()%4;

  033c3	e8 00 00 00 00	 call	 _rand
  033c8	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  033cd	79 05		 jns	 SHORT $LN13@JewelsDrop
  033cf	48		 dec	 eax
  033d0	83 c8 fc	 or	 eax, -4			; fffffffcH
  033d3	40		 inc	 eax
$LN13@JewelsDrop:
  033d4	89 45 f0	 mov	 DWORD PTR _num$221974[ebp], eax

; 846  : 		if(num == 0)

  033d7	83 7d f0 00	 cmp	 DWORD PTR _num$221974[ebp], 0
  033db	75 09		 jne	 SHORT $LN8@JewelsDrop

; 847  : 		Type = ITEMGET(12,15);

  033dd	c7 45 f4 0f 18
	00 00		 mov	 DWORD PTR _Type$221973[ebp], 6159 ; 0000180fH
  033e4	eb 34		 jmp	 SHORT $LN7@JewelsDrop
$LN8@JewelsDrop:

; 848  : 		else if(num == 1)

  033e6	83 7d f0 01	 cmp	 DWORD PTR _num$221974[ebp], 1
  033ea	75 09		 jne	 SHORT $LN6@JewelsDrop

; 849  : 		Type = ITEMGET(14,13);

  033ec	c7 45 f4 0d 1c
	00 00		 mov	 DWORD PTR _Type$221973[ebp], 7181 ; 00001c0dH
  033f3	eb 25		 jmp	 SHORT $LN7@JewelsDrop
$LN6@JewelsDrop:

; 850  : 		else if(num == 2)

  033f5	83 7d f0 02	 cmp	 DWORD PTR _num$221974[ebp], 2
  033f9	75 09		 jne	 SHORT $LN4@JewelsDrop

; 851  : 		Type =  ITEMGET(14,14);

  033fb	c7 45 f4 0e 1c
	00 00		 mov	 DWORD PTR _Type$221973[ebp], 7182 ; 00001c0eH
  03402	eb 16		 jmp	 SHORT $LN7@JewelsDrop
$LN4@JewelsDrop:

; 852  : 		else if(num == 3)

  03404	83 7d f0 03	 cmp	 DWORD PTR _num$221974[ebp], 3
  03408	75 09		 jne	 SHORT $LN2@JewelsDrop

; 853  : 		Type = ITEMGET(14,16);

  0340a	c7 45 f4 10 1c
	00 00		 mov	 DWORD PTR _Type$221973[ebp], 7184 ; 00001c10H

; 854  : 		else

  03411	eb 07		 jmp	 SHORT $LN7@JewelsDrop
$LN2@JewelsDrop:

; 855  : 		Type = ITEMGET(14,22);

  03413	c7 45 f4 16 1c
	00 00		 mov	 DWORD PTR _Type$221973[ebp], 7190 ; 00001c16H
$LN7@JewelsDrop:

; 856  : 
; 857  : 		ItemSerialCreateSend(lpMobObj->m_Index,lpMobObj->MapNumber,lpMobObj->X,lpMobObj->Y,Type,0,0,0,0,0,iTopHitUser,0,0);

  0341a	6a 00		 push	 0
  0341c	6a 00		 push	 0
  0341e	8b 45 f8	 mov	 eax, DWORD PTR _iTopHitUser$221972[ebp]
  03421	50		 push	 eax
  03422	6a 00		 push	 0
  03424	6a 00		 push	 0
  03426	6a 00		 push	 0
  03428	6a 00		 push	 0
  0342a	6a 00		 push	 0
  0342c	8b 4d f4	 mov	 ecx, DWORD PTR _Type$221973[ebp]
  0342f	51		 push	 ecx
  03430	8b 55 0c	 mov	 edx, DWORD PTR _lpMobObj$[ebp]
  03433	0f b6 82 46 01
	00 00		 movzx	 eax, BYTE PTR [edx+326]
  0343a	50		 push	 eax
  0343b	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMobObj$[ebp]
  0343e	0f b6 91 44 01
	00 00		 movzx	 edx, BYTE PTR [ecx+324]
  03445	52		 push	 edx
  03446	8b 45 0c	 mov	 eax, DWORD PTR _lpMobObj$[ebp]
  03449	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  03450	51		 push	 ecx
  03451	8b 55 0c	 mov	 edx, DWORD PTR _lpMobObj$[ebp]
  03454	8b 02		 mov	 eax, DWORD PTR [edx]
  03456	50		 push	 eax
  03457	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  0345c	83 c4 34	 add	 esp, 52			; 00000034H
$LN11@JewelsDrop:

; 858  : 	}
; 859  : }

  0345f	5f		 pop	 edi
  03460	5e		 pop	 esi
  03461	5b		 pop	 ebx
  03462	8b e5		 mov	 esp, ebp
  03464	5d		 pop	 ebp
  03465	c2 08 00	 ret	 8
?JewelsDropRate@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; cSystemOfRage::JewelsDropRate
_TEXT	ENDS
PUBLIC	?GetActive@cSystemOfRage@@QAE_NXZ		; cSystemOfRage::GetActive
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetActive@cSystemOfRage@@QAE_NXZ PROC			; cSystemOfRage::GetActive
; _this$ = ecx

; 862  : {

  03470	55		 push	 ebp
  03471	8b ec		 mov	 ebp, esp
  03473	83 ec 44	 sub	 esp, 68			; 00000044H
  03476	53		 push	 ebx
  03477	56		 push	 esi
  03478	57		 push	 edi
  03479	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 863  : 	return this->Enable;

  0347c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0347f	8a 00		 mov	 al, BYTE PTR [eax]

; 864  : }

  03481	5f		 pop	 edi
  03482	5e		 pop	 esi
  03483	5b		 pop	 ebx
  03484	8b e5		 mov	 esp, ebp
  03486	5d		 pop	 ebp
  03487	c3		 ret	 0
?GetActive@cSystemOfRage@@QAE_NXZ ENDP			; cSystemOfRage::GetActive
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?RageClientSend@cSystemOfRage@@QAEXXZ		; cSystemOfRage::RageClientSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_rSend$221998 = -36					; size = 20
_lpObj$221994 = -16					; size = 4
_aIndex$221990 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?RageClientSend@cSystemOfRage@@QAEXXZ PROC		; cSystemOfRage::RageClientSend
; _this$ = ecx

; 867  : {

  03490	55		 push	 ebp
  03491	8b ec		 mov	 ebp, esp
  03493	83 ec 64	 sub	 esp, 100		; 00000064H
  03496	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0349b	33 c5		 xor	 eax, ebp
  0349d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  034a0	53		 push	 ebx
  034a1	56		 push	 esi
  034a2	57		 push	 edi
  034a3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 868  : 	if(!this->Enable) return;

  034a6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  034a9	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  034ac	85 c9		 test	 ecx, ecx
  034ae	75 05		 jne	 SHORT $LN7@RageClient
  034b0	e9 d5 00 00 00	 jmp	 $LN8@RageClient
$LN7@RageClient:

; 869  : 	for (int  aIndex=OBJ_STARTUSERINDEX;aIndex<OBJMAX;aIndex++)

  034b5	c7 45 f4 b0 36
	00 00		 mov	 DWORD PTR _aIndex$221990[ebp], 14000 ; 000036b0H
  034bc	eb 09		 jmp	 SHORT $LN6@RageClient
$LN5@RageClient:
  034be	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$221990[ebp]
  034c1	83 c0 01	 add	 eax, 1
  034c4	89 45 f4	 mov	 DWORD PTR _aIndex$221990[ebp], eax
$LN6@RageClient:
  034c7	81 7d f4 98 3a
	00 00		 cmp	 DWORD PTR _aIndex$221990[ebp], 15000 ; 00003a98H
  034ce	0f 8d b6 00 00
	00		 jge	 $LN8@RageClient

; 870  : 	{
; 871  : 		LPOBJ lpObj = &gObj[aIndex];

  034d4	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$221990[ebp]
  034d7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  034dd	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  034e3	89 45 f0	 mov	 DWORD PTR _lpObj$221994[ebp], eax

; 872  : 		if(lpObj->Connected < PLAYER_PLAYING ) continue;

  034e6	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$221994[ebp]
  034e9	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  034ed	7d 02		 jge	 SHORT $LN3@RageClient
  034ef	eb cd		 jmp	 SHORT $LN5@RageClient
$LN3@RageClient:

; 873  : 
; 874  : 		if(lpObj->OffExp != 0 || lpObj->OffTrade != 0) continue;

  034f1	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$221994[ebp]
  034f4	83 b8 98 22 00
	00 00		 cmp	 DWORD PTR [eax+8856], 0
  034fb	75 0c		 jne	 SHORT $LN1@RageClient
  034fd	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$221994[ebp]
  03500	83 b8 ac 22 00
	00 00		 cmp	 DWORD PTR [eax+8876], 0
  03507	74 02		 je	 SHORT $LN2@RageClient
$LN1@RageClient:
  03509	eb b3		 jmp	 SHORT $LN5@RageClient
$LN2@RageClient:

; 875  : 
; 876  : 		RageExpSend rSend;
; 877  : 		rSend.h.set((LPBYTE)&rSend, 0xFB, 3, sizeof(rSend));

  0350b	6a 14		 push	 20			; 00000014H
  0350d	6a 03		 push	 3
  0350f	68 fb 00 00 00	 push	 251			; 000000fbH
  03514	8d 45 dc	 lea	 eax, DWORD PTR _rSend$221998[ebp]
  03517	50		 push	 eax
  03518	8d 4d dc	 lea	 ecx, DWORD PTR _rSend$221998[ebp]
  0351b	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 878  : 		rSend.Level = this->rUser[aIndex].rLevel;

  03520	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$221990[ebp]
  03523	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03529	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0352c	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  03530	89 55 e0	 mov	 DWORD PTR _rSend$221998[ebp+4], edx

; 879  : 		rSend.Point = this->rUser[aIndex].rPoints;

  03533	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$221990[ebp]
  03536	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0353c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0353f	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  03543	89 55 e4	 mov	 DWORD PTR _rSend$221998[ebp+8], edx

; 880  : 		rSend.Exp = this->rUser[aIndex].rExperience;

  03546	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$221990[ebp]
  03549	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0354f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03552	8b 54 01 3c	 mov	 edx, DWORD PTR [ecx+eax+60]
  03556	89 55 e8	 mov	 DWORD PTR _rSend$221998[ebp+12], edx

; 881  : 		rSend.NextExp = (this->NextExp * this->rUser[aIndex].rLevel);

  03559	8b 45 f4	 mov	 eax, DWORD PTR _aIndex$221990[ebp]
  0355c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03562	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03565	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  03568	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0356b	0f af 4c 02 34	 imul	 ecx, DWORD PTR [edx+eax+52]
  03570	89 4d ec	 mov	 DWORD PTR _rSend$221998[ebp+16], ecx

; 882  : 	
; 883  : 		DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  03573	6a 14		 push	 20			; 00000014H
  03575	8d 45 dc	 lea	 eax, DWORD PTR _rSend$221998[ebp]
  03578	50		 push	 eax
  03579	8b 4d f4	 mov	 ecx, DWORD PTR _aIndex$221990[ebp]
  0357c	51		 push	 ecx
  0357d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  03582	83 c4 0c	 add	 esp, 12			; 0000000cH

; 884  : 	}

  03585	e9 34 ff ff ff	 jmp	 $LN5@RageClient
$LN8@RageClient:

; 885  : }

  0358a	5f		 pop	 edi
  0358b	5e		 pop	 esi
  0358c	5b		 pop	 ebx
  0358d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03590	33 cd		 xor	 ecx, ebp
  03592	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03597	8b e5		 mov	 esp, ebp
  03599	5d		 pop	 ebp
  0359a	c3		 ret	 0
?RageClientSend@cSystemOfRage@@QAEXXZ ENDP		; cSystemOfRage::RageClientSend
; Function compile flags: /Odtp /ZI
_irSave$ = -12						; size = 4
_DataSize$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_buf$ = 12						; size = 4
?NewDBSave@cSystemOfRage@@QAEXHPAE@Z PROC		; cSystemOfRage::NewDBSave
; _this$ = ecx

; 888  : {

  035a0	55		 push	 ebp
  035a1	8b ec		 mov	 ebp, esp
  035a3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  035a6	53		 push	 ebx
  035a7	56		 push	 esi
  035a8	57		 push	 edi
  035a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 889  : 	if(!this->Enable) return;

  035ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  035af	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  035b2	85 c9		 test	 ecx, ecx
  035b4	75 05		 jne	 SHORT $LN1@NewDBSave
  035b6	e9 86 06 00 00	 jmp	 $LN2@NewDBSave
$LN1@NewDBSave:

; 890  : 
; 891  : 	int DataSize = 0;

  035bb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _DataSize$[ebp], 0

; 892  : 	int irSave = 0;

  035c2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _irSave$[ebp], 0

; 893  : 
; 894  : 	irSave = this->rUser[aIndex].rLevel;

  035c9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  035cc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  035d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  035d5	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  035d9	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 895  : 	DataSize = int_binary( irSave, DataSize, buf );

  035dc	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  035df	50		 push	 eax
  035e0	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  035e3	51		 push	 ecx
  035e4	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  035e7	52		 push	 edx
  035e8	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  035ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  035f0	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 896  : 	irSave = this->rUser[aIndex].rPoints;

  035f3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  035f6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  035fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  035ff	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  03603	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 897  : 	DataSize = int_binary( irSave, DataSize, buf );

  03606	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03609	50		 push	 eax
  0360a	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0360d	51		 push	 ecx
  0360e	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03611	52		 push	 edx
  03612	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03617	83 c4 0c	 add	 esp, 12			; 0000000cH
  0361a	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 898  : 	irSave = this->rUser[aIndex].rExperience;

  0361d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03620	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03626	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03629	8b 54 01 3c	 mov	 edx, DWORD PTR [ecx+eax+60]
  0362d	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 899  : 	DataSize = int_binary( irSave, DataSize, buf );

  03630	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03633	50		 push	 eax
  03634	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03637	51		 push	 ecx
  03638	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  0363b	52		 push	 edx
  0363c	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03641	83 c4 0c	 add	 esp, 12			; 0000000cH
  03644	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 900  : 	irSave = this->rUser[aIndex].Damage;

  03647	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0364a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03650	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03653	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  03657	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 901  : 	DataSize = int_binary( irSave, DataSize, buf );

  0365a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0365d	50		 push	 eax
  0365e	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03661	51		 push	 ecx
  03662	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03665	52		 push	 edx
  03666	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  0366b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0366e	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 902  : 	irSave = this->rUser[aIndex].FreePoints;

  03671	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03674	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0367a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0367d	8b 54 01 48	 mov	 edx, DWORD PTR [ecx+eax+72]
  03681	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 903  : 	DataSize = int_binary( irSave, DataSize, buf );

  03684	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03687	50		 push	 eax
  03688	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0368b	51		 push	 ecx
  0368c	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  0368f	52		 push	 edx
  03690	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03695	83 c4 0c	 add	 esp, 12			; 0000000cH
  03698	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 904  : 	irSave = this->rUser[aIndex].SummonPet;

  0369b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0369e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  036a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  036a7	8b 54 01 4c	 mov	 edx, DWORD PTR [ecx+eax+76]
  036ab	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 905  : 	DataSize = int_binary( irSave, DataSize, buf );

  036ae	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  036b1	50		 push	 eax
  036b2	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  036b5	51		 push	 ecx
  036b6	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  036b9	52		 push	 edx
  036ba	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  036bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  036c2	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 906  : 	irSave = this->rUser[aIndex].WingsDamagePlus;

  036c5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  036c8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  036ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  036d1	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  036d5	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 907  : 	DataSize = int_binary( irSave, DataSize, buf );

  036d8	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  036db	50		 push	 eax
  036dc	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  036df	51		 push	 ecx
  036e0	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  036e3	52		 push	 edx
  036e4	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  036e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  036ec	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 908  : 	irSave = this->rUser[aIndex].FinalMana;

  036ef	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  036f2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  036f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  036fb	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  036ff	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 909  : 	DataSize = int_binary( irSave, DataSize, buf );

  03702	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03705	50		 push	 eax
  03706	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03709	51		 push	 ecx
  0370a	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  0370d	52		 push	 edx
  0370e	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03713	83 c4 0c	 add	 esp, 12			; 0000000cH
  03716	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 910  : 	irSave = this->rUser[aIndex].IgnoreDefence;

  03719	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0371c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03722	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03725	8b 54 01 58	 mov	 edx, DWORD PTR [ecx+eax+88]
  03729	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 911  : 	DataSize = int_binary( irSave, DataSize, buf );

  0372c	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0372f	50		 push	 eax
  03730	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03733	51		 push	 ecx
  03734	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03737	52		 push	 edx
  03738	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  0373d	83 c4 0c	 add	 esp, 12			; 0000000cH
  03740	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 912  : 	irSave = this->rUser[aIndex].ResetLevel;

  03743	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03746	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0374c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0374f	8b 54 01 5c	 mov	 edx, DWORD PTR [ecx+eax+92]
  03753	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 913  : 	DataSize = int_binary( irSave, DataSize, buf );

  03756	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03759	50		 push	 eax
  0375a	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0375d	51		 push	 ecx
  0375e	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03761	52		 push	 edx
  03762	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03767	83 c4 0c	 add	 esp, 12			; 0000000cH
  0376a	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 914  : 	irSave = this->rUser[aIndex].Teleport;

  0376d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03770	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03776	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03779	8b 54 01 60	 mov	 edx, DWORD PTR [ecx+eax+96]
  0377d	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 915  : 	DataSize = int_binary( irSave, DataSize, buf );

  03780	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03783	50		 push	 eax
  03784	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03787	51		 push	 ecx
  03788	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  0378b	52		 push	 edx
  0378c	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03791	83 c4 0c	 add	 esp, 12			; 0000000cH
  03794	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 916  : 	irSave = this->rUser[aIndex].CriticalDamageRate;

  03797	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0379a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  037a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  037a3	8b 54 01 64	 mov	 edx, DWORD PTR [ecx+eax+100]
  037a7	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 917  : 	DataSize = int_binary( irSave, DataSize, buf );

  037aa	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  037ad	50		 push	 eax
  037ae	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  037b1	51		 push	 ecx
  037b2	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  037b5	52		 push	 edx
  037b6	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  037bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  037be	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 918  : 	irSave = this->rUser[aIndex].AbsordDamage;

  037c1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  037c4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  037ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  037cd	8b 54 01 68	 mov	 edx, DWORD PTR [ecx+eax+104]
  037d1	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 919  : 	DataSize = int_binary( irSave, DataSize, buf );

  037d4	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  037d7	50		 push	 eax
  037d8	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  037db	51		 push	 ecx
  037dc	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  037df	52		 push	 edx
  037e0	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  037e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  037e8	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 920  : 	irSave = this->rUser[aIndex].PetDamageBonus;

  037eb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  037ee	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  037f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  037f7	8b 54 01 6c	 mov	 edx, DWORD PTR [ecx+eax+108]
  037fb	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 921  : 	DataSize = int_binary( irSave, DataSize, buf );

  037fe	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03801	50		 push	 eax
  03802	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03805	51		 push	 ecx
  03806	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03809	52		 push	 edx
  0380a	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  0380f	83 c4 0c	 add	 esp, 12			; 0000000cH
  03812	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 922  : 	irSave = this->rUser[aIndex].FinalLife;

  03815	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03818	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0381e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03821	8b 54 01 70	 mov	 edx, DWORD PTR [ecx+eax+112]
  03825	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 923  : 	DataSize = int_binary( irSave, DataSize, buf );

  03828	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0382b	50		 push	 eax
  0382c	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0382f	51		 push	 ecx
  03830	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03833	52		 push	 edx
  03834	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03839	83 c4 0c	 add	 esp, 12			; 0000000cH
  0383c	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 924  : 	irSave = this->rUser[aIndex].Strength;

  0383f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03842	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03848	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0384b	8b 54 01 74	 mov	 edx, DWORD PTR [ecx+eax+116]
  0384f	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 925  : 	DataSize = int_binary( irSave, DataSize, buf );

  03852	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03855	50		 push	 eax
  03856	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03859	51		 push	 ecx
  0385a	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  0385d	52		 push	 edx
  0385e	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03863	83 c4 0c	 add	 esp, 12			; 0000000cH
  03866	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 926  : 	irSave = this->rUser[aIndex].DefenceRate;

  03869	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0386c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03872	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03875	8b 54 01 78	 mov	 edx, DWORD PTR [ecx+eax+120]
  03879	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 927  : 	DataSize = int_binary( irSave, DataSize, buf );

  0387c	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0387f	50		 push	 eax
  03880	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03883	51		 push	 ecx
  03884	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03887	52		 push	 edx
  03888	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  0388d	83 c4 0c	 add	 esp, 12			; 0000000cH
  03890	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 928  : 	irSave = this->rUser[aIndex].FireDamage;

  03893	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03896	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0389c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0389f	8b 54 01 7c	 mov	 edx, DWORD PTR [ecx+eax+124]
  038a3	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 929  : 	DataSize = int_binary( irSave, DataSize, buf );

  038a6	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  038a9	50		 push	 eax
  038aa	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  038ad	51		 push	 ecx
  038ae	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  038b1	52		 push	 edx
  038b2	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  038b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  038ba	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 930  : 	irSave = this->rUser[aIndex].Energy;

  038bd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  038c0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  038c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  038c9	8b 94 01 80 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+128]
  038d0	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 931  : 	DataSize = int_binary( irSave, DataSize, buf );

  038d3	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  038d6	50		 push	 eax
  038d7	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  038da	51		 push	 ecx
  038db	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  038de	52		 push	 edx
  038df	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  038e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  038e7	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 932  : 	irSave = this->rUser[aIndex].Agility;

  038ea	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  038ed	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  038f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  038f6	8b 94 01 84 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+132]
  038fd	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 933  : 	DataSize = int_binary( irSave, DataSize, buf );

  03900	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03903	50		 push	 eax
  03904	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03907	51		 push	 ecx
  03908	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  0390b	52		 push	 edx
  0390c	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03911	83 c4 0c	 add	 esp, 12			; 0000000cH
  03914	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 934  : 	irSave = this->rUser[aIndex].DoubleDamage;

  03917	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0391a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03920	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03923	8b 94 01 88 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+136]
  0392a	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 935  : 	DataSize = int_binary( irSave, DataSize, buf );

  0392d	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03930	50		 push	 eax
  03931	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03934	51		 push	 ecx
  03935	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03938	52		 push	 edx
  03939	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  0393e	83 c4 0c	 add	 esp, 12			; 0000000cH
  03941	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 936  : 	irSave = this->rUser[aIndex].FinalSD;

  03944	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03947	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0394d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03950	8b 94 01 8c 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+140]
  03957	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 937  : 	DataSize = int_binary( irSave, DataSize, buf );

  0395a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0395d	50		 push	 eax
  0395e	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03961	51		 push	 ecx
  03962	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03965	52		 push	 edx
  03966	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  0396b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0396e	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 938  : 	irSave = this->rUser[aIndex].FinalDefence;

  03971	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03974	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0397a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0397d	8b 94 01 90 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+144]
  03984	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 939  : 	DataSize = int_binary( irSave, DataSize, buf );

  03987	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0398a	50		 push	 eax
  0398b	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0398e	51		 push	 ecx
  0398f	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03992	52		 push	 edx
  03993	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03998	83 c4 0c	 add	 esp, 12			; 0000000cH
  0399b	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 940  : 	irSave = this->rUser[aIndex].ZenDrop;

  0399e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  039a1	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  039a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  039aa	8b 94 01 94 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+148]
  039b1	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 941  : 	DataSize = int_binary( irSave, DataSize, buf );

  039b4	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  039b7	50		 push	 eax
  039b8	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  039bb	51		 push	 ecx
  039bc	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  039bf	52		 push	 edx
  039c0	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  039c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  039c8	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 942  : 	irSave = this->rUser[aIndex].GuildBonus;

  039cb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  039ce	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  039d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  039d7	8b 94 01 98 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+152]
  039de	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 943  : 	DataSize = int_binary( irSave, DataSize, buf );

  039e1	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  039e4	50		 push	 eax
  039e5	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  039e8	51		 push	 ecx
  039e9	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  039ec	52		 push	 edx
  039ed	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  039f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  039f5	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 944  : 	irSave = this->rUser[aIndex].ReflectDamage;

  039f8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  039fb	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03a01	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a04	8b 94 01 9c 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+156]
  03a0b	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 945  : 	DataSize = int_binary( irSave, DataSize, buf );

  03a0e	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03a11	50		 push	 eax
  03a12	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03a15	51		 push	 ecx
  03a16	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03a19	52		 push	 edx
  03a1a	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03a1f	83 c4 0c	 add	 esp, 12			; 0000000cH
  03a22	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 946  : 	irSave = this->rUser[aIndex].ExellentDamageRate;

  03a25	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03a28	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03a2e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a31	8b 94 01 a0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+160]
  03a38	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 947  : 	DataSize = int_binary( irSave, DataSize, buf );

  03a3b	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03a3e	50		 push	 eax
  03a3f	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03a42	51		 push	 ecx
  03a43	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03a46	52		 push	 edx
  03a47	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03a4c	83 c4 0c	 add	 esp, 12			; 0000000cH
  03a4f	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 948  : 	irSave = this->rUser[aIndex].PvPBonusPlus;

  03a52	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03a55	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03a5b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a5e	8b 94 01 a4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+164]
  03a65	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 949  : 	DataSize = int_binary( irSave, DataSize, buf );

  03a68	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03a6b	50		 push	 eax
  03a6c	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03a6f	51		 push	 ecx
  03a70	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03a73	52		 push	 edx
  03a74	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03a79	83 c4 0c	 add	 esp, 12			; 0000000cH
  03a7c	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 950  : 	irSave = this->rUser[aIndex].MinDefence;

  03a7f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03a82	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03a88	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a8b	8b 94 01 a8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+168]
  03a92	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 951  : 	DataSize = int_binary( irSave, DataSize, buf );

  03a95	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03a98	50		 push	 eax
  03a99	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03a9c	51		 push	 ecx
  03a9d	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03aa0	52		 push	 edx
  03aa1	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03aa6	83 c4 0c	 add	 esp, 12			; 0000000cH
  03aa9	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 952  : 	irSave = this->rUser[aIndex].Experience;

  03aac	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03aaf	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03ab5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03ab8	8b 94 01 ac 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+172]
  03abf	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 953  : 	DataSize = int_binary( irSave, DataSize, buf );

  03ac2	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03ac5	50		 push	 eax
  03ac6	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03ac9	51		 push	 ecx
  03aca	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03acd	52		 push	 edx
  03ace	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03ad3	83 c4 0c	 add	 esp, 12			; 0000000cH
  03ad6	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 954  : 	irSave = this->rUser[aIndex].StartSD;

  03ad9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03adc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03ae2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03ae5	8b 94 01 b0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+176]
  03aec	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 955  : 	DataSize = int_binary( irSave, DataSize, buf );

  03aef	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03af2	50		 push	 eax
  03af3	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03af6	51		 push	 ecx
  03af7	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03afa	52		 push	 edx
  03afb	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03b00	83 c4 0c	 add	 esp, 12			; 0000000cH
  03b03	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 956  : 	irSave = this->rUser[aIndex].PartyBonus;

  03b06	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03b09	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03b0f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03b12	8b 94 01 b4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+180]
  03b19	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 957  : 	DataSize = int_binary( irSave, DataSize, buf );

  03b1c	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03b1f	50		 push	 eax
  03b20	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03b23	51		 push	 ecx
  03b24	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03b27	52		 push	 edx
  03b28	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03b2d	83 c4 0c	 add	 esp, 12			; 0000000cH
  03b30	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 958  : 	irSave = this->rUser[aIndex].IceDamage;

  03b33	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03b36	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03b3c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03b3f	8b 94 01 b8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+184]
  03b46	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 959  : 	DataSize = int_binary( irSave, DataSize, buf );

  03b49	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03b4c	50		 push	 eax
  03b4d	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03b50	51		 push	 ecx
  03b51	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03b54	52		 push	 edx
  03b55	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03b5a	83 c4 0c	 add	 esp, 12			; 0000000cH
  03b5d	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 960  : 	irSave = this->rUser[aIndex].DistanceAttack;

  03b60	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03b63	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03b69	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03b6c	8b 94 01 bc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+188]
  03b73	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 961  : 	DataSize = int_binary( irSave, DataSize, buf );

  03b76	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03b79	50		 push	 eax
  03b7a	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03b7d	51		 push	 ecx
  03b7e	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03b81	52		 push	 edx
  03b82	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03b87	83 c4 0c	 add	 esp, 12			; 0000000cH
  03b8a	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 962  : 	irSave = this->rUser[aIndex].AttackRate;

  03b8d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03b90	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03b96	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03b99	8b 94 01 c0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+192]
  03ba0	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 963  : 	DataSize = int_binary( irSave, DataSize, buf );

  03ba3	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03ba6	50		 push	 eax
  03ba7	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03baa	51		 push	 ecx
  03bab	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03bae	52		 push	 edx
  03baf	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03bb4	83 c4 0c	 add	 esp, 12			; 0000000cH
  03bb7	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 964  : 	irSave = this->rUser[aIndex].WeaponBonus;

  03bba	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03bbd	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03bc3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03bc6	8b 94 01 c4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+196]
  03bcd	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 965  : 	DataSize = int_binary( irSave, DataSize, buf );

  03bd0	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03bd3	50		 push	 eax
  03bd4	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03bd7	51		 push	 ecx
  03bd8	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03bdb	52		 push	 edx
  03bdc	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03be1	83 c4 0c	 add	 esp, 12			; 0000000cH
  03be4	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 966  : 	irSave = this->rUser[aIndex].ExellentDamage;

  03be7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03bea	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03bf0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03bf3	8b 94 01 c8 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+200]
  03bfa	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 967  : 	DataSize = int_binary( irSave, DataSize, buf );

  03bfd	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03c00	50		 push	 eax
  03c01	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03c04	51		 push	 ecx
  03c05	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03c08	52		 push	 edx
  03c09	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03c0e	83 c4 0c	 add	 esp, 12			; 0000000cH
  03c11	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 968  : 	irSave = this->rUser[aIndex].CriticalDamage;

  03c14	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03c17	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03c1d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c20	8b 94 01 cc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+204]
  03c27	89 55 f4	 mov	 DWORD PTR _irSave$[ebp], edx

; 969  : 	DataSize = int_binary( irSave, DataSize, buf );

  03c2a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03c2d	50		 push	 eax
  03c2e	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03c31	51		 push	 ecx
  03c32	8b 55 f4	 mov	 edx, DWORD PTR _irSave$[ebp]
  03c35	52		 push	 edx
  03c36	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  03c3b	83 c4 0c	 add	 esp, 12			; 0000000cH
  03c3e	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax
$LN2@NewDBSave:

; 970  : 
; 971  : 	//LogAddC(2, "DataSize: %d", DataSize);
; 972  : }

  03c41	5f		 pop	 edi
  03c42	5e		 pop	 esi
  03c43	5b		 pop	 ebx
  03c44	8b e5		 mov	 esp, ebp
  03c46	5d		 pop	 ebp
  03c47	c2 08 00	 ret	 8
?NewDBSave@cSystemOfRage@@QAEXHPAE@Z ENDP		; cSystemOfRage::NewDBSave
; Function compile flags: /Odtp /ZI
_irLoad$ = -12						; size = 4
_DataSize$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_buf$ = 12						; size = 4
?NewDBLoad@cSystemOfRage@@QAEXHPAE@Z PROC		; cSystemOfRage::NewDBLoad
; _this$ = ecx

; 975  : {

  03c50	55		 push	 ebp
  03c51	8b ec		 mov	 ebp, esp
  03c53	83 ec 4c	 sub	 esp, 76			; 0000004cH
  03c56	53		 push	 ebx
  03c57	56		 push	 esi
  03c58	57		 push	 edi
  03c59	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 976  : 	//if(!this->Enable) 
; 977  : 	//{
; 978  : 	//	return;	// -> data rage
; 979  : 	//}
; 980  : 
; 981  : 	int DataSize = 0;

  03c5c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _DataSize$[ebp], 0

; 982  : 	int irLoad = 0;

  03c63	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _irLoad$[ebp], 0

; 983  : 
; 984  : 	this->rUser[aIndex].LoadInfo = 0;

  03c6a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03c6d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03c73	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c76	c7 44 01 30 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+48], 0

; 985  : 
; 986  : 	this->rUser[aIndex].rLevel = 0;

  03c7e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03c81	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03c87	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c8a	c7 44 01 34 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+52], 0

; 987  : 	this->rUser[aIndex].rPoints = 0;

  03c92	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03c95	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03c9b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c9e	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 988  : 	this->rUser[aIndex].rExperience = 0;

  03ca6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03ca9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03caf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03cb2	c7 44 01 3c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+60], 0

; 989  : 
; 990  : 	this->rUser[aIndex].Damage = 0;

  03cba	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03cbd	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03cc3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03cc6	c7 44 01 44 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+68], 0

; 991  : 	this->rUser[aIndex].FreePoints = 0;

  03cce	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03cd1	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03cd7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03cda	c7 44 01 48 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+72], 0

; 992  : 	this->rUser[aIndex].SummonPet = 0;

  03ce2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03ce5	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03ceb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03cee	c7 44 01 4c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+76], 0

; 993  : 	this->rUser[aIndex].WingsDamagePlus = 0;

  03cf6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03cf9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03cff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d02	c7 44 01 50 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+80], 0

; 994  : 	this->rUser[aIndex].FinalMana = 0;

  03d0a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03d0d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03d13	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d16	c7 44 01 54 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+84], 0

; 995  : 	this->rUser[aIndex].IgnoreDefence = 0;

  03d1e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03d21	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03d27	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d2a	c7 44 01 58 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+88], 0

; 996  : 	this->rUser[aIndex].ResetLevel = 0;

  03d32	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03d35	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03d3b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d3e	c7 44 01 5c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+92], 0

; 997  : 	this->rUser[aIndex].Teleport = 0;

  03d46	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03d49	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03d4f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d52	c7 44 01 60 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+96], 0

; 998  : 	this->rUser[aIndex].CriticalDamageRate = 0;

  03d5a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03d5d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03d63	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d66	c7 44 01 64 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+100], 0

; 999  : 	this->rUser[aIndex].AbsordDamage = 0;

  03d6e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03d71	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03d77	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d7a	c7 44 01 68 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+104], 0

; 1000 : 	this->rUser[aIndex].PetDamageBonus = 0;

  03d82	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03d85	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03d8b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d8e	c7 44 01 6c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+108], 0

; 1001 : 	this->rUser[aIndex].FinalLife = 0;

  03d96	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03d99	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03d9f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03da2	c7 44 01 70 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+112], 0

; 1002 : 	this->rUser[aIndex].Strength = 0;

  03daa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03dad	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03db3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03db6	c7 44 01 74 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+116], 0

; 1003 : 	this->rUser[aIndex].DefenceRate = 0;

  03dbe	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03dc1	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03dc7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03dca	c7 44 01 78 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+120], 0

; 1004 : 	this->rUser[aIndex].FireDamage = 0;

  03dd2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03dd5	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03ddb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03dde	c7 44 01 7c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+124], 0

; 1005 : 	this->rUser[aIndex].Energy = 0;

  03de6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03de9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03def	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03df2	c7 84 01 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+128], 0

; 1006 : 	this->rUser[aIndex].Agility = 0;

  03dfd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03e00	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03e06	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e09	c7 84 01 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+132], 0

; 1007 : 	this->rUser[aIndex].DoubleDamage = 0;

  03e14	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03e17	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03e1d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e20	c7 84 01 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+136], 0

; 1008 : 	this->rUser[aIndex].FinalSD = 0;

  03e2b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03e2e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03e34	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e37	c7 84 01 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+140], 0

; 1009 : 	this->rUser[aIndex].FinalDefence = 0;

  03e42	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03e45	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03e4b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e4e	c7 84 01 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+144], 0

; 1010 : 	this->rUser[aIndex].ZenDrop = 0;

  03e59	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03e5c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03e62	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e65	c7 84 01 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+148], 0

; 1011 : 	this->rUser[aIndex].GuildBonus;
; 1012 : 	this->rUser[aIndex].ReflectDamage = 0;

  03e70	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03e73	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03e79	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e7c	c7 84 01 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+156], 0

; 1013 : 	this->rUser[aIndex].ExellentDamageRate = 0;

  03e87	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03e8a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03e90	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03e93	c7 84 01 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+160], 0

; 1014 : 	this->rUser[aIndex].PvPBonusPlus = 0;

  03e9e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03ea1	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03ea7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03eaa	c7 84 01 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+164], 0

; 1015 : 	this->rUser[aIndex].MinDefence = 0;

  03eb5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03eb8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03ebe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03ec1	c7 84 01 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+168], 0

; 1016 : 	this->rUser[aIndex].Experience = 0;

  03ecc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03ecf	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03ed5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03ed8	c7 84 01 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+172], 0

; 1017 : 	this->rUser[aIndex].StartSD = 0;

  03ee3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03ee6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03eec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03eef	c7 84 01 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+176], 0

; 1018 : 	this->rUser[aIndex].PartyBonus = 0;

  03efa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03efd	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03f03	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f06	c7 84 01 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+180], 0

; 1019 : 	this->rUser[aIndex].IceDamage = 0;

  03f11	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03f14	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03f1a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f1d	c7 84 01 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+184], 0

; 1020 : 	this->rUser[aIndex].DistanceAttack = 0;

  03f28	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03f2b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03f31	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f34	c7 84 01 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+188], 0

; 1021 : 	this->rUser[aIndex].AttackRate = 0;

  03f3f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03f42	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03f48	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f4b	c7 84 01 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+192], 0

; 1022 : 	this->rUser[aIndex].WeaponBonus = 0;

  03f56	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03f59	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03f5f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f62	c7 84 01 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+196], 0

; 1023 : 	this->rUser[aIndex].ExellentDamage = 0;

  03f6d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03f70	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03f76	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f79	c7 84 01 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+200], 0

; 1024 : 	this->rUser[aIndex].CriticalDamage = 0;

  03f84	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03f87	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03f8d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f90	c7 84 01 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+204], 0

; 1025 : 
; 1026 : 	if(!this->Enable) 

  03f9b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03f9e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  03fa1	85 c9		 test	 ecx, ecx
  03fa3	75 05		 jne	 SHORT $LN2@NewDBLoad

; 1027 : 	{
; 1028 : 		return;	// -> data rage

  03fa5	e9 d7 06 00 00	 jmp	 $LN3@NewDBLoad
$LN2@NewDBLoad:

; 1029 : 	}
; 1030 : 
; 1031 : 	//----
; 1032 : 
; 1033 : 	this->rUser[aIndex].LoadInfo = 1;

  03faa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03fad	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03fb3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03fb6	c7 44 01 30 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+48], 1

; 1034 : 
; 1035 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  03fbe	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03fc1	50		 push	 eax
  03fc2	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03fc5	51		 push	 ecx
  03fc6	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  03fc9	52		 push	 edx
  03fca	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  03fcf	83 c4 0c	 add	 esp, 12			; 0000000cH
  03fd2	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1036 : 	this->rUser[aIndex].rLevel = irLoad;

  03fd5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  03fd8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  03fde	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03fe1	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  03fe4	89 54 01 34	 mov	 DWORD PTR [ecx+eax+52], edx

; 1037 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  03fe8	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  03feb	50		 push	 eax
  03fec	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  03fef	51		 push	 ecx
  03ff0	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  03ff3	52		 push	 edx
  03ff4	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  03ff9	83 c4 0c	 add	 esp, 12			; 0000000cH
  03ffc	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1038 : 	this->rUser[aIndex].rPoints = irLoad;

  03fff	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04002	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0400b	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0400e	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx

; 1039 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04012	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04015	50		 push	 eax
  04016	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04019	51		 push	 ecx
  0401a	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0401d	52		 push	 edx
  0401e	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04023	83 c4 0c	 add	 esp, 12			; 0000000cH
  04026	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1040 : 	this->rUser[aIndex].rExperience = irLoad;

  04029	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0402c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04035	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04038	89 54 01 3c	 mov	 DWORD PTR [ecx+eax+60], edx

; 1041 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0403c	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0403f	50		 push	 eax
  04040	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04043	51		 push	 ecx
  04044	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04047	52		 push	 edx
  04048	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0404d	83 c4 0c	 add	 esp, 12			; 0000000cH
  04050	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1042 : 	this->rUser[aIndex].Damage = irLoad;

  04053	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04056	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0405c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0405f	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04062	89 54 01 44	 mov	 DWORD PTR [ecx+eax+68], edx

; 1043 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04066	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04069	50		 push	 eax
  0406a	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0406d	51		 push	 ecx
  0406e	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04071	52		 push	 edx
  04072	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0407a	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1044 : 	this->rUser[aIndex].FreePoints = irLoad;

  0407d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04080	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04089	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0408c	89 54 01 48	 mov	 DWORD PTR [ecx+eax+72], edx

; 1045 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04090	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04093	50		 push	 eax
  04094	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04097	51		 push	 ecx
  04098	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0409b	52		 push	 edx
  0409c	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  040a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  040a4	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1046 : 	this->rUser[aIndex].SummonPet = irLoad;

  040a7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  040aa	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  040b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  040b3	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  040b6	89 54 01 4c	 mov	 DWORD PTR [ecx+eax+76], edx

; 1047 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  040ba	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  040bd	50		 push	 eax
  040be	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  040c1	51		 push	 ecx
  040c2	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  040c5	52		 push	 edx
  040c6	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  040cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  040ce	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1048 : 	this->rUser[aIndex].WingsDamagePlus = irLoad;

  040d1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  040d4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  040da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  040dd	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  040e0	89 54 01 50	 mov	 DWORD PTR [ecx+eax+80], edx

; 1049 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  040e4	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  040e7	50		 push	 eax
  040e8	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  040eb	51		 push	 ecx
  040ec	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  040ef	52		 push	 edx
  040f0	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  040f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  040f8	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1050 : 	this->rUser[aIndex].FinalMana = irLoad;

  040fb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  040fe	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04104	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04107	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0410a	89 54 01 54	 mov	 DWORD PTR [ecx+eax+84], edx

; 1051 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0410e	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04111	50		 push	 eax
  04112	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04115	51		 push	 ecx
  04116	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04119	52		 push	 edx
  0411a	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0411f	83 c4 0c	 add	 esp, 12			; 0000000cH
  04122	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1052 : 	this->rUser[aIndex].IgnoreDefence = irLoad;

  04125	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04128	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0412e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04131	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04134	89 54 01 58	 mov	 DWORD PTR [ecx+eax+88], edx

; 1053 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04138	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0413b	50		 push	 eax
  0413c	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0413f	51		 push	 ecx
  04140	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04143	52		 push	 edx
  04144	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04149	83 c4 0c	 add	 esp, 12			; 0000000cH
  0414c	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1054 : 	this->rUser[aIndex].ResetLevel = irLoad;

  0414f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04152	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04158	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0415b	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0415e	89 54 01 5c	 mov	 DWORD PTR [ecx+eax+92], edx

; 1055 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04162	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04165	50		 push	 eax
  04166	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04169	51		 push	 ecx
  0416a	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0416d	52		 push	 edx
  0416e	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04173	83 c4 0c	 add	 esp, 12			; 0000000cH
  04176	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1056 : 	this->rUser[aIndex].Teleport = irLoad;

  04179	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0417c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04182	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04185	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04188	89 54 01 60	 mov	 DWORD PTR [ecx+eax+96], edx

; 1057 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0418c	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0418f	50		 push	 eax
  04190	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04193	51		 push	 ecx
  04194	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04197	52		 push	 edx
  04198	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0419d	83 c4 0c	 add	 esp, 12			; 0000000cH
  041a0	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1058 : 	this->rUser[aIndex].CriticalDamageRate = irLoad;

  041a3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  041a6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  041ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  041af	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  041b2	89 54 01 64	 mov	 DWORD PTR [ecx+eax+100], edx

; 1059 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  041b6	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  041b9	50		 push	 eax
  041ba	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  041bd	51		 push	 ecx
  041be	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  041c1	52		 push	 edx
  041c2	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  041c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  041ca	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1060 : 	this->rUser[aIndex].AbsordDamage = irLoad;

  041cd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  041d0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  041d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  041d9	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  041dc	89 54 01 68	 mov	 DWORD PTR [ecx+eax+104], edx

; 1061 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  041e0	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  041e3	50		 push	 eax
  041e4	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  041e7	51		 push	 ecx
  041e8	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  041eb	52		 push	 edx
  041ec	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  041f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  041f4	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1062 : 	this->rUser[aIndex].PetDamageBonus = irLoad;

  041f7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  041fa	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04200	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04203	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04206	89 54 01 6c	 mov	 DWORD PTR [ecx+eax+108], edx

; 1063 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0420a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0420d	50		 push	 eax
  0420e	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04211	51		 push	 ecx
  04212	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04215	52		 push	 edx
  04216	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0421b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0421e	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1064 : 	this->rUser[aIndex].FinalLife = irLoad;

  04221	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04224	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0422a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0422d	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04230	89 54 01 70	 mov	 DWORD PTR [ecx+eax+112], edx

; 1065 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04234	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04237	50		 push	 eax
  04238	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0423b	51		 push	 ecx
  0423c	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0423f	52		 push	 edx
  04240	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04245	83 c4 0c	 add	 esp, 12			; 0000000cH
  04248	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1066 : 	this->rUser[aIndex].Strength = irLoad;

  0424b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0424e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04254	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04257	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0425a	89 54 01 74	 mov	 DWORD PTR [ecx+eax+116], edx

; 1067 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0425e	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04261	50		 push	 eax
  04262	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04265	51		 push	 ecx
  04266	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04269	52		 push	 edx
  0426a	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0426f	83 c4 0c	 add	 esp, 12			; 0000000cH
  04272	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1068 : 	this->rUser[aIndex].DefenceRate = irLoad;

  04275	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04278	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0427e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04281	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04284	89 54 01 78	 mov	 DWORD PTR [ecx+eax+120], edx

; 1069 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04288	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0428b	50		 push	 eax
  0428c	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0428f	51		 push	 ecx
  04290	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04293	52		 push	 edx
  04294	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04299	83 c4 0c	 add	 esp, 12			; 0000000cH
  0429c	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1070 : 	this->rUser[aIndex].FireDamage = irLoad;

  0429f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  042a2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  042a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  042ab	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  042ae	89 54 01 7c	 mov	 DWORD PTR [ecx+eax+124], edx

; 1071 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  042b2	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  042b5	50		 push	 eax
  042b6	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  042b9	51		 push	 ecx
  042ba	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  042bd	52		 push	 edx
  042be	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  042c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  042c6	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1072 : 	this->rUser[aIndex].Energy = irLoad;

  042c9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  042cc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  042d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  042d5	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  042d8	89 94 01 80 00
	00 00		 mov	 DWORD PTR [ecx+eax+128], edx

; 1073 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  042df	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  042e2	50		 push	 eax
  042e3	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  042e6	51		 push	 ecx
  042e7	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  042ea	52		 push	 edx
  042eb	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  042f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  042f3	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1074 : 	this->rUser[aIndex].Agility = irLoad;

  042f6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  042f9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  042ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04302	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04305	89 94 01 84 00
	00 00		 mov	 DWORD PTR [ecx+eax+132], edx

; 1075 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0430c	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0430f	50		 push	 eax
  04310	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04313	51		 push	 ecx
  04314	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04317	52		 push	 edx
  04318	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0431d	83 c4 0c	 add	 esp, 12			; 0000000cH
  04320	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1076 : 	this->rUser[aIndex].DoubleDamage = irLoad;

  04323	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04326	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0432c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0432f	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04332	89 94 01 88 00
	00 00		 mov	 DWORD PTR [ecx+eax+136], edx

; 1077 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04339	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0433c	50		 push	 eax
  0433d	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04340	51		 push	 ecx
  04341	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04344	52		 push	 edx
  04345	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0434a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0434d	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1078 : 	this->rUser[aIndex].FinalSD = irLoad;

  04350	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04353	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04359	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0435c	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0435f	89 94 01 8c 00
	00 00		 mov	 DWORD PTR [ecx+eax+140], edx

; 1079 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04366	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04369	50		 push	 eax
  0436a	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0436d	51		 push	 ecx
  0436e	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04371	52		 push	 edx
  04372	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04377	83 c4 0c	 add	 esp, 12			; 0000000cH
  0437a	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1080 : 	this->rUser[aIndex].FinalDefence = irLoad;

  0437d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04380	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04386	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04389	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0438c	89 94 01 90 00
	00 00		 mov	 DWORD PTR [ecx+eax+144], edx

; 1081 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04393	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04396	50		 push	 eax
  04397	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0439a	51		 push	 ecx
  0439b	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0439e	52		 push	 edx
  0439f	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  043a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  043a7	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1082 : 	this->rUser[aIndex].ZenDrop = irLoad;

  043aa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  043ad	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  043b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  043b6	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  043b9	89 94 01 94 00
	00 00		 mov	 DWORD PTR [ecx+eax+148], edx

; 1083 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  043c0	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  043c3	50		 push	 eax
  043c4	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  043c7	51		 push	 ecx
  043c8	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  043cb	52		 push	 edx
  043cc	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  043d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  043d4	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1084 : 	this->rUser[aIndex].GuildBonus = irLoad;

  043d7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  043da	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  043e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  043e3	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  043e6	89 94 01 98 00
	00 00		 mov	 DWORD PTR [ecx+eax+152], edx

; 1085 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  043ed	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  043f0	50		 push	 eax
  043f1	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  043f4	51		 push	 ecx
  043f5	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  043f8	52		 push	 edx
  043f9	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  043fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  04401	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1086 : 	this->rUser[aIndex].ReflectDamage = irLoad;

  04404	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04407	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0440d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04410	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04413	89 94 01 9c 00
	00 00		 mov	 DWORD PTR [ecx+eax+156], edx

; 1087 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0441a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0441d	50		 push	 eax
  0441e	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04421	51		 push	 ecx
  04422	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04425	52		 push	 edx
  04426	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0442b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0442e	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1088 : 	this->rUser[aIndex].ExellentDamageRate = irLoad;

  04431	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04434	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0443a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0443d	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04440	89 94 01 a0 00
	00 00		 mov	 DWORD PTR [ecx+eax+160], edx

; 1089 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04447	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0444a	50		 push	 eax
  0444b	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0444e	51		 push	 ecx
  0444f	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04452	52		 push	 edx
  04453	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04458	83 c4 0c	 add	 esp, 12			; 0000000cH
  0445b	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1090 : 	this->rUser[aIndex].PvPBonusPlus = irLoad;

  0445e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04461	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04467	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0446a	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0446d	89 94 01 a4 00
	00 00		 mov	 DWORD PTR [ecx+eax+164], edx

; 1091 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04474	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04477	50		 push	 eax
  04478	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0447b	51		 push	 ecx
  0447c	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0447f	52		 push	 edx
  04480	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04485	83 c4 0c	 add	 esp, 12			; 0000000cH
  04488	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1092 : 	this->rUser[aIndex].MinDefence = irLoad;

  0448b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0448e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04494	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04497	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0449a	89 94 01 a8 00
	00 00		 mov	 DWORD PTR [ecx+eax+168], edx

; 1093 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  044a1	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  044a4	50		 push	 eax
  044a5	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  044a8	51		 push	 ecx
  044a9	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  044ac	52		 push	 edx
  044ad	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  044b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  044b5	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1094 : 	this->rUser[aIndex].Experience = irLoad;

  044b8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  044bb	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  044c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  044c4	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  044c7	89 94 01 ac 00
	00 00		 mov	 DWORD PTR [ecx+eax+172], edx

; 1095 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  044ce	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  044d1	50		 push	 eax
  044d2	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  044d5	51		 push	 ecx
  044d6	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  044d9	52		 push	 edx
  044da	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  044df	83 c4 0c	 add	 esp, 12			; 0000000cH
  044e2	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1096 : 	this->rUser[aIndex].StartSD = irLoad;

  044e5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  044e8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  044ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  044f1	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  044f4	89 94 01 b0 00
	00 00		 mov	 DWORD PTR [ecx+eax+176], edx

; 1097 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  044fb	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  044fe	50		 push	 eax
  044ff	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04502	51		 push	 ecx
  04503	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04506	52		 push	 edx
  04507	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0450c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0450f	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1098 : 	this->rUser[aIndex].PartyBonus = irLoad;

  04512	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04515	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0451b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0451e	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04521	89 94 01 b4 00
	00 00		 mov	 DWORD PTR [ecx+eax+180], edx

; 1099 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04528	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0452b	50		 push	 eax
  0452c	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0452f	51		 push	 ecx
  04530	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04533	52		 push	 edx
  04534	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04539	83 c4 0c	 add	 esp, 12			; 0000000cH
  0453c	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1100 : 	this->rUser[aIndex].IceDamage = irLoad;

  0453f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04542	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04548	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0454b	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0454e	89 94 01 b8 00
	00 00		 mov	 DWORD PTR [ecx+eax+184], edx

; 1101 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04555	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04558	50		 push	 eax
  04559	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0455c	51		 push	 ecx
  0455d	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04560	52		 push	 edx
  04561	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04566	83 c4 0c	 add	 esp, 12			; 0000000cH
  04569	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1102 : 	this->rUser[aIndex].DistanceAttack = irLoad;

  0456c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0456f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04575	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04578	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0457b	89 94 01 bc 00
	00 00		 mov	 DWORD PTR [ecx+eax+188], edx

; 1103 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04582	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  04585	50		 push	 eax
  04586	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04589	51		 push	 ecx
  0458a	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0458d	52		 push	 edx
  0458e	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  04593	83 c4 0c	 add	 esp, 12			; 0000000cH
  04596	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1104 : 	this->rUser[aIndex].AttackRate = irLoad;

  04599	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0459c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  045a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  045a5	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  045a8	89 94 01 c0 00
	00 00		 mov	 DWORD PTR [ecx+eax+192], edx

; 1105 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  045af	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  045b2	50		 push	 eax
  045b3	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  045b6	51		 push	 ecx
  045b7	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  045ba	52		 push	 edx
  045bb	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  045c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  045c3	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1106 : 	this->rUser[aIndex].WeaponBonus = irLoad;

  045c6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  045c9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  045cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  045d2	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  045d5	89 94 01 c4 00
	00 00		 mov	 DWORD PTR [ecx+eax+196], edx

; 1107 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  045dc	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  045df	50		 push	 eax
  045e0	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  045e3	51		 push	 ecx
  045e4	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  045e7	52		 push	 edx
  045e8	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  045ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  045f0	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1108 : 	this->rUser[aIndex].ExellentDamage = irLoad;

  045f3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  045f6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  045fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  045ff	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  04602	89 94 01 c8 00
	00 00		 mov	 DWORD PTR [ecx+eax+200], edx

; 1109 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  04609	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0460c	50		 push	 eax
  0460d	8b 4d f8	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  04610	51		 push	 ecx
  04611	8d 55 f4	 lea	 edx, DWORD PTR _irLoad$[ebp]
  04614	52		 push	 edx
  04615	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int
  0461a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0461d	89 45 f8	 mov	 DWORD PTR _DataSize$[ebp], eax

; 1110 : 	this->rUser[aIndex].CriticalDamage = irLoad;

  04620	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04623	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04629	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0462c	8b 55 f4	 mov	 edx, DWORD PTR _irLoad$[ebp]
  0462f	89 94 01 cc 00
	00 00		 mov	 DWORD PTR [ecx+eax+204], edx

; 1111 : 
; 1112 : 	if(this->rUser[aIndex].rLevel <= 0)

  04636	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04639	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0463f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04642	83 7c 01 34 00	 cmp	 DWORD PTR [ecx+eax+52], 0
  04647	7f 14		 jg	 SHORT $LN1@NewDBLoad

; 1113 : 	{
; 1114 : 		this->rUser[aIndex].rLevel = 1;

  04649	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0464c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04652	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04655	c7 44 01 34 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+52], 1
$LN1@NewDBLoad:

; 1115 : 	}
; 1116 : 
; 1117 : 	//this->rUser[aIndex].rPoints = 1000;
; 1118 : 
; 1119 : 	this->ConfigSend(aIndex);

  0465d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04660	50		 push	 eax
  04661	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04664	e8 00 00 00 00	 call	 ?ConfigSend@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::ConfigSend

; 1120 : 	this->SendUser(aIndex);

  04669	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0466c	50		 push	 eax
  0466d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04670	e8 00 00 00 00	 call	 ?SendUser@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SendUser

; 1121 : 	gObjCalCharacter(aIndex);

  04675	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04678	50		 push	 eax
  04679	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  0467e	83 c4 04	 add	 esp, 4
$LN3@NewDBLoad:

; 1122 : 
; 1123 : 	//LogAddC(2, "DataSize: %d", DataSize);
; 1124 : 	//MsgNormal(aIndex,"DataSize: %d", DataSize);
; 1125 : }

  04681	5f		 pop	 edi
  04682	5e		 pop	 esi
  04683	5b		 pop	 ebx
  04684	8b e5		 mov	 esp, ebp
  04686	5d		 pop	 ebp
  04687	c2 08 00	 ret	 8
?NewDBLoad@cSystemOfRage@@QAEXHPAE@Z ENDP		; cSystemOfRage::NewDBLoad
_TEXT	ENDS
PUBLIC	?CharacterZero@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::CharacterZero
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?CharacterZero@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::CharacterZero
; _this$ = ecx

; 1128 : {

  04690	55		 push	 ebp
  04691	8b ec		 mov	 ebp, esp
  04693	83 ec 48	 sub	 esp, 72			; 00000048H
  04696	53		 push	 ebx
  04697	56		 push	 esi
  04698	57		 push	 edi
  04699	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1129 : 	if(!OBJMAX_RANGE(aIndex))

  0469c	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  046a0	7d 09		 jge	 SHORT $LN4@CharacterZ
  046a2	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  046a9	eb 0f		 jmp	 SHORT $LN5@CharacterZ
$LN4@CharacterZ:
  046ab	33 c0		 xor	 eax, eax
  046ad	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  046b4	0f 9e c0	 setle	 al
  046b7	89 45 b8	 mov	 DWORD PTR tv67[ebp], eax
$LN5@CharacterZ:
  046ba	83 7d b8 00	 cmp	 DWORD PTR tv67[ebp], 0
  046be	75 05		 jne	 SHORT $LN1@CharacterZ

; 1130 : 	{
; 1131 : 		return;

  046c0	e9 31 03 00 00	 jmp	 $LN2@CharacterZ
$LN1@CharacterZ:

; 1132 : 	}
; 1133 : 
; 1134 : 	this->rUser[aIndex].LoadInfo = 0;

  046c5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  046c8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  046ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  046d1	c7 44 01 30 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+48], 0

; 1135 : 
; 1136 : 	this->rUser[aIndex].rLevel = 1;

  046d9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  046dc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  046e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  046e5	c7 44 01 34 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+52], 1

; 1137 : 	this->rUser[aIndex].rPoints = 0;

  046ed	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  046f0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  046f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  046f9	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 1138 : 	this->rUser[aIndex].rExperience = 0;

  04701	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04704	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0470a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0470d	c7 44 01 3c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+60], 0

; 1139 : 	this->rUser[aIndex].Damage = 0;

  04715	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04718	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0471e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04721	c7 44 01 44 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+68], 0

; 1140 : 	this->rUser[aIndex].FreePoints = 0;

  04729	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0472c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04732	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04735	c7 44 01 48 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+72], 0

; 1141 : 	this->rUser[aIndex].SummonPet = 0;

  0473d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04740	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04746	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04749	c7 44 01 4c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+76], 0

; 1142 : 	this->rUser[aIndex].WingsDamagePlus = 0;

  04751	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04754	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0475a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0475d	c7 44 01 50 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+80], 0

; 1143 : 	this->rUser[aIndex].FinalMana = 0;

  04765	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04768	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0476e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04771	c7 44 01 54 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+84], 0

; 1144 : 	this->rUser[aIndex].IgnoreDefence = 0;

  04779	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0477c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04782	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04785	c7 44 01 58 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+88], 0

; 1145 : 	this->rUser[aIndex].ResetLevel = 0;

  0478d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04790	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04796	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04799	c7 44 01 5c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+92], 0

; 1146 : 	this->rUser[aIndex].Teleport = 0;

  047a1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  047a4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  047aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  047ad	c7 44 01 60 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+96], 0

; 1147 : 	this->rUser[aIndex].CriticalDamageRate = 0;

  047b5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  047b8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  047be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  047c1	c7 44 01 64 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+100], 0

; 1148 : 	this->rUser[aIndex].AbsordDamage = 0;

  047c9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  047cc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  047d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  047d5	c7 44 01 68 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+104], 0

; 1149 : 	this->rUser[aIndex].PetDamageBonus = 0;

  047dd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  047e0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  047e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  047e9	c7 44 01 6c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+108], 0

; 1150 : 	this->rUser[aIndex].FinalLife = 0;

  047f1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  047f4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  047fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  047fd	c7 44 01 70 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+112], 0

; 1151 : 	this->rUser[aIndex].Strength = 0;

  04805	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04808	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0480e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04811	c7 44 01 74 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+116], 0

; 1152 : 	this->rUser[aIndex].DefenceRate = 0;

  04819	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0481c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04822	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04825	c7 44 01 78 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+120], 0

; 1153 : 	this->rUser[aIndex].FireDamage = 0;

  0482d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04830	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04836	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04839	c7 44 01 7c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+124], 0

; 1154 : 	this->rUser[aIndex].Energy = 0;

  04841	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04844	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0484a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0484d	c7 84 01 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+128], 0

; 1155 : 	this->rUser[aIndex].Agility = 0;

  04858	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0485b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04861	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04864	c7 84 01 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+132], 0

; 1156 : 	this->rUser[aIndex].DoubleDamage = 0;

  0486f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04872	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04878	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0487b	c7 84 01 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+136], 0

; 1157 : 	this->rUser[aIndex].FinalSD = 0;

  04886	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04889	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0488f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04892	c7 84 01 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+140], 0

; 1158 : 	this->rUser[aIndex].FinalDefence = 0;

  0489d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  048a0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  048a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  048a9	c7 84 01 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+144], 0

; 1159 : 	this->rUser[aIndex].ZenDrop = 0;

  048b4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  048b7	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  048bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  048c0	c7 84 01 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+148], 0

; 1160 : 	this->rUser[aIndex].GuildBonus;
; 1161 : 	this->rUser[aIndex].ReflectDamage = 0;

  048cb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  048ce	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  048d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  048d7	c7 84 01 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+156], 0

; 1162 : 	this->rUser[aIndex].ExellentDamageRate = 0;

  048e2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  048e5	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  048eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  048ee	c7 84 01 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+160], 0

; 1163 : 	this->rUser[aIndex].PvPBonusPlus = 0;

  048f9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  048fc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04902	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04905	c7 84 01 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+164], 0

; 1164 : 	this->rUser[aIndex].MinDefence = 0;

  04910	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04913	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04919	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0491c	c7 84 01 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+168], 0

; 1165 : 	this->rUser[aIndex].Experience = 0;

  04927	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0492a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04930	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04933	c7 84 01 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+172], 0

; 1166 : 	this->rUser[aIndex].StartSD = 0;

  0493e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04941	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04947	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0494a	c7 84 01 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+176], 0

; 1167 : 	this->rUser[aIndex].PartyBonus = 0;

  04955	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04958	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0495e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04961	c7 84 01 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+180], 0

; 1168 : 	this->rUser[aIndex].IceDamage = 0;

  0496c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0496f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04975	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04978	c7 84 01 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+184], 0

; 1169 : 	this->rUser[aIndex].DistanceAttack = 0;

  04983	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04986	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0498c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0498f	c7 84 01 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+188], 0

; 1170 : 	this->rUser[aIndex].AttackRate = 0;

  0499a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0499d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  049a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  049a6	c7 84 01 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+192], 0

; 1171 : 	this->rUser[aIndex].WeaponBonus = 0;

  049b1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  049b4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  049ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  049bd	c7 84 01 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+196], 0

; 1172 : 	this->rUser[aIndex].ExellentDamage = 0;

  049c8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  049cb	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  049d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  049d4	c7 84 01 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+200], 0

; 1173 : 	this->rUser[aIndex].CriticalDamage = 0;

  049df	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  049e2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  049e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  049eb	c7 84 01 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+204], 0
$LN2@CharacterZ:

; 1174 : }

  049f6	5f		 pop	 edi
  049f7	5e		 pop	 esi
  049f8	5b		 pop	 ebx
  049f9	8b e5		 mov	 esp, ebp
  049fb	5d		 pop	 ebp
  049fc	c2 04 00	 ret	 4
?CharacterZero@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::CharacterZero
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?NpcDialog@cSystemOfRage@@QAE_NHH@Z		; cSystemOfRage::NpcDialog
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv75 = -92						; size = 4
tv70 = -92						; size = 4
_pMsg$222035 = -24					; size = 12
_lpNpc$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aNpcIndex$ = 12					; size = 4
?NpcDialog@cSystemOfRage@@QAE_NHH@Z PROC		; cSystemOfRage::NpcDialog
; _this$ = ecx

; 1177 : {

  04a00	55		 push	 ebp
  04a01	8b ec		 mov	 ebp, esp
  04a03	83 ec 5c	 sub	 esp, 92			; 0000005cH
  04a06	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  04a0b	33 c5		 xor	 eax, ebp
  04a0d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  04a10	53		 push	 ebx
  04a11	56		 push	 esi
  04a12	57		 push	 edi
  04a13	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1178 : 	if(!THINNAKORN_MAC)

  04a16	b8 01 00 00 00	 mov	 eax, 1
  04a1b	85 c0		 test	 eax, eax
  04a1d	74 07		 je	 SHORT $LN6@NpcDialog

; 1179 : 	{
; 1180 : 		return false;

  04a1f	32 c0		 xor	 al, al
  04a21	e9 38 01 00 00	 jmp	 $LN7@NpcDialog
$LN6@NpcDialog:

; 1181 : 	}
; 1182 : 
; 1183 : 	if(!this->Enable)

  04a26	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  04a29	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  04a2c	85 c9		 test	 ecx, ecx
  04a2e	75 07		 jne	 SHORT $LN5@NpcDialog

; 1184 : 	{
; 1185 : 		return false;

  04a30	32 c0		 xor	 al, al
  04a32	e9 27 01 00 00	 jmp	 $LN7@NpcDialog
$LN5@NpcDialog:

; 1186 : 	}
; 1187 : 
; 1188 : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aNpcIndex))

  04a37	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  04a3b	7d 09		 jge	 SHORT $LN9@NpcDialog
  04a3d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  04a44	eb 0f		 jmp	 SHORT $LN10@NpcDialog
$LN9@NpcDialog:
  04a46	33 c0		 xor	 eax, eax
  04a48	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  04a4f	0f 9e c0	 setle	 al
  04a52	89 45 a4	 mov	 DWORD PTR tv70[ebp], eax
$LN10@NpcDialog:
  04a55	83 7d a4 00	 cmp	 DWORD PTR tv70[ebp], 0
  04a59	74 24		 je	 SHORT $LN3@NpcDialog
  04a5b	83 7d 0c 00	 cmp	 DWORD PTR _aNpcIndex$[ebp], 0
  04a5f	7d 09		 jge	 SHORT $LN11@NpcDialog
  04a61	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
  04a68	eb 0f		 jmp	 SHORT $LN12@NpcDialog
$LN11@NpcDialog:
  04a6a	33 c0		 xor	 eax, eax
  04a6c	81 7d 0c 97 3a
	00 00		 cmp	 DWORD PTR _aNpcIndex$[ebp], 14999 ; 00003a97H
  04a73	0f 9e c0	 setle	 al
  04a76	89 45 a4	 mov	 DWORD PTR tv75[ebp], eax
$LN12@NpcDialog:
  04a79	83 7d a4 00	 cmp	 DWORD PTR tv75[ebp], 0
  04a7d	75 07		 jne	 SHORT $LN4@NpcDialog
$LN3@NpcDialog:

; 1189 : 	{
; 1190 : 		return false;

  04a7f	32 c0		 xor	 al, al
  04a81	e9 d8 00 00 00	 jmp	 $LN7@NpcDialog
$LN4@NpcDialog:

; 1191 : 	}
; 1192 : 
; 1193 : 	if(!this->rUser[aIndex].LoadInfo)

  04a86	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04a89	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04a8f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  04a92	83 7c 01 30 00	 cmp	 DWORD PTR [ecx+eax+48], 0
  04a97	75 07		 jne	 SHORT $LN2@NpcDialog

; 1194 : 	{
; 1195 : 		return false;

  04a99	32 c0		 xor	 al, al
  04a9b	e9 be 00 00 00	 jmp	 $LN7@NpcDialog
$LN2@NpcDialog:

; 1196 : 	}
; 1197 : 
; 1198 : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  04aa0	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  04aa3	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04aa9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04aaf	89 45 f4	 mov	 DWORD PTR _lpNpc$[ebp], eax

; 1199 : 
; 1200 : 	if(lpNpc->Class == this->m_sNPC_Class && lpNpc->MapNumber == this->m_btNPC_Map && lpNpc->X == this->m_btNPC_X && lpNpc->Y == this->m_btNPC_Y)

  04ab2	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  04ab5	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  04abc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  04abf	0f bf 82 c0 a8
	24 00		 movsx	 eax, WORD PTR [edx+2402496]
  04ac6	3b c8		 cmp	 ecx, eax
  04ac8	0f 85 8e 00 00
	00		 jne	 $LN1@NpcDialog
  04ace	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  04ad1	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  04ad8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  04adb	0f b6 82 c2 a8
	24 00		 movzx	 eax, BYTE PTR [edx+2402498]
  04ae2	3b c8		 cmp	 ecx, eax
  04ae4	75 76		 jne	 SHORT $LN1@NpcDialog
  04ae6	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  04ae9	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  04af0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  04af3	0f b6 82 c3 a8
	24 00		 movzx	 eax, BYTE PTR [edx+2402499]
  04afa	3b c8		 cmp	 ecx, eax
  04afc	75 5e		 jne	 SHORT $LN1@NpcDialog
  04afe	8b 45 f4	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  04b01	0f bf 88 46 01
	00 00		 movsx	 ecx, WORD PTR [eax+326]
  04b08	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  04b0b	0f b6 82 c4 a8
	24 00		 movzx	 eax, BYTE PTR [edx+2402500]
  04b12	3b c8		 cmp	 ecx, eax
  04b14	75 46		 jne	 SHORT $LN1@NpcDialog

; 1201 : 	{
; 1202 : 		PMSG_REQ_RESETRAGE pMsg;
; 1203 : 		pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0x95, sizeof(pMsg));

  04b16	6a 0c		 push	 12			; 0000000cH
  04b18	68 95 00 00 00	 push	 149			; 00000095H
  04b1d	68 fb 00 00 00	 push	 251			; 000000fbH
  04b22	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$222035[ebp]
  04b25	50		 push	 eax
  04b26	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$222035[ebp]
  04b29	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 1204 : 		pMsg.ResetRageWCoin = this->m_ResetRageWCoin;

  04b2e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  04b31	8b 88 c8 a8 24
	00		 mov	 ecx, DWORD PTR [eax+2402504]
  04b37	89 4d ec	 mov	 DWORD PTR _pMsg$222035[ebp+4], ecx

; 1205 : 		pMsg.ResetRageCredit = this->m_ResetRageCredit;

  04b3a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  04b3d	8b 88 cc a8 24
	00		 mov	 ecx, DWORD PTR [eax+2402508]
  04b43	89 4d f0	 mov	 DWORD PTR _pMsg$222035[ebp+8], ecx

; 1206 : 		DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  04b46	6a 0c		 push	 12			; 0000000cH
  04b48	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$222035[ebp]
  04b4b	50		 push	 eax
  04b4c	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  04b4f	51		 push	 ecx
  04b50	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  04b55	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1207 : 		return true;

  04b58	b0 01		 mov	 al, 1
  04b5a	eb 02		 jmp	 SHORT $LN7@NpcDialog
$LN1@NpcDialog:

; 1208 : 	}
; 1209 : 
; 1210 : 	return false;

  04b5c	32 c0		 xor	 al, al
$LN7@NpcDialog:

; 1211 : }

  04b5e	5f		 pop	 edi
  04b5f	5e		 pop	 esi
  04b60	5b		 pop	 ebx
  04b61	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  04b64	33 cd		 xor	 ecx, ebp
  04b66	e8 00 00 00 00	 call	 @__security_check_cookie@4
  04b6b	8b e5		 mov	 esp, ebp
  04b6d	5d		 pop	 ebp
  04b6e	c2 08 00	 ret	 8
?NpcDialog@cSystemOfRage@@QAE_NHH@Z ENDP		; cSystemOfRage::NpcDialog
_TEXT	ENDS
PUBLIC	??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@ ; `string'
PUBLIC	?CGRageReset@cSystemOfRage@@QAEXHPAUPMSG_ANS_RESETRAGE@@@Z ; cSystemOfRage::CGRageReset
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?GDSaveUserInfo@GameShop@@QAEXH@Z:PROC		; GameShop::GDSaveUserInfo
EXTRN	?gGameShop@@3VGameShop@@A:BYTE			; gGameShop
;	COMDAT ??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@
CONST	SEGMENT
??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@ DB '[Rage'
	DB	' System] Reset points, total points: %d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv67 = -80						; size = 4
_iTotalRagePoint$ = -12					; size = 4
_lpUser$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMsg$ = 12						; size = 4
?CGRageReset@cSystemOfRage@@QAEXHPAUPMSG_ANS_RESETRAGE@@@Z PROC ; cSystemOfRage::CGRageReset
; _this$ = ecx

; 1214 : {

  04b80	55		 push	 ebp
  04b81	8b ec		 mov	 ebp, esp
  04b83	83 ec 50	 sub	 esp, 80			; 00000050H
  04b86	53		 push	 ebx
  04b87	56		 push	 esi
  04b88	57		 push	 edi
  04b89	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1215 : 	if(!OBJMAX_RANGE(aIndex))

  04b8c	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  04b90	7d 09		 jge	 SHORT $LN10@CGRageRese
  04b92	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  04b99	eb 0f		 jmp	 SHORT $LN11@CGRageRese
$LN10@CGRageRese:
  04b9b	33 c0		 xor	 eax, eax
  04b9d	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  04ba4	0f 9e c0	 setle	 al
  04ba7	89 45 b0	 mov	 DWORD PTR tv67[ebp], eax
$LN11@CGRageRese:
  04baa	83 7d b0 00	 cmp	 DWORD PTR tv67[ebp], 0
  04bae	75 05		 jne	 SHORT $LN7@CGRageRese

; 1216 : 	{
; 1217 : 		return;

  04bb0	e9 54 07 00 00	 jmp	 $LN8@CGRageRese
$LN7@CGRageRese:

; 1218 : 	}
; 1219 : 
; 1220 : 	if(lpMsg->Result != 1 && lpMsg->Result != 2)

  04bb5	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  04bb8	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  04bbc	83 f9 01	 cmp	 ecx, 1
  04bbf	74 11		 je	 SHORT $LN6@CGRageRese
  04bc1	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  04bc4	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  04bc8	83 f9 02	 cmp	 ecx, 2
  04bcb	74 05		 je	 SHORT $LN6@CGRageRese

; 1221 : 	{
; 1222 : 		return;

  04bcd	e9 37 07 00 00	 jmp	 $LN8@CGRageRese
$LN6@CGRageRese:

; 1223 : 	}
; 1224 : 
; 1225 : 	LPOBJ lpUser = &gObj[aIndex];

  04bd2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04bd5	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  04bdb	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  04be1	89 45 f8	 mov	 DWORD PTR _lpUser$[ebp], eax

; 1226 : 
; 1227 : 	if(lpMsg->Result == 1)

  04be4	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  04be7	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  04beb	83 f9 01	 cmp	 ecx, 1
  04bee	75 49		 jne	 SHORT $LN5@CGRageRese

; 1228 : 	{
; 1229 : 		if(this->m_ResetRageWCoin > lpUser->GameShop.WCoinC)

  04bf0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04bf3	db 80 c8 a8 24
	00		 fild	 DWORD PTR [eax+2402504]
  04bf9	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  04bfc	dc 99 00 23 00
	00		 fcomp	 QWORD PTR [ecx+8960]
  04c02	df e0		 fnstsw	 ax
  04c04	f6 c4 41	 test	 ah, 65			; 00000041H
  04c07	75 05		 jne	 SHORT $LN4@CGRageRese

; 1230 : 		{
; 1231 : 			return;

  04c09	e9 fb 06 00 00	 jmp	 $LN8@CGRageRese
$LN4@CGRageRese:

; 1232 : 		}
; 1233 : 		lpUser->GameShop.WCoinC -= this->m_ResetRageWCoin;	

  04c0e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04c11	db 80 c8 a8 24
	00		 fild	 DWORD PTR [eax+2402504]
  04c17	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  04c1a	dc a9 00 23 00
	00		 fsubr	 QWORD PTR [ecx+8960]
  04c20	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  04c23	dd 9a 00 23 00
	00		 fstp	 QWORD PTR [edx+8960]

; 1234 : 		gGameShop.GDSaveUserInfo(aIndex);

  04c29	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04c2c	50		 push	 eax
  04c2d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  04c32	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
  04c37	eb 47		 jmp	 SHORT $LN2@CGRageRese
$LN5@CGRageRese:

; 1235 : 	}
; 1236 : 	else if(lpMsg->Result == 2)

  04c39	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  04c3c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  04c40	83 f9 02	 cmp	 ecx, 2
  04c43	75 3b		 jne	 SHORT $LN2@CGRageRese

; 1237 : 	{
; 1238 : 		if(this->m_ResetRageCredit > lpUser->ExCred)

  04c45	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04c48	db 80 cc a8 24
	00		 fild	 DWORD PTR [eax+2402508]
  04c4e	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  04c51	d9 81 a8 22 00
	00		 fld	 DWORD PTR [ecx+8872]
  04c57	de d9		 fcompp
  04c59	df e0		 fnstsw	 ax
  04c5b	f6 c4 05	 test	 ah, 5
  04c5e	7a 05		 jp	 SHORT $LN1@CGRageRese

; 1239 : 		{
; 1240 : 			return;

  04c60	e9 a4 06 00 00	 jmp	 $LN8@CGRageRese
$LN1@CGRageRese:

; 1241 : 		}
; 1242 : 		lpUser->ExCred -= this->m_ResetRageCredit;

  04c65	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04c68	db 80 cc a8 24
	00		 fild	 DWORD PTR [eax+2402508]
  04c6e	8b 4d f8	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  04c71	d8 a9 a8 22 00
	00		 fsubr	 DWORD PTR [ecx+8872]
  04c77	8b 55 f8	 mov	 edx, DWORD PTR _lpUser$[ebp]
  04c7a	d9 9a a8 22 00
	00		 fstp	 DWORD PTR [edx+8872]
$LN2@CGRageRese:

; 1243 : 	}
; 1244 : 
; 1245 : 	int iTotalRagePoint = this->rUser[aIndex].rPoints;

  04c80	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04c83	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04c89	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04c8c	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  04c90	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1246 : 
; 1247 : 	iTotalRagePoint += this->rUser[aIndex].Damage;

  04c93	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04c96	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04c9c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04c9f	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04ca2	03 54 01 44	 add	 edx, DWORD PTR [ecx+eax+68]
  04ca6	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1248 : 	iTotalRagePoint += this->rUser[aIndex].FreePoints;

  04ca9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04cac	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04cb2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04cb5	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04cb8	03 54 01 48	 add	 edx, DWORD PTR [ecx+eax+72]
  04cbc	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1249 : 	iTotalRagePoint += this->rUser[aIndex].SummonPet;

  04cbf	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04cc2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04cc8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04ccb	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04cce	03 54 01 4c	 add	 edx, DWORD PTR [ecx+eax+76]
  04cd2	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1250 : 	iTotalRagePoint += this->rUser[aIndex].WingsDamagePlus;

  04cd5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04cd8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04cde	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04ce1	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04ce4	03 54 01 50	 add	 edx, DWORD PTR [ecx+eax+80]
  04ce8	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1251 : 	iTotalRagePoint += this->rUser[aIndex].FinalMana;

  04ceb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04cee	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04cf4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04cf7	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04cfa	03 54 01 54	 add	 edx, DWORD PTR [ecx+eax+84]
  04cfe	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1252 : 	iTotalRagePoint += this->rUser[aIndex].IgnoreDefence;

  04d01	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04d04	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04d0a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04d0d	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04d10	03 54 01 58	 add	 edx, DWORD PTR [ecx+eax+88]
  04d14	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1253 : 	iTotalRagePoint += this->rUser[aIndex].ResetLevel;

  04d17	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04d1a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04d20	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04d23	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04d26	03 54 01 5c	 add	 edx, DWORD PTR [ecx+eax+92]
  04d2a	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1254 : 	iTotalRagePoint += this->rUser[aIndex].Teleport;

  04d2d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04d30	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04d36	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04d39	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04d3c	03 54 01 60	 add	 edx, DWORD PTR [ecx+eax+96]
  04d40	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1255 : 	iTotalRagePoint += this->rUser[aIndex].CriticalDamageRate;

  04d43	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04d46	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04d4c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04d4f	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04d52	03 54 01 64	 add	 edx, DWORD PTR [ecx+eax+100]
  04d56	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1256 : 	iTotalRagePoint += this->rUser[aIndex].AbsordDamage;

  04d59	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04d5c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04d62	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04d65	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04d68	03 54 01 68	 add	 edx, DWORD PTR [ecx+eax+104]
  04d6c	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1257 : 	iTotalRagePoint += this->rUser[aIndex].PetDamageBonus;

  04d6f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04d72	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04d78	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04d7b	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04d7e	03 54 01 6c	 add	 edx, DWORD PTR [ecx+eax+108]
  04d82	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1258 : 	iTotalRagePoint += this->rUser[aIndex].FinalLife;

  04d85	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04d88	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04d8e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04d91	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04d94	03 54 01 70	 add	 edx, DWORD PTR [ecx+eax+112]
  04d98	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1259 : 	iTotalRagePoint += this->rUser[aIndex].Strength;

  04d9b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04d9e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04da4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04da7	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04daa	03 54 01 74	 add	 edx, DWORD PTR [ecx+eax+116]
  04dae	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1260 : 	iTotalRagePoint += this->rUser[aIndex].DefenceRate;

  04db1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04db4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04dba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04dbd	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04dc0	03 54 01 78	 add	 edx, DWORD PTR [ecx+eax+120]
  04dc4	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1261 : 	iTotalRagePoint += this->rUser[aIndex].FireDamage;

  04dc7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04dca	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04dd0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04dd3	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04dd6	03 54 01 7c	 add	 edx, DWORD PTR [ecx+eax+124]
  04dda	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1262 : 	iTotalRagePoint += this->rUser[aIndex].Energy;

  04ddd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04de0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04de6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04de9	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04dec	03 94 01 80 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+128]
  04df3	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1263 : 	iTotalRagePoint += this->rUser[aIndex].Agility;

  04df6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04df9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04dff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04e02	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04e05	03 94 01 84 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+132]
  04e0c	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1264 : 	iTotalRagePoint += this->rUser[aIndex].DoubleDamage;

  04e0f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04e12	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04e18	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04e1b	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04e1e	03 94 01 88 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+136]
  04e25	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1265 : 	iTotalRagePoint += this->rUser[aIndex].FinalSD;

  04e28	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04e2b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04e31	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04e34	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04e37	03 94 01 8c 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+140]
  04e3e	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1266 : 	iTotalRagePoint += this->rUser[aIndex].FinalDefence;

  04e41	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04e44	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04e4a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04e4d	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04e50	03 94 01 90 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+144]
  04e57	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1267 : 	iTotalRagePoint += this->rUser[aIndex].ZenDrop;

  04e5a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04e5d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04e63	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04e66	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04e69	03 94 01 94 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+148]
  04e70	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1268 : 	iTotalRagePoint += this->rUser[aIndex].GuildBonus;

  04e73	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04e76	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04e7c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04e7f	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04e82	03 94 01 98 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+152]
  04e89	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1269 : 	iTotalRagePoint += this->rUser[aIndex].ReflectDamage;

  04e8c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04e8f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04e95	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04e98	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04e9b	03 94 01 9c 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+156]
  04ea2	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1270 : 	iTotalRagePoint += this->rUser[aIndex].ExellentDamageRate;

  04ea5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04ea8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04eae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04eb1	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04eb4	03 94 01 a0 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+160]
  04ebb	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1271 : 	iTotalRagePoint += this->rUser[aIndex].PvPBonusPlus;

  04ebe	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04ec1	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04ec7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04eca	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04ecd	03 94 01 a4 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+164]
  04ed4	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1272 : 	iTotalRagePoint += this->rUser[aIndex].MinDefence;

  04ed7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04eda	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04ee0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04ee3	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04ee6	03 94 01 a8 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+168]
  04eed	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1273 : 	iTotalRagePoint += this->rUser[aIndex].Experience;

  04ef0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04ef3	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04ef9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04efc	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04eff	03 94 01 ac 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+172]
  04f06	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1274 : 	iTotalRagePoint += this->rUser[aIndex].StartSD;

  04f09	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04f0c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04f12	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04f15	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04f18	03 94 01 b0 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+176]
  04f1f	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1275 : 	iTotalRagePoint += this->rUser[aIndex].PartyBonus;

  04f22	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04f25	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04f2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04f2e	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04f31	03 94 01 b4 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+180]
  04f38	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1276 : 	iTotalRagePoint += this->rUser[aIndex].IceDamage;

  04f3b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04f3e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04f44	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04f47	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04f4a	03 94 01 b8 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+184]
  04f51	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1277 : 	iTotalRagePoint += this->rUser[aIndex].DistanceAttack;

  04f54	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04f57	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04f5d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04f60	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04f63	03 94 01 bc 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+188]
  04f6a	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1278 : 	iTotalRagePoint += this->rUser[aIndex].AttackRate;

  04f6d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04f70	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04f76	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04f79	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04f7c	03 94 01 c0 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+192]
  04f83	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1279 : 	iTotalRagePoint += this->rUser[aIndex].WeaponBonus;

  04f86	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04f89	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04f8f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04f92	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04f95	03 94 01 c4 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+196]
  04f9c	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1280 : 	iTotalRagePoint += this->rUser[aIndex].ExellentDamage;

  04f9f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04fa2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04fa8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04fab	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04fae	03 94 01 c8 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+200]
  04fb5	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1281 : 	iTotalRagePoint += this->rUser[aIndex].CriticalDamage;

  04fb8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04fbb	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04fc1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04fc4	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04fc7	03 94 01 cc 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+204]
  04fce	89 55 f4	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1282 : 
; 1283 : 	this->rUser[aIndex].rPoints = iTotalRagePoint;

  04fd1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04fd4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04fda	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04fdd	8b 55 f4	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  04fe0	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx

; 1284 : 
; 1285 : 	this->rUser[aIndex].Damage = 0;

  04fe4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04fe7	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  04fed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04ff0	c7 44 01 44 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+68], 0

; 1286 : 	this->rUser[aIndex].FreePoints = 0;

  04ff8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  04ffb	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05001	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05004	c7 44 01 48 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+72], 0

; 1287 : 	this->rUser[aIndex].SummonPet = 0;

  0500c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0500f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05018	c7 44 01 4c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+76], 0

; 1288 : 	this->rUser[aIndex].WingsDamagePlus = 0;

  05020	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05023	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0502c	c7 44 01 50 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+80], 0

; 1289 : 	this->rUser[aIndex].FinalMana = 0;

  05034	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05037	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0503d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05040	c7 44 01 54 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+84], 0

; 1290 : 	this->rUser[aIndex].IgnoreDefence = 0;

  05048	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0504b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05054	c7 44 01 58 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+88], 0

; 1291 : 	this->rUser[aIndex].ResetLevel = 0;

  0505c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0505f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05068	c7 44 01 5c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+92], 0

; 1292 : 	this->rUser[aIndex].Teleport = 0;

  05070	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05073	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0507c	c7 44 01 60 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+96], 0

; 1293 : 	this->rUser[aIndex].CriticalDamageRate = 0;

  05084	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05087	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0508d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05090	c7 44 01 64 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+100], 0

; 1294 : 	this->rUser[aIndex].AbsordDamage = 0;

  05098	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0509b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  050a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  050a4	c7 44 01 68 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+104], 0

; 1295 : 	this->rUser[aIndex].PetDamageBonus = 0;

  050ac	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  050af	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  050b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  050b8	c7 44 01 6c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+108], 0

; 1296 : 	this->rUser[aIndex].FinalLife = 0;

  050c0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  050c3	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  050c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  050cc	c7 44 01 70 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+112], 0

; 1297 : 	this->rUser[aIndex].Strength = 0;

  050d4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  050d7	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  050dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  050e0	c7 44 01 74 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+116], 0

; 1298 : 	this->rUser[aIndex].DefenceRate = 0;

  050e8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  050eb	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  050f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  050f4	c7 44 01 78 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+120], 0

; 1299 : 	this->rUser[aIndex].FireDamage = 0;

  050fc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  050ff	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05105	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05108	c7 44 01 7c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+124], 0

; 1300 : 	this->rUser[aIndex].Energy = 0;

  05110	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05113	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05119	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0511c	c7 84 01 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+128], 0

; 1301 : 	this->rUser[aIndex].Agility = 0;

  05127	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0512a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05130	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05133	c7 84 01 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+132], 0

; 1302 : 	this->rUser[aIndex].DoubleDamage = 0;

  0513e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05141	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05147	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0514a	c7 84 01 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+136], 0

; 1303 : 	this->rUser[aIndex].FinalSD = 0;

  05155	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05158	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0515e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05161	c7 84 01 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+140], 0

; 1304 : 	this->rUser[aIndex].FinalDefence = 0;

  0516c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0516f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05175	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05178	c7 84 01 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+144], 0

; 1305 : 	this->rUser[aIndex].ZenDrop = 0;

  05183	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05186	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0518c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0518f	c7 84 01 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+148], 0

; 1306 : 	this->rUser[aIndex].GuildBonus = 0;

  0519a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0519d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  051a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  051a6	c7 84 01 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+152], 0

; 1307 : 	this->rUser[aIndex].ReflectDamage = 0;

  051b1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  051b4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  051ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  051bd	c7 84 01 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+156], 0

; 1308 : 	this->rUser[aIndex].ExellentDamageRate = 0;

  051c8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  051cb	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  051d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  051d4	c7 84 01 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+160], 0

; 1309 : 	this->rUser[aIndex].PvPBonusPlus = 0;

  051df	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  051e2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  051e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  051eb	c7 84 01 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+164], 0

; 1310 : 	this->rUser[aIndex].MinDefence = 0;

  051f6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  051f9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  051ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05202	c7 84 01 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+168], 0

; 1311 : 	this->rUser[aIndex].Experience = 0;

  0520d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05210	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05216	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05219	c7 84 01 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+172], 0

; 1312 : 	this->rUser[aIndex].StartSD = 0;

  05224	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05227	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0522d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05230	c7 84 01 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+176], 0

; 1313 : 	this->rUser[aIndex].PartyBonus = 0;

  0523b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0523e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05244	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05247	c7 84 01 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+180], 0

; 1314 : 	this->rUser[aIndex].IceDamage = 0;

  05252	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05255	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0525b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0525e	c7 84 01 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+184], 0

; 1315 : 	this->rUser[aIndex].DistanceAttack = 0;

  05269	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0526c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05272	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05275	c7 84 01 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+188], 0

; 1316 : 	this->rUser[aIndex].AttackRate = 0;

  05280	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05283	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05289	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0528c	c7 84 01 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+192], 0

; 1317 : 	this->rUser[aIndex].WeaponBonus = 0;

  05297	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0529a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  052a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  052a3	c7 84 01 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+196], 0

; 1318 : 	this->rUser[aIndex].ExellentDamage = 0;

  052ae	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  052b1	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  052b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  052ba	c7 84 01 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+200], 0

; 1319 : 	this->rUser[aIndex].CriticalDamage = 0;

  052c5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  052c8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  052ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  052d1	c7 84 01 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+204], 0

; 1320 : 
; 1321 : 	this->SendUser(aIndex);

  052dc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  052df	50		 push	 eax
  052e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  052e3	e8 00 00 00 00	 call	 ?SendUser@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SendUser

; 1322 : 	gObjCalCharacter(aIndex);

  052e8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  052eb	50		 push	 eax
  052ec	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  052f1	83 c4 04	 add	 esp, 4

; 1323 : 
; 1324 : 	MsgOutput(aIndex, "[Rage System] Reset points, total points: %d", iTotalRagePoint);

  052f4	8b 45 f4	 mov	 eax, DWORD PTR _iTotalRagePoint$[ebp]
  052f7	50		 push	 eax
  052f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@
  052fd	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  05300	51		 push	 ecx
  05301	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  05306	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@CGRageRese:

; 1325 : }

  05309	5f		 pop	 edi
  0530a	5e		 pop	 esi
  0530b	5b		 pop	 ebx
  0530c	8b e5		 mov	 esp, ebp
  0530e	5d		 pop	 ebp
  0530f	c2 08 00	 ret	 8
?CGRageReset@cSystemOfRage@@QAEXHPAUPMSG_ANS_RESETRAGE@@@Z ENDP ; cSystemOfRage::CGRageReset
; Function compile flags: /Odtp /ZI
tv69 = -76						; size = 4
_iTotalRagePoint$ = -8					; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?EvoRageReset@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::EvoRageReset
; _this$ = ecx

; 1328 : {

  05320	55		 push	 ebp
  05321	8b ec		 mov	 ebp, esp
  05323	83 ec 4c	 sub	 esp, 76			; 0000004cH
  05326	53		 push	 ebx
  05327	56		 push	 esi
  05328	57		 push	 edi
  05329	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1329 : 	if(!this->Enable)

  0532c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0532f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  05332	85 c9		 test	 ecx, ecx
  05334	75 05		 jne	 SHORT $LN3@EvoRageRes

; 1330 : 	{
; 1331 : 		return;

  05336	e9 ca 06 00 00	 jmp	 $LN4@EvoRageRes
$LN3@EvoRageRes:

; 1332 : 	}
; 1333 : 
; 1334 : 	if(!OBJMAX_RANGE(aIndex))

  0533b	83 7d 08 00	 cmp	 DWORD PTR _aIndex$[ebp], 0
  0533f	7d 09		 jge	 SHORT $LN6@EvoRageRes
  05341	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  05348	eb 0f		 jmp	 SHORT $LN7@EvoRageRes
$LN6@EvoRageRes:
  0534a	33 c0		 xor	 eax, eax
  0534c	81 7d 08 97 3a
	00 00		 cmp	 DWORD PTR _aIndex$[ebp], 14999 ; 00003a97H
  05353	0f 9e c0	 setle	 al
  05356	89 45 b4	 mov	 DWORD PTR tv69[ebp], eax
$LN7@EvoRageRes:
  05359	83 7d b4 00	 cmp	 DWORD PTR tv69[ebp], 0
  0535d	75 05		 jne	 SHORT $LN2@EvoRageRes

; 1335 : 	{
; 1336 : 		return;

  0535f	e9 a1 06 00 00	 jmp	 $LN4@EvoRageRes
$LN2@EvoRageRes:

; 1337 : 	}
; 1338 : 
; 1339 : 	if(!this->rUser[aIndex].LoadInfo)

  05364	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05367	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0536d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05370	83 7c 01 30 00	 cmp	 DWORD PTR [ecx+eax+48], 0
  05375	75 05		 jne	 SHORT $LN1@EvoRageRes

; 1340 : 	{
; 1341 : 		return;

  05377	e9 89 06 00 00	 jmp	 $LN4@EvoRageRes
$LN1@EvoRageRes:

; 1342 : 	}
; 1343 : 
; 1344 : 	int iTotalRagePoint = this->rUser[aIndex].rPoints;

  0537c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0537f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05385	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05388	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  0538c	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1345 : 
; 1346 : 	iTotalRagePoint += this->rUser[aIndex].Damage;

  0538f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05392	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05398	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0539b	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  0539e	03 54 01 44	 add	 edx, DWORD PTR [ecx+eax+68]
  053a2	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1347 : 	iTotalRagePoint += this->rUser[aIndex].FreePoints;

  053a5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  053a8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  053ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  053b1	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  053b4	03 54 01 48	 add	 edx, DWORD PTR [ecx+eax+72]
  053b8	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1348 : 	iTotalRagePoint += this->rUser[aIndex].SummonPet;

  053bb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  053be	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  053c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  053c7	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  053ca	03 54 01 4c	 add	 edx, DWORD PTR [ecx+eax+76]
  053ce	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1349 : 	iTotalRagePoint += this->rUser[aIndex].WingsDamagePlus;

  053d1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  053d4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  053da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  053dd	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  053e0	03 54 01 50	 add	 edx, DWORD PTR [ecx+eax+80]
  053e4	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1350 : 	iTotalRagePoint += this->rUser[aIndex].FinalMana;

  053e7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  053ea	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  053f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  053f3	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  053f6	03 54 01 54	 add	 edx, DWORD PTR [ecx+eax+84]
  053fa	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1351 : 	iTotalRagePoint += this->rUser[aIndex].IgnoreDefence;

  053fd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05400	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05406	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05409	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  0540c	03 54 01 58	 add	 edx, DWORD PTR [ecx+eax+88]
  05410	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1352 : 	iTotalRagePoint += this->rUser[aIndex].ResetLevel;

  05413	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05416	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0541c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0541f	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05422	03 54 01 5c	 add	 edx, DWORD PTR [ecx+eax+92]
  05426	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1353 : 	iTotalRagePoint += this->rUser[aIndex].Teleport;

  05429	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0542c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05432	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05435	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05438	03 54 01 60	 add	 edx, DWORD PTR [ecx+eax+96]
  0543c	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1354 : 	iTotalRagePoint += this->rUser[aIndex].CriticalDamageRate;

  0543f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05442	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05448	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0544b	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  0544e	03 54 01 64	 add	 edx, DWORD PTR [ecx+eax+100]
  05452	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1355 : 	iTotalRagePoint += this->rUser[aIndex].AbsordDamage;

  05455	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05458	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0545e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05461	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05464	03 54 01 68	 add	 edx, DWORD PTR [ecx+eax+104]
  05468	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1356 : 	iTotalRagePoint += this->rUser[aIndex].PetDamageBonus;

  0546b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0546e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05474	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05477	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  0547a	03 54 01 6c	 add	 edx, DWORD PTR [ecx+eax+108]
  0547e	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1357 : 	iTotalRagePoint += this->rUser[aIndex].FinalLife;

  05481	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05484	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0548a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0548d	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05490	03 54 01 70	 add	 edx, DWORD PTR [ecx+eax+112]
  05494	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1358 : 	iTotalRagePoint += this->rUser[aIndex].Strength;

  05497	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0549a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  054a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  054a3	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  054a6	03 54 01 74	 add	 edx, DWORD PTR [ecx+eax+116]
  054aa	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1359 : 	iTotalRagePoint += this->rUser[aIndex].DefenceRate;

  054ad	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  054b0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  054b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  054b9	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  054bc	03 54 01 78	 add	 edx, DWORD PTR [ecx+eax+120]
  054c0	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1360 : 	iTotalRagePoint += this->rUser[aIndex].FireDamage;

  054c3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  054c6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  054cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  054cf	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  054d2	03 54 01 7c	 add	 edx, DWORD PTR [ecx+eax+124]
  054d6	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1361 : 	iTotalRagePoint += this->rUser[aIndex].Energy;

  054d9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  054dc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  054e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  054e5	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  054e8	03 94 01 80 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+128]
  054ef	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1362 : 	iTotalRagePoint += this->rUser[aIndex].Agility;

  054f2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  054f5	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  054fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  054fe	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05501	03 94 01 84 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+132]
  05508	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1363 : 	iTotalRagePoint += this->rUser[aIndex].DoubleDamage;

  0550b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0550e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05514	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05517	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  0551a	03 94 01 88 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+136]
  05521	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1364 : 	iTotalRagePoint += this->rUser[aIndex].FinalSD;

  05524	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05527	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0552d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05530	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05533	03 94 01 8c 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+140]
  0553a	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1365 : 	iTotalRagePoint += this->rUser[aIndex].FinalDefence;

  0553d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05540	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05546	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05549	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  0554c	03 94 01 90 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+144]
  05553	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1366 : 	iTotalRagePoint += this->rUser[aIndex].ZenDrop;

  05556	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05559	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0555f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05562	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05565	03 94 01 94 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+148]
  0556c	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1367 : 	iTotalRagePoint += this->rUser[aIndex].GuildBonus;

  0556f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05572	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05578	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0557b	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  0557e	03 94 01 98 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+152]
  05585	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1368 : 	iTotalRagePoint += this->rUser[aIndex].ReflectDamage;

  05588	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0558b	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05591	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05594	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05597	03 94 01 9c 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+156]
  0559e	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1369 : 	iTotalRagePoint += this->rUser[aIndex].ExellentDamageRate;

  055a1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  055a4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  055aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  055ad	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  055b0	03 94 01 a0 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+160]
  055b7	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1370 : 	iTotalRagePoint += this->rUser[aIndex].PvPBonusPlus;

  055ba	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  055bd	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  055c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  055c6	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  055c9	03 94 01 a4 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+164]
  055d0	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1371 : 	iTotalRagePoint += this->rUser[aIndex].MinDefence;

  055d3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  055d6	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  055dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  055df	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  055e2	03 94 01 a8 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+168]
  055e9	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1372 : 	iTotalRagePoint += this->rUser[aIndex].Experience;

  055ec	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  055ef	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  055f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  055f8	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  055fb	03 94 01 ac 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+172]
  05602	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1373 : 	iTotalRagePoint += this->rUser[aIndex].StartSD;

  05605	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05608	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0560e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05611	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05614	03 94 01 b0 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+176]
  0561b	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1374 : 	iTotalRagePoint += this->rUser[aIndex].PartyBonus;

  0561e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05621	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05627	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0562a	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  0562d	03 94 01 b4 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+180]
  05634	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1375 : 	iTotalRagePoint += this->rUser[aIndex].IceDamage;

  05637	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0563a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05640	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05643	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05646	03 94 01 b8 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+184]
  0564d	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1376 : 	iTotalRagePoint += this->rUser[aIndex].DistanceAttack;

  05650	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05653	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05659	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0565c	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  0565f	03 94 01 bc 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+188]
  05666	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1377 : 	iTotalRagePoint += this->rUser[aIndex].AttackRate;

  05669	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0566c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05672	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05675	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05678	03 94 01 c0 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+192]
  0567f	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1378 : 	iTotalRagePoint += this->rUser[aIndex].WeaponBonus;

  05682	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05685	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0568b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0568e	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  05691	03 94 01 c4 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+196]
  05698	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1379 : 	iTotalRagePoint += this->rUser[aIndex].ExellentDamage;

  0569b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0569e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  056a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  056a7	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  056aa	03 94 01 c8 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+200]
  056b1	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1380 : 	iTotalRagePoint += this->rUser[aIndex].CriticalDamage;

  056b4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  056b7	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  056bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  056c0	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  056c3	03 94 01 cc 00
	00 00		 add	 edx, DWORD PTR [ecx+eax+204]
  056ca	89 55 f8	 mov	 DWORD PTR _iTotalRagePoint$[ebp], edx

; 1381 : 
; 1382 : 	this->rUser[aIndex].Damage = 0;

  056cd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  056d0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  056d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  056d9	c7 44 01 44 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+68], 0

; 1383 : 	this->rUser[aIndex].FreePoints = 0;

  056e1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  056e4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  056ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  056ed	c7 44 01 48 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+72], 0

; 1384 : 	this->rUser[aIndex].SummonPet = 0;

  056f5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  056f8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  056fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05701	c7 44 01 4c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+76], 0

; 1385 : 	this->rUser[aIndex].WingsDamagePlus = 0;

  05709	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0570c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05712	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05715	c7 44 01 50 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+80], 0

; 1386 : 	this->rUser[aIndex].FinalMana = 0;

  0571d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05720	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05726	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05729	c7 44 01 54 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+84], 0

; 1387 : 	this->rUser[aIndex].IgnoreDefence = 0;

  05731	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05734	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0573a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0573d	c7 44 01 58 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+88], 0

; 1388 : 	this->rUser[aIndex].ResetLevel = 0;

  05745	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05748	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0574e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05751	c7 44 01 5c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+92], 0

; 1389 : 	this->rUser[aIndex].Teleport = 0;

  05759	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0575c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05762	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05765	c7 44 01 60 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+96], 0

; 1390 : 	this->rUser[aIndex].CriticalDamageRate = 0;

  0576d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05770	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05776	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05779	c7 44 01 64 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+100], 0

; 1391 : 	this->rUser[aIndex].AbsordDamage = 0;

  05781	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05784	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0578a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0578d	c7 44 01 68 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+104], 0

; 1392 : 	this->rUser[aIndex].PetDamageBonus = 0;

  05795	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05798	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0579e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  057a1	c7 44 01 6c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+108], 0

; 1393 : 	this->rUser[aIndex].FinalLife = 0;

  057a9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  057ac	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  057b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  057b5	c7 44 01 70 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+112], 0

; 1394 : 	this->rUser[aIndex].Strength = 0;

  057bd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  057c0	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  057c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  057c9	c7 44 01 74 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+116], 0

; 1395 : 	this->rUser[aIndex].DefenceRate = 0;

  057d1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  057d4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  057da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  057dd	c7 44 01 78 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+120], 0

; 1396 : 	this->rUser[aIndex].FireDamage = 0;

  057e5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  057e8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  057ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  057f1	c7 44 01 7c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+124], 0

; 1397 : 	this->rUser[aIndex].Energy = 0;

  057f9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  057fc	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05802	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05805	c7 84 01 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+128], 0

; 1398 : 	this->rUser[aIndex].Agility = 0;

  05810	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05813	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05819	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0581c	c7 84 01 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+132], 0

; 1399 : 	this->rUser[aIndex].DoubleDamage = 0;

  05827	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0582a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05830	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05833	c7 84 01 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+136], 0

; 1400 : 	this->rUser[aIndex].FinalSD = 0;

  0583e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05841	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05847	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0584a	c7 84 01 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+140], 0

; 1401 : 	this->rUser[aIndex].FinalDefence = 0;

  05855	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05858	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0585e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05861	c7 84 01 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+144], 0

; 1402 : 	this->rUser[aIndex].ZenDrop = 0;

  0586c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0586f	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05875	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05878	c7 84 01 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+148], 0

; 1403 : 	this->rUser[aIndex].GuildBonus = 0;

  05883	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05886	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0588c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0588f	c7 84 01 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+152], 0

; 1404 : 	this->rUser[aIndex].ReflectDamage = 0;

  0589a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0589d	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  058a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  058a6	c7 84 01 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+156], 0

; 1405 : 	this->rUser[aIndex].ExellentDamageRate = 0;

  058b1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  058b4	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  058ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  058bd	c7 84 01 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+160], 0

; 1406 : 	this->rUser[aIndex].PvPBonusPlus = 0;

  058c8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  058cb	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  058d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  058d4	c7 84 01 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+164], 0

; 1407 : 	this->rUser[aIndex].MinDefence = 0;

  058df	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  058e2	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  058e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  058eb	c7 84 01 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+168], 0

; 1408 : 	this->rUser[aIndex].Experience = 0;

  058f6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  058f9	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  058ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05902	c7 84 01 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+172], 0

; 1409 : 	this->rUser[aIndex].StartSD = 0;

  0590d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05910	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05916	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05919	c7 84 01 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+176], 0

; 1410 : 	this->rUser[aIndex].PartyBonus = 0;

  05924	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05927	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0592d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05930	c7 84 01 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+180], 0

; 1411 : 	this->rUser[aIndex].IceDamage = 0;

  0593b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0593e	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05944	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05947	c7 84 01 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+184], 0

; 1412 : 	this->rUser[aIndex].DistanceAttack = 0;

  05952	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05955	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  0595b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0595e	c7 84 01 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+188], 0

; 1413 : 	this->rUser[aIndex].AttackRate = 0;

  05969	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0596c	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05972	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05975	c7 84 01 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+192], 0

; 1414 : 	this->rUser[aIndex].WeaponBonus = 0;

  05980	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  05983	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  05989	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0598c	c7 84 01 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+196], 0

; 1415 : 	this->rUser[aIndex].ExellentDamage = 0;

  05997	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0599a	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  059a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  059a3	c7 84 01 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+200], 0

; 1416 : 	this->rUser[aIndex].CriticalDamage = 0;

  059ae	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  059b1	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  059b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  059ba	c7 84 01 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+204], 0

; 1417 : 
; 1418 : 	this->rUser[aIndex].rPoints = iTotalRagePoint;

  059c5	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  059c8	69 c0 a0 00 00
	00		 imul	 eax, 160		; 000000a0H
  059ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  059d1	8b 55 f8	 mov	 edx, DWORD PTR _iTotalRagePoint$[ebp]
  059d4	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx

; 1419 : 
; 1420 : 	this->SendUser(aIndex);

  059d8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  059db	50		 push	 eax
  059dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  059df	e8 00 00 00 00	 call	 ?SendUser@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SendUser

; 1421 : 	gObjCalCharacter(aIndex);

  059e4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  059e7	50		 push	 eax
  059e8	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  059ed	83 c4 04	 add	 esp, 4

; 1422 : 
; 1423 : 	MsgOutput(aIndex, "[Rage System] Reset points, total points: %d", iTotalRagePoint);

  059f0	8b 45 f8	 mov	 eax, DWORD PTR _iTotalRagePoint$[ebp]
  059f3	50		 push	 eax
  059f4	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@
  059f9	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  059fc	51		 push	 ecx
  059fd	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  05a02	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@EvoRageRes:

; 1424 : }

  05a05	5f		 pop	 edi
  05a06	5e		 pop	 esi
  05a07	5b		 pop	 ebx
  05a08	8b e5		 mov	 esp, ebp
  05a0a	5d		 pop	 ebp
  05a0b	c2 04 00	 ret	 4
?EvoRageReset@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::EvoRageReset
_TEXT	ENDS
END
