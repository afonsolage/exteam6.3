; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\MagicDamage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMagicDamage@@6B@				; CMagicDamage::`vftable'
PUBLIC	??0CMagicDamage@@QAE@XZ				; CMagicDamage::CMagicDamage
PUBLIC	??_R4CMagicDamage@@6B@				; CMagicDamage::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMagicDamage@@@8			; CMagicDamage `RTTI Type Descriptor'
PUBLIC	??_R3CMagicDamage@@8				; CMagicDamage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMagicDamage@@8				; CMagicDamage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMagicDamage@@8			; CMagicDamage::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMagicDamage@@UAEPAXI@Z:PROC		; CMagicDamage::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMagicDamage@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\magicdamage.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMagicDamage@@8 DD FLAT:??_R0?AVCMagicDamage@@@8 ; CMagicDamage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_R2CMagicDamage@@8
rdata$r	SEGMENT
??_R2CMagicDamage@@8 DD FLAT:??_R1A@?0A@EA@CMagicDamage@@8 ; CMagicDamage::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMagicDamage@@8
rdata$r	SEGMENT
??_R3CMagicDamage@@8 DD 00H				; CMagicDamage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMagicDamage@@@8
_DATA	SEGMENT
??_R0?AVCMagicDamage@@@8 DD FLAT:??_7type_info@@6B@	; CMagicDamage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMagicDamage@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMagicDamage@@6B@
rdata$r	SEGMENT
??_R4CMagicDamage@@6B@ DD 00H				; CMagicDamage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMagicDamage@@@8
	DD	FLAT:??_R3CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_7CMagicDamage@@6B@
CONST	SEGMENT
??_7CMagicDamage@@6B@ DD FLAT:??_R4CMagicDamage@@6B@	; CMagicDamage::`vftable'
	DD	FLAT:??_ECMagicDamage@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMagicDamage@@QAE@XZ PROC				; CMagicDamage::CMagicDamage
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMagicDamage@@6B@

; 18   : 	return;
; 19   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CMagicDamage@@QAE@XZ ENDP				; CMagicDamage::CMagicDamage
_TEXT	ENDS
PUBLIC	??1CMagicDamage@@UAE@XZ				; CMagicDamage::~CMagicDamage
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMagicDamage@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMagicDamage@@UAEPAXI@Z PROC			; CMagicDamage::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMagicDamage@@UAE@XZ	; CMagicDamage::~CMagicDamage
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCMagicDamage@@UAEPAXI@Z ENDP			; CMagicDamage::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMagicDamage@@UAE@XZ PROC				; CMagicDamage::~CMagicDamage
; _this$ = ecx

; 23   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMagicDamage@@6B@

; 24   : 	return;
; 25   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CMagicDamage@@UAE@XZ ENDP				; CMagicDamage::~CMagicDamage
_TEXT	ENDS
PUBLIC	?Init@CMagicDamage@@QAEXXZ			; CMagicDamage::Init
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$229366 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CMagicDamage@@QAEXXZ PROC				; CMagicDamage::Init
; _this$ = ecx

; 29   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 48	 sub	 esp, 72			; 00000048H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	for ( int n=0; n< MAX_SKILL;n++)

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$229366[ebp], 0
  00053	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  00055	8b 45 f8	 mov	 eax, DWORD PTR _n$229366[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	89 45 f8	 mov	 DWORD PTR _n$229366[ebp], eax
$LN3@Init:
  0005e	81 7d f8 bc 02
	00 00		 cmp	 DWORD PTR _n$229366[ebp], 700 ; 000002bcH
  00065	7d 10		 jge	 SHORT $LN4@Init

; 31   : 	{
; 32   : 		this->m_Damage[n] = -1;

  00067	8b 45 f8	 mov	 eax, DWORD PTR _n$229366[ebp]
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	c7 44 81 04 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+4], -1

; 33   : 	}

  00075	eb de		 jmp	 SHORT $LN2@Init
$LN4@Init:

; 34   : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?Init@CMagicDamage@@QAEXXZ ENDP				; CMagicDamage::Init
_TEXT	ENDS
PUBLIC	?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z		; CMagicDamage::SetML
PUBLIC	?SetEx@CMagicDamage@@AAEXHHHHPAH@Z		; CMagicDamage::SetEx
PUBLIC	?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z	; CMagicDamage::Set
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogSkillList@CMagicDamage@@QAEXPAD@Z		; CMagicDamage::LogSkillList
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	?Set@CMagicInf@@QAEHHE@Z:PROC			; CMagicInf::Set
EXTRN	?DefMagicInf@@3PAVCMagicInf@@A:BYTE		; DefMagicInf
EXTRN	_strcpy:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv500 = -260						; size = 4
tv443 = -260						; size = 4
tv434 = -260						; size = 4
tv425 = -260						; size = 4
tv416 = -260						; size = 4
tv407 = -260						; size = 4
tv398 = -260						; size = 4
tv389 = -260						; size = 4
tv498 = -256						; size = 4
tv441 = -256						; size = 4
tv432 = -256						; size = 4
tv423 = -256						; size = 4
tv414 = -256						; size = 4
tv405 = -256						; size = 4
tv396 = -256						; size = 4
tv387 = -256						; size = 4
tv495 = -250						; size = 2
tv438 = -250						; size = 2
tv429 = -250						; size = 2
tv420 = -250						; size = 2
tv411 = -250						; size = 2
tv402 = -250						; size = 2
tv393 = -250						; size = 2
tv384 = -250						; size = 2
_iUseType$ = -184					; size = 4
_IconNumber$ = -177					; size = 1
_rDexterity$ = -176					; size = 2
_rStrength$ = -172					; size = 2
_Duration$ = -168					; size = 2
_rShield$ = -164					; size = 2
_rAG$ = -160						; size = 2
_rMLPoint$ = -156					; size = 2
_SkillGroup$ = -152					; size = 2
_SkillRank$ = -148					; size = 2
_RequireClass$ = -144					; size = 7
_RequireStatus$ = -136					; size = 12
_iKillCount$ = -124					; size = 4
_iSkillBrand$ = -120					; size = 4
_iSkillUseType$ = -116					; size = 4
_attr$ = -112						; size = 4
_rDelay$ = -108						; size = 4
_rLeadership$ = -104					; size = 4
_iSkillType$ = -100					; size = 4
_rEnergy$ = -96						; size = 4
_dis$ = -92						; size = 4
_bp$ = -88						; size = 4
_mana$ = -84						; size = 4
_damage$ = -80						; size = 4
_requireLevel$ = -76					; size = 4
_name$ = -72						; size = 50
_number$ = -20						; size = 4
_n$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LogSkillList@CMagicDamage@@QAEXPAD@Z PROC		; CMagicDamage::LogSkillList
; _this$ = ecx

; 38   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0008e	33 c5		 xor	 eax, ebp
  00090	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00093	53		 push	 ebx
  00094	56		 push	 esi
  00095	57		 push	 edi
  00096	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 	this->Init();

  00099	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?Init@CMagicDamage@@QAEXXZ ; CMagicDamage::Init

; 40   : 
; 41   : 
; 42   : 	SMDFile = fopen(filename, "r");

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000a6	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _fopen
  000af	83 c4 08	 add	 esp, 8
  000b2	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 43   : 
; 44   : 	if ( SMDFile == NULL )

  000b7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  000be	75 21		 jne	 SHORT $LN5@LogSkillLi

; 45   : 	{
; 46   : 		MsgBox(lMsg.Get(MSGGET(1, 199)), filename);

  000c0	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000c3	50		 push	 eax
  000c4	68 c7 01 00 00	 push	 455			; 000001c7H
  000c9	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000ce	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000d9	83 c4 08	 add	 esp, 8

; 47   : 		return;

  000dc	e9 d4 05 00 00	 jmp	 $LN6@LogSkillLi
$LN5@LogSkillLi:

; 48   : 	}
; 49   : 
; 50   : 	int Token;
; 51   : 	int n=0;

  000e1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 52   : 	int number;
; 53   : 	char name[50];
; 54   : 	int requireLevel;
; 55   : 	int damage;
; 56   : 	int mana;
; 57   : 	int bp=0;

  000e8	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _bp$[ebp], 0

; 58   : 	int dis;
; 59   : 	int rEnergy;
; 60   : 	int iSkillType;
; 61   : 	int rLeadership;
; 62   : 	int rDelay;
; 63   : 	int attr;
; 64   : 	int iSkillUseType;
; 65   : 	int iSkillBrand;
; 66   : 	int iKillCount;
; 67   : 	int RequireStatus[MAX_REQ_SKILL_STATUS] = {0};

  000ef	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _RequireStatus$[ebp], 0
  000f9	33 c0		 xor	 eax, eax
  000fb	89 85 7c ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+4], eax
  00101	89 45 80	 mov	 DWORD PTR _RequireStatus$[ebp+8], eax
$LN4@LogSkillLi:

; 68   : 	BYTE RequireClass[MAX_TYPE_PLAYER];
; 69   : 	//Season 3 add-on
; 70   : 	short SkillRank;
; 71   : 	short SkillGroup;
; 72   : 	short rMLPoint;
; 73   : 	short rAG;
; 74   : 	short rShield;
; 75   : 	short Duration;
; 76   : 	short rStrength;
; 77   : 	short rDexterity;
; 78   : 	BYTE IconNumber;
; 79   : 	int iUseType;
; 80   : 
; 81   : 	while ( true )

  00104	b8 01 00 00 00	 mov	 eax, 1
  00109	85 c0		 test	 eax, eax
  0010b	0f 84 79 05 00
	00		 je	 $LN3@LogSkillLi

; 82   : 	{
; 83   : 		Token = GetToken();

  00111	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00116	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 84   : 
; 85   : 		if ( Token == 2 )

  00119	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  0011d	75 05		 jne	 SHORT $LN2@LogSkillLi

; 86   : 		{
; 87   : 			break;

  0011f	e9 66 05 00 00	 jmp	 $LN3@LogSkillLi
$LN2@LogSkillLi:

; 88   : 		}
; 89   : 
; 90   : 		if ( Token == 1 )

  00124	83 7d f4 01	 cmp	 DWORD PTR _Token$[ebp], 1
  00128	0f 85 57 05 00
	00		 jne	 $LN1@LogSkillLi

; 91   : 		{
; 92   : 			number = (int)TokenNumber;

  0012e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00134	e8 00 00 00 00	 call	 __ftol2_sse
  00139	89 45 ec	 mov	 DWORD PTR _number$[ebp], eax

; 93   : 
; 94   : 			Token = GetToken();

  0013c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00141	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 95   : 			strcpy(name, TokenString);

  00144	68 00 00 00 00	 push	 OFFSET _TokenString
  00149	8d 45 b8	 lea	 eax, DWORD PTR _name$[ebp]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _strcpy
  00152	83 c4 08	 add	 esp, 8

; 96   : 
; 97   : 			Token = GetToken();

  00155	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0015a	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 98   : 			requireLevel = (int)TokenNumber;

  0015d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00163	e8 00 00 00 00	 call	 __ftol2_sse
  00168	89 45 b4	 mov	 DWORD PTR _requireLevel$[ebp], eax

; 99   : 
; 100  : 			Token = GetToken();

  0016b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00170	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 101  : 			damage = (int)TokenNumber;

  00173	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00179	e8 00 00 00 00	 call	 __ftol2_sse
  0017e	89 45 b0	 mov	 DWORD PTR _damage$[ebp], eax

; 102  : 
; 103  : 			Token = GetToken();

  00181	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00186	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 104  : 			mana = (int)TokenNumber;

  00189	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018f	e8 00 00 00 00	 call	 __ftol2_sse
  00194	89 45 ac	 mov	 DWORD PTR _mana$[ebp], eax

; 105  : 
; 106  : 			Token = GetToken();

  00197	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0019c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 107  : 			bp = (int)TokenNumber;

  0019f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a5	e8 00 00 00 00	 call	 __ftol2_sse
  001aa	89 45 a8	 mov	 DWORD PTR _bp$[ebp], eax

; 108  : 
; 109  : 			Token = GetToken();

  001ad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001b2	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 110  : 			dis = (int)TokenNumber;

  001b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001bb	e8 00 00 00 00	 call	 __ftol2_sse
  001c0	89 45 a4	 mov	 DWORD PTR _dis$[ebp], eax

; 111  : 
; 112  : 			Token = GetToken();

  001c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001c8	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 113  : 			rDelay = (int)TokenNumber;

  001cb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001d1	e8 00 00 00 00	 call	 __ftol2_sse
  001d6	89 45 94	 mov	 DWORD PTR _rDelay$[ebp], eax

; 114  : 
; 115  : 			Token = GetToken();

  001d9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001de	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 116  : 			rEnergy = (int)TokenNumber;

  001e1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e7	e8 00 00 00 00	 call	 __ftol2_sse
  001ec	89 45 a0	 mov	 DWORD PTR _rEnergy$[ebp], eax

; 117  : 
; 118  : 			Token = GetToken();

  001ef	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001f4	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 119  : 			rLeadership = (int)TokenNumber;

  001f7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001fd	e8 00 00 00 00	 call	 __ftol2_sse
  00202	89 45 98	 mov	 DWORD PTR _rLeadership$[ebp], eax

; 120  : 
; 121  : 			Token = GetToken();

  00205	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0020a	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 122  : 			attr = (int)TokenNumber;

  0020d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00213	e8 00 00 00 00	 call	 __ftol2_sse
  00218	89 45 90	 mov	 DWORD PTR _attr$[ebp], eax

; 123  : 
; 124  : 			Token = GetToken();

  0021b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00220	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 125  : 			iSkillType = (int)TokenNumber;

  00223	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00229	e8 00 00 00 00	 call	 __ftol2_sse
  0022e	89 45 9c	 mov	 DWORD PTR _iSkillType$[ebp], eax

; 126  : 
; 127  : 			Token = GetToken();

  00231	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00236	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 128  : 			iSkillUseType = (int)TokenNumber;

  00239	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023f	e8 00 00 00 00	 call	 __ftol2_sse
  00244	89 45 8c	 mov	 DWORD PTR _iSkillUseType$[ebp], eax

; 129  : 
; 130  : 			Token = GetToken();

  00247	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0024c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 131  : 			iSkillBrand = (int)TokenNumber;

  0024f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00255	e8 00 00 00 00	 call	 __ftol2_sse
  0025a	89 45 88	 mov	 DWORD PTR _iSkillBrand$[ebp], eax

; 132  : 
; 133  : 			Token = GetToken();

  0025d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00262	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 134  : 			iKillCount = (int)TokenNumber;

  00265	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026b	e8 00 00 00 00	 call	 __ftol2_sse
  00270	89 45 84	 mov	 DWORD PTR _iKillCount$[ebp], eax

; 135  : 
; 136  : 			Token = GetToken();

  00273	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00278	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 137  : 			RequireStatus[0] = (int)TokenNumber;

  0027b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00281	e8 00 00 00 00	 call	 __ftol2_sse
  00286	89 85 78 ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp], eax

; 138  : 
; 139  : 			Token = GetToken();

  0028c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00291	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 140  : 			RequireStatus[1] = (int)TokenNumber;

  00294	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029a	e8 00 00 00 00	 call	 __ftol2_sse
  0029f	89 85 7c ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+4], eax

; 141  : 
; 142  : 			Token = GetToken();

  002a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002aa	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 143  : 			RequireStatus[2] = (int)TokenNumber;

  002ad	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b3	e8 00 00 00 00	 call	 __ftol2_sse
  002b8	89 45 80	 mov	 DWORD PTR _RequireStatus$[ebp+8], eax

; 144  : 
; 145  : 			Token = GetToken();

  002bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002c0	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 146  : 			RequireClass[0] = (BYTE)TokenNumber;

  002c3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c9	d9 bd 06 ff ff
	ff		 fnstcw	 WORD PTR tv384[ebp]
  002cf	0f b7 85 06 ff
	ff ff		 movzx	 eax, WORD PTR tv384[ebp]
  002d6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002db	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv387[ebp], eax
  002e1	d9 ad 00 ff ff
	ff		 fldcw	 WORD PTR tv387[ebp]
  002e7	db 9d fc fe ff
	ff		 fistp	 DWORD PTR tv389[ebp]
  002ed	d9 ad 06 ff ff
	ff		 fldcw	 WORD PTR tv384[ebp]
  002f3	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR tv389[ebp]
  002f9	88 85 70 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp], al

; 147  : 
; 148  : 			Token = GetToken();

  002ff	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00304	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 149  : 			RequireClass[1] = (BYTE)TokenNumber;

  00307	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0030d	d9 bd 06 ff ff
	ff		 fnstcw	 WORD PTR tv393[ebp]
  00313	0f b7 85 06 ff
	ff ff		 movzx	 eax, WORD PTR tv393[ebp]
  0031a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0031f	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv396[ebp], eax
  00325	d9 ad 00 ff ff
	ff		 fldcw	 WORD PTR tv396[ebp]
  0032b	db 9d fc fe ff
	ff		 fistp	 DWORD PTR tv398[ebp]
  00331	d9 ad 06 ff ff
	ff		 fldcw	 WORD PTR tv393[ebp]
  00337	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR tv398[ebp]
  0033d	88 85 71 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+1], al

; 150  : 
; 151  : 			Token = GetToken();

  00343	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00348	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 152  : 			RequireClass[2] = (BYTE)TokenNumber;

  0034b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00351	d9 bd 06 ff ff
	ff		 fnstcw	 WORD PTR tv402[ebp]
  00357	0f b7 85 06 ff
	ff ff		 movzx	 eax, WORD PTR tv402[ebp]
  0035e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00363	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv405[ebp], eax
  00369	d9 ad 00 ff ff
	ff		 fldcw	 WORD PTR tv405[ebp]
  0036f	db 9d fc fe ff
	ff		 fistp	 DWORD PTR tv407[ebp]
  00375	d9 ad 06 ff ff
	ff		 fldcw	 WORD PTR tv402[ebp]
  0037b	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR tv407[ebp]
  00381	88 85 72 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+2], al

; 153  : 
; 154  : 			Token = GetToken();

  00387	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0038c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 155  : 			RequireClass[3] = (BYTE)TokenNumber;

  0038f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00395	d9 bd 06 ff ff
	ff		 fnstcw	 WORD PTR tv411[ebp]
  0039b	0f b7 85 06 ff
	ff ff		 movzx	 eax, WORD PTR tv411[ebp]
  003a2	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003a7	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv414[ebp], eax
  003ad	d9 ad 00 ff ff
	ff		 fldcw	 WORD PTR tv414[ebp]
  003b3	db 9d fc fe ff
	ff		 fistp	 DWORD PTR tv416[ebp]
  003b9	d9 ad 06 ff ff
	ff		 fldcw	 WORD PTR tv411[ebp]
  003bf	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR tv416[ebp]
  003c5	88 85 73 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+3], al

; 156  : 
; 157  : 			Token = GetToken();

  003cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003d0	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 158  : 			RequireClass[4] = (BYTE)TokenNumber;

  003d3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003d9	d9 bd 06 ff ff
	ff		 fnstcw	 WORD PTR tv420[ebp]
  003df	0f b7 85 06 ff
	ff ff		 movzx	 eax, WORD PTR tv420[ebp]
  003e6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003eb	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv423[ebp], eax
  003f1	d9 ad 00 ff ff
	ff		 fldcw	 WORD PTR tv423[ebp]
  003f7	db 9d fc fe ff
	ff		 fistp	 DWORD PTR tv425[ebp]
  003fd	d9 ad 06 ff ff
	ff		 fldcw	 WORD PTR tv420[ebp]
  00403	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR tv425[ebp]
  00409	88 85 74 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+4], al

; 159  : 
; 160  : 			///////////////Summoner
; 161  : 			Token = GetToken();

  0040f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00414	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 162  : 			RequireClass[5] = (BYTE)TokenNumber;

  00417	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0041d	d9 bd 06 ff ff
	ff		 fnstcw	 WORD PTR tv429[ebp]
  00423	0f b7 85 06 ff
	ff ff		 movzx	 eax, WORD PTR tv429[ebp]
  0042a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0042f	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv432[ebp], eax
  00435	d9 ad 00 ff ff
	ff		 fldcw	 WORD PTR tv432[ebp]
  0043b	db 9d fc fe ff
	ff		 fistp	 DWORD PTR tv434[ebp]
  00441	d9 ad 06 ff ff
	ff		 fldcw	 WORD PTR tv429[ebp]
  00447	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR tv434[ebp]
  0044d	88 85 75 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+5], al

; 163  : 			////////////////////
; 164  : 
; 165  : 			Token = GetToken();

  00453	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00458	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 166  : 			RequireClass[6] = TokenNumber;

  0045b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00461	d9 bd 06 ff ff
	ff		 fnstcw	 WORD PTR tv438[ebp]
  00467	0f b7 85 06 ff
	ff ff		 movzx	 eax, WORD PTR tv438[ebp]
  0046e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00473	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv441[ebp], eax
  00479	d9 ad 00 ff ff
	ff		 fldcw	 WORD PTR tv441[ebp]
  0047f	db 9d fc fe ff
	ff		 fistp	 DWORD PTR tv443[ebp]
  00485	d9 ad 06 ff ff
	ff		 fldcw	 WORD PTR tv438[ebp]
  0048b	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR tv443[ebp]
  00491	88 85 76 ff ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+6], al

; 167  : 
; 168  : 			Token = GetToken();

  00497	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0049c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 169  : 			SkillRank = (short)TokenNumber;

  0049f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004a5	e8 00 00 00 00	 call	 __ftol2_sse
  004aa	66 89 85 6c ff
	ff ff		 mov	 WORD PTR _SkillRank$[ebp], ax

; 170  : 
; 171  : 			Token = GetToken();

  004b1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004b6	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 172  : 			SkillGroup = (short)TokenNumber;

  004b9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004bf	e8 00 00 00 00	 call	 __ftol2_sse
  004c4	66 89 85 68 ff
	ff ff		 mov	 WORD PTR _SkillGroup$[ebp], ax

; 173  : 
; 174  : 			Token = GetToken();

  004cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004d0	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 175  : 			rMLPoint = (short)TokenNumber;

  004d3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004d9	e8 00 00 00 00	 call	 __ftol2_sse
  004de	66 89 85 64 ff
	ff ff		 mov	 WORD PTR _rMLPoint$[ebp], ax

; 176  : 
; 177  : 			Token = GetToken();

  004e5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004ea	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 178  : 			rAG = (short)TokenNumber;

  004ed	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004f3	e8 00 00 00 00	 call	 __ftol2_sse
  004f8	66 89 85 60 ff
	ff ff		 mov	 WORD PTR _rAG$[ebp], ax

; 179  : 
; 180  : 			Token = GetToken();

  004ff	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00504	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 181  : 			rShield = (short)TokenNumber;

  00507	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0050d	e8 00 00 00 00	 call	 __ftol2_sse
  00512	66 89 85 5c ff
	ff ff		 mov	 WORD PTR _rShield$[ebp], ax

; 182  : 
; 183  : 			Token = GetToken();

  00519	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0051e	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 184  : 			Duration = (short)TokenNumber;

  00521	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00527	e8 00 00 00 00	 call	 __ftol2_sse
  0052c	66 89 85 58 ff
	ff ff		 mov	 WORD PTR _Duration$[ebp], ax

; 185  : 
; 186  : 			Token = GetToken();

  00533	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00538	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 187  : 			rStrength = (short)TokenNumber;

  0053b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00541	e8 00 00 00 00	 call	 __ftol2_sse
  00546	66 89 85 54 ff
	ff ff		 mov	 WORD PTR _rStrength$[ebp], ax

; 188  : 
; 189  : 			Token = GetToken();

  0054d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00552	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 190  : 			rDexterity = (short)TokenNumber;

  00555	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0055b	e8 00 00 00 00	 call	 __ftol2_sse
  00560	66 89 85 50 ff
	ff ff		 mov	 WORD PTR _rDexterity$[ebp], ax

; 191  : 
; 192  : 			Token = GetToken();

  00567	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0056c	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 193  : 			IconNumber = (BYTE)TokenNumber;

  0056f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00575	d9 bd 06 ff ff
	ff		 fnstcw	 WORD PTR tv495[ebp]
  0057b	0f b7 85 06 ff
	ff ff		 movzx	 eax, WORD PTR tv495[ebp]
  00582	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00587	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv498[ebp], eax
  0058d	d9 ad 00 ff ff
	ff		 fldcw	 WORD PTR tv498[ebp]
  00593	db 9d fc fe ff
	ff		 fistp	 DWORD PTR tv500[ebp]
  00599	d9 ad 06 ff ff
	ff		 fldcw	 WORD PTR tv495[ebp]
  0059f	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR tv500[ebp]
  005a5	88 85 4f ff ff
	ff		 mov	 BYTE PTR _IconNumber$[ebp], al

; 194  : 
; 195  : 			Token = GetToken();

  005ab	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  005b0	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 196  : 			iUseType = (int)TokenNumber;

  005b3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005b9	e8 00 00 00 00	 call	 __ftol2_sse
  005be	89 85 48 ff ff
	ff		 mov	 DWORD PTR _iUseType$[ebp], eax

; 197  : 
; 198  : 			this->Set(name, number,damage, requireLevel, mana, bp, dis, attr, iSkillType, RequireClass, rEnergy, rLeadership, rDelay);

  005c4	8b 45 94	 mov	 eax, DWORD PTR _rDelay$[ebp]
  005c7	50		 push	 eax
  005c8	8b 4d 98	 mov	 ecx, DWORD PTR _rLeadership$[ebp]
  005cb	51		 push	 ecx
  005cc	8b 55 a0	 mov	 edx, DWORD PTR _rEnergy$[ebp]
  005cf	52		 push	 edx
  005d0	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _RequireClass$[ebp]
  005d6	50		 push	 eax
  005d7	8b 4d 9c	 mov	 ecx, DWORD PTR _iSkillType$[ebp]
  005da	51		 push	 ecx
  005db	8b 55 90	 mov	 edx, DWORD PTR _attr$[ebp]
  005de	52		 push	 edx
  005df	8b 45 a4	 mov	 eax, DWORD PTR _dis$[ebp]
  005e2	50		 push	 eax
  005e3	8b 4d a8	 mov	 ecx, DWORD PTR _bp$[ebp]
  005e6	51		 push	 ecx
  005e7	8b 55 ac	 mov	 edx, DWORD PTR _mana$[ebp]
  005ea	52		 push	 edx
  005eb	8b 45 b4	 mov	 eax, DWORD PTR _requireLevel$[ebp]
  005ee	50		 push	 eax
  005ef	8b 4d b0	 mov	 ecx, DWORD PTR _damage$[ebp]
  005f2	51		 push	 ecx
  005f3	8b 55 ec	 mov	 edx, DWORD PTR _number$[ebp]
  005f6	52		 push	 edx
  005f7	8d 45 b8	 lea	 eax, DWORD PTR _name$[ebp]
  005fa	50		 push	 eax
  005fb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005fe	e8 00 00 00 00	 call	 ?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z ; CMagicDamage::Set

; 199  : 			this->SetEx(number, iSkillUseType, iSkillBrand, iKillCount, RequireStatus);

  00603	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _RequireStatus$[ebp]
  00609	50		 push	 eax
  0060a	8b 4d 84	 mov	 ecx, DWORD PTR _iKillCount$[ebp]
  0060d	51		 push	 ecx
  0060e	8b 55 88	 mov	 edx, DWORD PTR _iSkillBrand$[ebp]
  00611	52		 push	 edx
  00612	8b 45 8c	 mov	 eax, DWORD PTR _iSkillUseType$[ebp]
  00615	50		 push	 eax
  00616	8b 4d ec	 mov	 ecx, DWORD PTR _number$[ebp]
  00619	51		 push	 ecx
  0061a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0061d	e8 00 00 00 00	 call	 ?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ; CMagicDamage::SetEx

; 200  : 			this->SetML(number, SkillRank, SkillGroup, rMLPoint, rAG, rShield, Duration, rStrength, rDexterity);

  00622	0f bf 85 50 ff
	ff ff		 movsx	 eax, WORD PTR _rDexterity$[ebp]
  00629	50		 push	 eax
  0062a	0f bf 8d 54 ff
	ff ff		 movsx	 ecx, WORD PTR _rStrength$[ebp]
  00631	51		 push	 ecx
  00632	0f b7 95 58 ff
	ff ff		 movzx	 edx, WORD PTR _Duration$[ebp]
  00639	52		 push	 edx
  0063a	0f bf 85 5c ff
	ff ff		 movsx	 eax, WORD PTR _rShield$[ebp]
  00641	50		 push	 eax
  00642	0f bf 8d 60 ff
	ff ff		 movsx	 ecx, WORD PTR _rAG$[ebp]
  00649	51		 push	 ecx
  0064a	0f bf 95 64 ff
	ff ff		 movsx	 edx, WORD PTR _rMLPoint$[ebp]
  00651	52		 push	 edx
  00652	0f bf 85 68 ff
	ff ff		 movsx	 eax, WORD PTR _SkillGroup$[ebp]
  00659	50		 push	 eax
  0065a	0f bf 8d 6c ff
	ff ff		 movsx	 ecx, WORD PTR _SkillRank$[ebp]
  00661	51		 push	 ecx
  00662	8b 55 ec	 mov	 edx, DWORD PTR _number$[ebp]
  00665	52		 push	 edx
  00666	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00669	e8 00 00 00 00	 call	 ?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z ; CMagicDamage::SetML

; 201  : 			DefMagicInf[number].Set(number, 0);

  0066e	6a 00		 push	 0
  00670	8b 45 ec	 mov	 eax, DWORD PTR _number$[ebp]
  00673	50		 push	 eax
  00674	8b 4d ec	 mov	 ecx, DWORD PTR _number$[ebp]
  00677	6b c9 18	 imul	 ecx, 24			; 00000018H
  0067a	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  00680	e8 00 00 00 00	 call	 ?Set@CMagicInf@@QAEHHE@Z ; CMagicInf::Set
$LN1@LogSkillLi:

; 202  : 		}
; 203  : 	}

  00685	e9 7a fa ff ff	 jmp	 $LN4@LogSkillLi
$LN3@LogSkillLi:

; 204  : 
; 205  : 	fclose(SMDFile);

  0068a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0068f	50		 push	 eax
  00690	e8 00 00 00 00	 call	 _fclose
  00695	83 c4 04	 add	 esp, 4

; 206  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), filename);

  00698	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0069b	50		 push	 eax
  0069c	68 c8 01 00 00	 push	 456			; 000001c8H
  006a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  006a6	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  006ab	50		 push	 eax
  006ac	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  006b2	83 c4 08	 add	 esp, 8
$LN6@LogSkillLi:

; 207  : }

  006b5	5f		 pop	 edi
  006b6	5e		 pop	 esi
  006b7	5b		 pop	 ebx
  006b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006bb	33 cd		 xor	 ecx, ebp
  006bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006c2	8b e5		 mov	 esp, ebp
  006c4	5d		 pop	 ebp
  006c5	c2 04 00	 ret	 4
?LogSkillList@CMagicDamage@@QAEXPAD@Z ENDP		; CMagicDamage::LogSkillList
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  006d0	55		 push	 ebp
  006d1	8b ec		 mov	 ebp, esp
  006d3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  006d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  006de	33 c5		 xor	 eax, ebp
  006e0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  006e3	53		 push	 ebx
  006e4	56		 push	 esi
  006e5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  006e6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  006ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006f2	50		 push	 eax
  006f3	e8 00 00 00 00	 call	 _fgetc
  006f8	83 c4 04	 add	 esp, 4
  006fb	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  006fe	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00702	83 f9 ff	 cmp	 ecx, -1
  00705	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00707	b8 02 00 00 00	 mov	 eax, 2
  0070c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00711	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00713	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00717	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0071a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0071c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00721	50		 push	 eax
  00722	e8 00 00 00 00	 call	 _fgetc
  00727	83 c4 04	 add	 esp, 4
  0072a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0072d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00731	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00734	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00736	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0073a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0073d	74 1c		 je	 SHORT $LN23@GetToken
  0073f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00743	83 f8 ff	 cmp	 eax, -1
  00746	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00748	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0074d	50		 push	 eax
  0074e	e8 00 00 00 00	 call	 _fgetc
  00753	83 c4 04	 add	 esp, 4
  00756	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00759	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0075b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0075f	83 f8 ff	 cmp	 eax, -1
  00762	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00764	b8 02 00 00 00	 mov	 eax, 2
  00769	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0076e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00772	50		 push	 eax
  00773	e8 00 00 00 00	 call	 _isspace
  00778	83 c4 04	 add	 esp, 4
  0077b	85 c0		 test	 eax, eax
  0077d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00783	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00787	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0078d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00793	83 e9 22	 sub	 ecx, 34			; 00000022H
  00796	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0079c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  007a3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  007a9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  007af	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  007b6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  007bd	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  007c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007cc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  007d1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  007d6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  007e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007e5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  007ea	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  007ef	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  007f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007fe	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00803	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00808	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00812	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00817	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0081c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00821	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0082b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00830	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00835	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0083a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0083f	50		 push	 eax
  00840	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00844	51		 push	 ecx
  00845	e8 00 00 00 00	 call	 _ungetc
  0084a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0084d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00850	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00853	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00858	50		 push	 eax
  00859	e8 00 00 00 00	 call	 _getc
  0085e	83 c4 04	 add	 esp, 4
  00861	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00864	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00868	83 f9 ff	 cmp	 ecx, -1
  0086b	74 36		 je	 SHORT $LN12@GetToken
  0086d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00871	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00874	74 1a		 je	 SHORT $LN11@GetToken
  00876	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0087a	50		 push	 eax
  0087b	e8 00 00 00 00	 call	 _isdigit
  00880	83 c4 04	 add	 esp, 4
  00883	85 c0		 test	 eax, eax
  00885	75 09		 jne	 SHORT $LN11@GetToken
  00887	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0088b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0088e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00890	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00893	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00896	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00898	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0089b	83 c0 01	 add	 eax, 1
  0089e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  008a1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  008a3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  008a9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  008ac	50		 push	 eax
  008ad	e8 00 00 00 00	 call	 _atof
  008b2	83 c4 04	 add	 esp, 4
  008b5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  008bb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  008c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008ca	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  008cf	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  008d4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  008db	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008e0	50		 push	 eax
  008e1	e8 00 00 00 00	 call	 _getc
  008e6	83 c4 04	 add	 esp, 4
  008e9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  008ec	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008f0	83 f9 ff	 cmp	 ecx, -1
  008f3	74 1c		 je	 SHORT $LN8@GetToken
  008f5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008f9	83 f8 22	 cmp	 eax, 34			; 00000022H
  008fc	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  008fe	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00901	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00904	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00906	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00909	83 c0 01	 add	 eax, 1
  0090c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0090f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00911	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00915	83 f8 22	 cmp	 eax, 34			; 00000022H
  00918	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0091a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0091f	50		 push	 eax
  00920	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00924	51		 push	 ecx
  00925	e8 00 00 00 00	 call	 _ungetc
  0092a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0092d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00930	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00933	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0093d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00942	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00947	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0094c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00950	50		 push	 eax
  00951	e8 00 00 00 00	 call	 _isalpha
  00956	83 c4 04	 add	 esp, 4
  00959	85 c0		 test	 eax, eax
  0095b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00961	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00968	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0096b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0096e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00970	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00973	83 c0 01	 add	 eax, 1
  00976	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00979	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0097e	50		 push	 eax
  0097f	e8 00 00 00 00	 call	 _getc
  00984	83 c4 04	 add	 esp, 4
  00987	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0098a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0098e	83 f9 ff	 cmp	 ecx, -1
  00991	74 36		 je	 SHORT $LN3@GetToken
  00993	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00997	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0099a	74 1a		 je	 SHORT $LN2@GetToken
  0099c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009a0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  009a3	74 11		 je	 SHORT $LN2@GetToken
  009a5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  009a9	50		 push	 eax
  009aa	e8 00 00 00 00	 call	 _isalnum
  009af	83 c4 04	 add	 esp, 4
  009b2	85 c0		 test	 eax, eax
  009b4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  009b6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  009b9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  009bc	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  009be	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  009c1	83 c0 01	 add	 eax, 1
  009c4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  009c7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  009c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  009ce	50		 push	 eax
  009cf	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  009d3	51		 push	 ecx
  009d4	e8 00 00 00 00	 call	 _ungetc
  009d9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  009dc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  009df	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  009e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  009ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  009f1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  009f3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  009f5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  009ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00a04	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00a06	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00a08	5f		 pop	 edi
  00a09	5e		 pop	 esi
  00a0a	5b		 pop	 ebx
  00a0b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a0e	33 cd		 xor	 ecx, ebp
  00a10	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a15	8b e5		 mov	 esp, ebp
  00a17	5d		 pop	 ebp
  00a18	c3		 ret	 0
  00a19	8d 49 00	 npad	 3
$LN35@GetToken:
  00a1c	00 00 00 00	 DD	 $LN10@GetToken
  00a20	00 00 00 00	 DD	 $LN19@GetToken
  00a24	00 00 00 00	 DD	 $LN17@GetToken
  00a28	00 00 00 00	 DD	 $LN14@GetToken
  00a2c	00 00 00 00	 DD	 $LN18@GetToken
  00a30	00 00 00 00	 DD	 $LN16@GetToken
  00a34	00 00 00 00	 DD	 $LN15@GetToken
  00a38	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  00a3c	00		 DB	 0
  00a3d	01		 DB	 1
  00a3e	07		 DB	 7
  00a3f	07		 DB	 7
  00a40	07		 DB	 7
  00a41	07		 DB	 7
  00a42	07		 DB	 7
  00a43	07		 DB	 7
  00a44	07		 DB	 7
  00a45	07		 DB	 7
  00a46	02		 DB	 2
  00a47	03		 DB	 3
  00a48	03		 DB	 3
  00a49	07		 DB	 7
  00a4a	03		 DB	 3
  00a4b	03		 DB	 3
  00a4c	03		 DB	 3
  00a4d	03		 DB	 3
  00a4e	03		 DB	 3
  00a4f	03		 DB	 3
  00a50	03		 DB	 3
  00a51	03		 DB	 3
  00a52	03		 DB	 3
  00a53	03		 DB	 3
  00a54	07		 DB	 7
  00a55	04		 DB	 4
  00a56	07		 DB	 7
  00a57	07		 DB	 7
  00a58	07		 DB	 7
  00a59	07		 DB	 7
  00a5a	07		 DB	 7
  00a5b	07		 DB	 7
  00a5c	07		 DB	 7
  00a5d	07		 DB	 7
  00a5e	07		 DB	 7
  00a5f	07		 DB	 7
  00a60	07		 DB	 7
  00a61	07		 DB	 7
  00a62	07		 DB	 7
  00a63	07		 DB	 7
  00a64	07		 DB	 7
  00a65	07		 DB	 7
  00a66	07		 DB	 7
  00a67	07		 DB	 7
  00a68	07		 DB	 7
  00a69	07		 DB	 7
  00a6a	07		 DB	 7
  00a6b	07		 DB	 7
  00a6c	07		 DB	 7
  00a6d	07		 DB	 7
  00a6e	07		 DB	 7
  00a6f	07		 DB	 7
  00a70	07		 DB	 7
  00a71	07		 DB	 7
  00a72	07		 DB	 7
  00a73	07		 DB	 7
  00a74	07		 DB	 7
  00a75	07		 DB	 7
  00a76	07		 DB	 7
  00a77	07		 DB	 7
  00a78	07		 DB	 7
  00a79	07		 DB	 7
  00a7a	07		 DB	 7
  00a7b	07		 DB	 7
  00a7c	07		 DB	 7
  00a7d	07		 DB	 7
  00a7e	07		 DB	 7
  00a7f	07		 DB	 7
  00a80	07		 DB	 7
  00a81	07		 DB	 7
  00a82	07		 DB	 7
  00a83	07		 DB	 7
  00a84	07		 DB	 7
  00a85	07		 DB	 7
  00a86	07		 DB	 7
  00a87	07		 DB	 7
  00a88	07		 DB	 7
  00a89	07		 DB	 7
  00a8a	07		 DB	 7
  00a8b	07		 DB	 7
  00a8c	07		 DB	 7
  00a8d	07		 DB	 7
  00a8e	07		 DB	 7
  00a8f	07		 DB	 7
  00a90	07		 DB	 7
  00a91	07		 DB	 7
  00a92	07		 DB	 7
  00a93	07		 DB	 7
  00a94	07		 DB	 7
  00a95	05		 DB	 5
  00a96	07		 DB	 7
  00a97	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LogSkillNameList@CMagicDamage@@QAEXPAD@Z	; CMagicDamage::LogSkillNameList
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\magicdamage.cpp
_TEXT	SEGMENT
_name$ = -72						; size = 50
_number$ = -20						; size = 4
_n$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LogSkillNameList@CMagicDamage@@QAEXPAD@Z PROC		; CMagicDamage::LogSkillNameList
; _this$ = ecx

; 211  : {

  00aa0	55		 push	 ebp
  00aa1	8b ec		 mov	 ebp, esp
  00aa3	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00aa9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00aae	33 c5		 xor	 eax, ebp
  00ab0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00ab3	53		 push	 ebx
  00ab4	56		 push	 esi
  00ab5	57		 push	 edi
  00ab6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 212  : 	int Token;
; 213  : 	int n;
; 214  : 	int number;
; 215  : 	char name[50];
; 216  : 	
; 217  : 	SMDFile = fopen(filename, "r");

  00ab9	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00abe	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00ac1	50		 push	 eax
  00ac2	e8 00 00 00 00	 call	 _fopen
  00ac7	83 c4 08	 add	 esp, 8
  00aca	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 218  : 
; 219  : 	if ( SMDFile == NULL )

  00acf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00ad6	75 21		 jne	 SHORT $LN5@LogSkillNa

; 220  : 	{
; 221  : 		MsgBox(lMsg.Get(MSGGET(1, 199)), filename);

  00ad8	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00adb	50		 push	 eax
  00adc	68 c7 01 00 00	 push	 455			; 000001c7H
  00ae1	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00ae6	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00aeb	50		 push	 eax
  00aec	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00af1	83 c4 08	 add	 esp, 8

; 222  : 		return;

  00af4	e9 97 00 00 00	 jmp	 $LN6@LogSkillNa
$LN5@LogSkillNa:

; 223  : 	}
; 224  : 
; 225  : 	n=0;

  00af9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
$LN4@LogSkillNa:

; 226  : 
; 227  : 	while ( true )

  00b00	b8 01 00 00 00	 mov	 eax, 1
  00b05	85 c0		 test	 eax, eax
  00b07	74 5c		 je	 SHORT $LN3@LogSkillNa

; 228  : 	{
; 229  : 		Token = GetToken();

  00b09	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00b0e	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 230  : 
; 231  : 		if ( Token == 2 )

  00b11	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00b15	75 02		 jne	 SHORT $LN2@LogSkillNa

; 232  : 		{
; 233  : 			break;

  00b17	eb 4c		 jmp	 SHORT $LN3@LogSkillNa
$LN2@LogSkillNa:

; 234  : 		}
; 235  : 
; 236  : 		if ( Token == 1 )

  00b19	83 7d f4 01	 cmp	 DWORD PTR _Token$[ebp], 1
  00b1d	75 44		 jne	 SHORT $LN1@LogSkillNa

; 237  : 		{
; 238  : 			number = (int)TokenNumber;

  00b1f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00b25	e8 00 00 00 00	 call	 __ftol2_sse
  00b2a	89 45 ec	 mov	 DWORD PTR _number$[ebp], eax

; 239  : 
; 240  : 			Token = GetToken();

  00b2d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00b32	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 241  : 			strcpy(name, TokenString);

  00b35	68 00 00 00 00	 push	 OFFSET _TokenString
  00b3a	8d 45 b8	 lea	 eax, DWORD PTR _name$[ebp]
  00b3d	50		 push	 eax
  00b3e	e8 00 00 00 00	 call	 _strcpy
  00b43	83 c4 08	 add	 esp, 8

; 242  : 
; 243  : 			strcpy(this->m_Name[number], name);

  00b46	8d 45 b8	 lea	 eax, DWORD PTR _name$[ebp]
  00b49	50		 push	 eax
  00b4a	8b 4d ec	 mov	 ecx, DWORD PTR _number$[ebp]
  00b4d	6b c9 32	 imul	 ecx, 50			; 00000032H
  00b50	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00b53	8d 84 0a f4 0a
	00 00		 lea	 eax, DWORD PTR [edx+ecx+2804]
  00b5a	50		 push	 eax
  00b5b	e8 00 00 00 00	 call	 _strcpy
  00b60	83 c4 08	 add	 esp, 8
$LN1@LogSkillNa:

; 244  : 		}
; 245  : 	}

  00b63	eb 9b		 jmp	 SHORT $LN4@LogSkillNa
$LN3@LogSkillNa:

; 246  : 
; 247  : 	fclose(SMDFile);

  00b65	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00b6a	50		 push	 eax
  00b6b	e8 00 00 00 00	 call	 _fclose
  00b70	83 c4 04	 add	 esp, 4

; 248  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), filename);

  00b73	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00b76	50		 push	 eax
  00b77	68 c8 01 00 00	 push	 456			; 000001c8H
  00b7c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00b81	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00b86	50		 push	 eax
  00b87	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00b8d	83 c4 08	 add	 esp, 8
$LN6@LogSkillNa:

; 249  : }

  00b90	5f		 pop	 edi
  00b91	5e		 pop	 esi
  00b92	5b		 pop	 ebx
  00b93	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b96	33 cd		 xor	 ecx, ebp
  00b98	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b9d	8b e5		 mov	 esp, ebp
  00b9f	5d		 pop	 ebp
  00ba0	c2 04 00	 ret	 4
?LogSkillNameList@CMagicDamage@@QAEXPAD@Z ENDP		; CMagicDamage::LogSkillNameList
_TEXT	ENDS
PUBLIC	??_C@_05OEGOMMDP@Skill?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogSkillList@CMagicDamage@@QAEXPADH@Z		; CMagicDamage::LogSkillList
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?GetString@CWzMemScript@@QAEPADXZ:PROC		; CWzMemScript::GetString
EXTRN	?GetNumber@CWzMemScript@@QAEHXZ:PROC		; CWzMemScript::GetNumber
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_C@_05OEGOMMDP@Skill?$AA@
CONST	SEGMENT
??_C@_05OEGOMMDP@Skill?$AA@ DB 'Skill', 00H		; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?LogSkillList@CMagicDamage@@QAEXPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSkillList@CMagicDamage@@QAEXPADH@Z$0
__ehfuncinfo$?LogSkillList@CMagicDamage@@QAEXPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LogSkillList@CMagicDamage@@QAEXPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_btIsDamage$ = -330					; size = 1
_btItemSkill$ = -329					; size = 1
_iUseType$ = -328					; size = 4
_IconNumber$ = -321					; size = 1
_rDexterity$ = -320					; size = 4
_rStrength$ = -316					; size = 4
_Duration$ = -312					; size = 2
_rShield$ = -308					; size = 4
_rAG$ = -304						; size = 4
_rMLPoint$ = -300					; size = 2
_SkillGroup$ = -296					; size = 4
_SkillRank$ = -292					; size = 4
_RequireClass$ = -288					; size = 7
_RequireStatus$ = -280					; size = 12
_iKillCount$ = -268					; size = 4
_iSkillBrand$ = -264					; size = 4
_iSkillUseType$ = -260					; size = 4
_attr$ = -256						; size = 4
_rDelay$ = -252						; size = 4
_rLeadership$ = -248					; size = 4
_iSkillType$ = -244					; size = 4
_rEnergy$ = -240					; size = 4
_dis$ = -236						; size = 4
_bp$ = -232						; size = 4
_mana$ = -228						; size = 4
_damage$ = -224						; size = 4
_requireLevel$ = -220					; size = 4
_name$ = -216						; size = 50
_number$ = -164						; size = 4
_n$ = -160						; size = 4
_Token$ = -156						; size = 4
_WzMemScript$ = -152					; size = 132
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LogSkillList@CMagicDamage@@QAEXPADH@Z PROC		; CMagicDamage::LogSkillList
; _this$ = ecx

; 253  : {

  00bb0	55		 push	 ebp
  00bb1	8b ec		 mov	 ebp, esp
  00bb3	6a ff		 push	 -1
  00bb5	68 00 00 00 00	 push	 __ehhandler$?LogSkillList@CMagicDamage@@QAEXPADH@Z
  00bba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00bc0	50		 push	 eax
  00bc1	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00bc7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00bcc	33 c5		 xor	 eax, ebp
  00bce	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00bd1	53		 push	 ebx
  00bd2	56		 push	 esi
  00bd3	57		 push	 edi
  00bd4	50		 push	 eax
  00bd5	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00bd8	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00bde	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 254  : //
; 255  : //	this->Init();
; 256  : //	// ----
; 257  : //	CWzMemScript WzMemScript;
; 258  : //	WzMemScript.SetBuffer(Buffer, iSize);
; 259  : //	// ----
; 260  : //	int Token;
; 261  : //	int n=0;
; 262  : //	int number;
; 263  : //	char name[50];
; 264  : //	int requireLevel;
; 265  : //	int damage;
; 266  : //	int mana;
; 267  : //	int bp=0;
; 268  : //	int dis;
; 269  : //	int rEnergy;
; 270  : //	int iSkillType;
; 271  : //	int rLeadership;
; 272  : //	int rDelay;
; 273  : //	int attr;
; 274  : //	int iSkillUseType;
; 275  : //	int iSkillBrand;
; 276  : //	int iKillCount;
; 277  : //	int RequireStatus[MAX_REQ_SKILL_STATUS] = {0};
; 278  : //	BYTE RequireClass[MAX_TYPE_PLAYER];
; 279  : //	int SkillRank;
; 280  : //	int SkillGroup;
; 281  : //	short rMLPoint;
; 282  : //	int rAG;
; 283  : //	int rShield;
; 284  : //	short Duration;
; 285  : //	int rStrength;
; 286  : //	int rDexterity;
; 287  : //	BYTE IconNumber;
; 288  : //	int iUseType;
; 289  : //	BYTE btItemSkill;
; 290  : //	BYTE btIsDamage;
; 291  : //	// ----
; 292  : //	while(true)
; 293  : //	{
; 294  : //		Token = WzMemScript.GetToken();
; 295  : //		// ----
; 296  : //		if( Token == END )
; 297  : //		{
; 298  : //			break;
; 299  : //		}
; 300  : //		// ----
; 301  : //		if( Token == NUMBER )
; 302  : //		{
; 303  : //			number = WzMemScript.GetNumber();
; 304  : //			// ----
; 305  : //			Token = WzMemScript.GetToken();
; 306  : //			strcpy(name, WzMemScript.GetString() );
; 307  : //			// ----
; 308  : //			Token = WzMemScript.GetToken();
; 309  : //			requireLevel = WzMemScript.GetNumber();
; 310  : //			// ----
; 311  : //			Token = WzMemScript.GetToken();
; 312  : //			damage = WzMemScript.GetNumber();
; 313  : //			// ----
; 314  : //			Token = WzMemScript.GetToken();
; 315  : //			mana = WzMemScript.GetNumber();
; 316  : //			// ----
; 317  : //			Token = WzMemScript.GetToken();
; 318  : //			bp = WzMemScript.GetNumber();
; 319  : //			// ----
; 320  : //			Token = WzMemScript.GetToken();
; 321  : //			dis = WzMemScript.GetNumber();
; 322  : //			// ----
; 323  : //			Token = WzMemScript.GetToken();
; 324  : //			rDelay = WzMemScript.GetNumber();
; 325  : //			// ----
; 326  : //			Token = WzMemScript.GetToken();
; 327  : //			rEnergy = WzMemScript.GetNumber();
; 328  : //			// ----
; 329  : //			Token = WzMemScript.GetToken();
; 330  : //			rLeadership = WzMemScript.GetNumber();
; 331  : //			// ----
; 332  : //			Token = WzMemScript.GetToken();
; 333  : //			attr = WzMemScript.GetNumber();
; 334  : //			// ----
; 335  : //			Token = WzMemScript.GetToken();
; 336  : //			iSkillType = WzMemScript.GetNumber();
; 337  : //			// ----
; 338  : //			Token = WzMemScript.GetToken();
; 339  : //			iSkillUseType = WzMemScript.GetNumber();
; 340  : //			// ----
; 341  : //			Token = WzMemScript.GetToken();
; 342  : //			iSkillBrand = WzMemScript.GetNumber();
; 343  : //			// ----
; 344  : //			Token = WzMemScript.GetToken();
; 345  : //			iKillCount = WzMemScript.GetNumber();
; 346  : //			// ----
; 347  : //			Token = WzMemScript.GetToken();
; 348  : //			RequireStatus[0] = WzMemScript.GetNumber();
; 349  : //			// ----
; 350  : //			Token = WzMemScript.GetToken();
; 351  : //			RequireStatus[1] = WzMemScript.GetNumber();
; 352  : //			// ----
; 353  : //			Token = WzMemScript.GetToken();
; 354  : //			RequireStatus[2] = WzMemScript.GetNumber();
; 355  : //			// ----
; 356  : //			Token = WzMemScript.GetToken();
; 357  : //			RequireClass[CLASS_WIZARD] = WzMemScript.GetNumber(); //SM
; 358  : //			// ----
; 359  : //			Token = WzMemScript.GetToken();
; 360  : //			RequireClass[CLASS_KNIGHT] = WzMemScript.GetNumber(); //DK
; 361  : //			// ----
; 362  : //			Token = WzMemScript.GetToken();
; 363  : //			RequireClass[CLASS_ELF] = WzMemScript.GetNumber(); //ELF
; 364  : //			// ----
; 365  : //			Token = WzMemScript.GetToken();
; 366  : //			RequireClass[CLASS_MAGUMSA] = WzMemScript.GetNumber(); //MG
; 367  : //			// ----
; 368  : //			Token = WzMemScript.GetToken();
; 369  : //			RequireClass[CLASS_DARKLORD] = WzMemScript.GetNumber(); //DL
; 370  : //			// ----
; 371  : //			Token = WzMemScript.GetToken();
; 372  : //			RequireClass[CLASS_SUMMONER] = WzMemScript.GetNumber(); //SUM
; 373  : //			// ----
; 374  : //			Token = WzMemScript.GetToken();
; 375  : //			RequireClass[CLASS_MONK] = WzMemScript.GetNumber(); //RF
; 376  : //			// ----
; 377  : //			Token = WzMemScript.GetToken();
; 378  : //			SkillRank = WzMemScript.GetNumber();
; 379  : //			// ----
; 380  : //			Token = WzMemScript.GetToken();
; 381  : //			SkillGroup = WzMemScript.GetNumber();
; 382  : //			// ----
; 383  : //			Token = WzMemScript.GetToken();
; 384  : //			rMLPoint = WzMemScript.GetNumber();
; 385  : //			// ----
; 386  : //			Token = WzMemScript.GetToken();
; 387  : //			rAG = WzMemScript.GetNumber();
; 388  : //			// ----
; 389  : //			Token = WzMemScript.GetToken();
; 390  : //			rShield = WzMemScript.GetNumber();
; 391  : //			// ----
; 392  : //			Token = WzMemScript.GetToken();
; 393  : //			Duration = WzMemScript.GetNumber();
; 394  : //			// ----
; 395  : //			Token = WzMemScript.GetToken();
; 396  : //			rStrength = WzMemScript.GetNumber();
; 397  : //			// ----
; 398  : //			Token = WzMemScript.GetToken();
; 399  : //			rDexterity = WzMemScript.GetNumber();
; 400  : //			// ----
; 401  : //			Token = WzMemScript.GetToken();
; 402  : //			IconNumber = WzMemScript.GetNumber();
; 403  : //			// ----
; 404  : //			Token = WzMemScript.GetToken();
; 405  : //			iUseType = WzMemScript.GetNumber();
; 406  : //			// ----
; 407  : //			Token = WzMemScript.GetToken();
; 408  : //			btItemSkill = WzMemScript.GetNumber();
; 409  : //			// ----
; 410  : //			Token = WzMemScript.GetToken();
; 411  : //			btIsDamage = WzMemScript.GetNumber();
; 412  : //			// ----
; 413  : //			this->Set(name, number,damage, requireLevel, mana, bp, dis, attr, iSkillType, RequireClass, rEnergy, rLeadership, rDelay/*, btItemSkill  , btIsDamage*/);
; 414  : //			this->SetEx(number, iSkillUseType, iSkillBrand, iKillCount, RequireStatus);
; 415  : //			//this->SetMasterLevelSkillInfo(number, SkillRank, SkillGroup, rMLPoint, rAG, rShield, Duration, rStrength, rDexterity);
; 416  : //			DefMagicInf[number].Set(number, 0);
; 417  : //		}
; 418  : //	}
; 419  : //	// ----
; 420  : //	LogAdd(lMsg.Get(MSGGET(1, 200)), "Skill");
; 421  : 
; 422  : 	this->Init();

  00be1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00be4	e8 00 00 00 00	 call	 ?Init@CMagicDamage@@QAEXXZ ; CMagicDamage::Init

; 423  : 	CWzMemScript WzMemScript;

  00be9	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00bef	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript
  00bf4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 424  : 
; 425  : 	WzMemScript.SetBuffer(Buffer, iSize);

  00bfb	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  00bfe	50		 push	 eax
  00bff	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  00c02	51		 push	 ecx
  00c03	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c09	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 426  : 
; 427  : 	int Token;
; 428  : 	int n=0;

  00c0e	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$[ebp], 0

; 429  : 	int number;
; 430  : 	char name[50];
; 431  : 	int requireLevel;
; 432  : 	int damage;
; 433  : 	int mana;
; 434  : 	int bp=0;

  00c18	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _bp$[ebp], 0

; 435  : 	int dis;
; 436  : 	int rEnergy;
; 437  : 	int iSkillType;
; 438  : 	int rLeadership;
; 439  : 	int rDelay;
; 440  : 	int attr;
; 441  : 	int iSkillUseType;
; 442  : 	int iSkillBrand;
; 443  : 	int iKillCount;
; 444  : 	int RequireStatus[MAX_REQ_SKILL_STATUS] = {0};

  00c22	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _RequireStatus$[ebp], 0
  00c2c	33 c0		 xor	 eax, eax
  00c2e	89 85 ec fe ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+4], eax
  00c34	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+8], eax
$LN4@LogSkillLi@2:

; 445  : 	BYTE RequireClass[MAX_TYPE_PLAYER];
; 446  : 	//Season 3 add-on
; 447  : 	int SkillRank;
; 448  : 	int SkillGroup;
; 449  : 	short rMLPoint;
; 450  : 	int rAG;
; 451  : 	int rShield;
; 452  : 	short Duration;
; 453  : 	int rStrength;
; 454  : 	int rDexterity;
; 455  : 	BYTE IconNumber;
; 456  : 	int iUseType;
; 457  : 	BYTE btItemSkill;
; 458  : 	BYTE btIsDamage;
; 459  : 
; 460  : 	while ( true )

  00c3a	b8 01 00 00 00	 mov	 eax, 1
  00c3f	85 c0		 test	 eax, eax
  00c41	0f 84 0a 06 00
	00		 je	 $LN3@LogSkillLi@2

; 461  : 	{
; 462  : 		Token = WzMemScript.GetToken();

  00c47	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c4d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00c52	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 463  : 
; 464  : 		if ( Token == 2 )

  00c58	83 bd 64 ff ff
	ff 02		 cmp	 DWORD PTR _Token$[ebp], 2
  00c5f	75 05		 jne	 SHORT $LN2@LogSkillLi@2

; 465  : 		{
; 466  : 			break;

  00c61	e9 eb 05 00 00	 jmp	 $LN3@LogSkillLi@2
$LN2@LogSkillLi@2:

; 467  : 		}
; 468  : 
; 469  : 		if ( Token == 1 )

  00c66	83 bd 64 ff ff
	ff 01		 cmp	 DWORD PTR _Token$[ebp], 1
  00c6d	0f 85 d9 05 00
	00		 jne	 $LN1@LogSkillLi@2

; 470  : 		{
; 471  : 			number = WzMemScript.GetNumber();

  00c73	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c79	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00c7e	89 85 5c ff ff
	ff		 mov	 DWORD PTR _number$[ebp], eax

; 472  : 
; 473  : 			Token = WzMemScript.GetToken();

  00c84	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c8a	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00c8f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 474  : 			strcpy(name, WzMemScript.GetString() );

  00c95	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00c9b	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  00ca0	50		 push	 eax
  00ca1	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  00ca7	50		 push	 eax
  00ca8	e8 00 00 00 00	 call	 _strcpy
  00cad	83 c4 08	 add	 esp, 8

; 475  : 
; 476  : 			Token = WzMemScript.GetToken();

  00cb0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00cb6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00cbb	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 477  : 			requireLevel = WzMemScript.GetNumber();

  00cc1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00cc7	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00ccc	89 85 24 ff ff
	ff		 mov	 DWORD PTR _requireLevel$[ebp], eax

; 478  : 
; 479  : 			Token = WzMemScript.GetToken();

  00cd2	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00cd8	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00cdd	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 480  : 			damage = WzMemScript.GetNumber();

  00ce3	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ce9	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00cee	89 85 20 ff ff
	ff		 mov	 DWORD PTR _damage$[ebp], eax

; 481  : 
; 482  : 			Token = WzMemScript.GetToken();

  00cf4	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00cfa	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00cff	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 483  : 			mana = WzMemScript.GetNumber();

  00d05	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d0b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00d10	89 85 1c ff ff
	ff		 mov	 DWORD PTR _mana$[ebp], eax

; 484  : 
; 485  : 			Token = WzMemScript.GetToken();

  00d16	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d1c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00d21	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 486  : 			bp = WzMemScript.GetNumber();

  00d27	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d2d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00d32	89 85 18 ff ff
	ff		 mov	 DWORD PTR _bp$[ebp], eax

; 487  : 
; 488  : 			Token = WzMemScript.GetToken();

  00d38	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d3e	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00d43	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 489  : 			dis = WzMemScript.GetNumber();

  00d49	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d4f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00d54	89 85 14 ff ff
	ff		 mov	 DWORD PTR _dis$[ebp], eax

; 490  : 
; 491  : 			Token = WzMemScript.GetToken();

  00d5a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d60	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00d65	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 492  : 			rDelay = WzMemScript.GetNumber();

  00d6b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d71	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00d76	89 85 04 ff ff
	ff		 mov	 DWORD PTR _rDelay$[ebp], eax

; 493  : 
; 494  : 			Token = WzMemScript.GetToken();

  00d7c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d82	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00d87	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 495  : 			rEnergy = WzMemScript.GetNumber();

  00d8d	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00d93	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00d98	89 85 10 ff ff
	ff		 mov	 DWORD PTR _rEnergy$[ebp], eax

; 496  : 
; 497  : 			Token = WzMemScript.GetToken();

  00d9e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00da4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00da9	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 498  : 			rLeadership = WzMemScript.GetNumber();

  00daf	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00db5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00dba	89 85 08 ff ff
	ff		 mov	 DWORD PTR _rLeadership$[ebp], eax

; 499  : 
; 500  : 			Token = WzMemScript.GetToken();

  00dc0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00dc6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00dcb	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 501  : 			attr = WzMemScript.GetNumber();

  00dd1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00dd7	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00ddc	89 85 00 ff ff
	ff		 mov	 DWORD PTR _attr$[ebp], eax

; 502  : 
; 503  : 			Token = WzMemScript.GetToken();

  00de2	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00de8	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00ded	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 504  : 			iSkillType = WzMemScript.GetNumber();

  00df3	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00df9	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00dfe	89 85 0c ff ff
	ff		 mov	 DWORD PTR _iSkillType$[ebp], eax

; 505  : 
; 506  : 			Token = WzMemScript.GetToken();

  00e04	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e0a	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e0f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 507  : 			iSkillUseType = WzMemScript.GetNumber();

  00e15	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e1b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00e20	89 85 fc fe ff
	ff		 mov	 DWORD PTR _iSkillUseType$[ebp], eax

; 508  : 
; 509  : 			Token = WzMemScript.GetToken();

  00e26	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e2c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e31	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 510  : 			iSkillBrand = WzMemScript.GetNumber();

  00e37	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e3d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00e42	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _iSkillBrand$[ebp], eax

; 511  : 
; 512  : 			Token = WzMemScript.GetToken();

  00e48	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e4e	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e53	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 513  : 			iKillCount = WzMemScript.GetNumber();

  00e59	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e5f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00e64	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iKillCount$[ebp], eax

; 514  : 
; 515  : 			Token = WzMemScript.GetToken();

  00e6a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e70	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e75	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 516  : 			RequireStatus[0] = WzMemScript.GetNumber();

  00e7b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e81	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00e86	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp], eax

; 517  : 
; 518  : 			Token = WzMemScript.GetToken();

  00e8c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00e92	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00e97	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 519  : 			RequireStatus[1] = WzMemScript.GetNumber();

  00e9d	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ea3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00ea8	89 85 ec fe ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+4], eax

; 520  : 
; 521  : 			Token = WzMemScript.GetToken();

  00eae	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00eb4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00eb9	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 522  : 			RequireStatus[2] = WzMemScript.GetNumber();

  00ebf	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ec5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00eca	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+8], eax

; 523  : 
; 524  : 			Token = WzMemScript.GetToken();

  00ed0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ed6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00edb	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 525  : 			RequireClass[0] = WzMemScript.GetNumber(); //SM

  00ee1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ee7	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00eec	88 85 e0 fe ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp], al

; 526  : 
; 527  : 			Token = WzMemScript.GetToken();

  00ef2	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ef8	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00efd	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 528  : 			RequireClass[1] = WzMemScript.GetNumber(); //DK

  00f03	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f09	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f0e	88 85 e1 fe ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+1], al

; 529  : 
; 530  : 			Token = WzMemScript.GetToken();

  00f14	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f1a	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f1f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 531  : 			RequireClass[2] = WzMemScript.GetNumber(); //ELF

  00f25	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f2b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f30	88 85 e2 fe ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+2], al

; 532  : 
; 533  : 			Token = WzMemScript.GetToken();

  00f36	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f3c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f41	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 534  : 			RequireClass[3] = WzMemScript.GetNumber(); //MG

  00f47	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f4d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f52	88 85 e3 fe ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+3], al

; 535  : 
; 536  : 			Token = WzMemScript.GetToken();

  00f58	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f5e	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f63	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 537  : 			RequireClass[4] = WzMemScript.GetNumber(); //DL

  00f69	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f6f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f74	88 85 e4 fe ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+4], al

; 538  : 
; 539  : 			///////////////Summoner (23)
; 540  : 			Token = WzMemScript.GetToken();

  00f7a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f80	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00f85	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 541  : 			RequireClass[5] = WzMemScript.GetNumber(); //SUM

  00f8b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00f91	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00f96	88 85 e5 fe ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+5], al

; 542  : 			////////////////////
; 543  : 
; 544  : 			Token = WzMemScript.GetToken();

  00f9c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fa2	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00fa7	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 545  : 			RequireClass[6] = WzMemScript.GetNumber(); //RF

  00fad	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fb3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00fb8	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _RequireClass$[ebp+6], al

; 546  : 
; 547  : 			Token = WzMemScript.GetToken();

  00fbe	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fc4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00fc9	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 548  : 			SkillRank = WzMemScript.GetNumber();

  00fcf	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fd5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00fda	89 85 dc fe ff
	ff		 mov	 DWORD PTR _SkillRank$[ebp], eax

; 549  : 
; 550  : 			Token = WzMemScript.GetToken();

  00fe0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00fe6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  00feb	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 551  : 			SkillGroup = WzMemScript.GetNumber();

  00ff1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00ff7	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00ffc	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _SkillGroup$[ebp], eax

; 552  : 
; 553  : 			Token = WzMemScript.GetToken();

  01002	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01008	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0100d	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 554  : 			rMLPoint = WzMemScript.GetNumber();

  01013	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01019	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0101e	66 89 85 d4 fe
	ff ff		 mov	 WORD PTR _rMLPoint$[ebp], ax

; 555  : 
; 556  : 			Token = WzMemScript.GetToken();

  01025	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0102b	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01030	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 557  : 			rAG = WzMemScript.GetNumber();

  01036	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0103c	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01041	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _rAG$[ebp], eax

; 558  : 
; 559  : 			Token = WzMemScript.GetToken();

  01047	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0104d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01052	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 560  : 			rShield = WzMemScript.GetNumber();

  01058	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0105e	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01063	89 85 cc fe ff
	ff		 mov	 DWORD PTR _rShield$[ebp], eax

; 561  : 
; 562  : 			Token = WzMemScript.GetToken();

  01069	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0106f	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01074	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 563  : 			Duration = WzMemScript.GetNumber();

  0107a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01080	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01085	66 89 85 c8 fe
	ff ff		 mov	 WORD PTR _Duration$[ebp], ax

; 564  : 
; 565  : 			Token = WzMemScript.GetToken();

  0108c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01092	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01097	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 566  : 			rStrength = WzMemScript.GetNumber();

  0109d	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010a3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  010a8	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _rStrength$[ebp], eax

; 567  : 
; 568  : 			Token = WzMemScript.GetToken();

  010ae	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010b4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  010b9	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 569  : 			rDexterity = WzMemScript.GetNumber();

  010bf	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010c5	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  010ca	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _rDexterity$[ebp], eax

; 570  : 
; 571  : 			Token = WzMemScript.GetToken();

  010d0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010d6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  010db	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 572  : 			IconNumber = WzMemScript.GetNumber();

  010e1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010e7	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  010ec	88 85 bf fe ff
	ff		 mov	 BYTE PTR _IconNumber$[ebp], al

; 573  : 
; 574  : 			Token = WzMemScript.GetToken();

  010f2	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  010f8	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  010fd	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 575  : 			iUseType = WzMemScript.GetNumber();

  01103	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01109	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0110e	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _iUseType$[ebp], eax

; 576  : 
; 577  : 			Token = WzMemScript.GetToken();

  01114	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0111a	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0111f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 578  : 			btItemSkill = WzMemScript.GetNumber();

  01125	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0112b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01130	88 85 b7 fe ff
	ff		 mov	 BYTE PTR _btItemSkill$[ebp], al

; 579  : 			// ----
; 580  : 			Token = WzMemScript.GetToken();

  01136	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0113c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01141	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 581  : 			btIsDamage = WzMemScript.GetNumber();

  01147	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0114d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  01152	88 85 b6 fe ff
	ff		 mov	 BYTE PTR _btIsDamage$[ebp], al

; 582  : 
; 583  : 			this->Set(name, number,damage, requireLevel, mana, bp, dis, attr, iSkillType, RequireClass, rEnergy, rLeadership, rDelay);

  01158	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _rDelay$[ebp]
  0115e	50		 push	 eax
  0115f	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _rLeadership$[ebp]
  01165	51		 push	 ecx
  01166	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _rEnergy$[ebp]
  0116c	52		 push	 edx
  0116d	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _RequireClass$[ebp]
  01173	50		 push	 eax
  01174	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _iSkillType$[ebp]
  0117a	51		 push	 ecx
  0117b	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _attr$[ebp]
  01181	52		 push	 edx
  01182	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _dis$[ebp]
  01188	50		 push	 eax
  01189	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _bp$[ebp]
  0118f	51		 push	 ecx
  01190	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _mana$[ebp]
  01196	52		 push	 edx
  01197	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _requireLevel$[ebp]
  0119d	50		 push	 eax
  0119e	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _damage$[ebp]
  011a4	51		 push	 ecx
  011a5	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _number$[ebp]
  011ab	52		 push	 edx
  011ac	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  011b2	50		 push	 eax
  011b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  011b6	e8 00 00 00 00	 call	 ?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z ; CMagicDamage::Set

; 584  : 			this->SetEx(number, iSkillUseType, iSkillBrand, iKillCount, RequireStatus);

  011bb	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _RequireStatus$[ebp]
  011c1	50		 push	 eax
  011c2	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _iKillCount$[ebp]
  011c8	51		 push	 ecx
  011c9	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _iSkillBrand$[ebp]
  011cf	52		 push	 edx
  011d0	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _iSkillUseType$[ebp]
  011d6	50		 push	 eax
  011d7	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _number$[ebp]
  011dd	51		 push	 ecx
  011de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  011e1	e8 00 00 00 00	 call	 ?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ; CMagicDamage::SetEx

; 585  : 			this->SetML(number, SkillRank, SkillGroup, rMLPoint, rAG, rShield, Duration, rStrength, rDexterity);

  011e6	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _rDexterity$[ebp]
  011ec	50		 push	 eax
  011ed	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _rStrength$[ebp]
  011f3	51		 push	 ecx
  011f4	0f b7 95 c8 fe
	ff ff		 movzx	 edx, WORD PTR _Duration$[ebp]
  011fb	52		 push	 edx
  011fc	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _rShield$[ebp]
  01202	50		 push	 eax
  01203	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rAG$[ebp]
  01209	51		 push	 ecx
  0120a	0f bf 95 d4 fe
	ff ff		 movsx	 edx, WORD PTR _rMLPoint$[ebp]
  01211	52		 push	 edx
  01212	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _SkillGroup$[ebp]
  01218	50		 push	 eax
  01219	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _SkillRank$[ebp]
  0121f	51		 push	 ecx
  01220	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _number$[ebp]
  01226	52		 push	 edx
  01227	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0122a	e8 00 00 00 00	 call	 ?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z ; CMagicDamage::SetML

; 586  : 			DefMagicInf[number].Set(number, 0);

  0122f	6a 00		 push	 0
  01231	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  01237	50		 push	 eax
  01238	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _number$[ebp]
  0123e	6b c9 18	 imul	 ecx, 24			; 00000018H
  01241	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  01247	e8 00 00 00 00	 call	 ?Set@CMagicInf@@QAEHHE@Z ; CMagicInf::Set
$LN1@LogSkillLi@2:

; 587  : 		}
; 588  : 	}

  0124c	e9 e9 f9 ff ff	 jmp	 $LN4@LogSkillLi@2
$LN3@LogSkillLi@2:

; 589  : 
; 590  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), "Skill");

  01251	68 00 00 00 00	 push	 OFFSET ??_C@_05OEGOMMDP@Skill?$AA@
  01256	68 c8 01 00 00	 push	 456			; 000001c8H
  0125b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01260	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01265	50		 push	 eax
  01266	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0126c	83 c4 08	 add	 esp, 8

; 591  : 
; 592  : }

  0126f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01276	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0127c	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  01281	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01284	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0128b	59		 pop	 ecx
  0128c	5f		 pop	 edi
  0128d	5e		 pop	 esi
  0128e	5b		 pop	 ebx
  0128f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01292	33 cd		 xor	 ecx, ebp
  01294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01299	8b e5		 mov	 esp, ebp
  0129b	5d		 pop	 ebp
  0129c	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LogSkillList@CMagicDamage@@QAEXPADH@Z$0:
  00000	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LogSkillList@CMagicDamage@@QAEXPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 70 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-400]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LogSkillList@CMagicDamage@@QAEXPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LogSkillList@CMagicDamage@@QAEXPADH@Z ENDP		; CMagicDamage::LogSkillList
PUBLIC	??_C@_0M@LDHACGGK@Skill_Local?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogSkillNameList@CMagicDamage@@QAEXPADH@Z	; CMagicDamage::LogSkillNameList
;	COMDAT ??_C@_0M@LDHACGGK@Skill_Local?$AA@
CONST	SEGMENT
??_C@_0M@LDHACGGK@Skill_Local?$AA@ DB 'Skill_Local', 00H ; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z$0
__ehfuncinfo$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_name$ = -216						; size = 50
_number$ = -164						; size = 4
_n$ = -160						; size = 4
_Token$ = -156						; size = 4
_WzMemScript$ = -152					; size = 132
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LogSkillNameList@CMagicDamage@@QAEXPADH@Z PROC		; CMagicDamage::LogSkillNameList
; _this$ = ecx

; 599  : {

  012a0	55		 push	 ebp
  012a1	8b ec		 mov	 ebp, esp
  012a3	6a ff		 push	 -1
  012a5	68 00 00 00 00	 push	 __ehhandler$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
  012aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  012b0	50		 push	 eax
  012b1	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  012b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  012bc	33 c5		 xor	 eax, ebp
  012be	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  012c1	53		 push	 ebx
  012c2	56		 push	 esi
  012c3	57		 push	 edi
  012c4	50		 push	 eax
  012c5	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  012c8	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  012ce	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 600  : 	CWzMemScript WzMemScript;

  012d1	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  012d7	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript
  012dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 601  : 	int Token;
; 602  : 	int n;
; 603  : 	int number;
; 604  : 	char name[50];
; 605  : 	
; 606  : 	WzMemScript.SetBuffer(Buffer, iSize);

  012e3	8b 45 0c	 mov	 eax, DWORD PTR _iSize$[ebp]
  012e6	50		 push	 eax
  012e7	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  012ea	51		 push	 ecx
  012eb	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  012f1	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 607  : 
; 608  : 	n=0;

  012f6	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$[ebp], 0
$LN4@LogSkillNa@2:

; 609  : 
; 610  : 	while ( true )

  01300	b8 01 00 00 00	 mov	 eax, 1
  01305	85 c0		 test	 eax, eax
  01307	0f 84 83 00 00
	00		 je	 $LN3@LogSkillNa@2

; 611  : 	{
; 612  : 		Token = WzMemScript.GetToken();

  0130d	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01313	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  01318	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 613  : 
; 614  : 		if ( Token == 2 )

  0131e	83 bd 64 ff ff
	ff 02		 cmp	 DWORD PTR _Token$[ebp], 2
  01325	75 02		 jne	 SHORT $LN2@LogSkillNa@2

; 615  : 		{
; 616  : 			break;

  01327	eb 67		 jmp	 SHORT $LN3@LogSkillNa@2
$LN2@LogSkillNa@2:

; 617  : 		}
; 618  : 
; 619  : 		if ( Token == 1 )

  01329	83 bd 64 ff ff
	ff 01		 cmp	 DWORD PTR _Token$[ebp], 1
  01330	75 59		 jne	 SHORT $LN1@LogSkillNa@2

; 620  : 		{
; 621  : 			number = (int)TokenNumber;

  01332	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  01338	e8 00 00 00 00	 call	 __ftol2_sse
  0133d	89 85 5c ff ff
	ff		 mov	 DWORD PTR _number$[ebp], eax

; 622  : 
; 623  : 			Token = WzMemScript.GetToken();	

  01343	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  01349	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken
  0134e	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 624  : 			strcpy(name, TokenString);

  01354	68 00 00 00 00	 push	 OFFSET _TokenString
  01359	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  0135f	50		 push	 eax
  01360	e8 00 00 00 00	 call	 _strcpy
  01365	83 c4 08	 add	 esp, 8

; 625  : 
; 626  : 			strcpy(this->m_Name[number], name);

  01368	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  0136e	50		 push	 eax
  0136f	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _number$[ebp]
  01375	6b c9 32	 imul	 ecx, 50			; 00000032H
  01378	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0137b	8d 84 0a f4 0a
	00 00		 lea	 eax, DWORD PTR [edx+ecx+2804]
  01382	50		 push	 eax
  01383	e8 00 00 00 00	 call	 _strcpy
  01388	83 c4 08	 add	 esp, 8
$LN1@LogSkillNa@2:

; 627  : 		}
; 628  : 	}

  0138b	e9 70 ff ff ff	 jmp	 $LN4@LogSkillNa@2
$LN3@LogSkillNa@2:

; 629  : 
; 630  : 	
; 631  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), "Skill_Local");

  01390	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LDHACGGK@Skill_Local?$AA@
  01395	68 c8 01 00 00	 push	 456			; 000001c8H
  0139a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0139f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  013a4	50		 push	 eax
  013a5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  013ab	83 c4 08	 add	 esp, 8

; 632  : }

  013ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  013b5	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  013bb	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  013c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  013c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  013ca	59		 pop	 ecx
  013cb	5f		 pop	 edi
  013cc	5e		 pop	 esi
  013cd	5b		 pop	 ebx
  013ce	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  013d1	33 cd		 xor	 ecx, ebp
  013d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  013d8	8b e5		 mov	 esp, ebp
  013da	5d		 pop	 ebp
  013db	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z$0:
  00033	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00039	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z:
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 8a e4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-284]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LogSkillNameList@CMagicDamage@@QAEXPADH@Z ENDP		; CMagicDamage::LogSkillNameList
PUBLIC	??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??SetML@CMagicDamage@@AAEXHHHHHHFHH@Z@4JA ; `CMagicDamage::SetML'::`2'::__LINE__Var
;	COMDAT ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\magicdamage.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetML@CMagicDamage@@AAEXHHHHHHFHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetML@CMagicDamage@@AAEXHHHHHHFHH@Z@4JA DD 027cH ; `CMagicDamage::SetML'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSkill$ = 8						; size = 4
_SkillRank$ = 12					; size = 4
_SkillGroup$ = 16					; size = 4
_rMLPoint$ = 20						; size = 4
_rAG$ = 24						; size = 4
_rShield$ = 28						; size = 4
_Duration$ = 32						; size = 2
_rStrength$ = 36					; size = 4
_rDexterity$ = 40					; size = 4
?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z PROC		; CMagicDamage::SetML
; _this$ = ecx

; 636  : {

  013e0	55		 push	 ebp
  013e1	8b ec		 mov	 ebp, esp
  013e3	83 ec 44	 sub	 esp, 68			; 00000044H
  013e6	53		 push	 ebx
  013e7	56		 push	 esi
  013e8	57		 push	 edi
  013e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 637  : 	if ( iSkill <0 || iSkill > MAX_SKILL -1 )

  013ec	83 7d 08 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  013f0	7c 09		 jl	 SHORT $LN2@SetML
  013f2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  013f9	7e 2b		 jle	 SHORT $LN3@SetML
$LN2@SetML:

; 638  : 	{
; 639  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  013fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetML@CMagicDamage@@AAEXHHHHHHFHH@Z@4JA
  01400	83 c0 03	 add	 eax, 3
  01403	50		 push	 eax
  01404	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  01409	68 c9 01 00 00	 push	 457			; 000001c9H
  0140e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01413	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01418	50		 push	 eax
  01419	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0141e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 640  : 		return;

  01421	e9 c8 00 00 00	 jmp	 $LN4@SetML
$LN3@SetML:

; 641  : 	}
; 642  : 
; 643  : 	if ( this->m_Damage[iSkill] == -1 )

  01426	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  01429	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0142c	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  01431	75 2b		 jne	 SHORT $LN1@SetML

; 644  : 	{
; 645  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  01433	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetML@CMagicDamage@@AAEXHHHHHHFHH@Z@4JA
  01438	83 c0 09	 add	 eax, 9
  0143b	50		 push	 eax
  0143c	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  01441	68 32 02 00 00	 push	 562			; 00000232H
  01446	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0144b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01450	50		 push	 eax
  01451	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  01456	83 c4 0c	 add	 esp, 12			; 0000000cH

; 646  : 		return;

  01459	e9 90 00 00 00	 jmp	 $LN4@SetML
$LN1@SetML:

; 647  : 	}
; 648  : 
; 649  : 	this->m_sSkillRank[iSkill] = SkillRank;

  0145e	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  01461	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01464	66 8b 55 0c	 mov	 dx, WORD PTR _SkillRank$[ebp]
  01468	66 89 94 41 78
	3a 01 00	 mov	 WORD PTR [ecx+eax*2+80504], dx

; 650  : 	this->m_sSkillGroup[iSkill] = SkillGroup;

  01470	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  01473	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01476	66 8b 55 10	 mov	 dx, WORD PTR _SkillGroup$[ebp]
  0147a	66 89 94 41 f0
	3f 01 00	 mov	 WORD PTR [ecx+eax*2+81904], dx

; 651  : 	this->m_sReqMLPoint[iSkill] = rMLPoint;

  01482	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  01485	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01488	66 8b 55 14	 mov	 dx, WORD PTR _rMLPoint$[ebp]
  0148c	66 89 94 41 68
	45 01 00	 mov	 WORD PTR [ecx+eax*2+83304], dx

; 652  : 
; 653  : 	this->m_sReqAG[iSkill] = rAG;

  01494	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  01497	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0149a	66 8b 55 18	 mov	 dx, WORD PTR _rAG$[ebp]
  0149e	66 89 94 41 e0
	4a 01 00	 mov	 WORD PTR [ecx+eax*2+84704], dx

; 654  : 	this->m_sReqShield[iSkill] = rShield;

  014a6	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  014a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014ac	66 8b 55 1c	 mov	 dx, WORD PTR _rShield$[ebp]
  014b0	66 89 94 41 58
	50 01 00	 mov	 WORD PTR [ecx+eax*2+86104], dx

; 655  : 	this->m_sDuration[iSkill] = Duration;

  014b8	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  014bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014be	66 8b 55 20	 mov	 dx, WORD PTR _Duration$[ebp]
  014c2	66 89 94 41 d0
	55 01 00	 mov	 WORD PTR [ecx+eax*2+87504], dx

; 656  : 
; 657  : 	this->m_sReqStrength[iSkill] = rStrength;

  014ca	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  014cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014d0	66 8b 55 24	 mov	 dx, WORD PTR _rStrength$[ebp]
  014d4	66 89 94 41 48
	5b 01 00	 mov	 WORD PTR [ecx+eax*2+88904], dx

; 658  : 	this->m_sReqDexterity[iSkill] = rDexterity;

  014dc	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  014df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014e2	66 8b 55 28	 mov	 dx, WORD PTR _rDexterity$[ebp]
  014e6	66 89 94 41 c0
	60 01 00	 mov	 WORD PTR [ecx+eax*2+90304], dx
$LN4@SetML:

; 659  : }

  014ee	5f		 pop	 edi
  014ef	5e		 pop	 esi
  014f0	5b		 pop	 ebx
  014f1	8b e5		 mov	 esp, ebp
  014f3	5d		 pop	 ebp
  014f4	c2 24 00	 ret	 36			; 00000024H
?SetML@CMagicDamage@@AAEXHHHHHHFHH@Z ENDP		; CMagicDamage::SetML
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??SetEx@CMagicDamage@@AAEXHHHHPAH@Z@4JA ; `CMagicDamage::SetEx'::`2'::__LINE__Var
EXTRN	_memcpy:PROC
;	COMDAT ?__LINE__Var@?1??SetEx@CMagicDamage@@AAEXHHHHPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetEx@CMagicDamage@@AAEXHHHHPAH@Z@4JA DD 0297H ; `CMagicDamage::SetEx'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSkill$ = 8						; size = 4
_iSkillUseType$ = 12					; size = 4
_iSkillBrand$ = 16					; size = 4
_iKillCount$ = 20					; size = 4
_pReqStatus$ = 24					; size = 4
?SetEx@CMagicDamage@@AAEXHHHHPAH@Z PROC			; CMagicDamage::SetEx
; _this$ = ecx

; 663  : {

  01500	55		 push	 ebp
  01501	8b ec		 mov	 ebp, esp
  01503	83 ec 44	 sub	 esp, 68			; 00000044H
  01506	53		 push	 ebx
  01507	56		 push	 esi
  01508	57		 push	 edi
  01509	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 664  : 	if ( iSkill <0 || iSkill > MAX_SKILL -1 )

  0150c	83 7d 08 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  01510	7c 09		 jl	 SHORT $LN2@SetEx
  01512	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  01519	7e 2b		 jle	 SHORT $LN3@SetEx
$LN2@SetEx:

; 665  : 	{
; 666  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0151b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetEx@CMagicDamage@@AAEXHHHHPAH@Z@4JA
  01520	83 c0 03	 add	 eax, 3
  01523	50		 push	 eax
  01524	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  01529	68 c9 01 00 00	 push	 457			; 000001c9H
  0152e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01533	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01538	50		 push	 eax
  01539	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0153e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 667  : 		return;

  01541	e9 84 00 00 00	 jmp	 $LN4@SetEx
$LN3@SetEx:

; 668  : 	}
; 669  : 
; 670  : 	if ( this->m_Damage[iSkill] == -1 )

  01546	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  01549	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0154c	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  01551	75 28		 jne	 SHORT $LN1@SetEx

; 671  : 	{
; 672  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  01553	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetEx@CMagicDamage@@AAEXHHHHPAH@Z@4JA
  01558	83 c0 09	 add	 eax, 9
  0155b	50		 push	 eax
  0155c	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  01561	68 32 02 00 00	 push	 562			; 00000232H
  01566	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0156b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01570	50		 push	 eax
  01571	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  01576	83 c4 0c	 add	 esp, 12			; 0000000cH

; 673  : 		return;

  01579	eb 4f		 jmp	 SHORT $LN4@SetEx
$LN1@SetEx:

; 674  : 	}
; 675  : 
; 676  : 	this->m_iSkillUseType[iSkill] = iSkillUseType;

  0157b	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0157e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01581	8b 55 0c	 mov	 edx, DWORD PTR _iSkillUseType$[ebp]
  01584	89 94 81 d8 f8
	00 00		 mov	 DWORD PTR [ecx+eax*4+63704], edx

; 677  : 	this->m_iSkillBrand[iSkill] = iSkillBrand;

  0158b	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0158e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01591	8b 55 10	 mov	 edx, DWORD PTR _iSkillBrand$[ebp]
  01594	89 94 81 c8 03
	01 00		 mov	 DWORD PTR [ecx+eax*4+66504], edx

; 678  : 	this->m_iKillCount[iSkill] = iKillCount;

  0159b	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0159e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015a1	8b 55 14	 mov	 edx, DWORD PTR _iKillCount$[ebp]
  015a4	89 94 81 b8 0e
	01 00		 mov	 DWORD PTR [ecx+eax*4+69304], edx

; 679  : 	memcpy(this->m_iRequireStatus[iSkill], pReqStatus, sizeof(this->m_iRequireStatus[0]));

  015ab	6a 0c		 push	 12			; 0000000cH
  015ad	8b 45 18	 mov	 eax, DWORD PTR _pReqStatus$[ebp]
  015b0	50		 push	 eax
  015b1	8b 4d 08	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  015b4	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  015b7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  015ba	8d 84 0a a8 19
	01 00		 lea	 eax, DWORD PTR [edx+ecx+72104]
  015c1	50		 push	 eax
  015c2	e8 00 00 00 00	 call	 _memcpy
  015c7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SetEx:

; 680  : }

  015ca	5f		 pop	 edi
  015cb	5e		 pop	 esi
  015cc	5b		 pop	 ebx
  015cd	8b e5		 mov	 esp, ebp
  015cf	5d		 pop	 ebp
  015d0	c2 14 00	 ret	 20			; 00000014H
?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ENDP			; CMagicDamage::SetEx
_TEXT	ENDS
PUBLIC	??_C@_08MAACMGJK@skill?3?$CFd?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z@4JA ; `CMagicDamage::Set'::`2'::__LINE__Var
EXTRN	?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A:BYTE ; g_SkillAdditionInfo
EXTRN	?LogAddL@@3P6AXPADZZA:DWORD			; LogAddL
;	COMDAT ??_C@_08MAACMGJK@skill?3?$CFd?$AA@
CONST	SEGMENT
??_C@_08MAACMGJK@skill?3?$CFd?$AA@ DB 'skill:%d', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z@4JA DD 02acH ; `CMagicDamage::Set'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_loc2$ = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_skill$ = 12						; size = 4
_damage$ = 16						; size = 4
_rlevel$ = 20						; size = 4
_mana$ = 24						; size = 4
_bp$ = 28						; size = 4
_dis$ = 32						; size = 4
_Attr$ = 36						; size = 4
_iSkillType$ = 40					; size = 4
_ReqClass$ = 44						; size = 4
_rEnergy$ = 48						; size = 4
_rLeadership$ = 52					; size = 4
_rdelay$ = 56						; size = 4
?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z PROC		; CMagicDamage::Set
; _this$ = ecx

; 684  : {

  015e0	55		 push	 ebp
  015e1	8b ec		 mov	 ebp, esp
  015e3	83 ec 48	 sub	 esp, 72			; 00000048H
  015e6	53		 push	 ebx
  015e7	56		 push	 esi
  015e8	57		 push	 edi
  015e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 685  : 	if ( skill <0 || skill > MAX_SKILL -1 )

  015ec	83 7d 0c 00	 cmp	 DWORD PTR _skill$[ebp], 0
  015f0	7c 09		 jl	 SHORT $LN157@Set
  015f2	81 7d 0c bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  015f9	7e 2b		 jle	 SHORT $LN158@Set
$LN157@Set:

; 686  : 	{
; 687  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  015fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z@4JA
  01600	83 c0 03	 add	 eax, 3
  01603	50		 push	 eax
  01604	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  01609	68 c9 01 00 00	 push	 457			; 000001c9H
  0160e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  01613	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01618	50		 push	 eax
  01619	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0161e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 688  : 		return;

  01621	e9 36 0a 00 00	 jmp	 $LN159@Set
$LN158@Set:

; 689  : 	}
; 690  : 
; 691  : 	if ( this->m_Damage[skill] != -1 )

  01626	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01629	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0162c	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  01631	74 2b		 je	 SHORT $LN156@Set

; 692  : 	{
; 693  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  01633	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z@4JA
  01638	83 c0 09	 add	 eax, 9
  0163b	50		 push	 eax
  0163c	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  01641	68 32 02 00 00	 push	 562			; 00000232H
  01646	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0164b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  01650	50		 push	 eax
  01651	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  01656	83 c4 0c	 add	 esp, 12			; 0000000cH

; 694  : 		return;

  01659	e9 fe 09 00 00	 jmp	 $LN159@Set
$LN156@Set:

; 695  : 	}
; 696  : 
; 697  : 	strcpy(this->m_Name[skill], name);

  0165e	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  01661	50		 push	 eax
  01662	8b 4d 0c	 mov	 ecx, DWORD PTR _skill$[ebp]
  01665	6b c9 32	 imul	 ecx, 50			; 00000032H
  01668	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0166b	8d 84 0a f4 0a
	00 00		 lea	 eax, DWORD PTR [edx+ecx+2804]
  01672	50		 push	 eax
  01673	e8 00 00 00 00	 call	 _strcpy
  01678	83 c4 08	 add	 esp, 8

; 698  : 	this->m_Damage[skill] = damage;

  0167b	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0167e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01681	8b 55 10	 mov	 edx, DWORD PTR _damage$[ebp]
  01684	89 54 81 04	 mov	 DWORD PTR [ecx+eax*4+4], edx

; 699  : 	this->m_rLevel[skill] = rlevel;

  01688	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0168b	03 45 0c	 add	 eax, DWORD PTR _skill$[ebp]
  0168e	8a 4d 14	 mov	 cl, BYTE PTR _rlevel$[ebp]
  01691	88 88 ac 93 00
	00		 mov	 BYTE PTR [eax+37804], cl

; 700  : 	this->m_Mana[skill] = mana;

  01697	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0169a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0169d	66 8b 55 18	 mov	 dx, WORD PTR _mana$[ebp]
  016a1	66 89 94 41 68
	96 00 00	 mov	 WORD PTR [ecx+eax*2+38504], dx

; 701  : 	this->m_Distance[skill] = dis;

  016a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  016ac	03 45 0c	 add	 eax, DWORD PTR _skill$[ebp]
  016af	8a 4d 20	 mov	 cl, BYTE PTR _dis$[ebp]
  016b2	88 88 e0 9b 00
	00		 mov	 BYTE PTR [eax+39904], cl

; 702  : 	this->m_RequireLeadership[skill] = rLeadership;

  016b8	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  016bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016be	8b 55 34	 mov	 edx, DWORD PTR _rLeadership$[ebp]
  016c1	89 94 81 a0 c7
	00 00		 mov	 DWORD PTR [ecx+eax*4+51104], edx

; 703  : 	this->m_Delay[skill] = rdelay;

  016c8	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  016cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016ce	8b 55 38	 mov	 edx, DWORD PTR _rdelay$[ebp]
  016d1	89 94 81 90 d2
	00 00		 mov	 DWORD PTR [ecx+eax*4+53904], edx

; 704  : 	this->m_BrainPower[skill] = bp;

  016d8	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  016db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016de	66 8b 55 1c	 mov	 dx, WORD PTR _bp$[ebp]
  016e2	66 89 94 41 80
	dd 00 00	 mov	 WORD PTR [ecx+eax*2+56704], dx

; 705  : 	this->m_Attr[skill] = Attr;

  016ea	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  016ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016f0	8b 55 24	 mov	 edx, DWORD PTR _Attr$[ebp]
  016f3	89 94 81 f8 e2
	00 00		 mov	 DWORD PTR [ecx+eax*4+58104], edx

; 706  : 	this->m_iSkillType[skill] = iSkillType;

  016fa	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  016fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01700	8b 55 28	 mov	 edx, DWORD PTR _iSkillType$[ebp]
  01703	89 94 81 e8 ed
	00 00		 mov	 DWORD PTR [ecx+eax*4+60904], edx

; 707  : 	memcpy(this->m_RequireClass[skill], ReqClass, sizeof(this->m_RequireClass[0]));

  0170a	6a 07		 push	 7
  0170c	8b 45 2c	 mov	 eax, DWORD PTR _ReqClass$[ebp]
  0170f	50		 push	 eax
  01710	8b 4d 0c	 mov	 ecx, DWORD PTR _skill$[ebp]
  01713	6b c9 07	 imul	 ecx, 7
  01716	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01719	8d 84 0a 8c a9
	00 00		 lea	 eax, DWORD PTR [edx+ecx+43404]
  01720	50		 push	 eax
  01721	e8 00 00 00 00	 call	 _memcpy
  01726	83 c4 0c	 add	 esp, 12			; 0000000cH

; 708  : 
; 709  : 	int loc2 = (rEnergy * rlevel * 4);

  01729	8b 45 30	 mov	 eax, DWORD PTR _rEnergy$[ebp]
  0172c	0f af 45 14	 imul	 eax, DWORD PTR _rlevel$[ebp]
  01730	c1 e0 02	 shl	 eax, 2
  01733	89 45 f8	 mov	 DWORD PTR _loc2$[ebp], eax

; 710  : 
; 711  : 	if(loc2 > 0)

  01736	83 7d f8 00	 cmp	 DWORD PTR _loc2$[ebp], 0
  0173a	7e 10		 jle	 SHORT $LN155@Set

; 712  : 	{
; 713  : 		loc2 = loc2 / 100;

  0173c	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  0173f	99		 cdq
  01740	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01745	f7 f9		 idiv	 ecx
  01747	89 45 f8	 mov	 DWORD PTR _loc2$[ebp], eax

; 714  : 	}
; 715  : 	else

  0174a	eb 07		 jmp	 SHORT $LN154@Set
$LN155@Set:

; 716  : 	{
; 717  : 		loc2 = 0;

  0174c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _loc2$[ebp], 0
$LN154@Set:

; 718  : 	}
; 719  : 
; 720  : 	this->m_RequireEnergy[skill] = loc2 + 20;

  01753	8b 45 f8	 mov	 eax, DWORD PTR _loc2$[ebp]
  01756	83 c0 14	 add	 eax, 20			; 00000014H
  01759	8b 4d 0c	 mov	 ecx, DWORD PTR _skill$[ebp]
  0175c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0175f	89 84 8a 9c 9e
	00 00		 mov	 DWORD PTR [edx+ecx*4+40604], eax

; 721  : 
; 722  : 	if ( skill == 13 ) // Blast

  01766	83 7d 0c 0d	 cmp	 DWORD PTR _skill$[ebp], 13 ; 0000000dH
  0176a	75 1c		 jne	 SHORT $LN153@Set

; 723  : 	{
; 724  : 		LogAddL("skill:%d", this->m_RequireEnergy[skill]);

  0176c	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0176f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01772	8b 94 81 9c 9e
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+40604]
  01779	52		 push	 edx
  0177a	68 00 00 00 00	 push	 OFFSET ??_C@_08MAACMGJK@skill?3?$CFd?$AA@
  0177f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddL@@3P6AXPADZZA ; LogAddL
  01785	83 c4 08	 add	 esp, 8
$LN153@Set:

; 725  : 	}
; 726  : 
; 727  : 	// Set Level Requirements for Skills
; 728  : 	this->m_RequireLevel[skill] = 0;	// Required Level to use the skill

  01788	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0178b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0178e	c7 84 81 b0 bc
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+48304], 0

; 729  : 
; 730  : 	//if ( skill == 41 )	// Twisting Slash
; 731  : 	//{
; 732  : 	//	this->m_RequireLevel[skill] = 80;
; 733  : 	//}
; 734  : 	//else if ( skill == 42 )	// Rageful Blow
; 735  : 	//{
; 736  : 	//	this->m_RequireLevel[skill] = 170;
; 737  : 	//}
; 738  : 	//else if ( skill == 43 )	// Death Stab
; 739  : 	//{
; 740  : 	//	this->m_RequireLevel[skill] = 160;
; 741  : 	//}
; 742  : 	//else if ( skill == 47 )	// Impale
; 743  : 	//{
; 744  : 	//	this->m_RequireLevel[skill] = 28;
; 745  : 	//}
; 746  : 	//else if ( skill == 48 )	// Inner Strength
; 747  : 	//{
; 748  : 	//	this->m_RequireLevel[skill] = 120;
; 749  : 	//}
; 750  : 	//else if ( skill == 52 )	
; 751  : 	//{
; 752  : 	//	this->m_RequireLevel[skill] = 130;
; 753  : 	//}
; 754  : 
; 755  : 	//if ( skill == 41 )	// Twisting Slash
; 756  : 	//{
; 757  : 	//	this->m_RequireLevel[skill] = ExConfig.Skills.TwistingSlashLevel;//80;
; 758  : 	//}
; 759  : 	//else if ( skill == 42 )	// Rageful Blow
; 760  : 	//{
; 761  : 	//	this->m_RequireLevel[skill] = ExConfig.Skills.RagefulBlowLevel;//170;
; 762  : 	//}
; 763  : 	//else if ( skill == 43 )	// Death Stab
; 764  : 	//{
; 765  : 	//	this->m_RequireLevel[skill] = ExConfig.Skills.DeathStabLevel;//160;
; 766  : 	//}
; 767  : 	//else if ( skill == 47 )	// Impale
; 768  : 	//{
; 769  : 	//	this->m_RequireLevel[skill] = ExConfig.Skills.ImpaleLevel;//28;
; 770  : 	//}
; 771  : 	//else if ( skill == 48 )	// Inner Strength
; 772  : 	//{
; 773  : 	//	this->m_RequireLevel[skill] = ExConfig.Skills.InnerStrengthLevel;//120;
; 774  : 	//}
; 775  : 	//else if ( skill == 52 )	// Penetration
; 776  : 	//{
; 777  : 	//	this->m_RequireLevel[skill] = ExConfig.Skills.PenetrationLevel;//130;
; 778  : 	//}
; 779  : 
; 780  : 	if( g_SkillAdditionInfo.m_SkillUseReqLevel[skill] > 0 )

  01799	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0179c	83 3c 85 5c 00
	00 00 00	 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A[eax*4+92], 0
  017a4	7e 17		 jle	 SHORT $LN152@Set

; 781  : 	{
; 782  : 		this->m_RequireLevel[skill] = g_SkillAdditionInfo.m_SkillUseReqLevel[skill];

  017a6	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  017a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017ac	8b 55 0c	 mov	 edx, DWORD PTR _skill$[ebp]
  017af	8b 14 95 5c 00
	00 00		 mov	 edx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A[edx*4+92]
  017b6	89 94 81 b0 bc
	00 00		 mov	 DWORD PTR [ecx+eax*4+48304], edx
$LN152@Set:

; 783  : 	}
; 784  : 
; 785  : 	if ( skill == 30 )

  017bd	83 7d 0c 1e	 cmp	 DWORD PTR _skill$[ebp], 30 ; 0000001eH
  017c1	75 16		 jne	 SHORT $LN151@Set

; 786  : 	{
; 787  : 		this->m_RequireEnergy[skill] = 30;

  017c3	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  017c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017c9	c7 84 81 9c 9e
	00 00 1e 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 30 ; 0000001eH
  017d4	e9 83 08 00 00	 jmp	 $LN159@Set
$LN151@Set:

; 788  : 	}
; 789  : 	else if ( skill == 31 )

  017d9	83 7d 0c 1f	 cmp	 DWORD PTR _skill$[ebp], 31 ; 0000001fH
  017dd	75 16		 jne	 SHORT $LN149@Set

; 790  : 	{
; 791  : 		this->m_RequireEnergy[skill] = 60;

  017df	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  017e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017e5	c7 84 81 9c 9e
	00 00 3c 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 60 ; 0000003cH
  017f0	e9 67 08 00 00	 jmp	 $LN159@Set
$LN149@Set:

; 792  : 	}
; 793  : 	else if ( skill == 32 )

  017f5	83 7d 0c 20	 cmp	 DWORD PTR _skill$[ebp], 32 ; 00000020H
  017f9	75 16		 jne	 SHORT $LN147@Set

; 794  : 	{
; 795  : 		this->m_RequireEnergy[skill] = 90;

  017fb	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  017fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01801	c7 84 81 9c 9e
	00 00 5a 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 90 ; 0000005aH
  0180c	e9 4b 08 00 00	 jmp	 $LN159@Set
$LN147@Set:

; 796  : 	}
; 797  : 	else if ( skill == 33 )

  01811	83 7d 0c 21	 cmp	 DWORD PTR _skill$[ebp], 33 ; 00000021H
  01815	75 16		 jne	 SHORT $LN145@Set

; 798  : 	{
; 799  : 		this->m_RequireEnergy[skill] = 130;

  01817	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0181a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0181d	c7 84 81 9c 9e
	00 00 82 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 130 ; 00000082H
  01828	e9 2f 08 00 00	 jmp	 $LN159@Set
$LN145@Set:

; 800  : 	}
; 801  : 	else if ( skill == 34 )

  0182d	83 7d 0c 22	 cmp	 DWORD PTR _skill$[ebp], 34 ; 00000022H
  01831	75 16		 jne	 SHORT $LN143@Set

; 802  : 	{
; 803  : 		this->m_RequireEnergy[skill] = 170;

  01833	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01836	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01839	c7 84 81 9c 9e
	00 00 aa 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 170 ; 000000aaH
  01844	e9 13 08 00 00	 jmp	 $LN159@Set
$LN143@Set:

; 804  : 	}
; 805  : 	else if ( skill == 35 )

  01849	83 7d 0c 23	 cmp	 DWORD PTR _skill$[ebp], 35 ; 00000023H
  0184d	75 16		 jne	 SHORT $LN141@Set

; 806  : 	{
; 807  : 		this->m_RequireEnergy[skill] = 210;

  0184f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01852	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01855	c7 84 81 9c 9e
	00 00 d2 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 210 ; 000000d2H
  01860	e9 f7 07 00 00	 jmp	 $LN159@Set
$LN141@Set:

; 808  : 	}
; 809  : 	else if ( skill == 36 )

  01865	83 7d 0c 24	 cmp	 DWORD PTR _skill$[ebp], 36 ; 00000024H
  01869	75 16		 jne	 SHORT $LN139@Set

; 810  : 	{
; 811  : 		this->m_RequireEnergy[skill] = 300;

  0186b	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0186e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01871	c7 84 81 9c 9e
	00 00 2c 01 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 300 ; 0000012cH
  0187c	e9 db 07 00 00	 jmp	 $LN159@Set
$LN139@Set:

; 812  : 	}
; 813  : 	else if ( skill == 41 )

  01881	83 7d 0c 29	 cmp	 DWORD PTR _skill$[ebp], 41 ; 00000029H
  01885	75 16		 jne	 SHORT $LN137@Set

; 814  : 	{
; 815  : 		this->m_RequireEnergy[skill] = 0;

  01887	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0188a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0188d	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01898	e9 bf 07 00 00	 jmp	 $LN159@Set
$LN137@Set:

; 816  : 	}
; 817  : 	else if ( skill == 42 )

  0189d	83 7d 0c 2a	 cmp	 DWORD PTR _skill$[ebp], 42 ; 0000002aH
  018a1	75 16		 jne	 SHORT $LN135@Set

; 818  : 	{
; 819  : 		this->m_RequireEnergy[skill] = 0;

  018a3	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  018a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018a9	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  018b4	e9 a3 07 00 00	 jmp	 $LN159@Set
$LN135@Set:

; 820  : 	}
; 821  : 	else if ( skill == 43 )

  018b9	83 7d 0c 2b	 cmp	 DWORD PTR _skill$[ebp], 43 ; 0000002bH
  018bd	75 16		 jne	 SHORT $LN133@Set

; 822  : 	{
; 823  : 		this->m_RequireEnergy[skill] = 0;

  018bf	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  018c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018c5	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  018d0	e9 87 07 00 00	 jmp	 $LN159@Set
$LN133@Set:

; 824  : 	}
; 825  : 	else if ( skill == 47 )

  018d5	83 7d 0c 2f	 cmp	 DWORD PTR _skill$[ebp], 47 ; 0000002fH
  018d9	75 16		 jne	 SHORT $LN131@Set

; 826  : 	{
; 827  : 		this->m_RequireEnergy[skill] = 0;

  018db	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  018de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018e1	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  018ec	e9 6b 07 00 00	 jmp	 $LN159@Set
$LN131@Set:

; 828  : 	}
; 829  : 	else if ( skill == 48 )

  018f1	83 7d 0c 30	 cmp	 DWORD PTR _skill$[ebp], 48 ; 00000030H
  018f5	75 16		 jne	 SHORT $LN129@Set

; 830  : 	{
; 831  : 		this->m_RequireEnergy[skill] = 0;

  018f7	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  018fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018fd	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01908	e9 4f 07 00 00	 jmp	 $LN159@Set
$LN129@Set:

; 832  : 	}
; 833  : 	else if ( skill == 49  )

  0190d	83 7d 0c 31	 cmp	 DWORD PTR _skill$[ebp], 49 ; 00000031H
  01911	75 16		 jne	 SHORT $LN127@Set

; 834  : 	{
; 835  : 		this->m_RequireEnergy[skill] = 0;

  01913	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01916	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01919	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01924	e9 33 07 00 00	 jmp	 $LN159@Set
$LN127@Set:

; 836  : 	}
; 837  : 	else if ( skill == 55  )

  01929	83 7d 0c 37	 cmp	 DWORD PTR _skill$[ebp], 55 ; 00000037H
  0192d	75 16		 jne	 SHORT $LN125@Set

; 838  : 	{
; 839  : 		this->m_RequireEnergy[skill] = 0;

  0192f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01932	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01935	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01940	e9 17 07 00 00	 jmp	 $LN159@Set
$LN125@Set:

; 840  : 	}
; 841  : 	else if ( skill == 51  )

  01945	83 7d 0c 33	 cmp	 DWORD PTR _skill$[ebp], 51 ; 00000033H
  01949	75 16		 jne	 SHORT $LN123@Set

; 842  : 	{
; 843  : 		this->m_RequireEnergy[skill] = 0;

  0194b	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0194e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01951	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  0195c	e9 fb 06 00 00	 jmp	 $LN159@Set
$LN123@Set:

; 844  : 	}
; 845  : 	else if ( skill == 52  )

  01961	83 7d 0c 34	 cmp	 DWORD PTR _skill$[ebp], 52 ; 00000034H
  01965	75 16		 jne	 SHORT $LN121@Set

; 846  : 	{
; 847  : 		this->m_RequireEnergy[skill] = 0;

  01967	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0196a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0196d	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01978	e9 df 06 00 00	 jmp	 $LN159@Set
$LN121@Set:

; 848  : 	}
; 849  : 	else if ( skill == 24  )

  0197d	83 7d 0c 18	 cmp	 DWORD PTR _skill$[ebp], 24 ; 00000018H
  01981	75 16		 jne	 SHORT $LN119@Set

; 850  : 	{
; 851  : 		this->m_RequireEnergy[skill] = 0;

  01983	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01986	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01989	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01994	e9 c3 06 00 00	 jmp	 $LN159@Set
$LN119@Set:

; 852  : 	}
; 853  : 	else if ( skill == 17 )

  01999	83 7d 0c 11	 cmp	 DWORD PTR _skill$[ebp], 17 ; 00000011H
  0199d	75 16		 jne	 SHORT $LN117@Set

; 854  : 	{
; 855  : 		this->m_RequireEnergy[skill] = 0;

  0199f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  019a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019a5	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  019b0	e9 a7 06 00 00	 jmp	 $LN159@Set
$LN117@Set:

; 856  : 	}
; 857  : 	else if ( skill == 18 )

  019b5	83 7d 0c 12	 cmp	 DWORD PTR _skill$[ebp], 18 ; 00000012H
  019b9	75 16		 jne	 SHORT $LN115@Set

; 858  : 	{
; 859  : 		this->m_RequireEnergy[skill] = 0;

  019bb	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  019be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019c1	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  019cc	e9 8b 06 00 00	 jmp	 $LN159@Set
$LN115@Set:

; 860  : 	}
; 861  : 	else if ( skill == 19 )

  019d1	83 7d 0c 13	 cmp	 DWORD PTR _skill$[ebp], 19 ; 00000013H
  019d5	75 16		 jne	 SHORT $LN113@Set

; 862  : 	{
; 863  : 		this->m_RequireEnergy[skill] = 0;

  019d7	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  019da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019dd	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  019e8	e9 6f 06 00 00	 jmp	 $LN159@Set
$LN113@Set:

; 864  : 	}
; 865  : 	else if ( skill == 20  )

  019ed	83 7d 0c 14	 cmp	 DWORD PTR _skill$[ebp], 20 ; 00000014H
  019f1	75 16		 jne	 SHORT $LN111@Set

; 866  : 	{
; 867  : 		this->m_RequireEnergy[skill] = 0;

  019f3	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  019f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  019f9	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01a04	e9 53 06 00 00	 jmp	 $LN159@Set
$LN111@Set:

; 868  : 	}
; 869  : 	else if ( skill == 21  )

  01a09	83 7d 0c 15	 cmp	 DWORD PTR _skill$[ebp], 21 ; 00000015H
  01a0d	75 16		 jne	 SHORT $LN109@Set

; 870  : 	{
; 871  : 		this->m_RequireEnergy[skill] = 0;

  01a0f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01a12	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a15	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01a20	e9 37 06 00 00	 jmp	 $LN159@Set
$LN109@Set:

; 872  : 	}
; 873  : 	else if ( skill == 22  )

  01a25	83 7d 0c 16	 cmp	 DWORD PTR _skill$[ebp], 22 ; 00000016H
  01a29	75 16		 jne	 SHORT $LN107@Set

; 874  : 	{
; 875  : 		this->m_RequireEnergy[skill] = 0;

  01a2b	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01a2e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a31	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01a3c	e9 1b 06 00 00	 jmp	 $LN159@Set
$LN107@Set:

; 876  : 	}
; 877  : 	else if ( skill == 23  )

  01a41	83 7d 0c 17	 cmp	 DWORD PTR _skill$[ebp], 23 ; 00000017H
  01a45	75 16		 jne	 SHORT $LN105@Set

; 878  : 	{
; 879  : 		this->m_RequireEnergy[skill] = 0;

  01a47	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01a4a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a4d	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01a58	e9 ff 05 00 00	 jmp	 $LN159@Set
$LN105@Set:

; 880  : 	}
; 881  : 	else if ( skill == 25  )

  01a5d	83 7d 0c 19	 cmp	 DWORD PTR _skill$[ebp], 25 ; 00000019H
  01a61	75 16		 jne	 SHORT $LN103@Set

; 882  : 	{
; 883  : 		this->m_RequireEnergy[skill] = 0;

  01a63	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01a66	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a69	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01a74	e9 e3 05 00 00	 jmp	 $LN159@Set
$LN103@Set:

; 884  : 	}
; 885  : 	else if ( skill == 56  )

  01a79	83 7d 0c 38	 cmp	 DWORD PTR _skill$[ebp], 56 ; 00000038H
  01a7d	75 16		 jne	 SHORT $LN101@Set

; 886  : 	{
; 887  : 		this->m_RequireEnergy[skill] = 0;

  01a7f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01a82	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a85	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01a90	e9 c7 05 00 00	 jmp	 $LN159@Set
$LN101@Set:

; 888  : 	}
; 889  : 	else if ( skill == 60  )

  01a95	83 7d 0c 3c	 cmp	 DWORD PTR _skill$[ebp], 60 ; 0000003cH
  01a99	75 16		 jne	 SHORT $LN99@Set

; 890  : 	{
; 891  : 		this->m_RequireEnergy[skill] = 0;

  01a9b	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01a9e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01aa1	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01aac	e9 ab 05 00 00	 jmp	 $LN159@Set
$LN99@Set:

; 892  : 	}
; 893  : 	else if ( skill == 44  )

  01ab1	83 7d 0c 2c	 cmp	 DWORD PTR _skill$[ebp], 44 ; 0000002cH
  01ab5	75 16		 jne	 SHORT $LN97@Set

; 894  : 	{
; 895  : 		this->m_RequireEnergy[skill] = 0;

  01ab7	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01aba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01abd	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01ac8	e9 8f 05 00 00	 jmp	 $LN159@Set
$LN97@Set:

; 896  : 	}
; 897  : 	else if ( skill == 45  )

  01acd	83 7d 0c 2d	 cmp	 DWORD PTR _skill$[ebp], 45 ; 0000002dH
  01ad1	75 16		 jne	 SHORT $LN95@Set

; 898  : 	{
; 899  : 		this->m_RequireEnergy[skill] = 0;

  01ad3	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01ad6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ad9	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01ae4	e9 73 05 00 00	 jmp	 $LN159@Set
$LN95@Set:

; 900  : 	}
; 901  : 	else if ( skill == 46  )

  01ae9	83 7d 0c 2e	 cmp	 DWORD PTR _skill$[ebp], 46 ; 0000002eH
  01aed	75 16		 jne	 SHORT $LN93@Set

; 902  : 	{
; 903  : 		this->m_RequireEnergy[skill] = 0;

  01aef	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01af2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01af5	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01b00	e9 57 05 00 00	 jmp	 $LN159@Set
$LN93@Set:

; 904  : 	}
; 905  : 	else if ( skill == 57  )

  01b05	83 7d 0c 39	 cmp	 DWORD PTR _skill$[ebp], 57 ; 00000039H
  01b09	75 16		 jne	 SHORT $LN91@Set

; 906  : 	{
; 907  : 		this->m_RequireEnergy[skill] = 0;

  01b0b	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01b0e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b11	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01b1c	e9 3b 05 00 00	 jmp	 $LN159@Set
$LN91@Set:

; 908  : 	}
; 909  : 	else if ( skill == 73  )

  01b21	83 7d 0c 49	 cmp	 DWORD PTR _skill$[ebp], 73 ; 00000049H
  01b25	75 16		 jne	 SHORT $LN89@Set

; 910  : 	{
; 911  : 		this->m_RequireEnergy[skill] = 0;

  01b27	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01b2a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b2d	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01b38	e9 1f 05 00 00	 jmp	 $LN159@Set
$LN89@Set:

; 912  : 	}
; 913  : 	else if ( skill == 74  )

  01b3d	83 7d 0c 4a	 cmp	 DWORD PTR _skill$[ebp], 74 ; 0000004aH
  01b41	75 16		 jne	 SHORT $LN87@Set

; 914  : 	{
; 915  : 		this->m_RequireEnergy[skill] = 0;

  01b43	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01b46	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b49	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01b54	e9 03 05 00 00	 jmp	 $LN159@Set
$LN87@Set:

; 916  : 	}
; 917  : 	else if ( skill == 67  )

  01b59	83 7d 0c 43	 cmp	 DWORD PTR _skill$[ebp], 67 ; 00000043H
  01b5d	75 16		 jne	 SHORT $LN85@Set

; 918  : 	{
; 919  : 		this->m_RequireEnergy[skill] = 0;

  01b5f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01b62	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b65	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01b70	e9 e7 04 00 00	 jmp	 $LN159@Set
$LN85@Set:

; 920  : 	}
; 921  : 	else if ( skill == 68  )

  01b75	83 7d 0c 44	 cmp	 DWORD PTR _skill$[ebp], 68 ; 00000044H
  01b79	75 16		 jne	 SHORT $LN83@Set

; 922  : 	{
; 923  : 		this->m_RequireEnergy[skill] = 0;

  01b7b	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01b7e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b81	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01b8c	e9 cb 04 00 00	 jmp	 $LN159@Set
$LN83@Set:

; 924  : 	}
; 925  : 	else if ( skill == 69  )

  01b91	83 7d 0c 45	 cmp	 DWORD PTR _skill$[ebp], 69 ; 00000045H
  01b95	75 16		 jne	 SHORT $LN81@Set

; 926  : 	{
; 927  : 		this->m_RequireEnergy[skill] = 0;

  01b97	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01b9a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b9d	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01ba8	e9 af 04 00 00	 jmp	 $LN159@Set
$LN81@Set:

; 928  : 	}
; 929  : 	else if ( skill == 70  )

  01bad	83 7d 0c 46	 cmp	 DWORD PTR _skill$[ebp], 70 ; 00000046H
  01bb1	75 16		 jne	 SHORT $LN79@Set

; 930  : 	{
; 931  : 		this->m_RequireEnergy[skill] = 0;

  01bb3	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01bb6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bb9	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01bc4	e9 93 04 00 00	 jmp	 $LN159@Set
$LN79@Set:

; 932  : 	}
; 933  : 	else if ( skill == 71  )

  01bc9	83 7d 0c 47	 cmp	 DWORD PTR _skill$[ebp], 71 ; 00000047H
  01bcd	75 16		 jne	 SHORT $LN77@Set

; 934  : 	{
; 935  : 		this->m_RequireEnergy[skill] = 0;

  01bcf	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01bd2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bd5	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01be0	e9 77 04 00 00	 jmp	 $LN159@Set
$LN77@Set:

; 936  : 	}
; 937  : 	else if ( skill == 72  )

  01be5	83 7d 0c 48	 cmp	 DWORD PTR _skill$[ebp], 72 ; 00000048H
  01be9	75 16		 jne	 SHORT $LN75@Set

; 938  : 	{
; 939  : 		this->m_RequireEnergy[skill] = 0;

  01beb	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01bee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bf1	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01bfc	e9 5b 04 00 00	 jmp	 $LN159@Set
$LN75@Set:

; 940  : 	}
; 941  : 	else if ( skill == 76  )

  01c01	83 7d 0c 4c	 cmp	 DWORD PTR _skill$[ebp], 76 ; 0000004cH
  01c05	75 16		 jne	 SHORT $LN73@Set

; 942  : 	{
; 943  : 		this->m_RequireEnergy[skill] = 0;

  01c07	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01c0a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c0d	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01c18	e9 3f 04 00 00	 jmp	 $LN159@Set
$LN73@Set:

; 944  : 	}
; 945  : 	else if ( skill == 77  )

  01c1d	83 7d 0c 4d	 cmp	 DWORD PTR _skill$[ebp], 77 ; 0000004dH
  01c21	75 16		 jne	 SHORT $LN71@Set

; 946  : 	{
; 947  : 		this->m_RequireEnergy[skill] = 0;

  01c23	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01c26	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c29	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01c34	e9 23 04 00 00	 jmp	 $LN159@Set
$LN71@Set:

; 948  : 	}
; 949  : 	else if ( skill == 78  )

  01c39	83 7d 0c 4e	 cmp	 DWORD PTR _skill$[ebp], 78 ; 0000004eH
  01c3d	75 16		 jne	 SHORT $LN69@Set

; 950  : 	{
; 951  : 		this->m_RequireEnergy[skill] = 0;

  01c3f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01c42	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c45	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01c50	e9 07 04 00 00	 jmp	 $LN159@Set
$LN69@Set:

; 952  : 	}
; 953  : 	else if ( skill == 79  )

  01c55	83 7d 0c 4f	 cmp	 DWORD PTR _skill$[ebp], 79 ; 0000004fH
  01c59	75 16		 jne	 SHORT $LN67@Set

; 954  : 	{
; 955  : 		this->m_RequireEnergy[skill] = 0;

  01c5b	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01c5e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c61	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01c6c	e9 eb 03 00 00	 jmp	 $LN159@Set
$LN67@Set:

; 956  : 	}
; 957  : 	else if ( skill == 62  )

  01c71	83 7d 0c 3e	 cmp	 DWORD PTR _skill$[ebp], 62 ; 0000003eH
  01c75	75 16		 jne	 SHORT $LN65@Set

; 958  : 	{
; 959  : 		this->m_RequireEnergy[skill] = 0;

  01c77	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01c7a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c7d	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01c88	e9 cf 03 00 00	 jmp	 $LN159@Set
$LN65@Set:

; 960  : 	}
; 961  : 	else if ( skill == 214  )

  01c8d	81 7d 0c d6 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 214 ; 000000d6H
  01c94	75 16		 jne	 SHORT $LN63@Set

; 962  : 	{
; 963  : 		this->m_RequireEnergy[skill] = 0;

  01c96	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01c99	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c9c	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01ca7	e9 b0 03 00 00	 jmp	 $LN159@Set
$LN63@Set:

; 964  : 	}
; 965  : 	else if ( skill == 215  )

  01cac	81 7d 0c d7 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 215 ; 000000d7H
  01cb3	75 16		 jne	 SHORT $LN61@Set

; 966  : 	{
; 967  : 		this->m_RequireEnergy[skill] = 0;

  01cb5	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01cb8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01cbb	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01cc6	e9 91 03 00 00	 jmp	 $LN159@Set
$LN61@Set:

; 968  : 	}
; 969  : 	else if ( skill == 216  )

  01ccb	81 7d 0c d8 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 216 ; 000000d8H
  01cd2	75 16		 jne	 SHORT $LN59@Set

; 970  : 	{
; 971  : 		this->m_RequireEnergy[skill] = 0;

  01cd4	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01cd7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01cda	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01ce5	e9 72 03 00 00	 jmp	 $LN159@Set
$LN59@Set:

; 972  : 	}
; 973  : 	else if ( skill == 217  )

  01cea	81 7d 0c d9 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 217 ; 000000d9H
  01cf1	75 16		 jne	 SHORT $LN57@Set

; 974  : 	{
; 975  : 		this->m_RequireEnergy[skill] = 0;

  01cf3	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01cf6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01cf9	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01d04	e9 53 03 00 00	 jmp	 $LN159@Set
$LN57@Set:

; 976  : 	}
; 977  : 	else if ( skill == 219  )

  01d09	81 7d 0c db 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 219 ; 000000dbH
  01d10	75 16		 jne	 SHORT $LN55@Set

; 978  : 	{
; 979  : 		this->m_RequireEnergy[skill] = 0;

  01d12	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01d15	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d18	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01d23	e9 34 03 00 00	 jmp	 $LN159@Set
$LN55@Set:

; 980  : 	}
; 981  : 	else if ( skill == 220  )

  01d28	81 7d 0c dc 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 220 ; 000000dcH
  01d2f	75 16		 jne	 SHORT $LN53@Set

; 982  : 	{
; 983  : 		this->m_RequireEnergy[skill] = 0;

  01d31	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01d34	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d37	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01d42	e9 15 03 00 00	 jmp	 $LN159@Set
$LN53@Set:

; 984  : 	}
; 985  : 	else if ( skill == 223  )

  01d47	81 7d 0c df 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 223 ; 000000dfH
  01d4e	75 16		 jne	 SHORT $LN51@Set

; 986  : 	{
; 987  : 		this->m_RequireEnergy[skill] = 0;

  01d50	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01d53	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d56	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01d61	e9 f6 02 00 00	 jmp	 $LN159@Set
$LN51@Set:

; 988  : 	}
; 989  : 	else if ( skill == 224  )

  01d66	81 7d 0c e0 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 224 ; 000000e0H
  01d6d	75 16		 jne	 SHORT $LN49@Set

; 990  : 	{
; 991  : 		this->m_RequireEnergy[skill] = 0;

  01d6f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01d72	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d75	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01d80	e9 d7 02 00 00	 jmp	 $LN159@Set
$LN49@Set:

; 992  : 	}
; 993  : 	else if ( skill == 221  )

  01d85	81 7d 0c dd 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 221 ; 000000ddH
  01d8c	75 16		 jne	 SHORT $LN47@Set

; 994  : 	{
; 995  : 		this->m_RequireEnergy[skill] = 0;

  01d8e	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01d91	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d94	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01d9f	e9 b8 02 00 00	 jmp	 $LN159@Set
$LN47@Set:

; 996  : 	}
; 997  : 	else if ( skill == 222  )

  01da4	81 7d 0c de 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 222 ; 000000deH
  01dab	75 16		 jne	 SHORT $LN45@Set

; 998  : 	{
; 999  : 		this->m_RequireEnergy[skill] = 0;

  01dad	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01db0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01db3	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01dbe	e9 99 02 00 00	 jmp	 $LN159@Set
$LN45@Set:

; 1000 : 	}
; 1001 : 	//Season 4
; 1002 :     else if ( skill == 225  )

  01dc3	81 7d 0c e1 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 225 ; 000000e1H
  01dca	75 16		 jne	 SHORT $LN43@Set

; 1003 :     {
; 1004 :         this->m_RequireEnergy[skill] = 0;

  01dcc	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01dcf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dd2	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01ddd	e9 7a 02 00 00	 jmp	 $LN159@Set
$LN43@Set:

; 1005 :     }
; 1006 :     else if ( skill == 230  )

  01de2	81 7d 0c e6 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 230 ; 000000e6H
  01de9	75 16		 jne	 SHORT $LN41@Set

; 1007 :     {
; 1008 :         this->m_RequireEnergy[skill] = 0;

  01deb	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01dee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01df1	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01dfc	e9 5b 02 00 00	 jmp	 $LN159@Set
$LN41@Set:

; 1009 :     }
; 1010 :     else if ( skill == 218  )

  01e01	81 7d 0c da 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 218 ; 000000daH
  01e08	75 16		 jne	 SHORT $LN39@Set

; 1011 :     {
; 1012 :         this->m_RequireEnergy[skill] = 0;

  01e0a	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01e0d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e10	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01e1b	e9 3c 02 00 00	 jmp	 $LN159@Set
$LN39@Set:

; 1013 :     }
; 1014 :     else if ( skill == 232  )

  01e20	81 7d 0c e8 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 232 ; 000000e8H
  01e27	75 16		 jne	 SHORT $LN37@Set

; 1015 :     {
; 1016 :         this->m_RequireEnergy[skill] = 0;

  01e29	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01e2c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e2f	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01e3a	e9 1d 02 00 00	 jmp	 $LN159@Set
$LN37@Set:

; 1017 :     }
; 1018 :     else if ( skill == 233  )

  01e3f	81 7d 0c e9 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 233 ; 000000e9H
  01e46	75 16		 jne	 SHORT $LN35@Set

; 1019 :     {
; 1020 :         this->m_RequireEnergy[skill] = 0;

  01e48	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01e4b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e4e	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01e59	e9 fe 01 00 00	 jmp	 $LN159@Set
$LN35@Set:

; 1021 :     }
; 1022 :     else if ( skill == 234  )

  01e5e	81 7d 0c ea 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 234 ; 000000eaH
  01e65	75 16		 jne	 SHORT $LN33@Set

; 1023 :     {
; 1024 :         this->m_RequireEnergy[skill] = 0;

  01e67	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01e6a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e6d	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01e78	e9 df 01 00 00	 jmp	 $LN159@Set
$LN33@Set:

; 1025 :     }
; 1026 :     else if ( skill == 235  )

  01e7d	81 7d 0c eb 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 235 ; 000000ebH
  01e84	75 16		 jne	 SHORT $LN31@Set

; 1027 :     {
; 1028 :         this->m_RequireEnergy[skill] = 0;

  01e86	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01e89	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e8c	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01e97	e9 c0 01 00 00	 jmp	 $LN159@Set
$LN31@Set:

; 1029 :     }
; 1030 :     else if ( skill == 236  )

  01e9c	81 7d 0c ec 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 236 ; 000000ecH
  01ea3	75 16		 jne	 SHORT $LN29@Set

; 1031 :     {
; 1032 :         this->m_RequireEnergy[skill] = 0;

  01ea5	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01ea8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01eab	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01eb6	e9 a1 01 00 00	 jmp	 $LN159@Set
$LN29@Set:

; 1033 :     }
; 1034 :     else if ( skill == 237  )

  01ebb	81 7d 0c ed 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 237 ; 000000edH
  01ec2	75 16		 jne	 SHORT $LN27@Set

; 1035 :     {
; 1036 :         this->m_RequireEnergy[skill] = 0;

  01ec4	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01ec7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01eca	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01ed5	e9 82 01 00 00	 jmp	 $LN159@Set
$LN27@Set:

; 1037 :     }
; 1038 :     else if ( skill == 238  )

  01eda	81 7d 0c ee 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 238 ; 000000eeH
  01ee1	75 16		 jne	 SHORT $LN25@Set

; 1039 :     {
; 1040 :         this->m_RequireEnergy[skill] = 0;

  01ee3	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01ee6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ee9	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01ef4	e9 63 01 00 00	 jmp	 $LN159@Set
$LN25@Set:

; 1041 :     }
; 1042 : 	else if ( skill == 239  )

  01ef9	81 7d 0c ef 00
	00 00		 cmp	 DWORD PTR _skill$[ebp], 239 ; 000000efH
  01f00	75 16		 jne	 SHORT $LN23@Set

; 1043 : 	{
; 1044 : 		this->m_RequireEnergy[skill] = 0;

  01f02	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01f05	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f08	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01f13	e9 44 01 00 00	 jmp	 $LN159@Set
$LN23@Set:

; 1045 : 	}
; 1046 : 	else if ( skill == 260  )

  01f18	81 7d 0c 04 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 260 ; 00000104H
  01f1f	75 16		 jne	 SHORT $LN21@Set

; 1047 : 	{
; 1048 : 		this->m_RequireEnergy[skill] = 0;

  01f21	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01f24	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f27	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01f32	e9 25 01 00 00	 jmp	 $LN159@Set
$LN21@Set:

; 1049 : 	}
; 1050 : 	else if ( skill == 261  )

  01f37	81 7d 0c 05 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 261 ; 00000105H
  01f3e	75 16		 jne	 SHORT $LN19@Set

; 1051 : 	{
; 1052 : 		this->m_RequireEnergy[skill] = 0;

  01f40	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01f43	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f46	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01f51	e9 06 01 00 00	 jmp	 $LN159@Set
$LN19@Set:

; 1053 : 	}
; 1054 : 	else if ( skill == 262  )

  01f56	81 7d 0c 06 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 262 ; 00000106H
  01f5d	75 16		 jne	 SHORT $LN17@Set

; 1055 : 	{
; 1056 : 		this->m_RequireEnergy[skill] = 0;

  01f5f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01f62	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f65	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01f70	e9 e7 00 00 00	 jmp	 $LN159@Set
$LN17@Set:

; 1057 : 	}
; 1058 : 	else if ( skill == 263  )

  01f75	81 7d 0c 07 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 263 ; 00000107H
  01f7c	75 16		 jne	 SHORT $LN15@Set

; 1059 : 	{
; 1060 : 		this->m_RequireEnergy[skill] = 0;

  01f7e	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01f81	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f84	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01f8f	e9 c8 00 00 00	 jmp	 $LN159@Set
$LN15@Set:

; 1061 : 	}
; 1062 : 	else if ( skill == 264  )

  01f94	81 7d 0c 08 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 264 ; 00000108H
  01f9b	75 16		 jne	 SHORT $LN13@Set

; 1063 : 	{
; 1064 : 		this->m_RequireEnergy[skill] = 0;

  01f9d	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01fa0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fa3	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01fae	e9 a9 00 00 00	 jmp	 $LN159@Set
$LN13@Set:

; 1065 : 	}
; 1066 : 	else if ( skill == 265  )

  01fb3	81 7d 0c 09 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 265 ; 00000109H
  01fba	75 16		 jne	 SHORT $LN11@Set

; 1067 : 	{
; 1068 : 		this->m_RequireEnergy[skill] = 0;

  01fbc	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01fbf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fc2	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01fcd	e9 8a 00 00 00	 jmp	 $LN159@Set
$LN11@Set:

; 1069 : 	}
; 1070 : 	else if ( skill == 266  )

  01fd2	81 7d 0c 0a 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 266 ; 0000010aH
  01fd9	75 13		 jne	 SHORT $LN9@Set

; 1071 : 	{
; 1072 : 		this->m_RequireEnergy[skill] = 0;

  01fdb	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01fde	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fe1	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  01fec	eb 6e		 jmp	 SHORT $LN159@Set
$LN9@Set:

; 1073 : 	}
; 1074 : 	else if ( skill == 267  )

  01fee	81 7d 0c 0b 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 267 ; 0000010bH
  01ff5	75 13		 jne	 SHORT $LN7@Set

; 1075 : 	{
; 1076 : 		this->m_RequireEnergy[skill] = 0;

  01ff7	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  01ffa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ffd	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  02008	eb 52		 jmp	 SHORT $LN159@Set
$LN7@Set:

; 1077 : 	}
; 1078 : 	else if ( skill == 268  )

  0200a	81 7d 0c 0c 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 268 ; 0000010cH
  02011	75 13		 jne	 SHORT $LN5@Set

; 1079 : 	{
; 1080 : 		this->m_RequireEnergy[skill] = 0;

  02013	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  02016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02019	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  02024	eb 36		 jmp	 SHORT $LN159@Set
$LN5@Set:

; 1081 : 	}
; 1082 : 	else if ( skill == 269  )

  02026	81 7d 0c 0d 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 269 ; 0000010dH
  0202d	75 13		 jne	 SHORT $LN3@Set

; 1083 : 	{
; 1084 : 		this->m_RequireEnergy[skill] = 0;

  0202f	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  02032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02035	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
  02040	eb 1a		 jmp	 SHORT $LN159@Set
$LN3@Set:

; 1085 : 	}
; 1086 : 	else if ( skill == 270  )

  02042	81 7d 0c 0e 01
	00 00		 cmp	 DWORD PTR _skill$[ebp], 270 ; 0000010eH
  02049	75 11		 jne	 SHORT $LN159@Set

; 1087 : 	{
; 1088 : 		this->m_RequireEnergy[skill] = 0;

  0204b	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  0204e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02051	c7 84 81 9c 9e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+40604], 0
$LN159@Set:

; 1089 : 	}
; 1090 : }

  0205c	5f		 pop	 edi
  0205d	5e		 pop	 esi
  0205e	5b		 pop	 ebx
  0205f	8b e5		 mov	 esp, ebp
  02061	5d		 pop	 ebp
  02062	c2 34 00	 ret	 52			; 00000034H
?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z ENDP		; CMagicDamage::Set
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??Get@CMagicDamage@@AAEHH@Z@4JA	; `CMagicDamage::Get'::`2'::__LINE__Var
PUBLIC	?Get@CMagicDamage@@AAEHH@Z			; CMagicDamage::Get
;	COMDAT ?__LINE__Var@?1??Get@CMagicDamage@@AAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Get@CMagicDamage@@AAEHH@Z@4JA DD 0446H	; `CMagicDamage::Get'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?Get@CMagicDamage@@AAEHH@Z PROC				; CMagicDamage::Get
; _this$ = ecx

; 1094 : {

  02070	55		 push	 ebp
  02071	8b ec		 mov	 ebp, esp
  02073	83 ec 44	 sub	 esp, 68			; 00000044H
  02076	53		 push	 ebx
  02077	56		 push	 esi
  02078	57		 push	 edi
  02079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1095 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  0207c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02080	7c 09		 jl	 SHORT $LN2@Get
  02082	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02089	7e 2f		 jle	 SHORT $LN3@Get
$LN2@Get:

; 1096 : 	{
; 1097 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0208b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Get@CMagicDamage@@AAEHH@Z@4JA
  02090	83 c0 03	 add	 eax, 3
  02093	50		 push	 eax
  02094	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02099	68 c9 01 00 00	 push	 457			; 000001c9H
  0209e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  020a3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  020a8	50		 push	 eax
  020a9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  020af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1098 : 		return this->m_Damage[0];

  020b2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  020b5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  020b8	eb 46		 jmp	 SHORT $LN4@Get
$LN3@Get:

; 1099 : 	}
; 1100 : 
; 1101 : 	if ( this->m_Damage[skill] == -1 )

  020ba	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  020bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020c0	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  020c5	75 2f		 jne	 SHORT $LN1@Get

; 1102 : 	{
; 1103 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  020c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Get@CMagicDamage@@AAEHH@Z@4JA
  020cc	83 c0 09	 add	 eax, 9
  020cf	50		 push	 eax
  020d0	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  020d5	68 ca 01 00 00	 push	 458			; 000001caH
  020da	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  020df	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  020e4	50		 push	 eax
  020e5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  020eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1104 : 		return this->m_Damage[0];

  020ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  020f1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  020f4	eb 0a		 jmp	 SHORT $LN4@Get
$LN1@Get:

; 1105 : 	}
; 1106 : 
; 1107 : 	return this->m_Damage[skill];

  020f6	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  020f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020fc	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]
$LN4@Get:

; 1108 : }

  02100	5f		 pop	 edi
  02101	5e		 pop	 esi
  02102	5b		 pop	 ebx
  02103	8b e5		 mov	 esp, ebp
  02105	5d		 pop	 ebp
  02106	c2 04 00	 ret	 4
?Get@CMagicDamage@@AAEHH@Z ENDP				; CMagicDamage::Get
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??SkillGet@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::SkillGet'::`2'::__LINE__Var
PUBLIC	?SkillGet@CMagicDamage@@QAEHH@Z			; CMagicDamage::SkillGet
;	COMDAT ?__LINE__Var@?1??SkillGet@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SkillGet@CMagicDamage@@QAEHH@Z@4JA DD 0458H ; `CMagicDamage::SkillGet'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?SkillGet@CMagicDamage@@QAEHH@Z PROC			; CMagicDamage::SkillGet
; _this$ = ecx

; 1112 : {

  02110	55		 push	 ebp
  02111	8b ec		 mov	 ebp, esp
  02113	83 ec 44	 sub	 esp, 68			; 00000044H
  02116	53		 push	 ebx
  02117	56		 push	 esi
  02118	57		 push	 edi
  02119	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1113 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  0211c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02120	7c 09		 jl	 SHORT $LN2@SkillGet
  02122	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02129	7e 2f		 jle	 SHORT $LN3@SkillGet
$LN2@SkillGet:

; 1114 : 	{
; 1115 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0212b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGet@CMagicDamage@@QAEHH@Z@4JA
  02130	83 c0 03	 add	 eax, 3
  02133	50		 push	 eax
  02134	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02139	68 c9 01 00 00	 push	 457			; 000001c9H
  0213e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02143	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02148	50		 push	 eax
  02149	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0214f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1116 : 		return this->m_Damage[0];

  02152	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02155	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02158	eb 46		 jmp	 SHORT $LN4@SkillGet
$LN3@SkillGet:

; 1117 : 	}
; 1118 : 
; 1119 : 	if ( this->m_Damage[skill] == -1 )

  0215a	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  0215d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02160	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  02165	75 2f		 jne	 SHORT $LN1@SkillGet

; 1120 : 	{
; 1121 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  02167	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGet@CMagicDamage@@QAEHH@Z@4JA
  0216c	83 c0 09	 add	 eax, 9
  0216f	50		 push	 eax
  02170	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02175	68 ca 01 00 00	 push	 458			; 000001caH
  0217a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0217f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02184	50		 push	 eax
  02185	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0218b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1122 : 		return this->m_Damage[0];

  0218e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02191	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02194	eb 0a		 jmp	 SHORT $LN4@SkillGet
$LN1@SkillGet:

; 1123 : 	}
; 1124 : 
; 1125 : 	return this->m_Damage[skill];

  02196	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  02199	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0219c	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]
$LN4@SkillGet:

; 1126 : }

  021a0	5f		 pop	 edi
  021a1	5e		 pop	 esi
  021a2	5b		 pop	 ebx
  021a3	8b e5		 mov	 esp, ebp
  021a5	5d		 pop	 ebp
  021a6	c2 04 00	 ret	 4
?SkillGet@CMagicDamage@@QAEHH@Z ENDP			; CMagicDamage::SkillGet
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??SkillGetMana@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::SkillGetMana'::`2'::__LINE__Var
PUBLIC	?SkillGetMana@CMagicDamage@@QAEHH@Z		; CMagicDamage::SkillGetMana
;	COMDAT ?__LINE__Var@?1??SkillGetMana@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SkillGetMana@CMagicDamage@@QAEHH@Z@4JA DD 046aH ; `CMagicDamage::SkillGetMana'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?SkillGetMana@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::SkillGetMana
; _this$ = ecx

; 1130 : {

  021b0	55		 push	 ebp
  021b1	8b ec		 mov	 ebp, esp
  021b3	83 ec 44	 sub	 esp, 68			; 00000044H
  021b6	53		 push	 ebx
  021b7	56		 push	 esi
  021b8	57		 push	 edi
  021b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1131 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  021bc	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  021c0	7c 09		 jl	 SHORT $LN2@SkillGetMa
  021c2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  021c9	7e 33		 jle	 SHORT $LN3@SkillGetMa
$LN2@SkillGetMa:

; 1132 : 	{
; 1133 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  021cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGetMana@CMagicDamage@@QAEHH@Z@4JA
  021d0	83 c0 03	 add	 eax, 3
  021d3	50		 push	 eax
  021d4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  021d9	68 c9 01 00 00	 push	 457			; 000001c9H
  021de	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  021e3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  021e8	50		 push	 eax
  021e9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  021ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1134 : 		return this->m_Mana[0];

  021f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021f5	0f b7 80 68 96
	00 00		 movzx	 eax, WORD PTR [eax+38504]
  021fc	eb 4a		 jmp	 SHORT $LN4@SkillGetMa
$LN3@SkillGetMa:

; 1135 : 	}
; 1136 : 
; 1137 : 	if ( this->m_Damage[skill] == -1 )

  021fe	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  02201	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02204	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  02209	75 2f		 jne	 SHORT $LN1@SkillGetMa

; 1138 : 	{
; 1139 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  0220b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGetMana@CMagicDamage@@QAEHH@Z@4JA
  02210	83 c0 09	 add	 eax, 9
  02213	50		 push	 eax
  02214	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02219	68 ca 01 00 00	 push	 458			; 000001caH
  0221e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02223	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02228	50		 push	 eax
  02229	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0222f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1140 : 		return this->m_Damage[0];

  02232	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02235	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02238	eb 0e		 jmp	 SHORT $LN4@SkillGetMa
$LN1@SkillGetMa:

; 1141 : 	}
; 1142 : 
; 1143 : 	return this->m_Mana[skill];

  0223a	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  0223d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02240	0f b7 84 41 68
	96 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+38504]
$LN4@SkillGetMa:

; 1144 : }

  02248	5f		 pop	 edi
  02249	5e		 pop	 esi
  0224a	5b		 pop	 ebx
  0224b	8b e5		 mov	 esp, ebp
  0224d	5d		 pop	 ebp
  0224e	c2 04 00	 ret	 4
?SkillGetMana@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::SkillGetMana
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??SkillGetBP@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::SkillGetBP'::`2'::__LINE__Var
PUBLIC	?SkillGetBP@CMagicDamage@@QAEHH@Z		; CMagicDamage::SkillGetBP
;	COMDAT ?__LINE__Var@?1??SkillGetBP@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SkillGetBP@CMagicDamage@@QAEHH@Z@4JA DD 047cH ; `CMagicDamage::SkillGetBP'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?SkillGetBP@CMagicDamage@@QAEHH@Z PROC			; CMagicDamage::SkillGetBP
; _this$ = ecx

; 1148 : {

  02260	55		 push	 ebp
  02261	8b ec		 mov	 ebp, esp
  02263	83 ec 44	 sub	 esp, 68			; 00000044H
  02266	53		 push	 ebx
  02267	56		 push	 esi
  02268	57		 push	 edi
  02269	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1149 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  0226c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02270	7c 09		 jl	 SHORT $LN2@SkillGetBP
  02272	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02279	7e 2b		 jle	 SHORT $LN3@SkillGetBP
$LN2@SkillGetBP:

; 1150 : 	{
; 1151 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0227b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGetBP@CMagicDamage@@QAEHH@Z@4JA
  02280	83 c0 03	 add	 eax, 3
  02283	50		 push	 eax
  02284	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02289	68 c9 01 00 00	 push	 457			; 000001c9H
  0228e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02293	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02298	50		 push	 eax
  02299	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0229f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1152 : 		return 0;

  022a2	33 c0		 xor	 eax, eax
  022a4	eb 46		 jmp	 SHORT $LN4@SkillGetBP
$LN3@SkillGetBP:

; 1153 : 	}
; 1154 : 
; 1155 : 	if ( this->m_Damage[skill] == -1 )

  022a6	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  022a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  022ac	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  022b1	75 2b		 jne	 SHORT $LN1@SkillGetBP

; 1156 : 	{
; 1157 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  022b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGetBP@CMagicDamage@@QAEHH@Z@4JA
  022b8	83 c0 09	 add	 eax, 9
  022bb	50		 push	 eax
  022bc	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  022c1	68 ca 01 00 00	 push	 458			; 000001caH
  022c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  022cb	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  022d0	50		 push	 eax
  022d1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  022d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1158 : 		return 0;

  022da	33 c0		 xor	 eax, eax
  022dc	eb 0e		 jmp	 SHORT $LN4@SkillGetBP
$LN1@SkillGetBP:

; 1159 : 	}
; 1160 : 
; 1161 : 	return this->m_BrainPower[skill];

  022de	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  022e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  022e4	0f b7 84 41 80
	dd 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+56704]
$LN4@SkillGetBP:

; 1162 : }

  022ec	5f		 pop	 edi
  022ed	5e		 pop	 esi
  022ee	5b		 pop	 ebx
  022ef	8b e5		 mov	 esp, ebp
  022f1	5d		 pop	 ebp
  022f2	c2 04 00	 ret	 4
?SkillGetBP@CMagicDamage@@QAEHH@Z ENDP			; CMagicDamage::SkillGetBP
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::SkillGetRequireEnergy'::`2'::__LINE__Var
PUBLIC	?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z	; CMagicDamage::SkillGetRequireEnergy
;	COMDAT ?__LINE__Var@?1??SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z@4JA DD 048eH ; `CMagicDamage::SkillGetRequireEnergy'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::SkillGetRequireEnergy
; _this$ = ecx

; 1166 : {

  02300	55		 push	 ebp
  02301	8b ec		 mov	 ebp, esp
  02303	83 ec 44	 sub	 esp, 68			; 00000044H
  02306	53		 push	 ebx
  02307	56		 push	 esi
  02308	57		 push	 edi
  02309	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1167 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  0230c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02310	7c 09		 jl	 SHORT $LN2@SkillGetRe
  02312	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02319	7e 2c		 jle	 SHORT $LN3@SkillGetRe
$LN2@SkillGetRe:

; 1168 : 	{
; 1169 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0231b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z@4JA
  02320	83 c0 03	 add	 eax, 3
  02323	50		 push	 eax
  02324	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02329	68 c9 01 00 00	 push	 457			; 000001c9H
  0232e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02333	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02338	50		 push	 eax
  02339	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0233f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1170 : 		return -1;

  02342	83 c8 ff	 or	 eax, -1
  02345	eb 49		 jmp	 SHORT $LN4@SkillGetRe
$LN3@SkillGetRe:

; 1171 : 	}
; 1172 : 
; 1173 : 	if ( this->m_RequireEnergy[skill] == -1 )

  02347	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  0234a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0234d	83 bc 81 9c 9e
	00 00 ff	 cmp	 DWORD PTR [ecx+eax*4+40604], -1
  02355	75 2c		 jne	 SHORT $LN1@SkillGetRe

; 1174 : 	{
; 1175 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  02357	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z@4JA
  0235c	83 c0 09	 add	 eax, 9
  0235f	50		 push	 eax
  02360	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02365	68 ca 01 00 00	 push	 458			; 000001caH
  0236a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0236f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02374	50		 push	 eax
  02375	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0237b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1176 : 		return -1;

  0237e	83 c8 ff	 or	 eax, -1
  02381	eb 0d		 jmp	 SHORT $LN4@SkillGetRe
$LN1@SkillGetRe:

; 1177 : 	}
; 1178 : 
; 1179 : 	return this->m_RequireEnergy[skill];

  02383	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  02386	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02389	8b 84 81 9c 9e
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+40604]
$LN4@SkillGetRe:

; 1180 : }

  02390	5f		 pop	 edi
  02391	5e		 pop	 esi
  02392	5b		 pop	 ebx
  02393	8b e5		 mov	 esp, ebp
  02395	5d		 pop	 ebp
  02396	c2 04 00	 ret	 4
?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::SkillGetRequireEnergy
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z@4JA ; `CMagicDamage::SkillGetRequireClass'::`2'::__LINE__Var
PUBLIC	?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z	; CMagicDamage::SkillGetRequireClass
;	COMDAT ?__LINE__Var@?1??SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z@4JA DD 04a0H ; `CMagicDamage::SkillGetRequireClass'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_requireclass$ = -8					; size = 4
_this$ = -4						; size = 4
_Cclass$ = 8						; size = 4
_ChangeUP$ = 12						; size = 4
_ChangeUP3rd$ = 16					; size = 4
_skill$ = 20						; size = 4
?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z PROC	; CMagicDamage::SkillGetRequireClass
; _this$ = ecx

; 1184 : {

  023a0	55		 push	 ebp
  023a1	8b ec		 mov	 ebp, esp
  023a3	83 ec 48	 sub	 esp, 72			; 00000048H
  023a6	53		 push	 ebx
  023a7	56		 push	 esi
  023a8	57		 push	 edi
  023a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1185 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  023ac	83 7d 14 00	 cmp	 DWORD PTR _skill$[ebp], 0
  023b0	7c 09		 jl	 SHORT $LN10@SkillGetRe@2
  023b2	81 7d 14 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  023b9	7e 2f		 jle	 SHORT $LN11@SkillGetRe@2
$LN10@SkillGetRe@2:

; 1186 : 	{
; 1187 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  023bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z@4JA
  023c0	83 c0 03	 add	 eax, 3
  023c3	50		 push	 eax
  023c4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  023c9	68 c9 01 00 00	 push	 457			; 000001c9H
  023ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  023d3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  023d8	50		 push	 eax
  023d9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  023df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1188 : 		return -1;

  023e2	83 c8 ff	 or	 eax, -1
  023e5	e9 8e 00 00 00	 jmp	 $LN12@SkillGetRe@2
$LN11@SkillGetRe@2:

; 1189 : 	}
; 1190 : 
; 1191 : 	if ( Cclass < 0 || Cclass > MAX_TYPE_PLAYER-1 )

  023ea	83 7d 08 00	 cmp	 DWORD PTR _Cclass$[ebp], 0
  023ee	7c 06		 jl	 SHORT $LN8@SkillGetRe@2
  023f0	83 7d 08 06	 cmp	 DWORD PTR _Cclass$[ebp], 6
  023f4	7e 2c		 jle	 SHORT $LN9@SkillGetRe@2
$LN8@SkillGetRe@2:

; 1192 : 	{
; 1193 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  023f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z@4JA
  023fb	83 c0 09	 add	 eax, 9
  023fe	50		 push	 eax
  023ff	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02404	68 ca 01 00 00	 push	 458			; 000001caH
  02409	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0240e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02413	50		 push	 eax
  02414	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0241a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1194 : 		return -1;

  0241d	83 c8 ff	 or	 eax, -1
  02420	eb 56		 jmp	 SHORT $LN12@SkillGetRe@2
$LN9@SkillGetRe@2:

; 1195 : 	}
; 1196 : 
; 1197 : #if(DEBUG_CODE)
; 1198 : 	LogAddC(2,"skill: %d, Cclass: %d",skill,Cclass);
; 1199 : #endif
; 1200 : 
; 1201 : 	int requireclass = this->m_RequireClass[skill][Cclass];

  02422	8b 45 14	 mov	 eax, DWORD PTR _skill$[ebp]
  02425	6b c0 07	 imul	 eax, 7
  02428	03 45 08	 add	 eax, DWORD PTR _Cclass$[ebp]
  0242b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0242e	0f b6 94 01 8c
	a9 00 00	 movzx	 edx, BYTE PTR [ecx+eax+43404]
  02436	89 55 f8	 mov	 DWORD PTR _requireclass$[ebp], edx

; 1202 : 
; 1203 : 	if ( requireclass == 0 )

  02439	83 7d f8 00	 cmp	 DWORD PTR _requireclass$[ebp], 0
  0243d	75 04		 jne	 SHORT $LN7@SkillGetRe@2

; 1204 : 	{
; 1205 : //#ifndef DEBUG_CODE
; 1206 : 		return FALSE;

  0243f	33 c0		 xor	 eax, eax
  02441	eb 35		 jmp	 SHORT $LN12@SkillGetRe@2
$LN7@SkillGetRe@2:

; 1207 : //#endif
; 1208 : 	}
; 1209 : 
; 1210 : 	if (requireclass == 3)

  02443	83 7d f8 03	 cmp	 DWORD PTR _requireclass$[ebp], 3
  02447	75 15		 jne	 SHORT $LN6@SkillGetRe@2

; 1211 : 	{
; 1212 : 		if(ChangeUP3rd > 0)

  02449	83 7d 10 00	 cmp	 DWORD PTR _ChangeUP3rd$[ebp], 0
  0244d	7e 09		 jle	 SHORT $LN5@SkillGetRe@2

; 1213 : 		{
; 1214 : 			return TRUE;

  0244f	b8 01 00 00 00	 mov	 eax, 1
  02454	eb 22		 jmp	 SHORT $LN12@SkillGetRe@2

; 1215 : 		}
; 1216 : 		else

  02456	eb 04		 jmp	 SHORT $LN4@SkillGetRe@2
$LN5@SkillGetRe@2:

; 1217 : 		{
; 1218 : 			return FALSE;

  02458	33 c0		 xor	 eax, eax
  0245a	eb 1c		 jmp	 SHORT $LN12@SkillGetRe@2
$LN4@SkillGetRe@2:

; 1219 : 		}
; 1220 : 	}
; 1221 : 	else

  0245c	eb 15		 jmp	 SHORT $LN3@SkillGetRe@2
$LN6@SkillGetRe@2:

; 1222 : 	{
; 1223 : 		if (requireclass > 1)

  0245e	83 7d f8 01	 cmp	 DWORD PTR _requireclass$[ebp], 1
  02462	7e 0f		 jle	 SHORT $LN3@SkillGetRe@2

; 1224 : 		{
; 1225 : 			if ( requireclass  != (ChangeUP+1) )

  02464	8b 45 0c	 mov	 eax, DWORD PTR _ChangeUP$[ebp]
  02467	83 c0 01	 add	 eax, 1
  0246a	39 45 f8	 cmp	 DWORD PTR _requireclass$[ebp], eax
  0246d	74 04		 je	 SHORT $LN3@SkillGetRe@2

; 1226 : 			{
; 1227 : 				return FALSE;

  0246f	33 c0		 xor	 eax, eax
  02471	eb 05		 jmp	 SHORT $LN12@SkillGetRe@2
$LN3@SkillGetRe@2:

; 1228 : 			}
; 1229 : 		}
; 1230 : 	}
; 1231 : 
; 1232 : 	return TRUE;

  02473	b8 01 00 00 00	 mov	 eax, 1
$LN12@SkillGetRe@2:

; 1233 : }

  02478	5f		 pop	 edi
  02479	5e		 pop	 esi
  0247a	5b		 pop	 ebx
  0247b	8b e5		 mov	 esp, ebp
  0247d	5d		 pop	 ebp
  0247e	c2 10 00	 ret	 16			; 00000010H
?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z ENDP	; CMagicDamage::SkillGetRequireClass
_TEXT	ENDS
PUBLIC	?GetSkillAttr@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillAttr
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillAttr@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillAttr
; _this$ = ecx

; 1237 : {

  02490	55		 push	 ebp
  02491	8b ec		 mov	 ebp, esp
  02493	83 ec 44	 sub	 esp, 68			; 00000044H
  02496	53		 push	 ebx
  02497	56		 push	 esi
  02498	57		 push	 edi
  02499	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1238 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  0249c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  024a0	7c 09		 jl	 SHORT $LN1@GetSkillAt
  024a2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  024a9	7e 05		 jle	 SHORT $LN2@GetSkillAt
$LN1@GetSkillAt:

; 1239 : 	{
; 1240 : 		return -1;

  024ab	83 c8 ff	 or	 eax, -1
  024ae	eb 0d		 jmp	 SHORT $LN3@GetSkillAt
$LN2@GetSkillAt:

; 1241 : 	}
; 1242 : 
; 1243 : 	return this->m_Attr[skill];

  024b0	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  024b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  024b6	8b 84 81 f8 e2
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+58104]
$LN3@GetSkillAt:

; 1244 : }

  024bd	5f		 pop	 edi
  024be	5e		 pop	 esi
  024bf	5b		 pop	 ebx
  024c0	8b e5		 mov	 esp, ebp
  024c2	5d		 pop	 ebp
  024c3	c2 04 00	 ret	 4
?GetSkillAttr@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillAttr
_TEXT	ENDS
PUBLIC	?CheckSkillAttr@CMagicDamage@@AAEHHH@Z		; CMagicDamage::CheckSkillAttr
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
_attr$ = 12						; size = 4
?CheckSkillAttr@CMagicDamage@@AAEHHH@Z PROC		; CMagicDamage::CheckSkillAttr
; _this$ = ecx

; 1248 : {

  024d0	55		 push	 ebp
  024d1	8b ec		 mov	 ebp, esp
  024d3	83 ec 44	 sub	 esp, 68			; 00000044H
  024d6	53		 push	 ebx
  024d7	56		 push	 esi
  024d8	57		 push	 edi
  024d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1249 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  024dc	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  024e0	7c 09		 jl	 SHORT $LN1@CheckSkill
  024e2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  024e9	7e 04		 jle	 SHORT $LN2@CheckSkill
$LN1@CheckSkill:

; 1250 : 	{
; 1251 : 		return FALSE;

  024eb	33 c0		 xor	 eax, eax
  024ed	eb 0d		 jmp	 SHORT $LN3@CheckSkill
$LN2@CheckSkill:

; 1252 : 	}
; 1253 : 
; 1254 : 	return this->m_Attr[skill];

  024ef	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  024f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  024f5	8b 84 81 f8 e2
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+58104]
$LN3@CheckSkill:

; 1255 : }

  024fc	5f		 pop	 edi
  024fd	5e		 pop	 esi
  024fe	5b		 pop	 ebx
  024ff	8b e5		 mov	 esp, ebp
  02501	5d		 pop	 ebp
  02502	c2 08 00	 ret	 8
?CheckSkillAttr@CMagicDamage@@AAEHHH@Z ENDP		; CMagicDamage::CheckSkillAttr
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetskillRequireLeadership@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetskillRequireLeadership'::`2'::__LINE__Var
PUBLIC	?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetskillRequireLeadership
;	COMDAT ?__LINE__Var@?1??GetskillRequireLeadership@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetskillRequireLeadership@CMagicDamage@@QAEHH@Z@4JA DD 04ebH ; `CMagicDamage::GetskillRequireLeadership'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::GetskillRequireLeadership
; _this$ = ecx

; 1259 : {

  02510	55		 push	 ebp
  02511	8b ec		 mov	 ebp, esp
  02513	83 ec 44	 sub	 esp, 68			; 00000044H
  02516	53		 push	 ebx
  02517	56		 push	 esi
  02518	57		 push	 edi
  02519	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1260 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  0251c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02520	7c 09		 jl	 SHORT $LN2@GetskillRe
  02522	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02529	7e 2c		 jle	 SHORT $LN3@GetskillRe
$LN2@GetskillRe:

; 1261 : 	{
; 1262 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0252b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetskillRequireLeadership@CMagicDamage@@QAEHH@Z@4JA
  02530	83 c0 03	 add	 eax, 3
  02533	50		 push	 eax
  02534	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02539	68 c9 01 00 00	 push	 457			; 000001c9H
  0253e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02543	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02548	50		 push	 eax
  02549	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0254f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1263 : 		return -1;

  02552	83 c8 ff	 or	 eax, -1
  02555	eb 49		 jmp	 SHORT $LN4@GetskillRe
$LN3@GetskillRe:

; 1264 : 	}
; 1265 : 
; 1266 : 	if ( this->m_RequireLeadership[skill] == -1 )

  02557	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  0255a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0255d	83 bc 81 a0 c7
	00 00 ff	 cmp	 DWORD PTR [ecx+eax*4+51104], -1
  02565	75 2c		 jne	 SHORT $LN1@GetskillRe

; 1267 : 	{
; 1268 : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  02567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetskillRequireLeadership@CMagicDamage@@QAEHH@Z@4JA
  0256c	83 c0 09	 add	 eax, 9
  0256f	50		 push	 eax
  02570	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02575	68 ca 01 00 00	 push	 458			; 000001caH
  0257a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0257f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02584	50		 push	 eax
  02585	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0258b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1269 : 		return -1;

  0258e	83 c8 ff	 or	 eax, -1
  02591	eb 0d		 jmp	 SHORT $LN4@GetskillRe
$LN1@GetskillRe:

; 1270 : 	}
; 1271 : 
; 1272 : 	return this->m_RequireLeadership[skill];

  02593	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  02596	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02599	8b 84 81 a0 c7
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+51104]
$LN4@GetskillRe:

; 1273 : }

  025a0	5f		 pop	 edi
  025a1	5e		 pop	 esi
  025a2	5b		 pop	 ebx
  025a3	8b e5		 mov	 esp, ebp
  025a5	5d		 pop	 ebp
  025a6	c2 04 00	 ret	 4
?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::GetskillRequireLeadership
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetDelayTime@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetDelayTime'::`2'::__LINE__Var
PUBLIC	?GetDelayTime@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetDelayTime
;	COMDAT ?__LINE__Var@?1??GetDelayTime@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetDelayTime@CMagicDamage@@QAEHH@Z@4JA DD 04fdH ; `CMagicDamage::GetDelayTime'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetDelayTime@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetDelayTime
; _this$ = ecx

; 1277 : {

  025b0	55		 push	 ebp
  025b1	8b ec		 mov	 ebp, esp
  025b3	83 ec 44	 sub	 esp, 68			; 00000044H
  025b6	53		 push	 ebx
  025b7	56		 push	 esi
  025b8	57		 push	 edi
  025b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1278 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  025bc	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  025c0	7c 09		 jl	 SHORT $LN1@GetDelayTi
  025c2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  025c9	7e 2b		 jle	 SHORT $LN2@GetDelayTi
$LN1@GetDelayTi:

; 1279 : 	{
; 1280 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  025cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetDelayTime@CMagicDamage@@QAEHH@Z@4JA
  025d0	83 c0 03	 add	 eax, 3
  025d3	50		 push	 eax
  025d4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  025d9	68 c9 01 00 00	 push	 457			; 000001c9H
  025de	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  025e3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  025e8	50		 push	 eax
  025e9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  025ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1281 : 		return 0;

  025f2	33 c0		 xor	 eax, eax
  025f4	eb 0d		 jmp	 SHORT $LN3@GetDelayTi
$LN2@GetDelayTi:

; 1282 : 	}
; 1283 : 
; 1284 : 	return this->m_Delay[skill];

  025f6	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  025f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025fc	8b 84 81 90 d2
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+53904]
$LN3@GetDelayTi:

; 1285 : }

  02603	5f		 pop	 edi
  02604	5e		 pop	 esi
  02605	5b		 pop	 ebx
  02606	8b e5		 mov	 esp, ebp
  02608	5d		 pop	 ebp
  02609	c2 04 00	 ret	 4
?GetDelayTime@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetDelayTime
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillType@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillType'::`2'::__LINE__Var
PUBLIC	?GetSkillType@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillType
;	COMDAT ?__LINE__Var@?1??GetSkillType@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillType@CMagicDamage@@QAEHH@Z@4JA DD 0509H ; `CMagicDamage::GetSkillType'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSkill$ = 8						; size = 4
?GetSkillType@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillType
; _this$ = ecx

; 1289 : {

  02610	55		 push	 ebp
  02611	8b ec		 mov	 ebp, esp
  02613	83 ec 44	 sub	 esp, 68			; 00000044H
  02616	53		 push	 ebx
  02617	56		 push	 esi
  02618	57		 push	 edi
  02619	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1290 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  0261c	83 7d 08 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  02620	7c 09		 jl	 SHORT $LN1@GetSkillTy
  02622	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  02629	7e 2b		 jle	 SHORT $LN2@GetSkillTy
$LN1@GetSkillTy:

; 1291 : 	{
; 1292 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0262b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillType@CMagicDamage@@QAEHH@Z@4JA
  02630	83 c0 03	 add	 eax, 3
  02633	50		 push	 eax
  02634	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02639	68 c9 01 00 00	 push	 457			; 000001c9H
  0263e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02643	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02648	50		 push	 eax
  02649	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0264f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1293 : 		return 0;

  02652	33 c0		 xor	 eax, eax
  02654	eb 0d		 jmp	 SHORT $LN3@GetSkillTy
$LN2@GetSkillTy:

; 1294 : 	}
; 1295 : 	
; 1296 : 	return this->m_iSkillType[iSkill];

  02656	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  02659	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0265c	8b 84 81 e8 ed
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+60904]
$LN3@GetSkillTy:

; 1297 : }

  02663	5f		 pop	 edi
  02664	5e		 pop	 esi
  02665	5b		 pop	 ebx
  02666	8b e5		 mov	 esp, ebp
  02668	5d		 pop	 ebp
  02669	c2 04 00	 ret	 4
?GetSkillType@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillType
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??SkillGetRequireLevel@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::SkillGetRequireLevel'::`2'::__LINE__Var
PUBLIC	?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z	; CMagicDamage::SkillGetRequireLevel
;	COMDAT ?__LINE__Var@?1??SkillGetRequireLevel@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SkillGetRequireLevel@CMagicDamage@@QAEHH@Z@4JA DD 0515H ; `CMagicDamage::SkillGetRequireLevel'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::SkillGetRequireLevel
; _this$ = ecx

; 1301 : {

  02670	55		 push	 ebp
  02671	8b ec		 mov	 ebp, esp
  02673	83 ec 44	 sub	 esp, 68			; 00000044H
  02676	53		 push	 ebx
  02677	56		 push	 esi
  02678	57		 push	 edi
  02679	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  0267c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02680	7c 09		 jl	 SHORT $LN1@SkillGetRe@3
  02682	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02689	7e 2c		 jle	 SHORT $LN2@SkillGetRe@3
$LN1@SkillGetRe@3:

; 1303 : 	{
; 1304 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0268b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SkillGetRequireLevel@CMagicDamage@@QAEHH@Z@4JA
  02690	83 c0 03	 add	 eax, 3
  02693	50		 push	 eax
  02694	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02699	68 c9 01 00 00	 push	 457			; 000001c9H
  0269e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  026a3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  026a8	50		 push	 eax
  026a9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  026af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1305 : 		return -1;

  026b2	83 c8 ff	 or	 eax, -1
  026b5	eb 0d		 jmp	 SHORT $LN3@SkillGetRe@3
$LN2@SkillGetRe@3:

; 1306 : 	}
; 1307 : 
; 1308 : 	return this->m_RequireLevel[skill];

  026b7	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  026ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  026bd	8b 84 81 b0 bc
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+48304]
$LN3@SkillGetRe@3:

; 1309 : }

  026c4	5f		 pop	 edi
  026c5	5e		 pop	 esi
  026c6	5b		 pop	 ebx
  026c7	8b e5		 mov	 esp, ebp
  026c9	5d		 pop	 ebp
  026ca	c2 04 00	 ret	 4
?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::SkillGetRequireLevel
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??CheckStatus@CMagicDamage@@QAEHHH@Z@4JA ; `CMagicDamage::CheckStatus'::`2'::__LINE__Var
PUBLIC	?CheckStatus@CMagicDamage@@QAEHHH@Z		; CMagicDamage::CheckStatus
EXTRN	?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::CheckRequireStatus
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
;	COMDAT ?__LINE__Var@?1??CheckStatus@CMagicDamage@@QAEHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CheckStatus@CMagicDamage@@QAEHHH@Z@4JA DD 0521H ; `CMagicDamage::CheckStatus'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSkill$ = 8						; size = 4
_iGuildStatus$ = 12					; size = 4
?CheckStatus@CMagicDamage@@QAEHHH@Z PROC		; CMagicDamage::CheckStatus
; _this$ = ecx

; 1313 : {

  026d0	55		 push	 ebp
  026d1	8b ec		 mov	 ebp, esp
  026d3	83 ec 44	 sub	 esp, 68			; 00000044H
  026d6	53		 push	 ebx
  026d7	56		 push	 esi
  026d8	57		 push	 edi
  026d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1314 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  026dc	83 7d 08 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  026e0	7c 09		 jl	 SHORT $LN11@CheckStatu
  026e2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  026e9	7e 2e		 jle	 SHORT $LN12@CheckStatu
$LN11@CheckStatu:

; 1315 : 	{
; 1316 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  026eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??CheckStatus@CMagicDamage@@QAEHHH@Z@4JA
  026f0	83 c0 03	 add	 eax, 3
  026f3	50		 push	 eax
  026f4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  026f9	68 c9 01 00 00	 push	 457			; 000001c9H
  026fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02703	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02708	50		 push	 eax
  02709	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0270f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1317 : 		return 0;

  02712	33 c0		 xor	 eax, eax
  02714	e9 9c 00 00 00	 jmp	 $LN13@CheckStatu
$LN12@CheckStatu:

; 1318 : 	}
; 1319 : 
; 1320 : 	if ( this->m_iSkillUseType[iSkill] == 0 )

  02719	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0271c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0271f	83 bc 81 d8 f8
	00 00 00	 cmp	 DWORD PTR [ecx+eax*4+63704], 0
  02727	75 0a		 jne	 SHORT $LN10@CheckStatu

; 1321 : 	{
; 1322 : 		return TRUE;

  02729	b8 01 00 00 00	 mov	 eax, 1
  0272e	e9 82 00 00 00	 jmp	 $LN13@CheckStatu
$LN10@CheckStatu:

; 1323 : 	}
; 1324 : 
; 1325 : 	if(g_MasterSkillSystem.CheckRequireStatus(iSkill) != FALSE) //Season3 add-on

  02733	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  02736	50		 push	 eax
  02737	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0273c	e8 00 00 00 00	 call	 ?CheckRequireStatus@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckRequireStatus
  02741	85 c0		 test	 eax, eax
  02743	74 07		 je	 SHORT $LN9@CheckStatu

; 1326 : 	{
; 1327 : 		return TRUE;

  02745	b8 01 00 00 00	 mov	 eax, 1
  0274a	eb 69		 jmp	 SHORT $LN13@CheckStatu
$LN9@CheckStatu:

; 1328 : 	}
; 1329 : 
; 1330 : 	if ( iGuildStatus == G_MASTER )

  0274c	81 7d 0c 80 00
	00 00		 cmp	 DWORD PTR _iGuildStatus$[ebp], 128 ; 00000080H
  02753	75 1c		 jne	 SHORT $LN8@CheckStatu

; 1331 : 	{
; 1332 : 		if ( this->m_iRequireStatus[iSkill][0] == 1 )

  02755	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  02758	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0275b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0275e	83 bc 01 a8 19
	01 00 01	 cmp	 DWORD PTR [ecx+eax+72104], 1
  02766	75 07		 jne	 SHORT $LN7@CheckStatu

; 1333 : 		{
; 1334 : 			return TRUE;

  02768	b8 01 00 00 00	 mov	 eax, 1
  0276d	eb 46		 jmp	 SHORT $LN13@CheckStatu
$LN7@CheckStatu:

; 1335 : 		}
; 1336 : 	}

  0276f	eb 42		 jmp	 SHORT $LN6@CheckStatu
$LN8@CheckStatu:

; 1337 : 	else if ( iGuildStatus == G_SUB_MASTER )

  02771	83 7d 0c 40	 cmp	 DWORD PTR _iGuildStatus$[ebp], 64 ; 00000040H
  02775	75 1c		 jne	 SHORT $LN5@CheckStatu

; 1338 : 	{
; 1339 : 		if ( this->m_iRequireStatus[iSkill][1] == 1 )

  02777	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0277a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0277d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02780	83 bc 01 ac 19
	01 00 01	 cmp	 DWORD PTR [ecx+eax+72108], 1
  02788	75 07		 jne	 SHORT $LN4@CheckStatu

; 1340 : 		{
; 1341 : 			return TRUE;

  0278a	b8 01 00 00 00	 mov	 eax, 1
  0278f	eb 24		 jmp	 SHORT $LN13@CheckStatu
$LN4@CheckStatu:

; 1342 : 		}
; 1343 : 	}

  02791	eb 20		 jmp	 SHORT $LN6@CheckStatu
$LN5@CheckStatu:

; 1344 : 	else if ( iGuildStatus == G_BATTLE_MASTER )

  02793	83 7d 0c 20	 cmp	 DWORD PTR _iGuildStatus$[ebp], 32 ; 00000020H
  02797	75 1a		 jne	 SHORT $LN6@CheckStatu

; 1345 : 	{
; 1346 : 		if ( this->m_iRequireStatus[iSkill][2] == 1 )

  02799	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0279c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0279f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  027a2	83 bc 01 b0 19
	01 00 01	 cmp	 DWORD PTR [ecx+eax+72112], 1
  027aa	75 07		 jne	 SHORT $LN6@CheckStatu

; 1347 : 		{
; 1348 : 			return TRUE;

  027ac	b8 01 00 00 00	 mov	 eax, 1
  027b1	eb 02		 jmp	 SHORT $LN13@CheckStatu
$LN6@CheckStatu:

; 1349 : 		}
; 1350 : 	}
; 1351 : 
; 1352 : 	return FALSE;

  027b3	33 c0		 xor	 eax, eax
$LN13@CheckStatu:

; 1353 : }

  027b5	5f		 pop	 edi
  027b6	5e		 pop	 esi
  027b7	5b		 pop	 ebx
  027b8	8b e5		 mov	 esp, ebp
  027ba	5d		 pop	 ebp
  027bb	c2 08 00	 ret	 8
?CheckStatus@CMagicDamage@@QAEHHH@Z ENDP		; CMagicDamage::CheckStatus
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??CheckBrandOfSkill@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::CheckBrandOfSkill'::`2'::__LINE__Var
PUBLIC	?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z	; CMagicDamage::CheckBrandOfSkill
;	COMDAT ?__LINE__Var@?1??CheckBrandOfSkill@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CheckBrandOfSkill@CMagicDamage@@QAEHH@Z@4JA DD 054dH ; `CMagicDamage::CheckBrandOfSkill'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSkill$ = 8						; size = 4
?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::CheckBrandOfSkill
; _this$ = ecx

; 1357 : {

  027c0	55		 push	 ebp
  027c1	8b ec		 mov	 ebp, esp
  027c3	83 ec 44	 sub	 esp, 68			; 00000044H
  027c6	53		 push	 ebx
  027c7	56		 push	 esi
  027c8	57		 push	 edi
  027c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1358 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  027cc	83 7d 08 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  027d0	7c 09		 jl	 SHORT $LN2@CheckBrand
  027d2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  027d9	7e 2b		 jle	 SHORT $LN3@CheckBrand
$LN2@CheckBrand:

; 1359 : 	{
; 1360 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  027db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??CheckBrandOfSkill@CMagicDamage@@QAEHH@Z@4JA
  027e0	83 c0 03	 add	 eax, 3
  027e3	50		 push	 eax
  027e4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  027e9	68 c9 01 00 00	 push	 457			; 000001c9H
  027ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  027f3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  027f8	50		 push	 eax
  027f9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  027ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1361 : 		return 0;

  02802	33 c0		 xor	 eax, eax
  02804	eb 19		 jmp	 SHORT $LN4@CheckBrand
$LN3@CheckBrand:

; 1362 : 	}
; 1363 : 
; 1364 : 	if ( this->m_iSkillBrand[iSkill] > 0 )

  02806	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  02809	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0280c	83 bc 81 c8 03
	01 00 00	 cmp	 DWORD PTR [ecx+eax*4+66504], 0
  02814	7e 07		 jle	 SHORT $LN1@CheckBrand

; 1365 : 	{
; 1366 : 		return TRUE;

  02816	b8 01 00 00 00	 mov	 eax, 1
  0281b	eb 02		 jmp	 SHORT $LN4@CheckBrand
$LN1@CheckBrand:

; 1367 : 	}
; 1368 : 
; 1369 : 	return FALSE;

  0281d	33 c0		 xor	 eax, eax
$LN4@CheckBrand:

; 1370 : }

  0281f	5f		 pop	 edi
  02820	5e		 pop	 esi
  02821	5b		 pop	 ebx
  02822	8b e5		 mov	 esp, ebp
  02824	5d		 pop	 ebp
  02825	c2 04 00	 ret	 4
?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::CheckBrandOfSkill
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??CheckKillCount@CMagicDamage@@QAEHHH@Z@4JA ; `CMagicDamage::CheckKillCount'::`2'::__LINE__Var
PUBLIC	?CheckKillCount@CMagicDamage@@QAEHHH@Z		; CMagicDamage::CheckKillCount
;	COMDAT ?__LINE__Var@?1??CheckKillCount@CMagicDamage@@QAEHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CheckKillCount@CMagicDamage@@QAEHHH@Z@4JA DD 055eH ; `CMagicDamage::CheckKillCount'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSkill$ = 8						; size = 4
_iKillCount$ = 12					; size = 4
?CheckKillCount@CMagicDamage@@QAEHHH@Z PROC		; CMagicDamage::CheckKillCount
; _this$ = ecx

; 1374 : {

  02830	55		 push	 ebp
  02831	8b ec		 mov	 ebp, esp
  02833	83 ec 44	 sub	 esp, 68			; 00000044H
  02836	53		 push	 ebx
  02837	56		 push	 esi
  02838	57		 push	 edi
  02839	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1375 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  0283c	83 7d 08 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  02840	7c 09		 jl	 SHORT $LN1@CheckKillC
  02842	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  02849	7e 2c		 jle	 SHORT $LN2@CheckKillC
$LN1@CheckKillC:

; 1376 : 	{
; 1377 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0284b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??CheckKillCount@CMagicDamage@@QAEHHH@Z@4JA
  02850	83 c0 03	 add	 eax, 3
  02853	50		 push	 eax
  02854	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02859	68 c9 01 00 00	 push	 457			; 000001c9H
  0285e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02863	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02868	50		 push	 eax
  02869	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0286f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1378 : 		return -1;

  02872	83 c8 ff	 or	 eax, -1
  02875	eb 12		 jmp	 SHORT $LN3@CheckKillC
$LN2@CheckKillC:

; 1379 : 	}
; 1380 : 
; 1381 : 	return iKillCount - this->m_iKillCount[iSkill];

  02877	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  0287a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0287d	8b 55 0c	 mov	 edx, DWORD PTR _iKillCount$[ebp]
  02880	2b 94 81 b8 0e
	01 00		 sub	 edx, DWORD PTR [ecx+eax*4+69304]
  02887	8b c2		 mov	 eax, edx
$LN3@CheckKillC:

; 1382 : }

  02889	5f		 pop	 edi
  0288a	5e		 pop	 esi
  0288b	5b		 pop	 ebx
  0288c	8b e5		 mov	 esp, ebp
  0288e	5d		 pop	 ebp
  0288f	c2 08 00	 ret	 8
?CheckKillCount@CMagicDamage@@QAEHHH@Z ENDP		; CMagicDamage::CheckKillCount
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillDistance@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillDistance'::`2'::__LINE__Var
PUBLIC	?GetSkillDistance@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillDistance
;	COMDAT ?__LINE__Var@?1??GetSkillDistance@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillDistance@CMagicDamage@@QAEHH@Z@4JA DD 056aH ; `CMagicDamage::GetSkillDistance'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillDistance@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillDistance
; _this$ = ecx

; 1386 : {

  028a0	55		 push	 ebp
  028a1	8b ec		 mov	 ebp, esp
  028a3	83 ec 44	 sub	 esp, 68			; 00000044H
  028a6	53		 push	 ebx
  028a7	56		 push	 esi
  028a8	57		 push	 edi
  028a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1387 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  028ac	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  028b0	7c 09		 jl	 SHORT $LN1@GetSkillDi
  028b2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  028b9	7e 2c		 jle	 SHORT $LN2@GetSkillDi
$LN1@GetSkillDi:

; 1388 : 	{
; 1389 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  028bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillDistance@CMagicDamage@@QAEHH@Z@4JA
  028c0	83 c0 03	 add	 eax, 3
  028c3	50		 push	 eax
  028c4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  028c9	68 c9 01 00 00	 push	 457			; 000001c9H
  028ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  028d3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  028d8	50		 push	 eax
  028d9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  028df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 : 		return -1;

  028e2	83 c8 ff	 or	 eax, -1
  028e5	eb 0d		 jmp	 SHORT $LN3@GetSkillDi
$LN2@GetSkillDi:

; 1391 : 	}
; 1392 : 
; 1393 : 	return this->m_Distance[skill];

  028e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  028ea	03 45 08	 add	 eax, DWORD PTR _skill$[ebp]
  028ed	0f b6 80 e0 9b
	00 00		 movzx	 eax, BYTE PTR [eax+39904]
$LN3@GetSkillDi:

; 1394 : }

  028f4	5f		 pop	 edi
  028f5	5e		 pop	 esi
  028f6	5b		 pop	 ebx
  028f7	8b e5		 mov	 esp, ebp
  028f9	5d		 pop	 ebp
  028fa	c2 04 00	 ret	 4
?GetSkillDistance@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillDistance
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillReqMLPoint'::`2'::__LINE__Var
PUBLIC	?GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetSkillReqMLPoint
;	COMDAT ?__LINE__Var@?1??GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z@4JA DD 0576H ; `CMagicDamage::GetSkillReqMLPoint'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillReqMLPoint
; _this$ = ecx

; 1398 : {

  02900	55		 push	 ebp
  02901	8b ec		 mov	 ebp, esp
  02903	83 ec 44	 sub	 esp, 68			; 00000044H
  02906	53		 push	 ebx
  02907	56		 push	 esi
  02908	57		 push	 edi
  02909	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1399 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  0290c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02910	7c 09		 jl	 SHORT $LN1@GetSkillRe
  02912	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02919	7e 2c		 jle	 SHORT $LN2@GetSkillRe
$LN1@GetSkillRe:

; 1400 : 	{
; 1401 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0291b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z@4JA
  02920	83 c0 03	 add	 eax, 3
  02923	50		 push	 eax
  02924	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02929	68 c9 01 00 00	 push	 457			; 000001c9H
  0292e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02933	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02938	50		 push	 eax
  02939	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0293f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1402 : 		return -1;

  02942	83 c8 ff	 or	 eax, -1
  02945	eb 0e		 jmp	 SHORT $LN3@GetSkillRe
$LN2@GetSkillRe:

; 1403 : 	}
; 1404 : 
; 1405 : 	return this->m_sReqMLPoint[skill];

  02947	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  0294a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0294d	0f bf 84 41 68
	45 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+83304]
$LN3@GetSkillRe:

; 1406 : }

  02955	5f		 pop	 edi
  02956	5e		 pop	 esi
  02957	5b		 pop	 ebx
  02958	8b e5		 mov	 esp, ebp
  0295a	5d		 pop	 ebp
  0295b	c2 04 00	 ret	 4
?GetSkillReqMLPoint@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillReqMLPoint
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillReqStrength@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillReqStrength'::`2'::__LINE__Var
PUBLIC	?GetSkillReqStrength@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetSkillReqStrength
;	COMDAT ?__LINE__Var@?1??GetSkillReqStrength@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillReqStrength@CMagicDamage@@QAEHH@Z@4JA DD 0582H ; `CMagicDamage::GetSkillReqStrength'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillReqStrength@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillReqStrength
; _this$ = ecx

; 1410 : {

  02960	55		 push	 ebp
  02961	8b ec		 mov	 ebp, esp
  02963	83 ec 44	 sub	 esp, 68			; 00000044H
  02966	53		 push	 ebx
  02967	56		 push	 esi
  02968	57		 push	 edi
  02969	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1411 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  0296c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02970	7c 09		 jl	 SHORT $LN1@GetSkillRe@2
  02972	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02979	7e 2c		 jle	 SHORT $LN2@GetSkillRe@2
$LN1@GetSkillRe@2:

; 1412 : 	{
; 1413 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0297b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillReqStrength@CMagicDamage@@QAEHH@Z@4JA
  02980	83 c0 03	 add	 eax, 3
  02983	50		 push	 eax
  02984	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02989	68 c9 01 00 00	 push	 457			; 000001c9H
  0298e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02993	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02998	50		 push	 eax
  02999	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0299f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1414 : 		return -1;

  029a2	83 c8 ff	 or	 eax, -1
  029a5	eb 0e		 jmp	 SHORT $LN3@GetSkillRe@2
$LN2@GetSkillRe@2:

; 1415 : 	}
; 1416 : 
; 1417 : 	return this->m_sReqStrength[skill];

  029a7	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  029aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  029ad	0f bf 84 41 48
	5b 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+88904]
$LN3@GetSkillRe@2:

; 1418 : }

  029b5	5f		 pop	 edi
  029b6	5e		 pop	 esi
  029b7	5b		 pop	 ebx
  029b8	8b e5		 mov	 esp, ebp
  029ba	5d		 pop	 ebp
  029bb	c2 04 00	 ret	 4
?GetSkillReqStrength@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillReqStrength
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillReqDexterity@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillReqDexterity'::`2'::__LINE__Var
PUBLIC	?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetSkillReqDexterity
;	COMDAT ?__LINE__Var@?1??GetSkillReqDexterity@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillReqDexterity@CMagicDamage@@QAEHH@Z@4JA DD 058eH ; `CMagicDamage::GetSkillReqDexterity'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::GetSkillReqDexterity
; _this$ = ecx

; 1422 : {

  029c0	55		 push	 ebp
  029c1	8b ec		 mov	 ebp, esp
  029c3	83 ec 44	 sub	 esp, 68			; 00000044H
  029c6	53		 push	 ebx
  029c7	56		 push	 esi
  029c8	57		 push	 edi
  029c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1423 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  029cc	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  029d0	7c 09		 jl	 SHORT $LN1@GetSkillRe@3
  029d2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  029d9	7e 2c		 jle	 SHORT $LN2@GetSkillRe@3
$LN1@GetSkillRe@3:

; 1424 : 	{
; 1425 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  029db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillReqDexterity@CMagicDamage@@QAEHH@Z@4JA
  029e0	83 c0 03	 add	 eax, 3
  029e3	50		 push	 eax
  029e4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  029e9	68 c9 01 00 00	 push	 457			; 000001c9H
  029ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  029f3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  029f8	50		 push	 eax
  029f9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  029ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1426 : 		return -1;

  02a02	83 c8 ff	 or	 eax, -1
  02a05	eb 0e		 jmp	 SHORT $LN3@GetSkillRe@3
$LN2@GetSkillRe@3:

; 1427 : 	}
; 1428 : 
; 1429 : 	return this->m_sReqDexterity[skill];

  02a07	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  02a0a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a0d	0f bf 84 41 c0
	60 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+90304]
$LN3@GetSkillRe@3:

; 1430 : }

  02a15	5f		 pop	 edi
  02a16	5e		 pop	 esi
  02a17	5b		 pop	 ebx
  02a18	8b e5		 mov	 esp, ebp
  02a1a	5d		 pop	 ebp
  02a1b	c2 04 00	 ret	 4
?GetSkillReqDexterity@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::GetSkillReqDexterity
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillReqBrandOfSkill'::`2'::__LINE__Var
PUBLIC	?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetSkillReqBrandOfSkill
;	COMDAT ?__LINE__Var@?1??GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z@4JA DD 059aH ; `CMagicDamage::GetSkillReqBrandOfSkill'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::GetSkillReqBrandOfSkill
; _this$ = ecx

; 1434 : {

  02a20	55		 push	 ebp
  02a21	8b ec		 mov	 ebp, esp
  02a23	83 ec 44	 sub	 esp, 68			; 00000044H
  02a26	53		 push	 ebx
  02a27	56		 push	 esi
  02a28	57		 push	 edi
  02a29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1435 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  02a2c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02a30	7c 09		 jl	 SHORT $LN1@GetSkillRe@4
  02a32	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02a39	7e 2c		 jle	 SHORT $LN2@GetSkillRe@4
$LN1@GetSkillRe@4:

; 1436 : 	{
; 1437 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  02a3b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z@4JA
  02a40	83 c0 03	 add	 eax, 3
  02a43	50		 push	 eax
  02a44	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02a49	68 c9 01 00 00	 push	 457			; 000001c9H
  02a4e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02a53	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02a58	50		 push	 eax
  02a59	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  02a5f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1438 : 		return -1;

  02a62	83 c8 ff	 or	 eax, -1
  02a65	eb 0d		 jmp	 SHORT $LN3@GetSkillRe@4
$LN2@GetSkillRe@4:

; 1439 : 	}
; 1440 : 
; 1441 : 	return this->m_iSkillBrand[skill];

  02a67	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  02a6a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a6d	8b 84 81 c8 03
	01 00		 mov	 eax, DWORD PTR [ecx+eax*4+66504]
$LN3@GetSkillRe@4:

; 1442 : }

  02a74	5f		 pop	 edi
  02a75	5e		 pop	 esi
  02a76	5b		 pop	 ebx
  02a77	8b e5		 mov	 esp, ebp
  02a79	5d		 pop	 ebp
  02a7a	c2 04 00	 ret	 4
?GetSkillReqBrandOfSkill@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::GetSkillReqBrandOfSkill
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillUseType@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillUseType'::`2'::__LINE__Var
PUBLIC	?GetSkillUseType@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillUseType
;	COMDAT ?__LINE__Var@?1??GetSkillUseType@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillUseType@CMagicDamage@@QAEHH@Z@4JA DD 05a6H ; `CMagicDamage::GetSkillUseType'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillUseType@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillUseType
; _this$ = ecx

; 1446 : {

  02a80	55		 push	 ebp
  02a81	8b ec		 mov	 ebp, esp
  02a83	83 ec 44	 sub	 esp, 68			; 00000044H
  02a86	53		 push	 ebx
  02a87	56		 push	 esi
  02a88	57		 push	 edi
  02a89	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1447 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  02a8c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02a90	7c 09		 jl	 SHORT $LN1@GetSkillUs
  02a92	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02a99	7e 2c		 jle	 SHORT $LN2@GetSkillUs
$LN1@GetSkillUs:

; 1448 : 	{
; 1449 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  02a9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillUseType@CMagicDamage@@QAEHH@Z@4JA
  02aa0	83 c0 03	 add	 eax, 3
  02aa3	50		 push	 eax
  02aa4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02aa9	68 c9 01 00 00	 push	 457			; 000001c9H
  02aae	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02ab3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02ab8	50		 push	 eax
  02ab9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  02abf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1450 : 		return -1;

  02ac2	83 c8 ff	 or	 eax, -1
  02ac5	eb 0d		 jmp	 SHORT $LN3@GetSkillUs
$LN2@GetSkillUs:

; 1451 : 	}
; 1452 : 
; 1453 : 	return this->m_iSkillUseType[skill];

  02ac7	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  02aca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02acd	8b 84 81 d8 f8
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+63704]
$LN3@GetSkillUs:

; 1454 : }

  02ad4	5f		 pop	 edi
  02ad5	5e		 pop	 esi
  02ad6	5b		 pop	 ebx
  02ad7	8b e5		 mov	 esp, ebp
  02ad9	5d		 pop	 ebp
  02ada	c2 04 00	 ret	 4
?GetSkillUseType@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillUseType
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillReqLevel@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillReqLevel'::`2'::__LINE__Var
PUBLIC	?GetSkillReqLevel@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillReqLevel
;	COMDAT ?__LINE__Var@?1??GetSkillReqLevel@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillReqLevel@CMagicDamage@@QAEHH@Z@4JA DD 05b2H ; `CMagicDamage::GetSkillReqLevel'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillReqLevel@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillReqLevel
; _this$ = ecx

; 1458 : {

  02ae0	55		 push	 ebp
  02ae1	8b ec		 mov	 ebp, esp
  02ae3	83 ec 44	 sub	 esp, 68			; 00000044H
  02ae6	53		 push	 ebx
  02ae7	56		 push	 esi
  02ae8	57		 push	 edi
  02ae9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1459 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  02aec	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02af0	7c 09		 jl	 SHORT $LN1@GetSkillRe@5
  02af2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02af9	7e 2c		 jle	 SHORT $LN2@GetSkillRe@5
$LN1@GetSkillRe@5:

; 1460 : 	{
; 1461 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  02afb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillReqLevel@CMagicDamage@@QAEHH@Z@4JA
  02b00	83 c0 03	 add	 eax, 3
  02b03	50		 push	 eax
  02b04	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02b09	68 c9 01 00 00	 push	 457			; 000001c9H
  02b0e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02b13	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02b18	50		 push	 eax
  02b19	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  02b1f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1462 : 		return -1;

  02b22	83 c8 ff	 or	 eax, -1
  02b25	eb 0d		 jmp	 SHORT $LN3@GetSkillRe@5
$LN2@GetSkillRe@5:

; 1463 : 	}
; 1464 : 
; 1465 : 	return this->m_rLevel[skill];

  02b27	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02b2a	03 45 08	 add	 eax, DWORD PTR _skill$[ebp]
  02b2d	0f b6 80 ac 93
	00 00		 movzx	 eax, BYTE PTR [eax+37804]
$LN3@GetSkillRe@5:

; 1466 : }

  02b34	5f		 pop	 edi
  02b35	5e		 pop	 esi
  02b36	5b		 pop	 ebx
  02b37	8b e5		 mov	 esp, ebp
  02b39	5d		 pop	 ebp
  02b3a	c2 04 00	 ret	 4
?GetSkillReqLevel@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillReqLevel
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillGroup@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillGroup'::`2'::__LINE__Var
PUBLIC	?GetSkillGroup@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillGroup
;	COMDAT ?__LINE__Var@?1??GetSkillGroup@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillGroup@CMagicDamage@@QAEHH@Z@4JA DD 05beH ; `CMagicDamage::GetSkillGroup'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillGroup@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillGroup
; _this$ = ecx

; 1470 : {

  02b40	55		 push	 ebp
  02b41	8b ec		 mov	 ebp, esp
  02b43	83 ec 44	 sub	 esp, 68			; 00000044H
  02b46	53		 push	 ebx
  02b47	56		 push	 esi
  02b48	57		 push	 edi
  02b49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1471 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  02b4c	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02b50	7c 09		 jl	 SHORT $LN1@GetSkillGr
  02b52	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02b59	7e 2c		 jle	 SHORT $LN2@GetSkillGr
$LN1@GetSkillGr:

; 1472 : 	{
; 1473 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  02b5b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillGroup@CMagicDamage@@QAEHH@Z@4JA
  02b60	83 c0 03	 add	 eax, 3
  02b63	50		 push	 eax
  02b64	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02b69	68 c9 01 00 00	 push	 457			; 000001c9H
  02b6e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02b73	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02b78	50		 push	 eax
  02b79	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  02b7f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1474 : 		return -1;

  02b82	83 c8 ff	 or	 eax, -1
  02b85	eb 0e		 jmp	 SHORT $LN3@GetSkillGr
$LN2@GetSkillGr:

; 1475 : 	}
; 1476 : 
; 1477 : 	return this->m_sSkillGroup[skill];

  02b87	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  02b8a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02b8d	0f bf 84 41 f0
	3f 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+81904]
$LN3@GetSkillGr:

; 1478 : }

  02b95	5f		 pop	 edi
  02b96	5e		 pop	 esi
  02b97	5b		 pop	 ebx
  02b98	8b e5		 mov	 esp, ebp
  02b9a	5d		 pop	 ebp
  02b9b	c2 04 00	 ret	 4
?GetSkillGroup@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillGroup
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetSkillRank@CMagicDamage@@QAEHH@Z@4JA ; `CMagicDamage::GetSkillRank'::`2'::__LINE__Var
PUBLIC	?GetSkillRank@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillRank
;	COMDAT ?__LINE__Var@?1??GetSkillRank@CMagicDamage@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSkillRank@CMagicDamage@@QAEHH@Z@4JA DD 05caH ; `CMagicDamage::GetSkillRank'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_skill$ = 8						; size = 4
?GetSkillRank@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillRank
; _this$ = ecx

; 1482 : {

  02ba0	55		 push	 ebp
  02ba1	8b ec		 mov	 ebp, esp
  02ba3	83 ec 44	 sub	 esp, 68			; 00000044H
  02ba6	53		 push	 ebx
  02ba7	56		 push	 esi
  02ba8	57		 push	 edi
  02ba9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1483 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  02bac	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  02bb0	7c 09		 jl	 SHORT $LN1@GetSkillRa
  02bb2	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _skill$[ebp], 699 ; 000002bbH
  02bb9	7e 2c		 jle	 SHORT $LN2@GetSkillRa
$LN1@GetSkillRa:

; 1484 : 	{
; 1485 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  02bbb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetSkillRank@CMagicDamage@@QAEHH@Z@4JA
  02bc0	83 c0 03	 add	 eax, 3
  02bc3	50		 push	 eax
  02bc4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02bc9	68 c9 01 00 00	 push	 457			; 000001c9H
  02bce	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02bd3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02bd8	50		 push	 eax
  02bd9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  02bdf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1486 : 		return -1;

  02be2	83 c8 ff	 or	 eax, -1
  02be5	eb 0e		 jmp	 SHORT $LN3@GetSkillRa
$LN2@GetSkillRa:

; 1487 : 	}
; 1488 : 
; 1489 : 	return this->m_sSkillRank[skill];

  02be7	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  02bea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02bed	0f bf 84 41 78
	3a 01 00	 movsx	 eax, WORD PTR [ecx+eax*2+80504]
$LN3@GetSkillRa:

; 1490 : }

  02bf5	5f		 pop	 edi
  02bf6	5e		 pop	 esi
  02bf7	5b		 pop	 ebx
  02bf8	8b e5		 mov	 esp, ebp
  02bfa	5d		 pop	 ebp
  02bfb	c2 04 00	 ret	 4
?GetSkillRank@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillRank
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??IsItemAttachedSkill@CMagicDamage@@QAEEH@Z@4JA ; `CMagicDamage::IsItemAttachedSkill'::`2'::__LINE__Var
PUBLIC	?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z	; CMagicDamage::IsItemAttachedSkill
;	COMDAT ?__LINE__Var@?1??IsItemAttachedSkill@CMagicDamage@@QAEEH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??IsItemAttachedSkill@CMagicDamage@@QAEEH@Z@4JA DD 05d5H ; `CMagicDamage::IsItemAttachedSkill'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSkill$ = 8						; size = 4
?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z PROC		; CMagicDamage::IsItemAttachedSkill
; _this$ = ecx

; 1493 : {

  02c00	55		 push	 ebp
  02c01	8b ec		 mov	 ebp, esp
  02c03	83 ec 44	 sub	 esp, 68			; 00000044H
  02c06	53		 push	 ebx
  02c07	56		 push	 esi
  02c08	57		 push	 edi
  02c09	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1494 : 	if( iSkill < 0 
; 1495 : 		|| iSkill > MAX_SKILL-1 )

  02c0c	83 7d 08 00	 cmp	 DWORD PTR _iSkill$[ebp], 0
  02c10	7c 09		 jl	 SHORT $LN1@IsItemAtta
  02c12	81 7d 08 bb 02
	00 00		 cmp	 DWORD PTR _iSkill$[ebp], 699 ; 000002bbH
  02c19	7e 2b		 jle	 SHORT $LN2@IsItemAtta
$LN1@IsItemAtta:

; 1496 : 	{
; 1497 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), 
; 1498 : 			__FILE__, 
; 1499 : 			__LINE__);	//Line: 6

  02c1b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??IsItemAttachedSkill@CMagicDamage@@QAEEH@Z@4JA
  02c20	83 c0 06	 add	 eax, 6
  02c23	50		 push	 eax
  02c24	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BGMCHBHD@d?3?2projects?2exteam6?43?2source?2gam@
  02c29	68 c9 01 00 00	 push	 457			; 000001c9H
  02c2e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  02c33	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  02c38	50		 push	 eax
  02c39	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  02c3f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1500 : 		return -1;

  02c42	0c ff		 or	 al, 255			; 000000ffH
  02c44	eb 0c		 jmp	 SHORT $LN3@IsItemAtta
$LN2@IsItemAtta:

; 1501 : 	}
; 1502 : 	// ----
; 1503 : 	return this->m_byItemSkill[iSkill];

  02c46	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02c49	03 45 08	 add	 eax, DWORD PTR _iSkill$[ebp]
  02c4c	8a 80 38 66 01
	00		 mov	 al, BYTE PTR [eax+91704]
$LN3@IsItemAtta:

; 1504 : }

  02c52	5f		 pop	 edi
  02c53	5e		 pop	 esi
  02c54	5b		 pop	 ebx
  02c55	8b e5		 mov	 esp, ebp
  02c57	5d		 pop	 ebp
  02c58	c2 04 00	 ret	 4
?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z ENDP		; CMagicDamage::IsItemAttachedSkill
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__EMagicDamageC@@YAXXZ
text$yc	SEGMENT
??__EMagicDamageC@@YAXXZ PROC				; `dynamic initializer for 'MagicDamageC'', COMDAT

; 14   : CMagicDamage MagicDamageC;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0000e	e8 00 00 00 00	 call	 ??0CMagicDamage@@QAE@XZ	; CMagicDamage::CMagicDamage
  00013	68 00 00 00 00	 push	 OFFSET ??__FMagicDamageC@@YAXXZ ; `dynamic atexit destructor for 'MagicDamageC''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EMagicDamageC@@YAXXZ ENDP				; `dynamic initializer for 'MagicDamageC''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FMagicDamageC@@YAXXZ
text$yd	SEGMENT
??__FMagicDamageC@@YAXXZ PROC				; `dynamic atexit destructor for 'MagicDamageC'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0000e	e8 00 00 00 00	 call	 ??1CMagicDamage@@UAE@XZ	; CMagicDamage::~CMagicDamage
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FMagicDamageC@@YAXXZ ENDP				; `dynamic atexit destructor for 'MagicDamageC''
text$yd	ENDS
PUBLIC	?MagicDamageC@@3VCMagicDamage@@A		; MagicDamageC
_BSS	SEGMENT
?MagicDamageC@@3VCMagicDamage@@A DB 0168f4H DUP (?)	; MagicDamageC
_BSS	ENDS
CRT$XCU	SEGMENT
_MagicDamageC$initializer$ DD FLAT:??__EMagicDamageC@@YAXXZ
CRT$XCU	ENDS
END
