; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\Manager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
PUBLIC	?clear@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::clear
PUBLIC	??0?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
PUBLIC	??0CManager@@QAE@XZ				; CManager::CManager
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$??0CManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CManager@@QAE@XZ$0
__ehfuncinfo$??0CManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\manager.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CManager@@QAE@XZ PROC				; CManager::CManager
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 14   : 	this->m_DarkRevenAttackBlock.clear();

  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?clear@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::clear

; 15   : }

  00042	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00056	59		 pop	 ecx
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
__ehhandler$??0CManager@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CManager@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CManager@@QAE@XZ ENDP				; CManager::CManager
PUBLIC	??1CManager@@QAE@XZ				; CManager::~CManager
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CManager@@QAE@XZ PROC				; CManager::~CManager
; _this$ = ecx

; 18   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	83 ec 44	 sub	 esp, 68			; 00000044H
  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : }

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
??1CManager@@QAE@XZ ENDP				; CManager::~CManager
_TEXT	ENDS
PUBLIC	?Read@CManager@@QAEXPAD@Z			; CManager::Read
PUBLIC	??_C@_0BD@JPALIEN@ExData?2Manager?4dat?$AA@	; `string'
PUBLIC	?Load@CManager@@QAEXXZ				; CManager::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT ??_C@_0BD@JPALIEN@ExData?2Manager?4dat?$AA@
CONST	SEGMENT
??_C@_0BD@JPALIEN@ExData?2Manager?4dat?$AA@ DB 'ExData\Manager.dat', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CManager@@QAEXXZ PROC				; CManager::Load
; _this$ = ecx

; 22   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 44	 sub	 esp, 68			; 00000044H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi
  00089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	if(g_ExLicense.CheckUser(eExUB::Local) || 
; 24   : 		g_ExLicense.CheckUser(eExUB::Gredy) || 
; 25   : 		g_ExLicense.CheckUser(eExUB::Gredy2) || 
; 26   : 		g_ExLicense.CheckUser(eExUB::GredyLocal))

  0008c	6a 00		 push	 0
  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00093	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00098	0f b6 c0	 movzx	 eax, al
  0009b	85 c0		 test	 eax, eax
  0009d	75 39		 jne	 SHORT $LN1@Load
  0009f	6a 20		 push	 32			; 00000020H
  000a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000a6	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000ab	0f b6 c0	 movzx	 eax, al
  000ae	85 c0		 test	 eax, eax
  000b0	75 26		 jne	 SHORT $LN1@Load
  000b2	6a 22		 push	 34			; 00000022H
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000b9	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000be	0f b6 c0	 movzx	 eax, al
  000c1	85 c0		 test	 eax, eax
  000c3	75 13		 jne	 SHORT $LN1@Load
  000c5	6a 21		 push	 33			; 00000021H
  000c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000cc	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000d1	0f b6 c0	 movzx	 eax, al
  000d4	85 c0		 test	 eax, eax
  000d6	74 20		 je	 SHORT $LN3@Load
$LN1@Load:

; 27   : 	{
; 28   : 		this->m_DarkRevenAttackBlock.clear();

  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	e8 00 00 00 00	 call	 ?clear@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::clear

; 29   : 
; 30   : 		this->Read(gDirPath.GetNewPath("ExData\\Manager.dat"));

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JPALIEN@ExData?2Manager?4dat?$AA@
  000e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000ea	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000ef	50		 push	 eax
  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	e8 00 00 00 00	 call	 ?Read@CManager@@QAEXPAD@Z ; CManager::Read
$LN3@Load:

; 31   : 	}
; 32   : }

  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
?Load@CManager@@QAEXXZ ENDP				; CManager::Load
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	?push_back@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXABUDARKREVAN_ATTACK_BLOCK@@@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::push_back
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
EXTRN	_fclose:PROC
EXTRN	_strcmp:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_List$227679 = -16					; size = 4
_iType$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Read@CManager@@QAEXPAD@Z PROC				; CManager::Read
; _this$ = ecx

; 35   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	83 ec 50	 sub	 esp, 80			; 00000050H
  00106	53		 push	 ebx
  00107	56		 push	 esi
  00108	57		 push	 edi
  00109	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 	SMDFile = fopen(filename, "r");

  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00111	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 _fopen
  0011a	83 c4 08	 add	 esp, 8
  0011d	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 37   : 
; 38   : 	if(SMDFile == NULL)

  00122	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00129	75 22		 jne	 SHORT $LN9@Read

; 39   : 	{
; 40   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), filename);

  0012b	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0012e	50		 push	 eax
  0012f	68 c6 01 00 00	 push	 454			; 000001c6H
  00134	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00139	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0013e	50		 push	 eax
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00145	83 c4 08	 add	 esp, 8

; 41   : 		return;

  00148	e9 a3 00 00 00	 jmp	 $LN10@Read
$LN9@Read:

; 42   : 	}
; 43   : 
; 44   : 	SMDToken Token;
; 45   : 
; 46   : 	int iType = -1;

  0014d	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _iType$[ebp], -1
$LN8@Read:

; 47   : 
; 48   : 	while(true)

  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	85 c0		 test	 eax, eax
  0015b	74 73		 je	 SHORT $LN7@Read

; 49   : 	{
; 50   : 		Token = GetToken();

  0015d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00162	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 51   : 
; 52   :         if(Token == END)

  00165	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00169	75 02		 jne	 SHORT $LN6@Read

; 53   : 		{
; 54   :             break;

  0016b	eb 63		 jmp	 SHORT $LN7@Read
$LN6@Read:

; 55   : 		}
; 56   : 
; 57   : 		iType = (int)TokenNumber;

  0016d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00173	e8 00 00 00 00	 call	 __ftol2_sse
  00178	89 45 f4	 mov	 DWORD PTR _iType$[ebp], eax

; 58   : 
; 59   : 		if(iType != 0)

  0017b	83 7d f4 00	 cmp	 DWORD PTR _iType$[ebp], 0
  0017f	74 02		 je	 SHORT $LN5@Read

; 60   : 		{
; 61   : 			break;

  00181	eb 4d		 jmp	 SHORT $LN7@Read
$LN5@Read:

; 62   : 		}
; 63   : 
; 64   : 		while(true)

  00183	b8 01 00 00 00	 mov	 eax, 1
  00188	85 c0		 test	 eax, eax
  0018a	74 42		 je	 SHORT $LN3@Read

; 65   : 		{
; 66   : 			if(iType == 0)

  0018c	83 7d f4 00	 cmp	 DWORD PTR _iType$[ebp], 0
  00190	75 3a		 jne	 SHORT $LN2@Read

; 67   : 			{
; 68   : 				Token = GetToken();

  00192	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00197	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 69   : 
; 70   : 				if(!strcmp("end", TokenString))

  0019a	68 00 00 00 00	 push	 OFFSET _TokenString
  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001a4	e8 00 00 00 00	 call	 _strcmp
  001a9	83 c4 08	 add	 esp, 8
  001ac	85 c0		 test	 eax, eax
  001ae	75 02		 jne	 SHORT $LN1@Read

; 71   : 				{
; 72   : 					break;

  001b0	eb 1c		 jmp	 SHORT $LN3@Read
$LN1@Read:

; 73   : 				}
; 74   : 
; 75   : 				DARKREVAN_ATTACK_BLOCK List;
; 76   : 
; 77   : 				List.Map = (int)TokenNumber;

  001b2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b8	e8 00 00 00 00	 call	 __ftol2_sse
  001bd	89 45 f0	 mov	 DWORD PTR _List$227679[ebp], eax

; 78   : 
; 79   : 				this->m_DarkRevenAttackBlock.push_back(List);

  001c0	8d 45 f0	 lea	 eax, DWORD PTR _List$227679[ebp]
  001c3	50		 push	 eax
  001c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	e8 00 00 00 00	 call	 ?push_back@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXABUDARKREVAN_ATTACK_BLOCK@@@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::push_back
$LN2@Read:

; 80   : 			}
; 81   : 		}

  001cc	eb b5		 jmp	 SHORT $LN5@Read
$LN3@Read:

; 82   : 	}

  001ce	eb 84		 jmp	 SHORT $LN8@Read
$LN7@Read:

; 83   : 
; 84   : 	fclose(SMDFile);

  001d0	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 _fclose
  001db	83 c4 04	 add	 esp, 4

; 85   : 
; 86   : 	LogAdd("%s file load!", filename);

  001de	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  001e1	50		 push	 eax
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001ed	83 c4 08	 add	 esp, 8
$LN10@Read:

; 87   : }

  001f0	5f		 pop	 edi
  001f1	5e		 pop	 esi
  001f2	5b		 pop	 ebx
  001f3	8b e5		 mov	 esp, ebp
  001f5	5d		 pop	 ebp
  001f6	c2 04 00	 ret	 4
?Read@CManager@@QAEXPAD@Z ENDP				; CManager::Read
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00200	55		 push	 ebp
  00201	8b ec		 mov	 ebp, esp
  00203	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00209	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0020e	33 c5		 xor	 eax, ebp
  00210	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00213	53		 push	 ebx
  00214	56		 push	 esi
  00215	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00216	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0021d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 _fgetc
  00228	83 c4 04	 add	 esp, 4
  0022b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0022e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00232	83 f9 ff	 cmp	 ecx, -1
  00235	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00237	b8 02 00 00 00	 mov	 eax, 2
  0023c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00241	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00243	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00247	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0024a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0024c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00251	50		 push	 eax
  00252	e8 00 00 00 00	 call	 _fgetc
  00257	83 c4 04	 add	 esp, 4
  0025a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0025d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00261	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00264	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00266	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0026a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0026d	74 1c		 je	 SHORT $LN23@GetToken
  0026f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00273	83 f8 ff	 cmp	 eax, -1
  00276	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00278	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 _fgetc
  00283	83 c4 04	 add	 esp, 4
  00286	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00289	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0028b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0028f	83 f8 ff	 cmp	 eax, -1
  00292	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00294	b8 02 00 00 00	 mov	 eax, 2
  00299	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0029e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  002a2	50		 push	 eax
  002a3	e8 00 00 00 00	 call	 _isspace
  002a8	83 c4 04	 add	 esp, 4
  002ab	85 c0		 test	 eax, eax
  002ad	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  002b3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  002b7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  002bd	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  002c3	83 e9 22	 sub	 ecx, 34			; 00000022H
  002c6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  002cc	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  002d3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  002d9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  002df	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  002e6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  002ed	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  002f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  002fc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00301	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00306	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00310	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00315	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0031a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0031f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00329	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0032e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00333	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00338	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00342	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00347	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0034c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00351	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0035b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00360	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00365	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0036a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0036f	50		 push	 eax
  00370	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00374	51		 push	 ecx
  00375	e8 00 00 00 00	 call	 _ungetc
  0037a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0037d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00380	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00383	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00388	50		 push	 eax
  00389	e8 00 00 00 00	 call	 _getc
  0038e	83 c4 04	 add	 esp, 4
  00391	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00394	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00398	83 f9 ff	 cmp	 ecx, -1
  0039b	74 36		 je	 SHORT $LN12@GetToken
  0039d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003a1	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  003a4	74 1a		 je	 SHORT $LN11@GetToken
  003a6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003aa	50		 push	 eax
  003ab	e8 00 00 00 00	 call	 _isdigit
  003b0	83 c4 04	 add	 esp, 4
  003b3	85 c0		 test	 eax, eax
  003b5	75 09		 jne	 SHORT $LN11@GetToken
  003b7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003bb	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  003be	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  003c0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003c3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  003c6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  003c8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003cb	83 c0 01	 add	 eax, 1
  003ce	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  003d1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  003d3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  003d6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  003d9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  003dc	50		 push	 eax
  003dd	e8 00 00 00 00	 call	 _atof
  003e2	83 c4 04	 add	 esp, 4
  003e5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  003eb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  003f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  003fa	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  003ff	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00404	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0040b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 _getc
  00416	83 c4 04	 add	 esp, 4
  00419	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0041c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00420	83 f9 ff	 cmp	 ecx, -1
  00423	74 1c		 je	 SHORT $LN8@GetToken
  00425	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00429	83 f8 22	 cmp	 eax, 34			; 00000022H
  0042c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0042e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00431	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00434	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00436	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00439	83 c0 01	 add	 eax, 1
  0043c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0043f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00441	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00445	83 f8 22	 cmp	 eax, 34			; 00000022H
  00448	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0044a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0044f	50		 push	 eax
  00450	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00454	51		 push	 ecx
  00455	e8 00 00 00 00	 call	 _ungetc
  0045a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0045d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00460	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00463	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0046d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00472	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00477	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0047c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00480	50		 push	 eax
  00481	e8 00 00 00 00	 call	 _isalpha
  00486	83 c4 04	 add	 esp, 4
  00489	85 c0		 test	 eax, eax
  0048b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00491	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00498	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0049b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0049e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  004a0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004a3	83 c0 01	 add	 eax, 1
  004a6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  004a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004ae	50		 push	 eax
  004af	e8 00 00 00 00	 call	 _getc
  004b4	83 c4 04	 add	 esp, 4
  004b7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  004ba	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  004be	83 f9 ff	 cmp	 ecx, -1
  004c1	74 36		 je	 SHORT $LN3@GetToken
  004c3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004c7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  004ca	74 1a		 je	 SHORT $LN2@GetToken
  004cc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004d0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  004d3	74 11		 je	 SHORT $LN2@GetToken
  004d5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004d9	50		 push	 eax
  004da	e8 00 00 00 00	 call	 _isalnum
  004df	83 c4 04	 add	 esp, 4
  004e2	85 c0		 test	 eax, eax
  004e4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  004e6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004e9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  004ec	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  004ee	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004f1	83 c0 01	 add	 eax, 1
  004f4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  004f7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  004f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004fe	50		 push	 eax
  004ff	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00503	51		 push	 ecx
  00504	e8 00 00 00 00	 call	 _ungetc
  00509	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0050c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0050f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00512	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0051c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00521	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00523	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00525	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0052f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00534	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00536	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00538	5f		 pop	 edi
  00539	5e		 pop	 esi
  0053a	5b		 pop	 ebx
  0053b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0053e	33 cd		 xor	 ecx, ebp
  00540	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00545	8b e5		 mov	 esp, ebp
  00547	5d		 pop	 ebp
  00548	c3		 ret	 0
  00549	8d 49 00	 npad	 3
$LN35@GetToken:
  0054c	00 00 00 00	 DD	 $LN10@GetToken
  00550	00 00 00 00	 DD	 $LN19@GetToken
  00554	00 00 00 00	 DD	 $LN17@GetToken
  00558	00 00 00 00	 DD	 $LN14@GetToken
  0055c	00 00 00 00	 DD	 $LN18@GetToken
  00560	00 00 00 00	 DD	 $LN16@GetToken
  00564	00 00 00 00	 DD	 $LN15@GetToken
  00568	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0056c	00		 DB	 0
  0056d	01		 DB	 1
  0056e	07		 DB	 7
  0056f	07		 DB	 7
  00570	07		 DB	 7
  00571	07		 DB	 7
  00572	07		 DB	 7
  00573	07		 DB	 7
  00574	07		 DB	 7
  00575	07		 DB	 7
  00576	02		 DB	 2
  00577	03		 DB	 3
  00578	03		 DB	 3
  00579	07		 DB	 7
  0057a	03		 DB	 3
  0057b	03		 DB	 3
  0057c	03		 DB	 3
  0057d	03		 DB	 3
  0057e	03		 DB	 3
  0057f	03		 DB	 3
  00580	03		 DB	 3
  00581	03		 DB	 3
  00582	03		 DB	 3
  00583	03		 DB	 3
  00584	07		 DB	 7
  00585	04		 DB	 4
  00586	07		 DB	 7
  00587	07		 DB	 7
  00588	07		 DB	 7
  00589	07		 DB	 7
  0058a	07		 DB	 7
  0058b	07		 DB	 7
  0058c	07		 DB	 7
  0058d	07		 DB	 7
  0058e	07		 DB	 7
  0058f	07		 DB	 7
  00590	07		 DB	 7
  00591	07		 DB	 7
  00592	07		 DB	 7
  00593	07		 DB	 7
  00594	07		 DB	 7
  00595	07		 DB	 7
  00596	07		 DB	 7
  00597	07		 DB	 7
  00598	07		 DB	 7
  00599	07		 DB	 7
  0059a	07		 DB	 7
  0059b	07		 DB	 7
  0059c	07		 DB	 7
  0059d	07		 DB	 7
  0059e	07		 DB	 7
  0059f	07		 DB	 7
  005a0	07		 DB	 7
  005a1	07		 DB	 7
  005a2	07		 DB	 7
  005a3	07		 DB	 7
  005a4	07		 DB	 7
  005a5	07		 DB	 7
  005a6	07		 DB	 7
  005a7	07		 DB	 7
  005a8	07		 DB	 7
  005a9	07		 DB	 7
  005aa	07		 DB	 7
  005ab	07		 DB	 7
  005ac	07		 DB	 7
  005ad	07		 DB	 7
  005ae	07		 DB	 7
  005af	07		 DB	 7
  005b0	07		 DB	 7
  005b1	07		 DB	 7
  005b2	07		 DB	 7
  005b3	07		 DB	 7
  005b4	07		 DB	 7
  005b5	07		 DB	 7
  005b6	07		 DB	 7
  005b7	07		 DB	 7
  005b8	07		 DB	 7
  005b9	07		 DB	 7
  005ba	07		 DB	 7
  005bb	07		 DB	 7
  005bc	07		 DB	 7
  005bd	07		 DB	 7
  005be	07		 DB	 7
  005bf	07		 DB	 7
  005c0	07		 DB	 7
  005c1	07		 DB	 7
  005c2	07		 DB	 7
  005c3	07		 DB	 7
  005c4	07		 DB	 7
  005c5	05		 DB	 5
  005c6	07		 DB	 7
  005c7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@1@@Z ; std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
PUBLIC	??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@XZ ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocator<DARKREVAN_ATTACK_BLOCK>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T228682 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T228682[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@XZ ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocator<DARKREVAN_ATTACK_BLOCK>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@1@@Z ; std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ; std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
PUBLIC	?_Tidy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ; std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ; std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
__ehhandler$??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
PUBLIC	??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@ABU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@ABU2@@Z ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK const &>
PUBLIC	??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@AAU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK &>
PUBLIC	?_Orphan_range@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXI@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Reserve
PUBLIC	?_Inside@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBE_NPBUDARKREVAN_ATTACK_BLOCK@@@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Inside
PUBLIC	??$addressof@$$CBUDARKREVAN_ATTACK_BLOCK@@@std@@YAPBUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ; std::addressof<DARKREVAN_ATTACK_BLOCK const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXABUDARKREVAN_ATTACK_BLOCK@@@Z
_TEXT	SEGMENT
__Idx$227701 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXABUDARKREVAN_ATTACK_BLOCK@@@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUDARKREVAN_ATTACK_BLOCK@@@std@@YAPBUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ; std::addressof<DARKREVAN_ATTACK_BLOCK const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBE_NPBUDARKREVAN_ATTACK_BLOCK@@@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 78		 je	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUDARKREVAN_ATTACK_BLOCK@@@std@@YAPBUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ; std::addressof<DARKREVAN_ATTACK_BLOCK const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	c1 f8 02	 sar	 eax, 2
  0003c	89 45 f8	 mov	 DWORD PTR __Idx$227701[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00048	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004b	75 0a		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXI@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	51		 push	 ecx
  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00064	50		 push	 eax
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 f8	 mov	 edx, DWORD PTR __Idx$227701[ebp]
  00075	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00078	50		 push	 eax
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007f	52		 push	 edx
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 0c	 add	 eax, 12			; 0000000cH
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@AAU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK &>
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00095	83 c1 04	 add	 ecx, 4
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  0009e	eb 57		 jmp	 SHORT $LN5@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a9	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000ac	75 0a		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  000ae	6a 01		 push	 1
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXI@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	51		 push	 ecx
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c5	50		 push	 eax
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000ce	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d8	52		 push	 edx
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	83 c0 0c	 add	 eax, 12			; 0000000cH
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@ABU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@ABU2@@Z ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK const &>
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	83 c1 04	 add	 ecx, 4
  000f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f4	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back:

; 997  : 			}
; 998  : 		}

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?push_back@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXABUDARKREVAN_ATTACK_BLOCK@@@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@0@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::erase
PUBLIC	?begin@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::begin
PUBLIC	?end@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T228697 = -88						; size = 4
$T228698 = -84						; size = 4
$T228699 = -80						; size = 4
$T228700 = -76						; size = 4
$T228701 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXXZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T228698[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T228697[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T228700[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T228699[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T228697[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T228699[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T228701[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@0@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXXZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@XZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Destroy
PUBLIC	??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00@Z ; std::_Move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T228708 = -84						; size = 4
__Ptr$227892 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@0@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00@Z ; std::_Move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$227892[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$227892[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$227892[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T228708[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T228708[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@0@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBE_NPBUDARKREVAN_ATTACK_BLOCK@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBE_NPBUDARKREVAN_ATTACK_BLOCK@@@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBE_NPBUDARKREVAN_ATTACK_BLOCK@@@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::reserve
PUBLIC	?_Grow_to@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEII@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Grow_to
PUBLIC	?capacity@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::capacity
PUBLIC	?_Xlen@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Xlen
PUBLIC	?max_size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::max_size
PUBLIC	?size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXI@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEII@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::reserve
$LN6@Reserve:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXI@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@I@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::deallocate
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXXZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 02	 sar	 edx, 2
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@I@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXXZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@ABV01@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocator<DARKREVAN_ATTACK_BLOCK>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@1@@Z PROC ; std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@ABV01@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocator<DARKREVAN_ATTACK_BLOCK>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@1@@Z ENDP ; std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::~_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@XZ PROC ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocator<DARKREVAN_ATTACK_BLOCK>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@XZ ENDP ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocator<DARKREVAN_ATTACK_BLOCK>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUDARKREVAN_ATTACK_BLOCK@@@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEPAUDARKREVAN_ATTACK_BLOCK@@PAU2@00@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Umove<DARKREVAN_ATTACK_BLOCK *>
PUBLIC	?allocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEPAUDARKREVAN_ATTACK_BLOCK@@I@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$227934 = -28					; size = 4
__Ptr$227927 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Xlen
  00044	e9 eb 00 00 00	 jmp	 $LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 da 00 00
	00		 jae	 $LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEPAUDARKREVAN_ATTACK_BLOCK@@I@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$227927[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$227927[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUDARKREVAN_ATTACK_BLOCK@@@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEPAUDARKREVAN_ATTACK_BLOCK@@PAU2@00@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Umove<DARKREVAN_ATTACK_BLOCK *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve
__catch$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$227927[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@I@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$227934[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 35		 je	 SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ef	2b 11		 sub	 edx, DWORD PTR [ecx]
  000f1	c1 fa 02	 sar	 edx, 2
  000f4	52		 push	 edx
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	51		 push	 ecx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00101	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@I@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00111	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$227927[ebp]
  00114	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00117	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR __Size$227934[ebp]
  00120	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$227927[ebp]
  00123	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00126	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00129	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  0012c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$227927[ebp]
  00132	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QAEXI@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?capacity@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@2@@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Make_iter
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QBEIXZ ; std::allocator<DARKREVAN_ATTACK_BLOCK>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QBEIXZ ; std::allocator<DARKREVAN_ATTACK_BLOCK>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z ; std::_Destroy_range<std::allocator<DARKREVAN_ATTACK_BLOCK> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z ; std::_Destroy_range<std::allocator<DARKREVAN_ATTACK_BLOCK> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEXPAUDARKREVAN_ATTACK_BLOCK@@0@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEII@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@QBEIXZ ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEII@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXXZ PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IBEXXZ ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@ABV01@@Z PROC ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocator<DARKREVAN_ATTACK_BLOCK>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocator<DARKREVAN_ATTACK_BLOCK>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ?deallocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@I@Z PROC ; std::allocator<DARKREVAN_ATTACK_BLOCK>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@I@Z ENDP ; std::allocator<DARKREVAN_ATTACK_BLOCK>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Allocate@UDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@IPAU1@@Z ; std::_Allocate<DARKREVAN_ATTACK_BLOCK>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEPAUDARKREVAN_ATTACK_BLOCK@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEPAUDARKREVAN_ATTACK_BLOCK@@I@Z PROC ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@IPAU1@@Z ; std::_Allocate<DARKREVAN_ATTACK_BLOCK>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEPAUDARKREVAN_ATTACK_BLOCK@@I@Z ENDP ; std::allocator<DARKREVAN_ATTACK_BLOCK>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QBEIXZ PROC ; std::allocator<DARKREVAN_ATTACK_BLOCK>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 3f		 mov	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QBEIXZ ENDP ; std::allocator<DARKREVAN_ATTACK_BLOCK>::max_size
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QAE@PAUDARKREVAN_ATTACK_BLOCK@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> > >::_Compat
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUDARKREVAN_ATTACK_BLOCK@@@std@@YAPBUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUDARKREVAN_ATTACK_BLOCK@@@std@@YAPBUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z PROC ; std::addressof<DARKREVAN_ATTACK_BLOCK const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUDARKREVAN_ATTACK_BLOCK@@@std@@YAPBUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ENDP ; std::addressof<DARKREVAN_ATTACK_BLOCK const >
_TEXT	ENDS
PUBLIC	??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct<DARKREVAN_ATTACK_BLOCK &>
PUBLIC	??$forward@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YAAAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ; std::forward<DARKREVAN_ATTACK_BLOCK &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@AAU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@AAU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YAAAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ; std::forward<DARKREVAN_ATTACK_BLOCK &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct<DARKREVAN_ATTACK_BLOCK &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@AAU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@ABU3@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct
PUBLIC	??$forward@ABUDARKREVAN_ATTACK_BLOCK@@@std@@YAABUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ; std::forward<DARKREVAN_ATTACK_BLOCK const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@ABU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@ABU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUDARKREVAN_ATTACK_BLOCK@@@std@@YAABUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ; std::forward<DARKREVAN_ATTACK_BLOCK const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@ABU3@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@ABU3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *>
PUBLIC	??$_Ptr_cat@UDARKREVAN_ATTACK_BLOCK@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::_Ptr_cat<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00@Z
_TEXT	SEGMENT
$T228785 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00@Z PROC ; std::_Move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UDARKREVAN_ATTACK_BLOCK@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::_Ptr_cat<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T228785[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T228785[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00@Z ENDP ; std::_Move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z ; std::_Uninitialized_move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *,std::allocator<DARKREVAN_ATTACK_BLOCK> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUDARKREVAN_ATTACK_BLOCK@@@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEPAUDARKREVAN_ATTACK_BLOCK@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUDARKREVAN_ATTACK_BLOCK@@@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEPAUDARKREVAN_ATTACK_BLOCK@@PAU2@00@Z PROC ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Umove<DARKREVAN_ATTACK_BLOCK *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z ; std::_Uninitialized_move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *,std::allocator<DARKREVAN_ATTACK_BLOCK> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUDARKREVAN_ATTACK_BLOCK@@@?$vector@UDARKREVAN_ATTACK_BLOCK@@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@IAEPAUDARKREVAN_ATTACK_BLOCK@@PAU2@00@Z ENDP ; std::vector<DARKREVAN_ATTACK_BLOCK,std::allocator<DARKREVAN_ATTACK_BLOCK> >::_Umove<DARKREVAN_ATTACK_BLOCK *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<DARKREVAN_ATTACK_BLOCK> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z
_TEXT	SEGMENT
$T228790 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z PROC ; std::_Destroy_range<std::allocator<DARKREVAN_ATTACK_BLOCK> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UDARKREVAN_ATTACK_BLOCK@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::_Ptr_cat<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T228790[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T228790[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<DARKREVAN_ATTACK_BLOCK> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<DARKREVAN_ATTACK_BLOCK> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@UDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@IPAU1@@Z
_TEXT	SEGMENT
$T228793 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@IPAU1@@Z PROC ; std::_Allocate<DARKREVAN_ATTACK_BLOCK>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	c1 e0 02	 shl	 eax, 2
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T228793[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T228793[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@IPAU1@@Z ENDP ; std::_Allocate<DARKREVAN_ATTACK_BLOCK>
_TEXT	ENDS
PUBLIC	??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ; std::_Construct<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@ABU3@@Z PROC ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ; std::_Construct<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@ABU3@@Z ENDP ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YAAAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YAAAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z PROC ; std::forward<DARKREVAN_ATTACK_BLOCK &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YAAAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ENDP ; std::forward<DARKREVAN_ATTACK_BLOCK &>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T228800 = -88						; size = 4
$T228801 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z PROC ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct<DARKREVAN_ATTACK_BLOCK &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T228801[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T228801[ebp], 0
  00047	74 1b		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YAAAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ; std::forward<DARKREVAN_ATTACK_BLOCK &>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 45 ac	 mov	 eax, DWORD PTR $T228801[ebp]
  0005a	89 10		 mov	 DWORD PTR [eax], edx
  0005c	8b 4d ac	 mov	 ecx, DWORD PTR $T228801[ebp]
  0005f	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00062	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00064	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  0006b	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  0006e	89 55 a8	 mov	 DWORD PTR $T228800[ebp], edx
  00071	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T228801[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUDARKREVAN_ATTACK_BLOCK@@@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@AAU2@@Z ENDP ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct<DARKREVAN_ATTACK_BLOCK &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUDARKREVAN_ATTACK_BLOCK@@@std@@YAABUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUDARKREVAN_ATTACK_BLOCK@@@std@@YAABUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z PROC ; std::forward<DARKREVAN_ATTACK_BLOCK const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUDARKREVAN_ATTACK_BLOCK@@@std@@YAABUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ENDP ; std::forward<DARKREVAN_ATTACK_BLOCK const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UDARKREVAN_ATTACK_BLOCK@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDARKREVAN_ATTACK_BLOCK@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UDARKREVAN_ATTACK_BLOCK@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDARKREVAN_ATTACK_BLOCK@@0@Z PROC ; std::_Ptr_cat<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UDARKREVAN_ATTACK_BLOCK@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDARKREVAN_ATTACK_BLOCK@@0@Z ENDP ; std::_Ptr_cat<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>
_TEXT	ENDS
PUBLIC	??$move@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ; std::move<DARKREVAN_ATTACK_BLOCK &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 04	 add	 eax, 4
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 04	 add	 ecx, 4
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 15		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ; std::move<DARKREVAN_ATTACK_BLOCK &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00036	89 0a		 mov	 DWORD PTR [edx], ecx
  00038	eb d1		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  0003a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$_Move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *,std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK>
PUBLIC	??$_Val_type@PAUDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@@Z ; std::_Val_type<DARKREVAN_ATTACK_BLOCK *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z
_TEXT	SEGMENT
$T228823 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z PROC ; std::_Uninitialized_move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *,std::allocator<DARKREVAN_ATTACK_BLOCK> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UDARKREVAN_ATTACK_BLOCK@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDARKREVAN_ATTACK_BLOCK@@0@Z ; std::_Ptr_cat<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T228823[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T228823[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@@Z ; std::_Val_type<DARKREVAN_ATTACK_BLOCK *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *,std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@@Z ENDP ; std::_Uninitialized_move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *,std::allocator<DARKREVAN_ATTACK_BLOCK> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@@Z ; std::_Dest_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<DARKREVAN_ATTACK_BLOCK> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 04	 add	 eax, 4
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@@Z ; std::_Dest_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@0AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<DARKREVAN_ATTACK_BLOCK> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T228828 = -88						; size = 4
$T228829 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z PROC ; std::_Construct<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 04		 push	 4
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T228829[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T228829[ebp], 0
  0004a	74 1b		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUDARKREVAN_ATTACK_BLOCK@@@std@@YAABUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ; std::forward<DARKREVAN_ATTACK_BLOCK const &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	8b 45 ac	 mov	 eax, DWORD PTR $T228829[ebp]
  0005d	89 10		 mov	 DWORD PTR [eax], edx
  0005f	8b 4d ac	 mov	 ecx, DWORD PTR $T228829[ebp]
  00062	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00065	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  00067	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  0006e	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  00071	89 55 a8	 mov	 DWORD PTR $T228828[ebp], edx
  00074	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T228829[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UDARKREVAN_ATTACK_BLOCK@@ABU1@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@ABU1@@Z ENDP ; std::_Construct<DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z PROC ; std::move<DARKREVAN_ATTACK_BLOCK &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ENDP ; std::move<DARKREVAN_ATTACK_BLOCK &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@@Z PROC ; std::_Val_type<DARKREVAN_ATTACK_BLOCK *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUDARKREVAN_ATTACK_BLOCK@@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@@Z ENDP ; std::_Val_type<DARKREVAN_ATTACK_BLOCK *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@U3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@$$QAU2@@Z ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *,std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 04	 add	 eax, 4
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 04	 add	 ecx, 4
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@U3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@$$QAU2@@Z ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 04	 add	 eax, 4
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@@Z ; std::_Dest_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUDARKREVAN_ATTACK_BLOCK@@PAU1@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@U1@@std@@YAPAUDARKREVAN_ATTACK_BLOCK@@PAU1@00AAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<DARKREVAN_ATTACK_BLOCK *,DARKREVAN_ATTACK_BLOCK *,std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK>
PUBLIC	?destroy@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@@Z PROC ; std::_Dest_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@@Z ENDP ; std::_Dest_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK>
_TEXT	ENDS
PUBLIC	??$_Destroy@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@@Z ; std::_Destroy<DARKREVAN_ATTACK_BLOCK>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@@Z PROC ; std::allocator<DARKREVAN_ATTACK_BLOCK>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@@Z ; std::_Destroy<DARKREVAN_ATTACK_BLOCK>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@@Z ENDP ; std::allocator<DARKREVAN_ATTACK_BLOCK>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct
PUBLIC	??$forward@UDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ; std::forward<DARKREVAN_ATTACK_BLOCK>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@U3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@U3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ; std::forward<DARKREVAN_ATTACK_BLOCK>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@UDARKREVAN_ATTACK_BLOCK@@U3@@std@@YAXAAV?$allocator@UDARKREVAN_ATTACK_BLOCK@@@0@PAUDARKREVAN_ATTACK_BLOCK@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<DARKREVAN_ATTACK_BLOCK>,DARKREVAN_ATTACK_BLOCK,DARKREVAN_ATTACK_BLOCK>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@@Z PROC ; std::_Destroy<DARKREVAN_ATTACK_BLOCK>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UDARKREVAN_ATTACK_BLOCK@@@std@@YAXPAUDARKREVAN_ATTACK_BLOCK@@@Z ENDP ; std::_Destroy<DARKREVAN_ATTACK_BLOCK>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T228868 = -88						; size = 4
$T228869 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z PROC ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T228869[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T228869[ebp], 0
  00047	74 1b		 je	 SHORT $LN3@construct@2
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ; std::forward<DARKREVAN_ATTACK_BLOCK>
  00052	83 c4 04	 add	 esp, 4
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 45 ac	 mov	 eax, DWORD PTR $T228869[ebp]
  0005a	89 10		 mov	 DWORD PTR [eax], edx
  0005c	8b 4d ac	 mov	 ecx, DWORD PTR $T228869[ebp]
  0005f	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  00062	eb 07		 jmp	 SHORT $LN4@construct@2
$LN3@construct@2:
  00064	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@2:
  0006b	8b 55 a4	 mov	 edx, DWORD PTR tv74[ebp]
  0006e	89 55 a8	 mov	 DWORD PTR $T228868[ebp], edx
  00071	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T228869[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UDARKREVAN_ATTACK_BLOCK@@@std@@QAEXPAUDARKREVAN_ATTACK_BLOCK@@$$QAU3@@Z ENDP ; std::allocator<DARKREVAN_ATTACK_BLOCK>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z PROC ; std::forward<DARKREVAN_ATTACK_BLOCK>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UDARKREVAN_ATTACK_BLOCK@@@std@@YA$$QAUDARKREVAN_ATTACK_BLOCK@@AAU1@@Z ENDP ; std::forward<DARKREVAN_ATTACK_BLOCK>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\manager.cpp
;	COMDAT ??__Eg_Manager@@YAXXZ
text$yc	SEGMENT
??__Eg_Manager@@YAXXZ PROC				; `dynamic initializer for 'g_Manager'', COMDAT

; 10   : CManager g_Manager;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Manager@@3VCManager@@A ; g_Manager
  0000e	e8 00 00 00 00	 call	 ??0CManager@@QAE@XZ	; CManager::CManager
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_Manager@@YAXXZ ; `dynamic atexit destructor for 'g_Manager''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_Manager@@YAXXZ ENDP				; `dynamic initializer for 'g_Manager''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_Manager@@YAXXZ
text$yd	SEGMENT
??__Fg_Manager@@YAXXZ PROC				; `dynamic atexit destructor for 'g_Manager'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Manager@@3VCManager@@A ; g_Manager
  0000e	e8 00 00 00 00	 call	 ??1CManager@@QAE@XZ	; CManager::~CManager
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_Manager@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_Manager''
text$yd	ENDS
PUBLIC	?g_Manager@@3VCManager@@A			; g_Manager
_BSS	SEGMENT
?g_Manager@@3VCManager@@A DB 010H DUP (?)		; g_Manager
_BSS	ENDS
CRT$XCU	SEGMENT
_g_Manager$initializer$ DD FLAT:??__Eg_Manager@@YAXXZ
CRT$XCU	ENDS
END
