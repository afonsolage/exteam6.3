; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\KanturuMonsterMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1CKanturuObjInfo@@UAE@XZ			; CKanturuObjInfo::~CKanturuObjInfo
PUBLIC	?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetRegenMonsterObjData
PUBLIC	?ResetLoadData@CKanturuMonsterMng@@QAEXXZ	; CKanturuMonsterMng::ResetLoadData
PUBLIC	??0CKanturuObjInfo@@QAE@XZ			; CKanturuObjInfo::CKanturuObjInfo
PUBLIC	??_7CKanturuMonsterMng@@6B@			; CKanturuMonsterMng::`vftable'
PUBLIC	??0CKanturuMonsterMng@@QAE@XZ			; CKanturuMonsterMng::CKanturuMonsterMng
PUBLIC	??_R4CKanturuMonsterMng@@6B@			; CKanturuMonsterMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCKanturuMonsterMng@@@8			; CKanturuMonsterMng `RTTI Type Descriptor'
PUBLIC	??_R3CKanturuMonsterMng@@8			; CKanturuMonsterMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CKanturuMonsterMng@@8			; CKanturuMonsterMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CKanturuMonsterMng@@8		; CKanturuMonsterMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECKanturuMonsterMng@@UAEPAXI@Z:PROC		; CKanturuMonsterMng::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CKanturuMonsterMng@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\kanturumonstermng.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CKanturuMonsterMng@@8 DD FLAT:??_R0?AVCKanturuMonsterMng@@@8 ; CKanturuMonsterMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CKanturuMonsterMng@@8
rdata$r	ENDS
;	COMDAT ??_R2CKanturuMonsterMng@@8
rdata$r	SEGMENT
??_R2CKanturuMonsterMng@@8 DD FLAT:??_R1A@?0A@EA@CKanturuMonsterMng@@8 ; CKanturuMonsterMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CKanturuMonsterMng@@8
rdata$r	SEGMENT
??_R3CKanturuMonsterMng@@8 DD 00H			; CKanturuMonsterMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CKanturuMonsterMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCKanturuMonsterMng@@@8
_DATA	SEGMENT
??_R0?AVCKanturuMonsterMng@@@8 DD FLAT:??_7type_info@@6B@ ; CKanturuMonsterMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCKanturuMonsterMng@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CKanturuMonsterMng@@6B@
rdata$r	SEGMENT
??_R4CKanturuMonsterMng@@6B@ DD 00H			; CKanturuMonsterMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCKanturuMonsterMng@@@8
	DD	FLAT:??_R3CKanturuMonsterMng@@8
rdata$r	ENDS
;	COMDAT ??_7CKanturuMonsterMng@@6B@
CONST	SEGMENT
??_7CKanturuMonsterMng@@6B@ DD FLAT:??_R4CKanturuMonsterMng@@6B@ ; CKanturuMonsterMng::`vftable'
	DD	FLAT:??_ECKanturuMonsterMng@@UAEPAXI@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CKanturuMonsterMng@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CKanturuMonsterMng@@QAE@XZ$0
__ehfuncinfo$??0CKanturuMonsterMng@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CKanturuMonsterMng@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CKanturuMonsterMng@@QAE@XZ PROC			; CKanturuMonsterMng::CKanturuMonsterMng
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CKanturuMonsterMng@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CKanturuMonsterMng@@6B@
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	81 c1 e0 07 00
	00		 add	 ecx, 2016		; 000007e0H
  0003d	e8 00 00 00 00	 call	 ??0CKanturuObjInfo@@QAE@XZ ; CKanturuObjInfo::CKanturuObjInfo
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 20   : 	this->ResetLoadData();

  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?ResetLoadData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetLoadData

; 21   : 	this->ResetRegenMonsterObjData();

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetRegenMonsterObjData

; 22   : }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CKanturuMonsterMng@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 e0 07 00
	00		 add	 ecx, 2016		; 000007e0H
  00009	e9 00 00 00 00	 jmp	 ??1CKanturuObjInfo@@UAE@XZ ; CKanturuObjInfo::~CKanturuObjInfo
__ehhandler$??0CKanturuMonsterMng@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CKanturuMonsterMng@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CKanturuMonsterMng@@QAE@XZ ENDP			; CKanturuMonsterMng::CKanturuMonsterMng
PUBLIC	?Reset@CKanturuObjInfo@@QAEXXZ			; CKanturuObjInfo::Reset
PUBLIC	??_7CKanturuObjInfo@@6B@			; CKanturuObjInfo::`vftable'
PUBLIC	??_R4CKanturuObjInfo@@6B@			; CKanturuObjInfo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCKanturuObjInfo@@@8			; CKanturuObjInfo `RTTI Type Descriptor'
PUBLIC	??_R3CKanturuObjInfo@@8				; CKanturuObjInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CKanturuObjInfo@@8				; CKanturuObjInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CKanturuObjInfo@@8		; CKanturuObjInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECKanturuObjInfo@@UAEPAXI@Z:PROC		; CKanturuObjInfo::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CKanturuObjInfo@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\kanturuobjinfo.h
rdata$r	SEGMENT
??_R1A@?0A@EA@CKanturuObjInfo@@8 DD FLAT:??_R0?AVCKanturuObjInfo@@@8 ; CKanturuObjInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CKanturuObjInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2CKanturuObjInfo@@8
rdata$r	SEGMENT
??_R2CKanturuObjInfo@@8 DD FLAT:??_R1A@?0A@EA@CKanturuObjInfo@@8 ; CKanturuObjInfo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CKanturuObjInfo@@8
rdata$r	SEGMENT
??_R3CKanturuObjInfo@@8 DD 00H				; CKanturuObjInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CKanturuObjInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCKanturuObjInfo@@@8
_DATA	SEGMENT
??_R0?AVCKanturuObjInfo@@@8 DD FLAT:??_7type_info@@6B@	; CKanturuObjInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCKanturuObjInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CKanturuObjInfo@@6B@
rdata$r	SEGMENT
??_R4CKanturuObjInfo@@6B@ DD 00H			; CKanturuObjInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCKanturuObjInfo@@@8
	DD	FLAT:??_R3CKanturuObjInfo@@8
rdata$r	ENDS
;	COMDAT ??_7CKanturuObjInfo@@6B@
CONST	SEGMENT
??_7CKanturuObjInfo@@6B@ DD FLAT:??_R4CKanturuObjInfo@@6B@ ; CKanturuObjInfo::`vftable'
	DD	FLAT:??_ECKanturuObjInfo@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0CKanturuObjInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CKanturuObjInfo@@QAE@XZ PROC				; CKanturuObjInfo::CKanturuObjInfo, COMDAT
; _this$ = ecx

; 12   : 	CKanturuObjInfo()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CKanturuObjInfo@@6B@

; 13   : 	{
; 14   : 		this->Reset();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Reset@CKanturuObjInfo@@QAEXXZ ; CKanturuObjInfo::Reset

; 15   : 	}

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CKanturuObjInfo@@QAE@XZ ENDP				; CKanturuObjInfo::CKanturuObjInfo
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1CKanturuObjInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CKanturuObjInfo@@UAE@XZ PROC				; CKanturuObjInfo::~CKanturuObjInfo, COMDAT
; _this$ = ecx

; 17   : 	virtual ~CKanturuObjInfo(){return;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CKanturuObjInfo@@6B@
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CKanturuObjInfo@@UAE@XZ ENDP				; CKanturuObjInfo::~CKanturuObjInfo
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?Reset@CKanturuObjInfo@@QAEXXZ
_TEXT	SEGMENT
_iCount$204424 = -8					; size = 4
_this$ = -4						; size = 4
?Reset@CKanturuObjInfo@@QAEXXZ PROC			; CKanturuObjInfo::Reset, COMDAT
; _this$ = ecx

; 20   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 		for ( int iCount=0;iCount<MAX_KANTURU_OBJ_INDEX;iCount++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$204424[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN3@Reset
$LN2@Reset:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _iCount$204424[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _iCount$204424[ebp], eax
$LN3@Reset:
  0001e	81 7d f8 20 03
	00 00		 cmp	 DWORD PTR _iCount$204424[ebp], 800 ; 00000320H
  00025	7d 10		 jge	 SHORT $LN1@Reset

; 22   : 		{
; 23   : 			this->m_iObjIndex[iCount]=-1;

  00027	8b 45 f8	 mov	 eax, DWORD PTR _iCount$204424[ebp]
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	c7 44 81 08 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+8], -1

; 24   : 		}

  00035	eb de		 jmp	 SHORT $LN2@Reset
$LN1@Reset:

; 25   : 
; 26   : 		this->m_iObjCount=0;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 27   : 	}

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?Reset@CKanturuObjInfo@@QAEXXZ ENDP			; CKanturuObjInfo::Reset
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCKanturuObjInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCKanturuObjInfo@@UAEPAXI@Z PROC			; CKanturuObjInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CKanturuObjInfo@@UAE@XZ ; CKanturuObjInfo::~CKanturuObjInfo
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCKanturuObjInfo@@UAEPAXI@Z ENDP			; CKanturuObjInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CKanturuMonsterMng@@UAE@XZ			; CKanturuMonsterMng::~CKanturuMonsterMng
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCKanturuMonsterMng@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCKanturuMonsterMng@@UAEPAXI@Z PROC			; CKanturuMonsterMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CKanturuMonsterMng@@UAE@XZ ; CKanturuMonsterMng::~CKanturuMonsterMng
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCKanturuMonsterMng@@UAEPAXI@Z ENDP			; CKanturuMonsterMng::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\kanturumonstermng.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CKanturuMonsterMng@@UAE@XZ PROC			; CKanturuMonsterMng::~CKanturuMonsterMng
; _this$ = ecx

; 25   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 44	 sub	 esp, 68			; 00000044H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi
  00089	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CKanturuMonsterMng@@6B@

; 26   : 	return;
; 27   : }

  00095	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 e0 07 00
	00		 add	 ecx, 2016		; 000007e0H
  0009e	e8 00 00 00 00	 call	 ??1CKanturuObjInfo@@UAE@XZ ; CKanturuObjInfo::~CKanturuObjInfo
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
??1CKanturuMonsterMng@@UAE@XZ ENDP			; CKanturuMonsterMng::~CKanturuMonsterMng
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iCount$227181 = -8					; size = 4
_this$ = -4						; size = 4
?ResetLoadData@CKanturuMonsterMng@@QAEXXZ PROC		; CKanturuMonsterMng::ResetLoadData
; _this$ = ecx

; 31   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	83 ec 48	 sub	 esp, 72			; 00000048H
  000b6	53		 push	 ebx
  000b7	56		 push	 esi
  000b8	57		 push	 edi
  000b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	for ( int iCount=0;iCount<MAX_KANTURU_MONSTER;iCount++)

  000bc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$227181[ebp], 0
  000c3	eb 09		 jmp	 SHORT $LN3@ResetLoadD
$LN2@ResetLoadD:
  000c5	8b 45 f8	 mov	 eax, DWORD PTR _iCount$227181[ebp]
  000c8	83 c0 01	 add	 eax, 1
  000cb	89 45 f8	 mov	 DWORD PTR _iCount$227181[ebp], eax
$LN3@ResetLoadD:
  000ce	81 7d f8 c8 00
	00 00		 cmp	 DWORD PTR _iCount$227181[ebp], 200 ; 000000c8H
  000d5	7d 1c		 jge	 SHORT $LN1@ResetLoadD

; 33   : 	{
; 34   : 		memset(&this->m_SetBaseInfo[iCount], -1, sizeof(this->m_SetBaseInfo[iCount]));

  000d7	6a 0a		 push	 10			; 0000000aH
  000d9	6a ff		 push	 -1
  000db	8b 45 f8	 mov	 eax, DWORD PTR _iCount$227181[ebp]
  000de	6b c0 0a	 imul	 eax, 10			; 0000000aH
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 _memset
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 35   : 	}

  000f1	eb d2		 jmp	 SHORT $LN2@ResetLoadD
$LN1@ResetLoadD:

; 36   : 
; 37   : 	this->m_iMaxMonsterCount = 0;

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 38   : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
?ResetLoadData@CKanturuMonsterMng@@QAEXXZ ENDP		; CKanturuMonsterMng::ResetLoadData
_TEXT	ENDS
PUBLIC	?GetCount@CKanturuObjInfo@@QAEHXZ		; CKanturuObjInfo::GetCount
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iCount$227188 = -8					; size = 4
_this$ = -4						; size = 4
?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ PROC ; CKanturuMonsterMng::ResetRegenMonsterObjData
; _this$ = ecx

; 43   : {

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	83 ec 48	 sub	 esp, 72			; 00000048H
  00116	53		 push	 ebx
  00117	56		 push	 esi
  00118	57		 push	 edi
  00119	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  0011c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$227188[ebp], 0
  00123	eb 09		 jmp	 SHORT $LN5@ResetRegen
$LN4@ResetRegen:
  00125	8b 45 f8	 mov	 eax, DWORD PTR _iCount$227188[ebp]
  00128	83 c0 01	 add	 eax, 1
  0012b	89 45 f8	 mov	 DWORD PTR _iCount$227188[ebp], eax
$LN5@ResetRegen:
  0012e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	81 c1 e0 07 00
	00		 add	 ecx, 2016		; 000007e0H
  00137	e8 00 00 00 00	 call	 ?GetCount@CKanturuObjInfo@@QAEHXZ ; CKanturuObjInfo::GetCount
  0013c	39 45 f8	 cmp	 DWORD PTR _iCount$227188[ebp], eax
  0013f	7d 28		 jge	 SHORT $LN3@ResetRegen

; 45   : 	{
; 46   : 		if ( this->m_KanturuMonster.m_iObjIndex[iCount] != -1 )

  00141	8b 45 f8	 mov	 eax, DWORD PTR _iCount$227188[ebp]
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	83 bc 81 e8 07
	00 00 ff	 cmp	 DWORD PTR [ecx+eax*4+2024], -1
  0014f	74 16		 je	 SHORT $LN2@ResetRegen

; 47   : 		{
; 48   : 			gObjDel(this->m_KanturuMonster.m_iObjIndex[iCount]);

  00151	8b 45 f8	 mov	 eax, DWORD PTR _iCount$227188[ebp]
  00154	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00157	8b 94 81 e8 07
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2024]
  0015e	52		 push	 edx
  0015f	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00164	83 c4 04	 add	 esp, 4
$LN2@ResetRegen:

; 49   : 		}
; 50   : 	}

  00167	eb bc		 jmp	 SHORT $LN4@ResetRegen
$LN3@ResetRegen:

; 51   : 
; 52   : 	if ( this->m_iMayaObjIndex != -1 )

  00169	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016c	83 b8 d8 07 00
	00 ff		 cmp	 DWORD PTR [eax+2008], -1
  00173	74 12		 je	 SHORT $LN1@ResetRegen

; 53   : 	{
; 54   : 		gObjDel(this->m_iMayaObjIndex);

  00175	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00178	8b 88 d8 07 00
	00		 mov	 ecx, DWORD PTR [eax+2008]
  0017e	51		 push	 ecx
  0017f	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00184	83 c4 04	 add	 esp, 4
$LN1@ResetRegen:

; 55   : 	}
; 56   : 
; 57   : 	this->m_KanturuMonster.Reset();

  00187	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	81 c1 e0 07 00
	00		 add	 ecx, 2016		; 000007e0H
  00190	e8 00 00 00 00	 call	 ?Reset@CKanturuObjInfo@@QAEXXZ ; CKanturuObjInfo::Reset

; 58   : 	this->m_iMaxRegenMonsterCount = 0;

  00195	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00198	c7 80 68 14 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5224], 0

; 59   : 	this->m_iAliveMonsterCount = 0;

  001a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	c7 80 6c 14 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5228], 0

; 60   : 	this->m_iMayaObjIndex = -1;

  001af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	c7 80 d8 07 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+2008], -1

; 61   : }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c3		 ret	 0
?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ ENDP ; CKanturuMonsterMng::ResetRegenMonsterObjData
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\kanturuobjinfo.h
_TEXT	ENDS
;	COMDAT ?GetCount@CKanturuObjInfo@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@CKanturuObjInfo@@QAEHXZ PROC			; CKanturuObjInfo::GetCount, COMDAT
; _this$ = ecx

; 43   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 		return this->m_iObjCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 45   : 	}

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@CKanturuObjInfo@@QAEHXZ ENDP			; CKanturuObjInfo::GetCount
_TEXT	ENDS
PUBLIC	?MonsterDie@CKanturuMonsterMng@@QAEXH@Z		; CKanturuMonsterMng::MonsterDie
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\kanturumonstermng.cpp
_TEXT	SEGMENT
_iCount$227199 = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?MonsterDie@CKanturuMonsterMng@@QAEXH@Z PROC		; CKanturuMonsterMng::MonsterDie
; _this$ = ecx

; 66   : {

  001d0	55		 push	 ebp
  001d1	8b ec		 mov	 ebp, esp
  001d3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  001d6	53		 push	 ebx
  001d7	56		 push	 esi
  001d8	57		 push	 edi
  001d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 	LPOBJ lpObj = &gObj[iIndex];

  001dc	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  001df	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  001e5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001eb	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 68   : 
; 69   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  001ee	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iCount$227199[ebp], 0
  001f5	eb 09		 jmp	 SHORT $LN4@MonsterDie
$LN3@MonsterDie:
  001f7	8b 45 f4	 mov	 eax, DWORD PTR _iCount$227199[ebp]
  001fa	83 c0 01	 add	 eax, 1
  001fd	89 45 f4	 mov	 DWORD PTR _iCount$227199[ebp], eax
$LN4@MonsterDie:
  00200	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00203	81 c1 e0 07 00
	00		 add	 ecx, 2016		; 000007e0H
  00209	e8 00 00 00 00	 call	 ?GetCount@CKanturuObjInfo@@QAEHXZ ; CKanturuObjInfo::GetCount
  0020e	39 45 f4	 cmp	 DWORD PTR _iCount$227199[ebp], eax
  00211	7d 2b		 jge	 SHORT $LN5@MonsterDie

; 70   : 	{
; 71   : 		if ( this->m_KanturuMonster.m_iObjIndex[iCount] == iIndex )

  00213	8b 45 f4	 mov	 eax, DWORD PTR _iCount$227199[ebp]
  00216	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00219	8b 94 81 e8 07
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2024]
  00220	3b 55 08	 cmp	 edx, DWORD PTR _iIndex$[ebp]
  00223	75 17		 jne	 SHORT $LN1@MonsterDie

; 72   : 		{
; 73   : 			this->m_iAliveMonsterCount--;

  00225	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00228	8b 88 6c 14 00
	00		 mov	 ecx, DWORD PTR [eax+5228]
  0022e	83 e9 01	 sub	 ecx, 1
  00231	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00234	89 8a 6c 14 00
	00		 mov	 DWORD PTR [edx+5228], ecx

; 74   : 			return;

  0023a	eb 02		 jmp	 SHORT $LN5@MonsterDie
$LN1@MonsterDie:

; 75   : 		}
; 76   : 	}

  0023c	eb b9		 jmp	 SHORT $LN3@MonsterDie
$LN5@MonsterDie:

; 77   : }

  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx
  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c2 04 00	 ret	 4
?MonsterDie@CKanturuMonsterMng@@QAEXH@Z ENDP		; CKanturuMonsterMng::MonsterDie
_TEXT	ENDS
PUBLIC	??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@ ; `string'
PUBLIC	??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z ; CKanturuMonsterMng::SetMonsterSetBaseInfo
PUBLIC	??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?LoadData@CKanturuMonsterMng@@QAEHPAD@Z		; CKanturuMonsterMng::LoadData
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_fclose:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_fopen:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_strcmp:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@
CONST	SEGMENT
??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] Loading Exception Error (%s) Fil'
	DB	'e. ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - Exceed Max Info Count (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - Can''t Open %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - File load error : File Name Er'
	DB	'ror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
xdata$x	SEGMENT
__catchsym$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$0
__unwindtable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$2
__ehfuncinfo$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
_TEXT	SEGMENT
tv279 = -120						; size = 4
tv268 = -120						; size = 4
tv257 = -120						; size = 4
tv246 = -120						; size = 4
tv235 = -120						; size = 4
tv224 = -120						; size = 4
tv213 = -120						; size = 4
tv277 = -116						; size = 4
tv266 = -116						; size = 4
tv255 = -116						; size = 4
tv244 = -116						; size = 4
tv233 = -116						; size = 4
tv222 = -116						; size = 4
tv211 = -116						; size = 4
tv178 = -116						; size = 4
tv177 = -116						; size = 4
tv176 = -116						; size = 4
tv175 = -116						; size = 4
tv174 = -116						; size = 4
tv173 = -116						; size = 4
tv172 = -116						; size = 4
tv171 = -116						; size = 4
tv170 = -116						; size = 4
tv274 = -112						; size = 2
tv263 = -112						; size = 2
tv252 = -112						; size = 2
tv241 = -112						; size = 2
tv230 = -112						; size = 2
tv219 = -112						; size = 2
tv208 = -112						; size = 2
_btDir$227224 = -45					; size = 1
_btY$227223 = -44					; size = 1
_btX$227222 = -43					; size = 1
_btDistance$227221 = -42				; size = 1
_btMapNumber$227220 = -41				; size = 1
_wType$227219 = -40					; size = 2
_btGroup$227218 = -33					; size = 1
_iType$227217 = -32					; size = 4
_Token$227216 = -28					; size = 4
_dwError$227214 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@CKanturuMonsterMng@@QAEHPAD@Z PROC		; CKanturuMonsterMng::LoadData
; _this$ = ecx

; 81   : {

  00250	55		 push	 ebp
  00251	8b ec		 mov	 ebp, esp
  00253	6a ff		 push	 -1
  00255	68 00 00 00 00	 push	 __ehhandler$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
  0025a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00260	50		 push	 eax
  00261	51		 push	 ecx
  00262	83 ec 68	 sub	 esp, 104		; 00000068H
  00265	53		 push	 ebx
  00266	56		 push	 esi
  00267	57		 push	 edi
  00268	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0026d	33 c5		 xor	 eax, ebp
  0026f	50		 push	 eax
  00270	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00273	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00279	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0027c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	this->m_bFileDataLoad = FALSE;

  0027f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00282	c7 80 dc 07 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+2012], 0

; 83   : 
; 84   : 	if ( !lpszFileName || !strcmp(lpszFileName , "") )

  0028c	83 7d 08 00	 cmp	 DWORD PTR _lpszFileName$[ebp], 0
  00290	74 15		 je	 SHORT $LN14@LoadData
  00292	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00297	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  0029a	50		 push	 eax
  0029b	e8 00 00 00 00	 call	 _strcmp
  002a0	83 c4 08	 add	 esp, 8
  002a3	85 c0		 test	 eax, eax
  002a5	75 14		 jne	 SHORT $LN15@LoadData
$LN14@LoadData:

; 85   : 	{
; 86   : 		MsgBox("[ KANTURU ][ MonsterSetBase ] - File load error : File Name Error");

  002a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  002ac	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002b1	83 c4 04	 add	 esp, 4

; 87   : 		return FALSE;

  002b4	33 c0		 xor	 eax, eax
  002b6	e9 55 03 00 00	 jmp	 $LN16@LoadData
$LN15@LoadData:

; 88   : 	}
; 89   : 
; 90   : 	try
; 91   : 	{

  002bb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 92   : 		
; 93   : 		SMDFile = fopen(lpszFileName, "r");

  002c2	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  002c7	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  002ca	50		 push	 eax
  002cb	e8 00 00 00 00	 call	 _fopen
  002d0	83 c4 08	 add	 esp, 8
  002d3	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 94   : 
; 95   : 		if ( SMDFile == NULL )

  002d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  002df	75 21		 jne	 SHORT $LN12@LoadData

; 96   : 		{
; 97   : 			DWORD dwError = GetLastError();

  002e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  002e7	89 45 e8	 mov	 DWORD PTR _dwError$227214[ebp], eax

; 98   : 			MsgBox("[ KANTURU ][ MonsterSetBase ] - Can't Open %s ", lpszFileName);

  002ea	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  002ed	50		 push	 eax
  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  002f3	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002f8	83 c4 08	 add	 esp, 8

; 99   : 			return FALSE;

  002fb	33 c0		 xor	 eax, eax
  002fd	e9 0e 03 00 00	 jmp	 $LN16@LoadData
$LN12@LoadData:

; 100  : 		}
; 101  : 
; 102  : 		this->ResetLoadData();

  00302	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00305	e8 00 00 00 00	 call	 ?ResetLoadData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetLoadData

; 103  : 	
; 104  : 		enum SMDToken Token;
; 105  : 		int iType = -1;

  0030a	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _iType$227217[ebp], -1

; 106  : 		BYTE btGroup = 0;

  00311	c6 45 df 00	 mov	 BYTE PTR _btGroup$227218[ebp], 0

; 107  : 		WORD wType = 0;

  00315	33 c0		 xor	 eax, eax
  00317	66 89 45 d8	 mov	 WORD PTR _wType$227219[ebp], ax

; 108  : 		BYTE btMapNumber = 0;

  0031b	c6 45 d7 00	 mov	 BYTE PTR _btMapNumber$227220[ebp], 0

; 109  : 		BYTE btDistance = 0;

  0031f	c6 45 d6 00	 mov	 BYTE PTR _btDistance$227221[ebp], 0

; 110  : 		BYTE btX = 0;

  00323	c6 45 d5 00	 mov	 BYTE PTR _btX$227222[ebp], 0

; 111  : 		BYTE btY = 0;

  00327	c6 45 d4 00	 mov	 BYTE PTR _btY$227223[ebp], 0

; 112  : 		BYTE btDir = 0;

  0032b	c6 45 d3 00	 mov	 BYTE PTR _btDir$227224[ebp], 0
$LN11@LoadData:

; 113  : 
; 114  : 		while ( true )

  0032f	b8 01 00 00 00	 mov	 eax, 1
  00334	85 c0		 test	 eax, eax
  00336	0f 84 75 02 00
	00		 je	 $LN10@LoadData

; 115  : 		{
; 116  : 			Token = GetToken();

  0033c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00341	89 45 8c	 mov	 DWORD PTR tv170[ebp], eax
  00344	8b 45 8c	 mov	 eax, DWORD PTR tv170[ebp]
  00347	89 45 e4	 mov	 DWORD PTR _Token$227216[ebp], eax

; 117  : 			
; 118  : 			if ( Token == END )

  0034a	83 7d e4 02	 cmp	 DWORD PTR _Token$227216[ebp], 2
  0034e	75 05		 jne	 SHORT $LN9@LoadData

; 119  : 			{
; 120  : 				break;

  00350	e9 5c 02 00 00	 jmp	 $LN10@LoadData
$LN9@LoadData:

; 121  : 			}
; 122  : 
; 123  : 			iType = (int)TokenNumber;

  00355	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0035b	e8 00 00 00 00	 call	 __ftol2_sse
  00360	89 45 e0	 mov	 DWORD PTR _iType$227217[ebp], eax
$LN8@LoadData:

; 124  : 
; 125  : 			while ( true )

  00363	b8 01 00 00 00	 mov	 eax, 1
  00368	85 c0		 test	 eax, eax
  0036a	0f 84 3c 02 00
	00		 je	 $LN7@LoadData

; 126  : 			{
; 127  : 				if ( iType == 0 )

  00370	83 7d e0 00	 cmp	 DWORD PTR _iType$227217[ebp], 0
  00374	0f 85 07 02 00
	00		 jne	 $LN6@LoadData

; 128  : 				{
; 129  : 					btGroup = 0;

  0037a	c6 45 df 00	 mov	 BYTE PTR _btGroup$227218[ebp], 0

; 130  : 					wType = 0;

  0037e	33 c0		 xor	 eax, eax
  00380	66 89 45 d8	 mov	 WORD PTR _wType$227219[ebp], ax

; 131  : 					btMapNumber = 0;

  00384	c6 45 d7 00	 mov	 BYTE PTR _btMapNumber$227220[ebp], 0

; 132  : 					btDistance = 0;

  00388	c6 45 d6 00	 mov	 BYTE PTR _btDistance$227221[ebp], 0

; 133  : 					btX = 0;

  0038c	c6 45 d5 00	 mov	 BYTE PTR _btX$227222[ebp], 0

; 134  : 					btY = 0;

  00390	c6 45 d4 00	 mov	 BYTE PTR _btY$227223[ebp], 0

; 135  : 					btDir = 0;

  00394	c6 45 d3 00	 mov	 BYTE PTR _btDir$227224[ebp], 0

; 136  : 
; 137  : 					Token = GetToken();

  00398	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0039d	89 45 8c	 mov	 DWORD PTR tv171[ebp], eax
  003a0	8b 45 8c	 mov	 eax, DWORD PTR tv171[ebp]
  003a3	89 45 e4	 mov	 DWORD PTR _Token$227216[ebp], eax

; 138  : 
; 139  : 					if ( !strcmp("end", TokenString))

  003a6	68 00 00 00 00	 push	 OFFSET _TokenString
  003ab	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  003b0	e8 00 00 00 00	 call	 _strcmp
  003b5	83 c4 08	 add	 esp, 8
  003b8	85 c0		 test	 eax, eax
  003ba	75 05		 jne	 SHORT $LN5@LoadData

; 140  : 					{
; 141  : 						break;

  003bc	e9 eb 01 00 00	 jmp	 $LN7@LoadData
$LN5@LoadData:

; 142  : 					}
; 143  : 
; 144  : 					btGroup = (BYTE)TokenNumber;

  003c1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003c7	d9 7d 90	 fnstcw	 WORD PTR tv208[ebp]
  003ca	0f b7 45 90	 movzx	 eax, WORD PTR tv208[ebp]
  003ce	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003d3	89 45 8c	 mov	 DWORD PTR tv211[ebp], eax
  003d6	d9 6d 8c	 fldcw	 WORD PTR tv211[ebp]
  003d9	db 5d 88	 fistp	 DWORD PTR tv213[ebp]
  003dc	d9 6d 90	 fldcw	 WORD PTR tv208[ebp]
  003df	8a 45 88	 mov	 al, BYTE PTR tv213[ebp]
  003e2	88 45 df	 mov	 BYTE PTR _btGroup$227218[ebp], al

; 145  : 
; 146  : 					Token = GetToken();

  003e5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003ea	89 45 8c	 mov	 DWORD PTR tv172[ebp], eax
  003ed	8b 45 8c	 mov	 eax, DWORD PTR tv172[ebp]
  003f0	89 45 e4	 mov	 DWORD PTR _Token$227216[ebp], eax

; 147  : 					wType = (WORD)TokenNumber;

  003f3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003f9	d9 7d 90	 fnstcw	 WORD PTR tv219[ebp]
  003fc	0f b7 45 90	 movzx	 eax, WORD PTR tv219[ebp]
  00400	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00405	89 45 8c	 mov	 DWORD PTR tv222[ebp], eax
  00408	d9 6d 8c	 fldcw	 WORD PTR tv222[ebp]
  0040b	db 5d 88	 fistp	 DWORD PTR tv224[ebp]
  0040e	d9 6d 90	 fldcw	 WORD PTR tv219[ebp]
  00411	66 8b 45 88	 mov	 ax, WORD PTR tv224[ebp]
  00415	66 89 45 d8	 mov	 WORD PTR _wType$227219[ebp], ax

; 148  : 
; 149  : 					Token = GetToken();

  00419	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0041e	89 45 8c	 mov	 DWORD PTR tv173[ebp], eax
  00421	8b 45 8c	 mov	 eax, DWORD PTR tv173[ebp]
  00424	89 45 e4	 mov	 DWORD PTR _Token$227216[ebp], eax

; 150  : 					btMapNumber = (BYTE)TokenNumber;

  00427	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0042d	d9 7d 90	 fnstcw	 WORD PTR tv230[ebp]
  00430	0f b7 45 90	 movzx	 eax, WORD PTR tv230[ebp]
  00434	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00439	89 45 8c	 mov	 DWORD PTR tv233[ebp], eax
  0043c	d9 6d 8c	 fldcw	 WORD PTR tv233[ebp]
  0043f	db 5d 88	 fistp	 DWORD PTR tv235[ebp]
  00442	d9 6d 90	 fldcw	 WORD PTR tv230[ebp]
  00445	8a 45 88	 mov	 al, BYTE PTR tv235[ebp]
  00448	88 45 d7	 mov	 BYTE PTR _btMapNumber$227220[ebp], al

; 151  : 
; 152  : 					Token = GetToken();

  0044b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00450	89 45 8c	 mov	 DWORD PTR tv174[ebp], eax
  00453	8b 45 8c	 mov	 eax, DWORD PTR tv174[ebp]
  00456	89 45 e4	 mov	 DWORD PTR _Token$227216[ebp], eax

; 153  : 					btDistance = (BYTE)TokenNumber;

  00459	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0045f	d9 7d 90	 fnstcw	 WORD PTR tv241[ebp]
  00462	0f b7 45 90	 movzx	 eax, WORD PTR tv241[ebp]
  00466	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0046b	89 45 8c	 mov	 DWORD PTR tv244[ebp], eax
  0046e	d9 6d 8c	 fldcw	 WORD PTR tv244[ebp]
  00471	db 5d 88	 fistp	 DWORD PTR tv246[ebp]
  00474	d9 6d 90	 fldcw	 WORD PTR tv241[ebp]
  00477	8a 45 88	 mov	 al, BYTE PTR tv246[ebp]
  0047a	88 45 d6	 mov	 BYTE PTR _btDistance$227221[ebp], al

; 154  : 
; 155  : 					Token = GetToken();

  0047d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00482	89 45 8c	 mov	 DWORD PTR tv175[ebp], eax
  00485	8b 45 8c	 mov	 eax, DWORD PTR tv175[ebp]
  00488	89 45 e4	 mov	 DWORD PTR _Token$227216[ebp], eax

; 156  : 					btX = (BYTE)TokenNumber;

  0048b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00491	d9 7d 90	 fnstcw	 WORD PTR tv252[ebp]
  00494	0f b7 45 90	 movzx	 eax, WORD PTR tv252[ebp]
  00498	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0049d	89 45 8c	 mov	 DWORD PTR tv255[ebp], eax
  004a0	d9 6d 8c	 fldcw	 WORD PTR tv255[ebp]
  004a3	db 5d 88	 fistp	 DWORD PTR tv257[ebp]
  004a6	d9 6d 90	 fldcw	 WORD PTR tv252[ebp]
  004a9	8a 45 88	 mov	 al, BYTE PTR tv257[ebp]
  004ac	88 45 d5	 mov	 BYTE PTR _btX$227222[ebp], al

; 157  : 
; 158  : 					Token = GetToken();

  004af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004b4	89 45 8c	 mov	 DWORD PTR tv176[ebp], eax
  004b7	8b 45 8c	 mov	 eax, DWORD PTR tv176[ebp]
  004ba	89 45 e4	 mov	 DWORD PTR _Token$227216[ebp], eax

; 159  : 					btY = (BYTE)TokenNumber;

  004bd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004c3	d9 7d 90	 fnstcw	 WORD PTR tv263[ebp]
  004c6	0f b7 45 90	 movzx	 eax, WORD PTR tv263[ebp]
  004ca	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004cf	89 45 8c	 mov	 DWORD PTR tv266[ebp], eax
  004d2	d9 6d 8c	 fldcw	 WORD PTR tv266[ebp]
  004d5	db 5d 88	 fistp	 DWORD PTR tv268[ebp]
  004d8	d9 6d 90	 fldcw	 WORD PTR tv263[ebp]
  004db	8a 45 88	 mov	 al, BYTE PTR tv268[ebp]
  004de	88 45 d4	 mov	 BYTE PTR _btY$227223[ebp], al

; 160  : 
; 161  : 					Token = GetToken();

  004e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004e6	89 45 8c	 mov	 DWORD PTR tv177[ebp], eax
  004e9	8b 45 8c	 mov	 eax, DWORD PTR tv177[ebp]
  004ec	89 45 e4	 mov	 DWORD PTR _Token$227216[ebp], eax

; 162  : 					btDir = (BYTE)TokenNumber;

  004ef	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004f5	d9 7d 90	 fnstcw	 WORD PTR tv274[ebp]
  004f8	0f b7 45 90	 movzx	 eax, WORD PTR tv274[ebp]
  004fc	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00501	89 45 8c	 mov	 DWORD PTR tv277[ebp], eax
  00504	d9 6d 8c	 fldcw	 WORD PTR tv277[ebp]
  00507	db 5d 88	 fistp	 DWORD PTR tv279[ebp]
  0050a	d9 6d 90	 fldcw	 WORD PTR tv274[ebp]
  0050d	8a 45 88	 mov	 al, BYTE PTR tv279[ebp]
  00510	88 45 d3	 mov	 BYTE PTR _btDir$227224[ebp], al

; 163  : 
; 164  : 					if ( this->m_iMaxMonsterCount < 0 ||
; 165  : 						 this->m_iMaxMonsterCount >= MAX_KANTURU_MONSTER )

  00513	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00516	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0051a	7c 0c		 jl	 SHORT $LN3@LoadData
  0051c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0051f	81 78 04 c8 00
	00 00		 cmp	 DWORD PTR [eax+4], 200	; 000000c8H
  00526	7c 16		 jl	 SHORT $LN4@LoadData
$LN3@LoadData:

; 166  : 					{
; 167  : 						MsgBox("[ KANTURU ][ MonsterSetBase ] - Exceed Max Info Count (%d)",
; 168  : 							this->m_iMaxMonsterCount);

  00528	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0052b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0052e	51		 push	 ecx
  0052f	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  00534	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00539	83 c4 08	 add	 esp, 8

; 169  : 
; 170  : 						break;

  0053c	eb 6e		 jmp	 SHORT $LN7@LoadData
$LN4@LoadData:

; 171  : 					}
; 172  : 
; 173  : 					this->SetMonsterSetBaseInfo(this->m_iMaxMonsterCount, btGroup, wType,
; 174  : 						btMapNumber, btDistance, btX, btY, btDir);

  0053e	0f b6 45 d3	 movzx	 eax, BYTE PTR _btDir$227224[ebp]
  00542	50		 push	 eax
  00543	0f b6 4d d4	 movzx	 ecx, BYTE PTR _btY$227223[ebp]
  00547	51		 push	 ecx
  00548	0f b6 55 d5	 movzx	 edx, BYTE PTR _btX$227222[ebp]
  0054c	52		 push	 edx
  0054d	0f b6 45 d6	 movzx	 eax, BYTE PTR _btDistance$227221[ebp]
  00551	50		 push	 eax
  00552	0f b6 4d d7	 movzx	 ecx, BYTE PTR _btMapNumber$227220[ebp]
  00556	51		 push	 ecx
  00557	0f b7 55 d8	 movzx	 edx, WORD PTR _wType$227219[ebp]
  0055b	52		 push	 edx
  0055c	0f b6 45 df	 movzx	 eax, BYTE PTR _btGroup$227218[ebp]
  00560	50		 push	 eax
  00561	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00564	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00567	52		 push	 edx
  00568	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0056b	e8 00 00 00 00	 call	 ?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z ; CKanturuMonsterMng::SetMonsterSetBaseInfo

; 175  : 					this->m_iMaxMonsterCount++;

  00570	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00573	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00576	83 c1 01	 add	 ecx, 1
  00579	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0057c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 176  : 				}
; 177  : 				else

  0057f	eb 26		 jmp	 SHORT $LN1@LoadData
$LN6@LoadData:

; 178  : 				{
; 179  : 					Token = GetToken();

  00581	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00586	89 45 8c	 mov	 DWORD PTR tv178[ebp], eax
  00589	8b 45 8c	 mov	 eax, DWORD PTR tv178[ebp]
  0058c	89 45 e4	 mov	 DWORD PTR _Token$227216[ebp], eax

; 180  : 
; 181  : 					if ( !strcmp("end", TokenString))

  0058f	68 00 00 00 00	 push	 OFFSET _TokenString
  00594	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00599	e8 00 00 00 00	 call	 _strcmp
  0059e	83 c4 08	 add	 esp, 8
  005a1	85 c0		 test	 eax, eax
  005a3	75 02		 jne	 SHORT $LN1@LoadData

; 182  : 					{
; 183  : 						break;

  005a5	eb 05		 jmp	 SHORT $LN7@LoadData
$LN1@LoadData:

; 184  : 					}
; 185  : 				}
; 186  : 			}	// while ( true )

  005a7	e9 b7 fd ff ff	 jmp	 $LN8@LoadData
$LN7@LoadData:

; 187  : 		}	// while ( true )

  005ac	e9 7e fd ff ff	 jmp	 $LN11@LoadData
$LN10@LoadData:

; 188  : 
; 189  : 		fclose(SMDFile);

  005b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005b6	50		 push	 eax
  005b7	e8 00 00 00 00	 call	 _fclose
  005bc	83 c4 04	 add	 esp, 4

; 190  : 		LogAddC(2, "[ KANTURU ][ MonsterSetBase ] - %s file is Loaded",
; 191  : 			lpszFileName);

  005bf	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  005c2	50		 push	 eax
  005c3	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  005c8	6a 02		 push	 2
  005ca	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  005d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 192  : 
; 193  : 		this->m_bFileDataLoad = TRUE;

  005d3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  005d6	c7 80 dc 07 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+2012], 1

; 194  : 	}	// __try

  005e0	eb 1e		 jmp	 SHORT $LN18@LoadData
__catch$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$0:

; 195  : 	catch(...)
; 196  : 	{
; 197  : 		MsgBox("[ KANTURU ][ MonsterSetBase ] Loading Exception Error (%s) File. ", lpszFileName);

  005e2	8b 45 08	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  005e5	50		 push	 eax
  005e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@
  005eb	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  005f0	83 c4 08	 add	 esp, 8

; 198  : 	}

  005f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  005fa	b8 00 00 00 00	 mov	 eax, $LN21@LoadData
  005ff	c3		 ret	 0
$LN18@LoadData:
  00600	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN21@LoadData:

; 199  : 
; 200  : 	return this->m_bFileDataLoad;

  00607	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0060a	8b 80 dc 07 00
	00		 mov	 eax, DWORD PTR [eax+2012]
$LN16@LoadData:

; 201  : }

  00610	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00613	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0061a	59		 pop	 ecx
  0061b	5f		 pop	 edi
  0061c	5e		 pop	 esi
  0061d	5b		 pop	 ebx
  0061e	8b e5		 mov	 esp, ebp
  00620	5d		 pop	 ebp
  00621	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@CKanturuMonsterMng@@QAEHPAD@Z ENDP		; CKanturuMonsterMng::LoadData
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp
  00633	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00639	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0063e	33 c5		 xor	 eax, ebp
  00640	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00643	53		 push	 ebx
  00644	56		 push	 esi
  00645	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00646	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0064d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 _fgetc
  00658	83 c4 04	 add	 esp, 4
  0065b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0065e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00662	83 f9 ff	 cmp	 ecx, -1
  00665	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00667	b8 02 00 00 00	 mov	 eax, 2
  0066c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00671	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00673	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00677	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0067a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0067c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00681	50		 push	 eax
  00682	e8 00 00 00 00	 call	 _fgetc
  00687	83 c4 04	 add	 esp, 4
  0068a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0068d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00691	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00694	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00696	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0069a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0069d	74 1c		 je	 SHORT $LN23@GetToken
  0069f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006a3	83 f8 ff	 cmp	 eax, -1
  006a6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  006a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006ad	50		 push	 eax
  006ae	e8 00 00 00 00	 call	 _fgetc
  006b3	83 c4 04	 add	 esp, 4
  006b6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  006b9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  006bb	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006bf	83 f8 ff	 cmp	 eax, -1
  006c2	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  006c4	b8 02 00 00 00	 mov	 eax, 2
  006c9	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  006ce	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006d2	50		 push	 eax
  006d3	e8 00 00 00 00	 call	 _isspace
  006d8	83 c4 04	 add	 esp, 4
  006db	85 c0		 test	 eax, eax
  006dd	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  006e3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006e7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  006ed	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  006f3	83 e9 22	 sub	 ecx, 34			; 00000022H
  006f6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  006fc	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00703	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00709	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0070f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00716	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0071d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00727	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0072c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00731	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00736	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00740	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00745	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0074a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0074f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00759	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0075e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00763	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00768	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00772	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00777	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0077c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00781	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0078b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00790	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00795	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0079a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0079f	50		 push	 eax
  007a0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007a4	51		 push	 ecx
  007a5	e8 00 00 00 00	 call	 _ungetc
  007aa	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  007ad	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  007b0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  007b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007b8	50		 push	 eax
  007b9	e8 00 00 00 00	 call	 _getc
  007be	83 c4 04	 add	 esp, 4
  007c1	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  007c4	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007c8	83 f9 ff	 cmp	 ecx, -1
  007cb	74 36		 je	 SHORT $LN12@GetToken
  007cd	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007d1	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  007d4	74 1a		 je	 SHORT $LN11@GetToken
  007d6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007da	50		 push	 eax
  007db	e8 00 00 00 00	 call	 _isdigit
  007e0	83 c4 04	 add	 esp, 4
  007e3	85 c0		 test	 eax, eax
  007e5	75 09		 jne	 SHORT $LN11@GetToken
  007e7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  007eb	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  007ee	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  007f0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007f3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  007f6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  007f8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  007fb	83 c0 01	 add	 eax, 1
  007fe	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00801	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00803	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00806	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00809	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0080c	50		 push	 eax
  0080d	e8 00 00 00 00	 call	 _atof
  00812	83 c4 04	 add	 esp, 4
  00815	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0081b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00825	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0082a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0082f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00834	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0083b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00840	50		 push	 eax
  00841	e8 00 00 00 00	 call	 _getc
  00846	83 c4 04	 add	 esp, 4
  00849	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0084c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00850	83 f9 ff	 cmp	 ecx, -1
  00853	74 1c		 je	 SHORT $LN8@GetToken
  00855	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00859	83 f8 22	 cmp	 eax, 34			; 00000022H
  0085c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0085e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00861	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00864	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00866	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00869	83 c0 01	 add	 eax, 1
  0086c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0086f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00871	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00875	83 f8 22	 cmp	 eax, 34			; 00000022H
  00878	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0087a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0087f	50		 push	 eax
  00880	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00884	51		 push	 ecx
  00885	e8 00 00 00 00	 call	 _ungetc
  0088a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0088d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00890	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00893	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0089d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008a2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  008a7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  008ac	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008b0	50		 push	 eax
  008b1	e8 00 00 00 00	 call	 _isalpha
  008b6	83 c4 04	 add	 esp, 4
  008b9	85 c0		 test	 eax, eax
  008bb	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  008c1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  008c8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008cb	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  008ce	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  008d0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008d3	83 c0 01	 add	 eax, 1
  008d6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  008d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008de	50		 push	 eax
  008df	e8 00 00 00 00	 call	 _getc
  008e4	83 c4 04	 add	 esp, 4
  008e7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  008ea	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008ee	83 f9 ff	 cmp	 ecx, -1
  008f1	74 36		 je	 SHORT $LN3@GetToken
  008f3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008f7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  008fa	74 1a		 je	 SHORT $LN2@GetToken
  008fc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00900	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00903	74 11		 je	 SHORT $LN2@GetToken
  00905	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00909	50		 push	 eax
  0090a	e8 00 00 00 00	 call	 _isalnum
  0090f	83 c4 04	 add	 esp, 4
  00912	85 c0		 test	 eax, eax
  00914	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00916	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00919	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0091c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0091e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00921	83 c0 01	 add	 eax, 1
  00924	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00927	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00929	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0092e	50		 push	 eax
  0092f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00933	51		 push	 ecx
  00934	e8 00 00 00 00	 call	 _ungetc
  00939	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0093c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0093f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00942	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0094c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00951	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00953	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00955	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0095f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00964	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00966	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00968	5f		 pop	 edi
  00969	5e		 pop	 esi
  0096a	5b		 pop	 ebx
  0096b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0096e	33 cd		 xor	 ecx, ebp
  00970	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00975	8b e5		 mov	 esp, ebp
  00977	5d		 pop	 ebp
  00978	c3		 ret	 0
  00979	8d 49 00	 npad	 3
$LN35@GetToken:
  0097c	00 00 00 00	 DD	 $LN10@GetToken
  00980	00 00 00 00	 DD	 $LN19@GetToken
  00984	00 00 00 00	 DD	 $LN17@GetToken
  00988	00 00 00 00	 DD	 $LN14@GetToken
  0098c	00 00 00 00	 DD	 $LN18@GetToken
  00990	00 00 00 00	 DD	 $LN16@GetToken
  00994	00 00 00 00	 DD	 $LN15@GetToken
  00998	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0099c	00		 DB	 0
  0099d	01		 DB	 1
  0099e	07		 DB	 7
  0099f	07		 DB	 7
  009a0	07		 DB	 7
  009a1	07		 DB	 7
  009a2	07		 DB	 7
  009a3	07		 DB	 7
  009a4	07		 DB	 7
  009a5	07		 DB	 7
  009a6	02		 DB	 2
  009a7	03		 DB	 3
  009a8	03		 DB	 3
  009a9	07		 DB	 7
  009aa	03		 DB	 3
  009ab	03		 DB	 3
  009ac	03		 DB	 3
  009ad	03		 DB	 3
  009ae	03		 DB	 3
  009af	03		 DB	 3
  009b0	03		 DB	 3
  009b1	03		 DB	 3
  009b2	03		 DB	 3
  009b3	03		 DB	 3
  009b4	07		 DB	 7
  009b5	04		 DB	 4
  009b6	07		 DB	 7
  009b7	07		 DB	 7
  009b8	07		 DB	 7
  009b9	07		 DB	 7
  009ba	07		 DB	 7
  009bb	07		 DB	 7
  009bc	07		 DB	 7
  009bd	07		 DB	 7
  009be	07		 DB	 7
  009bf	07		 DB	 7
  009c0	07		 DB	 7
  009c1	07		 DB	 7
  009c2	07		 DB	 7
  009c3	07		 DB	 7
  009c4	07		 DB	 7
  009c5	07		 DB	 7
  009c6	07		 DB	 7
  009c7	07		 DB	 7
  009c8	07		 DB	 7
  009c9	07		 DB	 7
  009ca	07		 DB	 7
  009cb	07		 DB	 7
  009cc	07		 DB	 7
  009cd	07		 DB	 7
  009ce	07		 DB	 7
  009cf	07		 DB	 7
  009d0	07		 DB	 7
  009d1	07		 DB	 7
  009d2	07		 DB	 7
  009d3	07		 DB	 7
  009d4	07		 DB	 7
  009d5	07		 DB	 7
  009d6	07		 DB	 7
  009d7	07		 DB	 7
  009d8	07		 DB	 7
  009d9	07		 DB	 7
  009da	07		 DB	 7
  009db	07		 DB	 7
  009dc	07		 DB	 7
  009dd	07		 DB	 7
  009de	07		 DB	 7
  009df	07		 DB	 7
  009e0	07		 DB	 7
  009e1	07		 DB	 7
  009e2	07		 DB	 7
  009e3	07		 DB	 7
  009e4	07		 DB	 7
  009e5	07		 DB	 7
  009e6	07		 DB	 7
  009e7	07		 DB	 7
  009e8	07		 DB	 7
  009e9	07		 DB	 7
  009ea	07		 DB	 7
  009eb	07		 DB	 7
  009ec	07		 DB	 7
  009ed	07		 DB	 7
  009ee	07		 DB	 7
  009ef	07		 DB	 7
  009f0	07		 DB	 7
  009f1	07		 DB	 7
  009f2	07		 DB	 7
  009f3	07		 DB	 7
  009f4	07		 DB	 7
  009f5	05		 DB	 5
  009f6	07		 DB	 7
  009f7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\kanturumonstermng.cpp
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
_btGroup$ = 12						; size = 1
_wType$ = 16						; size = 2
_btMapNumber$ = 20					; size = 1
_btDistance$ = 24					; size = 1
_btX$ = 28						; size = 1
_btY$ = 32						; size = 1
_btDir$ = 36						; size = 1
?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z PROC ; CKanturuMonsterMng::SetMonsterSetBaseInfo
; _this$ = ecx

; 206  : {

  00a00	55		 push	 ebp
  00a01	8b ec		 mov	 ebp, esp
  00a03	83 ec 44	 sub	 esp, 68			; 00000044H
  00a06	53		 push	 ebx
  00a07	56		 push	 esi
  00a08	57		 push	 edi
  00a09	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 	this->m_SetBaseInfo[iIndex].btGroup = btGroup;

  00a0c	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a0f	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00a12	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a15	8a 55 0c	 mov	 dl, BYTE PTR _btGroup$[ebp]
  00a18	88 54 01 08	 mov	 BYTE PTR [ecx+eax+8], dl

; 208  : 	this->m_SetBaseInfo[iIndex].wType = wType;

  00a1c	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a1f	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00a22	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a25	66 8b 55 10	 mov	 dx, WORD PTR _wType$[ebp]
  00a29	66 89 54 01 0a	 mov	 WORD PTR [ecx+eax+10], dx

; 209  : 	this->m_SetBaseInfo[iIndex].btMapNumber = btMapNumber;

  00a2e	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a31	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00a34	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a37	8a 55 14	 mov	 dl, BYTE PTR _btMapNumber$[ebp]
  00a3a	88 54 01 0c	 mov	 BYTE PTR [ecx+eax+12], dl

; 210  : 	this->m_SetBaseInfo[iIndex].btDistance = btDistance;

  00a3e	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a41	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00a44	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a47	8a 55 18	 mov	 dl, BYTE PTR _btDistance$[ebp]
  00a4a	88 54 01 0d	 mov	 BYTE PTR [ecx+eax+13], dl

; 211  : 	this->m_SetBaseInfo[iIndex].btX = btX;

  00a4e	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a51	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00a54	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a57	8a 55 1c	 mov	 dl, BYTE PTR _btX$[ebp]
  00a5a	88 54 01 0e	 mov	 BYTE PTR [ecx+eax+14], dl

; 212  : 	this->m_SetBaseInfo[iIndex].btY = btY;

  00a5e	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a61	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00a64	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a67	8a 55 20	 mov	 dl, BYTE PTR _btY$[ebp]
  00a6a	88 54 01 0f	 mov	 BYTE PTR [ecx+eax+15], dl

; 213  : 	this->m_SetBaseInfo[iIndex].btDir = btDir;

  00a6e	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00a71	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00a74	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a77	8a 55 24	 mov	 dl, BYTE PTR _btDir$[ebp]
  00a7a	88 54 01 10	 mov	 BYTE PTR [ecx+eax+16], dl

; 214  : }

  00a7e	5f		 pop	 edi
  00a7f	5e		 pop	 esi
  00a80	5b		 pop	 ebx
  00a81	8b e5		 mov	 esp, ebp
  00a83	5d		 pop	 ebp
  00a84	c2 20 00	 ret	 32			; 00000020H
?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z ENDP ; CKanturuMonsterMng::SetMonsterSetBaseInfo
_TEXT	ENDS
PUBLIC	??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ ; `string'
PUBLIC	?AddObj@CKanturuObjInfo@@QAEHH@Z		; CKanturuObjInfo::AddObj
PUBLIC	??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ ; `string'
PUBLIC	?GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z	; CKanturuMonsterMng::GetPosition
PUBLIC	??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ ; `string'
PUBLIC	?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z	; CKanturuMonsterMng::SetKanturuMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	_rand:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT ??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
CONST	SEGMENT
??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ DB '['
	DB	' KANTURU ][ SetBossMapMonster ] Count:%d %s(Index:%d / ObjInd'
	DB	'ex:%d) Map:%d-[%d][%d]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
CONST	SEGMENT
??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ DB '['
	DB	' KANTURU ][ SetBossMapMonster ] %s(Index:%d / ObjIndex:%d) Ma'
	DB	'p:%d-[%d][%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
CONST	SEGMENT
??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ DB '['
	DB	' KANTURU ][ SetBossMapMonster ] Fail - Type:%d Map[%d]-[%d][%'
	DB	'd]', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iCount$227286 = -28					; size = 4
_iRegenCount$ = -24					; size = 4
_iResult$ = -20						; size = 4
_lpObj$ = -16						; size = 4
_wType$ = -12						; size = 2
_iMapNumber$ = -8					; size = 4
_this$ = -4						; size = 4
_iGroupNumber$ = 8					; size = 4
?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z PROC	; CKanturuMonsterMng::SetKanturuMonster
; _this$ = ecx

; 219  : {

  00a90	55		 push	 ebp
  00a91	8b ec		 mov	 ebp, esp
  00a93	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00a96	53		 push	 ebx
  00a97	56		 push	 esi
  00a98	57		 push	 edi
  00a99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 220  : 	int iMapNumber = 0;

  00a9c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iMapNumber$[ebp], 0

; 221  : 	WORD wType = 0;

  00aa3	33 c0		 xor	 eax, eax
  00aa5	66 89 45 f4	 mov	 WORD PTR _wType$[ebp], ax

; 222  : 	LPOBJ lpObj;
; 223  : 	int iResult;
; 224  : 	int iRegenCount = 0;

  00aa9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iRegenCount$[ebp], 0

; 225  : 	
; 226  : 	for ( int iCount=0;iCount<MAX_KANTURU_MONSTER;iCount++)

  00ab0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iCount$227286[ebp], 0
  00ab7	eb 09		 jmp	 SHORT $LN12@SetKanturu
$LN11@SetKanturu:
  00ab9	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00abc	83 c0 01	 add	 eax, 1
  00abf	89 45 e4	 mov	 DWORD PTR _iCount$227286[ebp], eax
$LN12@SetKanturu:
  00ac2	81 7d e4 c8 00
	00 00		 cmp	 DWORD PTR _iCount$227286[ebp], 200 ; 000000c8H
  00ac9	0f 8d fe 03 00
	00		 jge	 $LN10@SetKanturu

; 227  : 	{
; 228  : 		if ( this->m_SetBaseInfo[iCount].btGroup == iGroupNumber &&
; 229  : 			 this->m_SetBaseInfo[iCount].wType != 0 )

  00acf	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00ad2	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00ad5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad8	0f b6 54 01 08	 movzx	 edx, BYTE PTR [ecx+eax+8]
  00add	3b 55 08	 cmp	 edx, DWORD PTR _iGroupNumber$[ebp]
  00ae0	0f 85 e2 03 00
	00		 jne	 $LN9@SetKanturu
  00ae6	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00ae9	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00aec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aef	0f b7 54 01 0a	 movzx	 edx, WORD PTR [ecx+eax+10]
  00af4	85 d2		 test	 edx, edx
  00af6	0f 84 cc 03 00
	00		 je	 $LN9@SetKanturu

; 230  : 		{
; 231  : 			iResult  = gObjAddMonster(this->m_SetBaseInfo[iCount].btMapNumber);

  00afc	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00aff	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00b02	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b05	0f b6 54 01 0c	 movzx	 edx, BYTE PTR [ecx+eax+12]
  00b0a	52		 push	 edx
  00b0b	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00b10	83 c4 04	 add	 esp, 4
  00b13	98		 cwde
  00b14	89 45 ec	 mov	 DWORD PTR _iResult$[ebp], eax

; 232  : 
; 233  : 			if ( iResult < 0 )

  00b17	83 7d ec 00	 cmp	 DWORD PTR _iResult$[ebp], 0
  00b1b	7d 4f		 jge	 SHORT $LN8@SetKanturu

; 234  : 			{
; 235  : 				LogAddTD("[ KANTURU ][ SetBossMapMonster ] Fail - Type:%d Map[%d]-[%d][%d]",
; 236  : 					this->m_SetBaseInfo[iCount].wType,
; 237  : 					this->m_SetBaseInfo[iCount].btMapNumber,
; 238  : 					this->m_SetBaseInfo[iCount].btX,
; 239  : 					this->m_SetBaseInfo[iCount].btY);

  00b1d	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00b20	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00b23	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b26	0f b6 54 01 0f	 movzx	 edx, BYTE PTR [ecx+eax+15]
  00b2b	52		 push	 edx
  00b2c	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00b2f	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00b32	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b35	0f b6 54 01 0e	 movzx	 edx, BYTE PTR [ecx+eax+14]
  00b3a	52		 push	 edx
  00b3b	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00b3e	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00b41	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b44	0f b6 54 01 0c	 movzx	 edx, BYTE PTR [ecx+eax+12]
  00b49	52		 push	 edx
  00b4a	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00b4d	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00b50	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b53	0f b7 54 01 0a	 movzx	 edx, WORD PTR [ecx+eax+10]
  00b58	52		 push	 edx
  00b59	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
  00b5e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00b64	83 c4 14	 add	 esp, 20			; 00000014H

; 240  : 			}
; 241  : 			else

  00b67	e9 5c 03 00 00	 jmp	 $LN9@SetKanturu
$LN8@SetKanturu:

; 242  : 			{
; 243  : 				lpObj = &gObj[iResult];

  00b6c	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00b6f	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00b75	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00b7b	89 45 f0	 mov	 DWORD PTR _lpObj$[ebp], eax

; 244  : 
; 245  : 				lpObj->m_PosNum = -1;

  00b7e	83 c8 ff	 or	 eax, -1
  00b81	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00b84	66 89 81 b0 03
	00 00		 mov	 WORD PTR [ecx+944], ax

; 246  : 				lpObj->X = this->m_SetBaseInfo[iCount].btX;

  00b8b	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00b8e	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00b91	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b94	66 0f b6 54 01
	0e		 movzx	 dx, BYTE PTR [ecx+eax+14]
  00b9a	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b9d	66 89 90 44 01
	00 00		 mov	 WORD PTR [eax+324], dx

; 247  : 				lpObj->Y = this->m_SetBaseInfo[iCount].btY;

  00ba4	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00ba7	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00baa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bad	66 0f b6 54 01
	0f		 movzx	 dx, BYTE PTR [ecx+eax+15]
  00bb3	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bb6	66 89 90 46 01
	00 00		 mov	 WORD PTR [eax+326], dx

; 248  : 				lpObj->MapNumber = this->m_SetBaseInfo[iCount].btMapNumber;

  00bbd	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00bc0	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00bc3	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00bc6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00bc9	8a 44 02 0c	 mov	 al, BYTE PTR [edx+eax+12]
  00bcd	88 81 49 01 00
	00		 mov	 BYTE PTR [ecx+329], al

; 249  : 
; 250  : 				if ( this->GetPosition(iCount, lpObj->MapNumber, lpObj->X, lpObj->Y) == FALSE )

  00bd3	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bd6	05 46 01 00 00	 add	 eax, 326		; 00000146H
  00bdb	50		 push	 eax
  00bdc	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00bdf	81 c1 44 01 00
	00		 add	 ecx, 324		; 00000144H
  00be5	51		 push	 ecx
  00be6	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00be9	66 0f b6 82 49
	01 00 00	 movzx	 ax, BYTE PTR [edx+329]
  00bf1	0f b7 c8	 movzx	 ecx, ax
  00bf4	51		 push	 ecx
  00bf5	8b 55 e4	 mov	 edx, DWORD PTR _iCount$227286[ebp]
  00bf8	52		 push	 edx
  00bf9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bfc	e8 00 00 00 00	 call	 ?GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z ; CKanturuMonsterMng::GetPosition
  00c01	85 c0		 test	 eax, eax
  00c03	75 11		 jne	 SHORT $LN6@SetKanturu

; 251  : 				{
; 252  : 					gObjDel(iResult);

  00c05	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00c08	50		 push	 eax
  00c09	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00c0e	83 c4 04	 add	 esp, 4

; 253  : 					continue;

  00c11	e9 a3 fe ff ff	 jmp	 $LN11@SetKanturu
$LN6@SetKanturu:

; 254  : 				}
; 255  : 
; 256  : 				lpObj->TX = lpObj->X;

  00c16	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c19	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00c1c	66 8b 91 44 01
	00 00		 mov	 dx, WORD PTR [ecx+324]
  00c23	66 89 90 7c 01
	00 00		 mov	 WORD PTR [eax+380], dx

; 257  : 				lpObj->TY = lpObj->Y;

  00c2a	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c2d	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00c30	66 8b 91 46 01
	00 00		 mov	 dx, WORD PTR [ecx+326]
  00c37	66 89 90 7e 01
	00 00		 mov	 WORD PTR [eax+382], dx

; 258  : 				lpObj->m_OldX = lpObj->X;

  00c3e	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c41	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00c44	66 8b 91 44 01
	00 00		 mov	 dx, WORD PTR [ecx+324]
  00c4b	66 89 90 78 01
	00 00		 mov	 WORD PTR [eax+376], dx

; 259  : 				lpObj->m_OldY = lpObj->Y;

  00c52	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c55	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00c58	66 8b 91 46 01
	00 00		 mov	 dx, WORD PTR [ecx+326]
  00c5f	66 89 90 7a 01
	00 00		 mov	 WORD PTR [eax+378], dx

; 260  : 				lpObj->StartX = lpObj->X;

  00c66	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c69	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00c6c	8a 91 44 01 00
	00		 mov	 dl, BYTE PTR [ecx+324]
  00c72	88 90 76 01 00
	00		 mov	 BYTE PTR [eax+374], dl

; 261  : 				lpObj->StartY = lpObj->Y;

  00c78	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c7b	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00c7e	8a 91 46 01 00
	00		 mov	 dl, BYTE PTR [ecx+326]
  00c84	88 90 77 01 00
	00		 mov	 BYTE PTR [eax+375], dl

; 262  : 				lpObj->m_MoveRange = this->m_SetBaseInfo[iCount].btDistance;

  00c8a	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00c8d	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00c90	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c93	66 0f b6 54 01
	0d		 movzx	 dx, BYTE PTR [ecx+eax+13]
  00c99	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c9c	66 89 90 ae 04
	00 00		 mov	 WORD PTR [eax+1198], dx

; 263  : 				lpObj->DieRegen = FALSE;

  00ca3	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ca6	c6 80 a2 03 00
	00 00		 mov	 BYTE PTR [eax+930], 0

; 264  : 
; 265  : 				if ( this->m_SetBaseInfo[iCount].btDir == 0xFF )

  00cad	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00cb0	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00cb3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cb6	0f b6 54 01 10	 movzx	 edx, BYTE PTR [ecx+eax+16]
  00cbb	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  00cc1	75 1c		 jne	 SHORT $LN5@SetKanturu

; 266  : 				{
; 267  : 					lpObj->Dir = rand()%8;

  00cc3	e8 00 00 00 00	 call	 _rand
  00cc8	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00ccd	79 05		 jns	 SHORT $LN15@SetKanturu
  00ccf	48		 dec	 eax
  00cd0	83 c8 f8	 or	 eax, -8			; fffffff8H
  00cd3	40		 inc	 eax
$LN15@SetKanturu:
  00cd4	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00cd7	88 81 48 01 00
	00		 mov	 BYTE PTR [ecx+328], al

; 268  : 				}
; 269  : 				else

  00cdd	eb 16		 jmp	 SHORT $LN4@SetKanturu
$LN5@SetKanturu:

; 270  : 				{
; 271  : 					lpObj->Dir = this->m_SetBaseInfo[iCount].btDir;

  00cdf	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00ce2	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00ce5	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00ce8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ceb	8a 44 02 10	 mov	 al, BYTE PTR [edx+eax+16]
  00cef	88 81 48 01 00
	00		 mov	 BYTE PTR [ecx+328], al
$LN4@SetKanturu:

; 272  : 				}
; 273  : 
; 274  : 				if ( gObjSetMonster(iResult, this->m_SetBaseInfo[iCount].wType) == FALSE )

  00cf5	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00cf8	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00cfb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cfe	0f b7 54 01 0a	 movzx	 edx, WORD PTR [ecx+eax+10]
  00d03	52		 push	 edx
  00d04	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00d07	50		 push	 eax
  00d08	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  00d0d	83 c4 08	 add	 esp, 8
  00d10	85 c0		 test	 eax, eax
  00d12	75 11		 jne	 SHORT $LN3@SetKanturu

; 275  : 				{
; 276  : 					gObjDel(iResult);

  00d14	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00d17	50		 push	 eax
  00d18	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00d1d	83 c4 04	 add	 esp, 4

; 277  : 					continue;

  00d20	e9 94 fd ff ff	 jmp	 $LN11@SetKanturu
$LN3@SetKanturu:

; 278  : 				}
; 279  : 
; 280  : 				if ( this->m_SetBaseInfo[iCount].wType == 364 )	/// Maya Hand

  00d25	8b 45 e4	 mov	 eax, DWORD PTR _iCount$227286[ebp]
  00d28	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00d2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d2e	0f b7 54 01 0a	 movzx	 edx, WORD PTR [ecx+eax+10]
  00d33	81 fa 6c 01 00
	00		 cmp	 edx, 364		; 0000016cH
  00d39	0f 85 97 00 00
	00		 jne	 $LN2@SetKanturu

; 281  : 				{
; 282  : 					this->m_iMayaObjIndex = iResult;

  00d3f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d42	8b 4d ec	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00d45	89 88 d8 07 00
	00		 mov	 DWORD PTR [eax+2008], ecx

; 283  : 
; 284  : 					LogAddTD("[ KANTURU ][ SetBossMapMonster ] %s(Index:%d / ObjIndex:%d) Map:%d-[%d][%d]",
; 285  : 						gObj[iResult].Name, gObj[iResult].Class, iResult, gObj[iResult].MapNumber,
; 286  : 						gObj[iResult].X, gObj[iResult].Y);

  00d4b	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00d4e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00d54	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00d5a	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  00d62	52		 push	 edx
  00d63	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00d66	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00d6c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00d72	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  00d7a	52		 push	 edx
  00d7b	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00d7e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00d84	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00d8a	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  00d92	52		 push	 edx
  00d93	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00d96	50		 push	 eax
  00d97	8b 4d ec	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00d9a	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00da0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00da6	0f b7 84 0a b8
	00 00 00	 movzx	 eax, WORD PTR [edx+ecx+184]
  00dae	50		 push	 eax
  00daf	8b 4d ec	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00db2	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00db8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00dbe	8d 44 0a 77	 lea	 eax, DWORD PTR [edx+ecx+119]
  00dc2	50		 push	 eax
  00dc3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
  00dc8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00dce	83 c4 1c	 add	 esp, 28			; 0000001cH

; 287  : 
; 288  : 					continue;

  00dd1	e9 e3 fc ff ff	 jmp	 $LN11@SetKanturu
$LN2@SetKanturu:

; 289  : 				}
; 290  : 
; 291  : 				if ( gObj[iResult].Type == OBJ_MONSTER )

  00dd6	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00dd9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00ddf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00de5	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  00dea	83 fa 02	 cmp	 edx, 2
  00ded	0f 85 cc 00 00
	00		 jne	 $LN1@SetKanturu

; 292  : 				{
; 293  : 					this->m_KanturuMonster.AddObj(iResult);

  00df3	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00df6	50		 push	 eax
  00df7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dfa	81 c1 e0 07 00
	00		 add	 ecx, 2016		; 000007e0H
  00e00	e8 00 00 00 00	 call	 ?AddObj@CKanturuObjInfo@@QAEHH@Z ; CKanturuObjInfo::AddObj

; 294  : 					this->m_iMaxRegenMonsterCount++;

  00e05	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e08	8b 88 68 14 00
	00		 mov	 ecx, DWORD PTR [eax+5224]
  00e0e	83 c1 01	 add	 ecx, 1
  00e11	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e14	89 8a 68 14 00
	00		 mov	 DWORD PTR [edx+5224], ecx

; 295  : 					this->m_iAliveMonsterCount++;

  00e1a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e1d	8b 88 6c 14 00
	00		 mov	 ecx, DWORD PTR [eax+5228]
  00e23	83 c1 01	 add	 ecx, 1
  00e26	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e29	89 8a 6c 14 00
	00		 mov	 DWORD PTR [edx+5228], ecx

; 296  : 
; 297  : 					LogAddTD("[ KANTURU ][ SetBossMapMonster ] Count:%d %s(Index:%d / ObjIndex:%d) Map:%d-[%d][%d]",
; 298  : 						this->m_iAliveMonsterCount, gObj[iResult].Name, gObj[iResult].Class, iResult,
; 299  : 						gObj[iResult].MapNumber,gObj[iResult].X, gObj[iResult].Y);

  00e2f	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00e32	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00e38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00e3e	0f bf 94 01 46
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+326]
  00e46	52		 push	 edx
  00e47	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00e4a	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00e50	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00e56	0f bf 94 01 44
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+324]
  00e5e	52		 push	 edx
  00e5f	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00e62	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00e68	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00e6e	0f b6 94 01 49
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+329]
  00e76	52		 push	 edx
  00e77	8b 45 ec	 mov	 eax, DWORD PTR _iResult$[ebp]
  00e7a	50		 push	 eax
  00e7b	8b 4d ec	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00e7e	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00e84	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00e8a	0f b7 84 0a b8
	00 00 00	 movzx	 eax, WORD PTR [edx+ecx+184]
  00e92	50		 push	 eax
  00e93	8b 4d ec	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00e96	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00e9c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00ea2	8d 44 0a 77	 lea	 eax, DWORD PTR [edx+ecx+119]
  00ea6	50		 push	 eax
  00ea7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00eaa	8b 91 6c 14 00
	00		 mov	 edx, DWORD PTR [ecx+5228]
  00eb0	52		 push	 edx
  00eb1	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
  00eb6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00ebc	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@SetKanturu:

; 300  : 				}
; 301  : 
; 302  : 				iRegenCount++;

  00ebf	8b 45 e8	 mov	 eax, DWORD PTR _iRegenCount$[ebp]
  00ec2	83 c0 01	 add	 eax, 1
  00ec5	89 45 e8	 mov	 DWORD PTR _iRegenCount$[ebp], eax
$LN9@SetKanturu:

; 303  : 			}
; 304  : 		}
; 305  : 	}

  00ec8	e9 ec fb ff ff	 jmp	 $LN11@SetKanturu
$LN10@SetKanturu:

; 306  : 
; 307  : 	return iRegenCount;

  00ecd	8b 45 e8	 mov	 eax, DWORD PTR _iRegenCount$[ebp]

; 308  : }

  00ed0	5f		 pop	 edi
  00ed1	5e		 pop	 esi
  00ed2	5b		 pop	 ebx
  00ed3	8b e5		 mov	 esp, ebp
  00ed5	5d		 pop	 ebp
  00ed6	c2 04 00	 ret	 4
?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z ENDP	; CKanturuMonsterMng::SetKanturuMonster
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\kanturuobjinfo.h
_TEXT	ENDS
;	COMDAT ?AddObj@CKanturuObjInfo@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?AddObj@CKanturuObjInfo@@QAEHH@Z PROC			; CKanturuObjInfo::AddObj, COMDAT
; _this$ = ecx

; 30   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 		if ( this->m_iObjCount >= MAX_KANTURU_OBJ_INDEX )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	81 78 04 20 03
	00 00		 cmp	 DWORD PTR [eax+4], 800	; 00000320H
  00016	7c 04		 jl	 SHORT $LN1@AddObj

; 32   : 		{
; 33   : 			return FALSE;

  00018	33 c0		 xor	 eax, eax
  0001a	eb 24		 jmp	 SHORT $LN2@AddObj
$LN1@AddObj:

; 34   : 		}
; 35   : 
; 36   : 		this->m_iObjIndex[this->m_iObjCount] = iIndex;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00028	89 44 8a 08	 mov	 DWORD PTR [edx+ecx*4+8], eax

; 37   : 		this->m_iObjCount++;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00032	83 c1 01	 add	 ecx, 1
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 38   : 
; 39   : 		return TRUE;

  0003b	b8 01 00 00 00	 mov	 eax, 1
$LN2@AddObj:

; 40   : 	}

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?AddObj@CKanturuObjInfo@@QAEHH@Z ENDP			; CKanturuObjInfo::AddObj
_TEXT	ENDS
PUBLIC	??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0EJ@JCNLNBHE@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z@4JA ; `CKanturuMonsterMng::GetPosition'::`2'::__LINE__Var
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
;	COMDAT ??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\kanturumonstermng.cpp
CONST	SEGMENT
??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@ DB 'ERROR : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@JCNLNBHE@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0EJ@JCNLNBHE@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\kanturumonstermng.cp'
	DB	'p', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z@4JA DD 0139H ; `CKanturuMonsterMng::GetPosition'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
_iCount$ = -20						; size = 4
_btAttr$ = -13						; size = 1
_iOry$ = -12						; size = 4
_iOrx$ = -8						; size = 4
_this$ = -4						; size = 4
_TableNum$ = 8						; size = 4
_MapNumber$ = 12					; size = 2
_x$ = 16						; size = 4
_y$ = 20						; size = 4
?GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z PROC	; CKanturuMonsterMng::GetPosition
; _this$ = ecx

; 313  : {

  00ee0	55		 push	 ebp
  00ee1	8b ec		 mov	 ebp, esp
  00ee3	83 ec 54	 sub	 esp, 84			; 00000054H
  00ee6	53		 push	 ebx
  00ee7	56		 push	 esi
  00ee8	57		 push	 edi
  00ee9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 314  : 	if ( TableNum < 0 || TableNum > MAX_KANTURU_MONSTER-1 )

  00eec	83 7d 08 00	 cmp	 DWORD PTR _TableNum$[ebp], 0
  00ef0	7c 09		 jl	 SHORT $LN5@GetPositio
  00ef2	81 7d 08 c7 00
	00 00		 cmp	 DWORD PTR _TableNum$[ebp], 199 ; 000000c7H
  00ef9	7e 23		 jle	 SHORT $LN6@GetPositio
$LN5@GetPositio:

; 315  : 	{
; 316  : 		LogAdd("ERROR : %s %d", __FILE__, __LINE__);

  00efb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z@4JA
  00f00	83 c0 03	 add	 eax, 3
  00f03	50		 push	 eax
  00f04	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@JCNLNBHE@d?3?2projects?2exteam6?43?2source?2gam@
  00f09	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@
  00f0e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00f14	83 c4 0c	 add	 esp, 12			; 0000000cH

; 317  : 		return FALSE;

  00f17	33 c0		 xor	 eax, eax
  00f19	e9 41 01 00 00	 jmp	 $LN7@GetPositio
$LN6@GetPositio:

; 318  : 	}
; 319  : 
; 320  : 	int iOrx = this->m_SetBaseInfo[TableNum].btX;

  00f1e	8b 45 08	 mov	 eax, DWORD PTR _TableNum$[ebp]
  00f21	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00f24	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f27	0f b6 54 01 0e	 movzx	 edx, BYTE PTR [ecx+eax+14]
  00f2c	89 55 f8	 mov	 DWORD PTR _iOrx$[ebp], edx

; 321  : 	int iOry = this->m_SetBaseInfo[TableNum].btY;

  00f2f	8b 45 08	 mov	 eax, DWORD PTR _TableNum$[ebp]
  00f32	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00f35	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f38	0f b6 54 01 0f	 movzx	 edx, BYTE PTR [ecx+eax+15]
  00f3d	89 55 f4	 mov	 DWORD PTR _iOry$[ebp], edx

; 322  : 	BYTE btAttr = MapC[MapNumber].GetAttr(iOrx, iOry);

  00f40	8b 45 f4	 mov	 eax, DWORD PTR _iOry$[ebp]
  00f43	50		 push	 eax
  00f44	8b 4d f8	 mov	 ecx, DWORD PTR _iOrx$[ebp]
  00f47	51		 push	 ecx
  00f48	0f bf 4d 0c	 movsx	 ecx, WORD PTR _MapNumber$[ebp]
  00f4c	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  00f52	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00f58	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00f5d	88 45 f3	 mov	 BYTE PTR _btAttr$[ebp], al

; 323  : 
; 324  : 	if ( (btAttr&1)!=1 && (btAttr&4)!=4 && (btAttr&8)!=8 )

  00f60	0f b6 45 f3	 movzx	 eax, BYTE PTR _btAttr$[ebp]
  00f64	83 e0 01	 and	 eax, 1
  00f67	75 30		 jne	 SHORT $LN4@GetPositio
  00f69	0f b6 45 f3	 movzx	 eax, BYTE PTR _btAttr$[ebp]
  00f6d	83 e0 04	 and	 eax, 4
  00f70	75 27		 jne	 SHORT $LN4@GetPositio
  00f72	0f b6 45 f3	 movzx	 eax, BYTE PTR _btAttr$[ebp]
  00f76	83 e0 08	 and	 eax, 8
  00f79	75 1e		 jne	 SHORT $LN4@GetPositio

; 325  : 	{
; 326  : 		x = iOrx;

  00f7b	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00f7e	66 8b 4d f8	 mov	 cx, WORD PTR _iOrx$[ebp]
  00f82	66 89 08	 mov	 WORD PTR [eax], cx

; 327  : 		y = iOry;

  00f85	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  00f88	66 8b 4d f4	 mov	 cx, WORD PTR _iOry$[ebp]
  00f8c	66 89 08	 mov	 WORD PTR [eax], cx

; 328  : 
; 329  : 		return TRUE;

  00f8f	b8 01 00 00 00	 mov	 eax, 1
  00f94	e9 c6 00 00 00	 jmp	 $LN7@GetPositio
$LN4@GetPositio:

; 330  : 	}
; 331  : 
; 332  : 	int iCount = 100;	// Number of Tries

  00f99	c7 45 ec 64 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 100 ; 00000064H
$LN3@GetPositio:

; 333  : 
; 334  : 	while ( iCount-- != 0 )

  00fa0	8b 45 ec	 mov	 eax, DWORD PTR _iCount$[ebp]
  00fa3	8b 4d ec	 mov	 ecx, DWORD PTR _iCount$[ebp]
  00fa6	83 e9 01	 sub	 ecx, 1
  00fa9	89 4d ec	 mov	 DWORD PTR _iCount$[ebp], ecx
  00fac	85 c0		 test	 eax, eax
  00fae	0f 84 a9 00 00
	00		 je	 $LN2@GetPositio

; 335  : 	{
; 336  : 		iOrx = this->m_SetBaseInfo[TableNum].btX - 3;

  00fb4	8b 45 08	 mov	 eax, DWORD PTR _TableNum$[ebp]
  00fb7	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00fba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fbd	0f b6 54 01 0e	 movzx	 edx, BYTE PTR [ecx+eax+14]
  00fc2	83 ea 03	 sub	 edx, 3
  00fc5	89 55 f8	 mov	 DWORD PTR _iOrx$[ebp], edx

; 337  : 		iOry = this->m_SetBaseInfo[TableNum].btY - 3;

  00fc8	8b 45 08	 mov	 eax, DWORD PTR _TableNum$[ebp]
  00fcb	6b c0 0a	 imul	 eax, 10			; 0000000aH
  00fce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fd1	0f b6 54 01 0f	 movzx	 edx, BYTE PTR [ecx+eax+15]
  00fd6	83 ea 03	 sub	 edx, 3
  00fd9	89 55 f4	 mov	 DWORD PTR _iOry$[ebp], edx

; 338  : 		iOrx += rand() % 7;

  00fdc	e8 00 00 00 00	 call	 _rand
  00fe1	99		 cdq
  00fe2	b9 07 00 00 00	 mov	 ecx, 7
  00fe7	f7 f9		 idiv	 ecx
  00fe9	03 55 f8	 add	 edx, DWORD PTR _iOrx$[ebp]
  00fec	89 55 f8	 mov	 DWORD PTR _iOrx$[ebp], edx

; 339  : 		iOry += rand() % 7;

  00fef	e8 00 00 00 00	 call	 _rand
  00ff4	99		 cdq
  00ff5	b9 07 00 00 00	 mov	 ecx, 7
  00ffa	f7 f9		 idiv	 ecx
  00ffc	03 55 f4	 add	 edx, DWORD PTR _iOry$[ebp]
  00fff	89 55 f4	 mov	 DWORD PTR _iOry$[ebp], edx

; 340  : 
; 341  : 		btAttr = MapC[MapNumber].GetAttr(iOrx, iOry);

  01002	8b 45 f4	 mov	 eax, DWORD PTR _iOry$[ebp]
  01005	50		 push	 eax
  01006	8b 4d f8	 mov	 ecx, DWORD PTR _iOrx$[ebp]
  01009	51		 push	 ecx
  0100a	0f bf 4d 0c	 movsx	 ecx, WORD PTR _MapNumber$[ebp]
  0100e	69 c9 b8 3d 05
	00		 imul	 ecx, 343480		; 00053db8H
  01014	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0101a	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  0101f	88 45 f3	 mov	 BYTE PTR _btAttr$[ebp], al

; 342  : 
; 343  : 		if ( (btAttr&1)!=1 && (btAttr&4)!=4 && (btAttr&8)!=8 )

  01022	0f b6 45 f3	 movzx	 eax, BYTE PTR _btAttr$[ebp]
  01026	83 e0 01	 and	 eax, 1
  01029	75 2d		 jne	 SHORT $LN1@GetPositio
  0102b	0f b6 45 f3	 movzx	 eax, BYTE PTR _btAttr$[ebp]
  0102f	83 e0 04	 and	 eax, 4
  01032	75 24		 jne	 SHORT $LN1@GetPositio
  01034	0f b6 45 f3	 movzx	 eax, BYTE PTR _btAttr$[ebp]
  01038	83 e0 08	 and	 eax, 8
  0103b	75 1b		 jne	 SHORT $LN1@GetPositio

; 344  : 		{
; 345  : 			x = iOrx;

  0103d	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  01040	66 8b 4d f8	 mov	 cx, WORD PTR _iOrx$[ebp]
  01044	66 89 08	 mov	 WORD PTR [eax], cx

; 346  : 			y = iOry;

  01047	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  0104a	66 8b 4d f4	 mov	 cx, WORD PTR _iOry$[ebp]
  0104e	66 89 08	 mov	 WORD PTR [eax], cx

; 347  : 
; 348  : 			return TRUE;

  01051	b8 01 00 00 00	 mov	 eax, 1
  01056	eb 07		 jmp	 SHORT $LN7@GetPositio
$LN1@GetPositio:

; 349  : 		}
; 350  : 	}

  01058	e9 43 ff ff ff	 jmp	 $LN3@GetPositio
$LN2@GetPositio:

; 351  : 
; 352  : 	return FALSE;

  0105d	33 c0		 xor	 eax, eax
$LN7@GetPositio:

; 353  : }

  0105f	5f		 pop	 edi
  01060	5e		 pop	 esi
  01061	5b		 pop	 ebx
  01062	8b e5		 mov	 esp, ebp
  01064	5d		 pop	 ebp
  01065	c2 10 00	 ret	 16			; 00000010H
?GetPosition@CKanturuMonsterMng@@QAEHHFAAF0@Z ENDP	; CKanturuMonsterMng::GetPosition
_TEXT	ENDS
PUBLIC	?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ	; CKanturuMonsterMng::IsExistAliveMonster
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ PROC	; CKanturuMonsterMng::IsExistAliveMonster
; _this$ = ecx

; 358  : {

  01070	55		 push	 ebp
  01071	8b ec		 mov	 ebp, esp
  01073	83 ec 44	 sub	 esp, 68			; 00000044H
  01076	53		 push	 ebx
  01077	56		 push	 esi
  01078	57		 push	 edi
  01079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 359  : 	if ( this->m_iAliveMonsterCount <=  0 )

  0107c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0107f	83 b8 6c 14 00
	00 00		 cmp	 DWORD PTR [eax+5228], 0
  01086	7f 04		 jg	 SHORT $LN1@IsExistAli

; 360  : 	{
; 361  : 		return FALSE;

  01088	33 c0		 xor	 eax, eax
  0108a	eb 05		 jmp	 SHORT $LN2@IsExistAli
$LN1@IsExistAli:

; 362  : 	}
; 363  : 
; 364  : 	return TRUE;

  0108c	b8 01 00 00 00	 mov	 eax, 1
$LN2@IsExistAli:

; 365  : }

  01091	5f		 pop	 edi
  01092	5e		 pop	 esi
  01093	5b		 pop	 ebx
  01094	8b e5		 mov	 esp, ebp
  01096	5d		 pop	 ebp
  01097	c3		 ret	 0
?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ ENDP	; CKanturuMonsterMng::IsExistAliveMonster
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_KanturuMonsterMng@@YAXXZ
text$yc	SEGMENT
??__Eg_KanturuMonsterMng@@YAXXZ PROC			; `dynamic initializer for 'g_KanturuMonsterMng'', COMDAT

; 13   : CKanturuMonsterMng g_KanturuMonsterMng;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A ; g_KanturuMonsterMng
  0000e	e8 00 00 00 00	 call	 ??0CKanturuMonsterMng@@QAE@XZ ; CKanturuMonsterMng::CKanturuMonsterMng
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_KanturuMonsterMng@@YAXXZ ; `dynamic atexit destructor for 'g_KanturuMonsterMng''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_KanturuMonsterMng@@YAXXZ ENDP			; `dynamic initializer for 'g_KanturuMonsterMng''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_KanturuMonsterMng@@YAXXZ
text$yd	SEGMENT
??__Fg_KanturuMonsterMng@@YAXXZ PROC			; `dynamic atexit destructor for 'g_KanturuMonsterMng'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A ; g_KanturuMonsterMng
  0000e	e8 00 00 00 00	 call	 ??1CKanturuMonsterMng@@UAE@XZ ; CKanturuMonsterMng::~CKanturuMonsterMng
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_KanturuMonsterMng@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_KanturuMonsterMng''
text$yd	ENDS
PUBLIC	?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A	; g_KanturuMonsterMng
_BSS	SEGMENT
?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A DB 01470H DUP (?) ; g_KanturuMonsterMng
_BSS	ENDS
CRT$XCU	SEGMENT
_g_KanturuMonsterMng$initializer$ DD FLAT:??__Eg_KanturuMonsterMng@@YAXXZ
CRT$XCU	ENDS
END
