; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ChatFilter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::~vector<FILTER_INFO,std::allocator<FILTER_INFO> >
PUBLIC	?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::clear
PUBLIC	??0?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::vector<FILTER_INFO,std::allocator<FILTER_INFO> >
PUBLIC	??0CChatFilter@@QAE@XZ				; CChatFilter::CChatFilter
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$??0CChatFilter@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CChatFilter@@QAE@XZ$0
__ehfuncinfo$??0CChatFilter@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CChatFilter@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\chatfilter.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CChatFilter@@QAE@XZ PROC				; CChatFilter::CChatFilter
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CChatFilter@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 08	 add	 ecx, 8
  00031	e8 00 00 00 00	 call	 ??0?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::vector<FILTER_INFO,std::allocator<FILTER_INFO> >
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 15   : 	this->m_Active = false;

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c6 00 00	 mov	 BYTE PTR [eax], 0

; 16   : 	this->m_Enable = false;

  00043	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00046	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 17   : 	this->m_Count = 0;

  0004a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 18   : 	this->m_iChatBanMin = 0;

  00054	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00057	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 19   : 	this->m_FilterInfo.clear();

  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 08	 add	 ecx, 8
  00064	e8 00 00 00 00	 call	 ?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::clear

; 20   : }

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CChatFilter@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::~vector<FILTER_INFO,std::allocator<FILTER_INFO> >
__ehhandler$??0CChatFilter@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CChatFilter@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CChatFilter@@QAE@XZ ENDP				; CChatFilter::CChatFilter
PUBLIC	??1CChatFilter@@QAE@XZ				; CChatFilter::~CChatFilter
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CChatFilter@@QAE@XZ PROC				; CChatFilter::~CChatFilter
; _this$ = ecx

; 23   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp
  00093	83 ec 44	 sub	 esp, 68			; 00000044H
  00096	53		 push	 ebx
  00097	56		 push	 esi
  00098	57		 push	 edi
  00099	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : }

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	83 c1 08	 add	 ecx, 8
  000a2	e8 00 00 00 00	 call	 ??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::~vector<FILTER_INFO,std::allocator<FILTER_INFO> >
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
??1CChatFilter@@QAE@XZ ENDP				; CChatFilter::~CChatFilter
_TEXT	ENDS
PUBLIC	?Read@CChatFilter@@QAEXPAD@Z			; CChatFilter::Read
PUBLIC	??_C@_0BG@DFDHHPE@ExData?2ChatFilter?4dat?$AA@	; `string'
PUBLIC	?Load@CChatFilter@@QAEXXZ			; CChatFilter::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
;	COMDAT ??_C@_0BG@DFDHHPE@ExData?2ChatFilter?4dat?$AA@
CONST	SEGMENT
??_C@_0BG@DFDHHPE@ExData?2ChatFilter?4dat?$AA@ DB 'ExData\ChatFilter.dat', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CChatFilter@@QAEXXZ PROC				; CChatFilter::Load
; _this$ = ecx

; 27   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	83 ec 44	 sub	 esp, 68			; 00000044H
  000b6	53		 push	 ebx
  000b7	56		 push	 esi
  000b8	57		 push	 edi
  000b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	this->m_Active = false;

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	c6 00 00	 mov	 BYTE PTR [eax], 0

; 29   : 
; 30   : 	if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2) ||
; 31   : 		g_ExLicense.CheckUser(eExUB::SILVER1) || g_ExLicense.CheckUser(eExUB::SILVER2) || g_ExLicense.CheckUser(eExUB::SILVER_Local) ||
; 32   : 		g_ExLicense.CheckUser(eExUB::Artem) || g_ExLicense.CheckUser(eExUB::Artem2) || g_ExLicense.CheckUser(eExUB::mu4you) ||
; 33   : 		g_ExLicense.CheckUser(eExUB::NSGames))

  000c2	6a 20		 push	 32			; 00000020H
  000c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000c9	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000ce	0f b6 c0	 movzx	 eax, al
  000d1	85 c0		 test	 eax, eax
  000d3	0f 85 b3 00 00
	00		 jne	 $LN2@Load
  000d9	6a 21		 push	 33			; 00000021H
  000db	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000e0	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000e5	0f b6 c0	 movzx	 eax, al
  000e8	85 c0		 test	 eax, eax
  000ea	0f 85 9c 00 00
	00		 jne	 $LN2@Load
  000f0	6a 22		 push	 34			; 00000022H
  000f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  000f7	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  000fc	0f b6 c0	 movzx	 eax, al
  000ff	85 c0		 test	 eax, eax
  00101	0f 85 85 00 00
	00		 jne	 $LN2@Load
  00107	6a 07		 push	 7
  00109	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0010e	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00113	0f b6 c0	 movzx	 eax, al
  00116	85 c0		 test	 eax, eax
  00118	75 72		 jne	 SHORT $LN2@Load
  0011a	6a 08		 push	 8
  0011c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00121	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00126	0f b6 c0	 movzx	 eax, al
  00129	85 c0		 test	 eax, eax
  0012b	75 5f		 jne	 SHORT $LN2@Load
  0012d	6a 2b		 push	 43			; 0000002bH
  0012f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00134	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00139	0f b6 c0	 movzx	 eax, al
  0013c	85 c0		 test	 eax, eax
  0013e	75 4c		 jne	 SHORT $LN2@Load
  00140	6a 30		 push	 48			; 00000030H
  00142	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00147	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0014c	0f b6 c0	 movzx	 eax, al
  0014f	85 c0		 test	 eax, eax
  00151	75 39		 jne	 SHORT $LN2@Load
  00153	6a 31		 push	 49			; 00000031H
  00155	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0015a	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0015f	0f b6 c0	 movzx	 eax, al
  00162	85 c0		 test	 eax, eax
  00164	75 26		 jne	 SHORT $LN2@Load
  00166	6a 4e		 push	 78			; 0000004eH
  00168	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0016d	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00172	0f b6 c0	 movzx	 eax, al
  00175	85 c0		 test	 eax, eax
  00177	75 13		 jne	 SHORT $LN2@Load
  00179	6a 51		 push	 81			; 00000051H
  0017b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00180	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00185	0f b6 c0	 movzx	 eax, al
  00188	85 c0		 test	 eax, eax
  0018a	74 06		 je	 SHORT $LN3@Load
$LN2@Load:

; 34   : 	{
; 35   : 		this->m_Active = true;

  0018c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN3@Load:

; 36   : 	}
; 37   : 
; 38   : 	if(!this->m_Active)

  00192	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00195	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00198	85 c9		 test	 ecx, ecx
  0019a	75 02		 jne	 SHORT $LN1@Load

; 39   : 	{
; 40   : 		return;

  0019c	eb 2d		 jmp	 SHORT $LN4@Load
$LN1@Load:

; 41   : 	}
; 42   : 
; 43   : 	this->m_Count = 0;

  0019e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a1	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 44   : 	this->m_FilterInfo.clear();

  001a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ab	83 c1 08	 add	 ecx, 8
  001ae	e8 00 00 00 00	 call	 ?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::clear

; 45   : 	this->Read(gDirPath.GetNewPath("ExData\\ChatFilter.dat"));

  001b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DFDHHPE@ExData?2ChatFilter?4dat?$AA@
  001b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  001bd	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  001c2	50		 push	 eax
  001c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c6	e8 00 00 00 00	 call	 ?Read@CChatFilter@@QAEXPAD@Z ; CChatFilter::Read
$LN4@Load:

; 46   : }

  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	5b		 pop	 ebx
  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c3		 ret	 0
?Load@CChatFilter@@QAEXXZ ENDP				; CChatFilter::Load
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	?push_back@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXABUFILTER_INFO@@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::push_back
PUBLIC	??$strcpy_s@$0EA@@@YAHAAY0EA@DPBD@Z		; strcpy_s<64>
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@ DB '%s file not found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv87 = -145						; size = 1
_info$228373 = -80					; size = 64
_iType$ = -16						; size = 4
_Token$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_FileName$ = 8						; size = 4
?Read@CChatFilter@@QAEXPAD@Z PROC			; CChatFilter::Read
; _this$ = ecx

; 49   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  001e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001ee	33 c5		 xor	 eax, ebp
  001f0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  001f3	53		 push	 ebx
  001f4	56		 push	 esi
  001f5	57		 push	 edi
  001f6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 	SMDToken Token;
; 51   : 
; 52   : 	SMDFile = fopen(FileName, "r");

  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  001fe	8b 45 08	 mov	 eax, DWORD PTR _FileName$[ebp]
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 _fopen
  00207	83 c4 08	 add	 esp, 8
  0020a	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 53   : 
; 54   : 	if(!SMDFile)

  0020f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00216	75 16		 jne	 SHORT $LN14@Read

; 55   : 	{
; 56   : 		MsgBox("%s file not found", FileName);

  00218	8b 45 08	 mov	 eax, DWORD PTR _FileName$[ebp]
  0021b	50		 push	 eax
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JAIHNJEB@?$CFs?5file?5not?5found?$AA@
  00221	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00226	83 c4 08	 add	 esp, 8

; 57   : 		return;

  00229	e9 4c 01 00 00	 jmp	 $LN15@Read
$LN14@Read:

; 58   : 	}
; 59   : 
; 60   : 	int iType = -1;

  0022e	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _iType$[ebp], -1
$LN19@Read:

; 61   : 
; 62   : 	while(true)

  00235	b8 01 00 00 00	 mov	 eax, 1
  0023a	85 c0		 test	 eax, eax
  0023c	0f 84 18 01 00
	00		 je	 $LN12@Read

; 63   : 	{
; 64   : 		Token = GetToken();

  00242	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00247	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 65   : 
; 66   : 		if(Token == END)

  0024a	83 7d f4 02	 cmp	 DWORD PTR _Token$[ebp], 2
  0024e	75 05		 jne	 SHORT $LN11@Read

; 67   : 		{
; 68   : 			break;

  00250	e9 05 01 00 00	 jmp	 $LN12@Read
$LN11@Read:

; 69   : 		}
; 70   : 
; 71   : 		if( Token != NUMBER )

  00255	83 7d f4 01	 cmp	 DWORD PTR _Token$[ebp], 1
  00259	74 02		 je	 SHORT $LN10@Read

; 72   : 		{
; 73   : 			continue;

  0025b	eb d8		 jmp	 SHORT $LN19@Read
$LN10@Read:

; 74   : 		}
; 75   : 
; 76   : 		iType = (int)TokenNumber;

  0025d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00263	e8 00 00 00 00	 call	 __ftol2_sse
  00268	89 45 f0	 mov	 DWORD PTR _iType$[ebp], eax

; 77   : 
; 78   : 		if(iType < 0 || iType > 1)

  0026b	83 7d f0 00	 cmp	 DWORD PTR _iType$[ebp], 0
  0026f	7c 06		 jl	 SHORT $LN8@Read
  00271	83 7d f0 01	 cmp	 DWORD PTR _iType$[ebp], 1
  00275	7e 05		 jle	 SHORT $LN9@Read
$LN8@Read:

; 79   : 		{
; 80   : 			break;

  00277	e9 de 00 00 00	 jmp	 $LN12@Read
$LN9@Read:

; 81   : 		}
; 82   : 
; 83   : 		while(1)

  0027c	b8 01 00 00 00	 mov	 eax, 1
  00281	85 c0		 test	 eax, eax
  00283	0f 84 cc 00 00
	00		 je	 $LN6@Read

; 84   : 		{
; 85   : 			if(iType == 0)

  00289	83 7d f0 00	 cmp	 DWORD PTR _iType$[ebp], 0
  0028d	75 6b		 jne	 SHORT $LN5@Read

; 86   : 			{
; 87   : 				Token = GetToken();

  0028f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00294	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 88   : 
; 89   : 				if(strcmp("end", TokenString) == 0)

  00297	68 00 00 00 00	 push	 OFFSET _TokenString
  0029c	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  002a1	e8 00 00 00 00	 call	 _strcmp
  002a6	83 c4 08	 add	 esp, 8
  002a9	85 c0		 test	 eax, eax
  002ab	75 05		 jne	 SHORT $LN4@Read

; 90   : 				{
; 91   : 					break;

  002ad	e9 a3 00 00 00	 jmp	 $LN6@Read
$LN4@Read:

; 92   : 				}
; 93   : 
; 94   : 				this->m_Enable = TokenNumber;

  002b2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b8	d9 ee		 fldz
  002ba	da e9		 fucompp
  002bc	df e0		 fnstsw	 ax
  002be	f6 c4 44	 test	 ah, 68			; 00000044H
  002c1	7b 09		 jnp	 SHORT $LN17@Read
  002c3	c6 85 6f ff ff
	ff 01		 mov	 BYTE PTR tv87[ebp], 1
  002ca	eb 07		 jmp	 SHORT $LN18@Read
$LN17@Read:
  002cc	c6 85 6f ff ff
	ff 00		 mov	 BYTE PTR tv87[ebp], 0
$LN18@Read:
  002d3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002d6	8a 8d 6f ff ff
	ff		 mov	 cl, BYTE PTR tv87[ebp]
  002dc	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 95   : 
; 96   : 				Token = GetToken();

  002df	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002e4	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 97   : 				this->m_iChatBanMin = TokenNumber;

  002e7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ed	e8 00 00 00 00	 call	 __ftol2_sse
  002f2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002f5	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  002f8	eb 56		 jmp	 SHORT $LN2@Read
$LN5@Read:

; 98   : 
; 99   : 			}
; 100  : 			else if(iType == 1)

  002fa	83 7d f0 01	 cmp	 DWORD PTR _iType$[ebp], 1
  002fe	75 50		 jne	 SHORT $LN2@Read

; 101  : 			{
; 102  : 				Token = GetToken();

  00300	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00305	89 45 f4	 mov	 DWORD PTR _Token$[ebp], eax

; 103  : 
; 104  : 				if(strcmp("end", TokenString) == 0)

  00308	68 00 00 00 00	 push	 OFFSET _TokenString
  0030d	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00312	e8 00 00 00 00	 call	 _strcmp
  00317	83 c4 08	 add	 esp, 8
  0031a	85 c0		 test	 eax, eax
  0031c	75 02		 jne	 SHORT $LN1@Read

; 105  : 				{
; 106  : 					break;

  0031e	eb 35		 jmp	 SHORT $LN6@Read
$LN1@Read:

; 107  : 				}
; 108  : 
; 109  : 				FILTER_INFO info;
; 110  : 
; 111  : 				memset(&info, 0, sizeof(info));

  00320	6a 40		 push	 64			; 00000040H
  00322	6a 00		 push	 0
  00324	8d 45 b0	 lea	 eax, DWORD PTR _info$228373[ebp]
  00327	50		 push	 eax
  00328	e8 00 00 00 00	 call	 _memset
  0032d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 112  : 
; 113  : 				strcpy_s(info.label, TokenString);

  00330	68 00 00 00 00	 push	 OFFSET _TokenString
  00335	8d 45 b0	 lea	 eax, DWORD PTR _info$228373[ebp]
  00338	50		 push	 eax
  00339	e8 00 00 00 00	 call	 ??$strcpy_s@$0EA@@@YAHAAY0EA@DPBD@Z ; strcpy_s<64>
  0033e	83 c4 08	 add	 esp, 8

; 114  : 
; 115  : 				this->m_FilterInfo.push_back(info);

  00341	8d 45 b0	 lea	 eax, DWORD PTR _info$228373[ebp]
  00344	50		 push	 eax
  00345	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00348	83 c1 08	 add	 ecx, 8
  0034b	e8 00 00 00 00	 call	 ?push_back@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXABUFILTER_INFO@@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::push_back
$LN2@Read:

; 116  : 			}
; 117  : 		}

  00350	e9 27 ff ff ff	 jmp	 $LN9@Read
$LN6@Read:

; 118  : 	}

  00355	e9 db fe ff ff	 jmp	 $LN19@Read
$LN12@Read:

; 119  : 
; 120  : 	fclose(SMDFile);

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 _fclose
  00365	83 c4 04	 add	 esp, 4

; 121  : 	LogAdd("%s file load!", FileName);

  00368	8b 45 08	 mov	 eax, DWORD PTR _FileName$[ebp]
  0036b	50		 push	 eax
  0036c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00371	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00377	83 c4 08	 add	 esp, 8
$LN15@Read:

; 122  : }

  0037a	5f		 pop	 edi
  0037b	5e		 pop	 esi
  0037c	5b		 pop	 ebx
  0037d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00380	33 cd		 xor	 ecx, ebp
  00382	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00387	8b e5		 mov	 esp, ebp
  00389	5d		 pop	 ebp
  0038a	c2 04 00	 ret	 4
?Read@CChatFilter@@QAEXPAD@Z ENDP			; CChatFilter::Read
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00390	55		 push	 ebp
  00391	8b ec		 mov	 ebp, esp
  00393	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00399	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0039e	33 c5		 xor	 eax, ebp
  003a0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  003a3	53		 push	 ebx
  003a4	56		 push	 esi
  003a5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  003a6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  003ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  003b2	50		 push	 eax
  003b3	e8 00 00 00 00	 call	 _fgetc
  003b8	83 c4 04	 add	 esp, 4
  003bb	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  003be	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  003c2	83 f9 ff	 cmp	 ecx, -1
  003c5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  003c7	b8 02 00 00 00	 mov	 eax, 2
  003cc	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  003d1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  003d3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003d7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  003da	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  003dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _fgetc
  003e7	83 c4 04	 add	 esp, 4
  003ea	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  003ed	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  003f1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  003f4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  003f6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  003fa	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  003fd	74 1c		 je	 SHORT $LN23@GetToken
  003ff	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00403	83 f8 ff	 cmp	 eax, -1
  00406	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00408	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0040d	50		 push	 eax
  0040e	e8 00 00 00 00	 call	 _fgetc
  00413	83 c4 04	 add	 esp, 4
  00416	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00419	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0041b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0041f	83 f8 ff	 cmp	 eax, -1
  00422	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00424	b8 02 00 00 00	 mov	 eax, 2
  00429	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0042e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00432	50		 push	 eax
  00433	e8 00 00 00 00	 call	 _isspace
  00438	83 c4 04	 add	 esp, 4
  0043b	85 c0		 test	 eax, eax
  0043d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00443	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00447	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0044d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00453	83 e9 22	 sub	 ecx, 34			; 00000022H
  00456	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0045c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00463	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00469	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0046f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00476	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0047d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00487	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0048c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00491	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00496	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  004a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004a5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  004aa	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  004af	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  004b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004be	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  004c3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  004c8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  004d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004d7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  004dc	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  004e1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  004eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004f0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  004f5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  004fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004ff	50		 push	 eax
  00500	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00504	51		 push	 ecx
  00505	e8 00 00 00 00	 call	 _ungetc
  0050a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0050d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00510	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00513	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 _getc
  0051e	83 c4 04	 add	 esp, 4
  00521	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00524	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00528	83 f9 ff	 cmp	 ecx, -1
  0052b	74 36		 je	 SHORT $LN12@GetToken
  0052d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00531	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00534	74 1a		 je	 SHORT $LN11@GetToken
  00536	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0053a	50		 push	 eax
  0053b	e8 00 00 00 00	 call	 _isdigit
  00540	83 c4 04	 add	 esp, 4
  00543	85 c0		 test	 eax, eax
  00545	75 09		 jne	 SHORT $LN11@GetToken
  00547	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0054b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0054e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00550	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00553	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00556	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00558	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0055b	83 c0 01	 add	 eax, 1
  0055e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00561	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00563	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00566	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00569	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0056c	50		 push	 eax
  0056d	e8 00 00 00 00	 call	 _atof
  00572	83 c4 04	 add	 esp, 4
  00575	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0057b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00585	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0058a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0058f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00594	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0059b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005a0	50		 push	 eax
  005a1	e8 00 00 00 00	 call	 _getc
  005a6	83 c4 04	 add	 esp, 4
  005a9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  005ac	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005b0	83 f9 ff	 cmp	 ecx, -1
  005b3	74 1c		 je	 SHORT $LN8@GetToken
  005b5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005b9	83 f8 22	 cmp	 eax, 34			; 00000022H
  005bc	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  005be	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005c1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  005c4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  005c6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005c9	83 c0 01	 add	 eax, 1
  005cc	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  005cf	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  005d1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005d5	83 f8 22	 cmp	 eax, 34			; 00000022H
  005d8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  005da	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005df	50		 push	 eax
  005e0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005e4	51		 push	 ecx
  005e5	e8 00 00 00 00	 call	 _ungetc
  005ea	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  005ed	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005f0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  005f3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  005fd	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00602	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00607	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0060c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00610	50		 push	 eax
  00611	e8 00 00 00 00	 call	 _isalpha
  00616	83 c4 04	 add	 esp, 4
  00619	85 c0		 test	 eax, eax
  0061b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00621	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00628	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0062b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0062e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00630	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00633	83 c0 01	 add	 eax, 1
  00636	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00639	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0063e	50		 push	 eax
  0063f	e8 00 00 00 00	 call	 _getc
  00644	83 c4 04	 add	 esp, 4
  00647	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0064a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0064e	83 f9 ff	 cmp	 ecx, -1
  00651	74 36		 je	 SHORT $LN3@GetToken
  00653	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00657	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0065a	74 1a		 je	 SHORT $LN2@GetToken
  0065c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00660	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00663	74 11		 je	 SHORT $LN2@GetToken
  00665	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00669	50		 push	 eax
  0066a	e8 00 00 00 00	 call	 _isalnum
  0066f	83 c4 04	 add	 esp, 4
  00672	85 c0		 test	 eax, eax
  00674	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00676	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00679	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0067c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0067e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00681	83 c0 01	 add	 eax, 1
  00684	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00687	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00689	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0068e	50		 push	 eax
  0068f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00693	51		 push	 ecx
  00694	e8 00 00 00 00	 call	 _ungetc
  00699	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0069c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0069f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  006a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  006ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006b1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  006b3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  006b5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  006bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006c4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  006c6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  006c8	5f		 pop	 edi
  006c9	5e		 pop	 esi
  006ca	5b		 pop	 ebx
  006cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006ce	33 cd		 xor	 ecx, ebp
  006d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006d5	8b e5		 mov	 esp, ebp
  006d7	5d		 pop	 ebp
  006d8	c3		 ret	 0
  006d9	8d 49 00	 npad	 3
$LN35@GetToken:
  006dc	00 00 00 00	 DD	 $LN10@GetToken
  006e0	00 00 00 00	 DD	 $LN19@GetToken
  006e4	00 00 00 00	 DD	 $LN17@GetToken
  006e8	00 00 00 00	 DD	 $LN14@GetToken
  006ec	00 00 00 00	 DD	 $LN18@GetToken
  006f0	00 00 00 00	 DD	 $LN16@GetToken
  006f4	00 00 00 00	 DD	 $LN15@GetToken
  006f8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  006fc	00		 DB	 0
  006fd	01		 DB	 1
  006fe	07		 DB	 7
  006ff	07		 DB	 7
  00700	07		 DB	 7
  00701	07		 DB	 7
  00702	07		 DB	 7
  00703	07		 DB	 7
  00704	07		 DB	 7
  00705	07		 DB	 7
  00706	02		 DB	 2
  00707	03		 DB	 3
  00708	03		 DB	 3
  00709	07		 DB	 7
  0070a	03		 DB	 3
  0070b	03		 DB	 3
  0070c	03		 DB	 3
  0070d	03		 DB	 3
  0070e	03		 DB	 3
  0070f	03		 DB	 3
  00710	03		 DB	 3
  00711	03		 DB	 3
  00712	03		 DB	 3
  00713	03		 DB	 3
  00714	07		 DB	 7
  00715	04		 DB	 4
  00716	07		 DB	 7
  00717	07		 DB	 7
  00718	07		 DB	 7
  00719	07		 DB	 7
  0071a	07		 DB	 7
  0071b	07		 DB	 7
  0071c	07		 DB	 7
  0071d	07		 DB	 7
  0071e	07		 DB	 7
  0071f	07		 DB	 7
  00720	07		 DB	 7
  00721	07		 DB	 7
  00722	07		 DB	 7
  00723	07		 DB	 7
  00724	07		 DB	 7
  00725	07		 DB	 7
  00726	07		 DB	 7
  00727	07		 DB	 7
  00728	07		 DB	 7
  00729	07		 DB	 7
  0072a	07		 DB	 7
  0072b	07		 DB	 7
  0072c	07		 DB	 7
  0072d	07		 DB	 7
  0072e	07		 DB	 7
  0072f	07		 DB	 7
  00730	07		 DB	 7
  00731	07		 DB	 7
  00732	07		 DB	 7
  00733	07		 DB	 7
  00734	07		 DB	 7
  00735	07		 DB	 7
  00736	07		 DB	 7
  00737	07		 DB	 7
  00738	07		 DB	 7
  00739	07		 DB	 7
  0073a	07		 DB	 7
  0073b	07		 DB	 7
  0073c	07		 DB	 7
  0073d	07		 DB	 7
  0073e	07		 DB	 7
  0073f	07		 DB	 7
  00740	07		 DB	 7
  00741	07		 DB	 7
  00742	07		 DB	 7
  00743	07		 DB	 7
  00744	07		 DB	 7
  00745	07		 DB	 7
  00746	07		 DB	 7
  00747	07		 DB	 7
  00748	07		 DB	 7
  00749	07		 DB	 7
  0074a	07		 DB	 7
  0074b	07		 DB	 7
  0074c	07		 DB	 7
  0074d	07		 DB	 7
  0074e	07		 DB	 7
  0074f	07		 DB	 7
  00750	07		 DB	 7
  00751	07		 DB	 7
  00752	07		 DB	 7
  00753	07		 DB	 7
  00754	07		 DB	 7
  00755	05		 DB	 5
  00756	07		 DB	 7
  00757	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0BJ@PEPPEGN@?$FLChat?5Filter?$FN?5ban?5?$CFd?5min?$AA@ ; `string'
PUBLIC	?strstr@@YAPADPADPBD@Z				; strstr
PUBLIC	??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::operator[]
PUBLIC	?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::size
PUBLIC	?CheckSyntax@CChatFilter@@QAEXHPAD@Z		; CChatFilter::CheckSyntax
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	_strlen:PROC
EXTRN	?ExConfig@@3VcExConfigs@@A:BYTE			; ExConfig
;	COMDAT ??_C@_0BJ@PEPPEGN@?$FLChat?5Filter?$FN?5ban?5?$CFd?5min?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\chatfilter.cpp
CONST	SEGMENT
??_C@_0BJ@PEPPEGN@?$FLChat?5Filter?$FN?5ban?5?$CFd?5min?$AA@ DB '[Chat Fi'
	DB	'lter] ban %d min', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_lpUser$228399 = -20					; size = 4
_len$228397 = -16					; size = 4
_temp$228392 = -12					; size = 4
_n$228388 = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_text$ = 12						; size = 4
?CheckSyntax@CChatFilter@@QAEXHPAD@Z PROC		; CChatFilter::CheckSyntax
; _this$ = ecx

; 125  : {

  00760	55		 push	 ebp
  00761	8b ec		 mov	 ebp, esp
  00763	83 ec 54	 sub	 esp, 84			; 00000054H
  00766	53		 push	 ebx
  00767	56		 push	 esi
  00768	57		 push	 edi
  00769	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 126  : 	if(!this->m_Enable)

  0076c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0076f	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00773	85 c9		 test	 ecx, ecx
  00775	75 05		 jne	 SHORT $LN10@CheckSynta

; 127  : 	{
; 128  : 		return;

  00777	e9 44 01 00 00	 jmp	 $LN11@CheckSynta
$LN10@CheckSynta:

; 129  : 	}
; 130  : 
; 131  : 	if(strcmp(text, ExConfig.Command.CommandPost))

  0077c	68 e0 02 00 00	 push	 OFFSET ?ExConfig@@3VcExConfigs@@A+736
  00781	8b 45 0c	 mov	 eax, DWORD PTR _text$[ebp]
  00784	50		 push	 eax
  00785	e8 00 00 00 00	 call	 _strcmp
  0078a	83 c4 08	 add	 esp, 8
  0078d	85 c0		 test	 eax, eax
  0078f	74 10		 je	 SHORT $LN9@CheckSynta

; 132  : 	{
; 133  : 		if(text[0] == '/')

  00791	8b 45 0c	 mov	 eax, DWORD PTR _text$[ebp]
  00794	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00797	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  0079a	75 05		 jne	 SHORT $LN9@CheckSynta

; 134  : 		{
; 135  : 			return;

  0079c	e9 1f 01 00 00	 jmp	 $LN11@CheckSynta
$LN9@CheckSynta:

; 136  : 		}
; 137  : 	}
; 138  : 
; 139  : 	for(int n = 0; n < this->m_FilterInfo.size(); n++)

  007a1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$228388[ebp], 0
  007a8	eb 09		 jmp	 SHORT $LN7@CheckSynta
$LN6@CheckSynta:
  007aa	8b 45 f8	 mov	 eax, DWORD PTR _n$228388[ebp]
  007ad	83 c0 01	 add	 eax, 1
  007b0	89 45 f8	 mov	 DWORD PTR _n$228388[ebp], eax
$LN7@CheckSynta:
  007b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007b6	83 c1 08	 add	 ecx, 8
  007b9	e8 00 00 00 00	 call	 ?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::size
  007be	39 45 f8	 cmp	 DWORD PTR _n$228388[ebp], eax
  007c1	0f 83 f9 00 00
	00		 jae	 $LN11@CheckSynta

; 140  : 	{
; 141  : 		char* temp = text;

  007c7	8b 45 0c	 mov	 eax, DWORD PTR _text$[ebp]
  007ca	89 45 f4	 mov	 DWORD PTR _temp$228392[ebp], eax
$LN4@CheckSynta:

; 142  : 
; 143  : 		while(true)

  007cd	b8 01 00 00 00	 mov	 eax, 1
  007d2	85 c0		 test	 eax, eax
  007d4	0f 84 e1 00 00
	00		 je	 $LN3@CheckSynta

; 144  : 		{
; 145  : 			temp = strstr(temp, this->m_FilterInfo[n].label);

  007da	8b 45 f8	 mov	 eax, DWORD PTR _n$228388[ebp]
  007dd	50		 push	 eax
  007de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007e1	83 c1 08	 add	 ecx, 8
  007e4	e8 00 00 00 00	 call	 ??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::operator[]
  007e9	50		 push	 eax
  007ea	8b 4d f4	 mov	 ecx, DWORD PTR _temp$228392[ebp]
  007ed	51		 push	 ecx
  007ee	e8 00 00 00 00	 call	 ?strstr@@YAPADPADPBD@Z	; strstr
  007f3	83 c4 08	 add	 esp, 8
  007f6	89 45 f4	 mov	 DWORD PTR _temp$228392[ebp], eax

; 146  : 
; 147  : 			if(temp == 0)

  007f9	83 7d f4 00	 cmp	 DWORD PTR _temp$228392[ebp], 0
  007fd	75 05		 jne	 SHORT $LN2@CheckSynta

; 148  : 			{
; 149  : 				break;

  007ff	e9 b7 00 00 00	 jmp	 $LN3@CheckSynta
$LN2@CheckSynta:

; 150  : 			}
; 151  : 
; 152  : 			int len = strlen(this->m_FilterInfo[n].label);

  00804	8b 45 f8	 mov	 eax, DWORD PTR _n$228388[ebp]
  00807	50		 push	 eax
  00808	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0080b	83 c1 08	 add	 ecx, 8
  0080e	e8 00 00 00 00	 call	 ??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::operator[]
  00813	50		 push	 eax
  00814	e8 00 00 00 00	 call	 _strlen
  00819	83 c4 04	 add	 esp, 4
  0081c	89 45 f0	 mov	 DWORD PTR _len$228397[ebp], eax

; 153  : 
; 154  : 			memset(temp, 0x2A, len);

  0081f	8b 45 f0	 mov	 eax, DWORD PTR _len$228397[ebp]
  00822	50		 push	 eax
  00823	6a 2a		 push	 42			; 0000002aH
  00825	8b 4d f4	 mov	 ecx, DWORD PTR _temp$228392[ebp]
  00828	51		 push	 ecx
  00829	e8 00 00 00 00	 call	 _memset
  0082e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 155  : 
; 156  : 			temp += len;

  00831	8b 45 f4	 mov	 eax, DWORD PTR _temp$228392[ebp]
  00834	03 45 f0	 add	 eax, DWORD PTR _len$228397[ebp]
  00837	89 45 f4	 mov	 DWORD PTR _temp$228392[ebp], eax

; 157  : 
; 158  : 			if(len > 0)

  0083a	83 7d f0 00	 cmp	 DWORD PTR _len$228397[ebp], 0
  0083e	7e 76		 jle	 SHORT $LN1@CheckSynta

; 159  : 			{
; 160  : 				LPOBJ lpUser = &gObj[aIndex];

  00840	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00843	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00849	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0084f	89 45 ec	 mov	 DWORD PTR _lpUser$228399[ebp], eax

; 161  : 
; 162  : 				lpUser->BanPost = time(NULL) + ( this->m_iChatBanMin * 60 );

  00852	6a 00		 push	 0
  00854	e8 00 00 00 00	 call	 _time
  00859	83 c4 04	 add	 esp, 4
  0085c	8b c8		 mov	 ecx, eax
  0085e	8b f2		 mov	 esi, edx
  00860	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00863	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00866	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00869	99		 cdq
  0086a	03 c8		 add	 ecx, eax
  0086c	13 f2		 adc	 esi, edx
  0086e	8b 45 ec	 mov	 eax, DWORD PTR _lpUser$228399[ebp]
  00871	89 88 b8 27 00
	00		 mov	 DWORD PTR [eax+10168], ecx

; 163  : 				lpUser->BanChat = time(NULL) + ( this->m_iChatBanMin * 60 );

  00877	6a 00		 push	 0
  00879	e8 00 00 00 00	 call	 _time
  0087e	83 c4 04	 add	 esp, 4
  00881	8b c8		 mov	 ecx, eax
  00883	8b f2		 mov	 esi, edx
  00885	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00888	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0088b	6b c0 3c	 imul	 eax, 60			; 0000003cH
  0088e	99		 cdq
  0088f	03 c8		 add	 ecx, eax
  00891	13 f2		 adc	 esi, edx
  00893	8b 45 ec	 mov	 eax, DWORD PTR _lpUser$228399[ebp]
  00896	89 88 b4 27 00
	00		 mov	 DWORD PTR [eax+10164], ecx

; 164  : 
; 165  : 				MsgOutput(aIndex, "[Chat Filter] ban %d min", this->m_iChatBanMin);

  0089c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0089f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  008a2	51		 push	 ecx
  008a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PEPPEGN@?$FLChat?5Filter?$FN?5ban?5?$CFd?5min?$AA@
  008a8	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  008ab	52		 push	 edx
  008ac	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  008b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 166  : 
; 167  : 				return;

  008b4	eb 0a		 jmp	 SHORT $LN11@CheckSynta
$LN1@CheckSynta:

; 168  : 			}
; 169  : 		}

  008b6	e9 12 ff ff ff	 jmp	 $LN4@CheckSynta
$LN3@CheckSynta:

; 170  : 	}

  008bb	e9 ea fe ff ff	 jmp	 $LN6@CheckSynta
$LN11@CheckSynta:

; 171  : }

  008c0	5f		 pop	 edi
  008c1	5e		 pop	 esi
  008c2	5b		 pop	 ebx
  008c3	8b e5		 mov	 esp, ebp
  008c5	5d		 pop	 ebp
  008c6	c2 08 00	 ret	 8
?CheckSyntax@CChatFilter@@QAEXHPAD@Z ENDP		; CChatFilter::CheckSyntax
_TEXT	ENDS
EXTRN	_strstr:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\string.h
;	COMDAT ?strstr@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?strstr@@YAPADPADPBD@Z PROC				; strstr, COMDAT

; 221  : 	{ return (char*)strstr((const char*)_Str, _SubStr); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __SubStr$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Str$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _strstr
  00016	83 c4 08	 add	 esp, 8
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?strstr@@YAPADPADPBD@Z ENDP				; strstr
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 132  : {

  008d0	55		 push	 ebp
  008d1	8b ec		 mov	 ebp, esp
  008d3	83 ec 40	 sub	 esp, 64			; 00000040H
  008d6	53		 push	 ebx
  008d7	56		 push	 esi
  008d8	57		 push	 edi

; 133  :     return _time64(_Time);

  008d9	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  008dc	50		 push	 eax
  008dd	e8 00 00 00 00	 call	 __time64
  008e2	83 c4 04	 add	 esp, 4

; 134  : }

  008e5	5f		 pop	 edi
  008e6	5e		 pop	 esi
  008e7	5b		 pop	 ebx
  008e8	8b e5		 mov	 esp, ebp
  008ea	5d		 pop	 ebp
  008eb	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@V?$allocator@UFILTER_INFO@@@1@@Z ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
PUBLIC	??0?$allocator@UFILTER_INFO@@@std@@QAE@XZ	; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T229419 = -72						; size = 4
_this$ = -4						; size = 4
??0?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::vector<FILTER_INFO,std::allocator<FILTER_INFO> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	51		 push	 ecx
  0000d	8b cc		 mov	 ecx, esp
  0000f	89 65 b8	 mov	 DWORD PTR $T229419[ebp], esp
  00012	e8 00 00 00 00	 call	 ??0?$allocator@UFILTER_INFO@@@std@@QAE@XZ ; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@V?$allocator@UFILTER_INFO@@@1@@Z ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >

; 508  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::vector<FILTER_INFO,std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::~_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
PUBLIC	?_Tidy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::~vector<FILTER_INFO,std::allocator<FILTER_INFO> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Tidy

; 706  : 		}

  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::~_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::~_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
__ehhandler$??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::~vector<FILTER_INFO,std::allocator<FILTER_INFO> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 06	 sar	 eax, 6

; 880  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::size
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0000f	c1 e0 06	 shl	 eax, 6
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEAAUFILTER_INFO@@I@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO const &>
PUBLIC	??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO &>
PUBLIC	?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve
PUBLIC	?_Inside@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBE_NPBUFILTER_INFO@@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Inside
PUBLIC	??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z ; std::addressof<FILTER_INFO const >
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXABUFILTER_INFO@@@Z
_TEXT	SEGMENT
__Idx$228424 = -8					; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXABUFILTER_INFO@@@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z ; std::addressof<FILTER_INFO const >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Inside@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBE_NPBUFILTER_INFO@@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Inside
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 78		 je	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z ; std::addressof<FILTER_INFO const >
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	2b 01		 sub	 eax, DWORD PTR [ecx]
  00039	c1 f8 06	 sar	 eax, 6
  0003c	89 45 f8	 mov	 DWORD PTR __Idx$228424[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00048	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004b	75 0a		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	51		 push	 ecx
  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00064	50		 push	 eax
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0006d	8b 45 f8	 mov	 eax, DWORD PTR __Idx$228424[ebp]
  00070	c1 e0 06	 shl	 eax, 6
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	03 01		 add	 eax, DWORD PTR [ecx]
  00078	50		 push	 eax
  00079	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007f	50		 push	 eax
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO &>
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00095	83 c1 40	 add	 ecx, 64			; 00000040H
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 987  : 			}
; 988  : 		else

  0009e	eb 57		 jmp	 SHORT $LN5@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a9	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000ac	75 0a		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  000ae	6a 01		 push	 1
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	51		 push	 ecx
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c5	50		 push	 eax
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  000ce	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d8	52		 push	 edx
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	83 c0 0c	 add	 eax, 12			; 0000000cH
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO const &>
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	83 c1 40	 add	 ecx, 64			; 00000040H
  000f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f4	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@push_back:

; 997  : 			}
; 998  : 		}

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?push_back@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXABUFILTER_INFO@@@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::erase
PUBLIC	?begin@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::begin
PUBLIC	?end@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::end
; Function compile flags: /Odtp /ZI
;	COMDAT ?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T229438 = -88						; size = 4
$T229439 = -84						; size = 4
$T229440 = -80						; size = 4
$T229441 = -76						; size = 4
$T229442 = -72						; size = 4
_this$ = -4						; size = 4
?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T229439[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?end@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::end
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d a8	 mov	 DWORD PTR $T229438[ebp], ecx
  0001d	8d 55 b4	 lea	 edx, DWORD PTR $T229441[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?begin@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::begin
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 b0	 mov	 DWORD PTR $T229440[ebp], eax
  0002e	8b 4d a8	 mov	 ecx, DWORD PTR $T229438[ebp]
  00031	51		 push	 ecx
  00032	8b 55 b0	 mov	 edx, DWORD PTR $T229440[ebp]
  00035	52		 push	 edx
  00036	8d 45 b8	 lea	 eax, DWORD PTR $T229442[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::erase

; 1219 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : 		return (iterator(this->_Myfirst, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	52		 push	 edx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		return (iterator(this->_Mylast, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?end@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@XZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Destroy
PUBLIC	??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00@Z ; std::_Move<FILTER_INFO *,FILTER_INFO *>
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator!=
PUBLIC	?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Make_iter
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T229449 = -84						; size = 4
__Ptr$228615 = -16					; size = 4
__Last$ = -12						; size = 4
__First$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@0@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Make_iter

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001f	50		 push	 eax
  00020	8d 4d f4	 lea	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Make_iter

; 1193 : 
; 1194 : 		if (_First != _Last)

  0002c	8d 45 f4	 lea	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR __First$[ebp]
  00033	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator!=
  00038	0f b6 c8	 movzx	 ecx, al
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 36		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0003f	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00@Z ; std::_Move<FILTER_INFO *,FILTER_INFO *>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$228615[ebp], eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$228615[ebp]
  00063	52		 push	 edx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$228615[ebp]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00075	8b 45 f8	 mov	 eax, DWORD PTR __First$[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T229449[ebp], eax
  0007b	8b 4d ac	 mov	 ecx, DWORD PTR $T229449[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Make_iter
  0008b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@0@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBE_NPBUFILTER_INFO@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBE_NPBUFILTER_INFO@@@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00012	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00015	73 13		 jae	 SHORT $LN3@Inside
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  0001f	77 09		 ja	 SHORT $LN3@Inside
  00021	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0002a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@Inside:
  00031	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1287 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Inside@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBE_NPBUFILTER_INFO@@@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve
PUBLIC	?_Grow_to@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEII@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Grow_to
PUBLIC	?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::capacity
PUBLIC	?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Xlen
PUBLIC	?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::size
  00014	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::max_size
  0001f	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  00022	3b 45 f8	 cmp	 eax, DWORD PTR __Size$[ebp]
  00025	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Xlen
  0002f	eb 2d		 jmp	 SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00031	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  00034	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR __Size$[ebp], eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::capacity
  00042	39 45 f8	 cmp	 DWORD PTR __Size$[ebp], eax
  00045	77 02		 ja	 SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

  00047	eb 15		 jmp	 SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Size$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEII@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Grow_to
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve
$LN6@Reserve:

; 1298 : 		}

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXI@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z ; std::allocator<FILTER_INFO>::deallocate
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 3d		 je	 SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	52		 push	 edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z ; std::allocator<FILTER_INFO>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 : 		this->_Mylast = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1311 : 		this->_Myend = 0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1312 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Tidy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1453 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1454 : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXPAUFILTER_INFO@@0@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@UFILTER_INFO@@@std@@QAE@ABV01@@Z	; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@V?$allocator@UFILTER_INFO@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@V?$allocator@UFILTER_INFO@@@1@@Z PROC ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e8 00 00 00 00	 call	 ??0?$allocator@UFILTER_INFO@@@std@@QAE@ABV01@@Z ; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>

; 427  : 		_Myfirst = 0;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 428  : 		_Mylast = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 429  : 		_Myend = 0;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 430  : 		}

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@V?$allocator@UFILTER_INFO@@@1@@Z ENDP ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::~_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >, COMDAT
; _this$ = ecx

; 433  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >::~_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UFILTER_INFO@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UFILTER_INFO@@@std@@QAE@XZ PROC		; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UFILTER_INFO@@@std@@QAE@XZ ENDP		; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUFILTER_INFO@@@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEPAUFILTER_INFO@@PAU2@00@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Umove<FILTER_INFO *>
PUBLIC	?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z ; std::allocator<FILTER_INFO>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$228657 = -28					; size = 4
__Ptr$228650 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::max_size
  00037	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003a	73 0d		 jae	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Xlen
  00044	e9 eb 00 00 00	 jmp	 $LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::capacity
  00051	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00054	0f 83 da 00 00
	00		 jae	 $LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z ; std::allocator<FILTER_INFO>::allocate
  00069	89 45 e8	 mov	 DWORD PTR __Ptr$228650[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00073	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$228650[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Umove@PAUFILTER_INFO@@@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEPAUFILTER_INFO@@PAU2@00@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Umove<FILTER_INFO *>
  0008c	eb 29		 jmp	 SHORT $LN8@reserve
__catch$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00091	50		 push	 eax
  00092	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228650[ebp]
  00095	51		 push	 ecx
  00096	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z ; std::allocator<FILTER_INFO>::deallocate

; 757  : 			_RERAISE;

  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 758  : 			_CATCH_END

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b1	b8 00 00 00 00	 mov	 eax, __tryend$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$1
  000b6	c3		 ret	 0
$LN8@reserve:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::size
  000c6	89 45 e4	 mov	 DWORD PTR __Size$228657[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

  000c9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cf	74 35		 je	 SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	51		 push	 ecx
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	50		 push	 eax
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ef	2b 11		 sub	 edx, DWORD PTR [ecx]
  000f1	c1 fa 06	 sar	 edx, 6
  000f4	52		 push	 edx
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	51		 push	 ecx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00101	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z ; std::allocator<FILTER_INFO>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 769  : 			this->_Myend = _Ptr + _Count;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00111	c1 e0 06	 shl	 eax, 6
  00114	03 45 e8	 add	 eax, DWORD PTR __Ptr$228650[ebp]
  00117	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR __Size$228657[ebp]
  00120	c1 e0 06	 shl	 eax, 6
  00123	03 45 e8	 add	 eax, DWORD PTR __Ptr$228650[ebp]
  00126	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  0012c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$228650[ebp]
  00132	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QAEXI@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::reserve
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	2b 01		 sub	 eax, DWORD PTR [ecx]
  00017	c1 f8 06	 sar	 eax, 6

; 778  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::capacity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		return (iterator(_Where._Ptr, this));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Make_iter@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@2@@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UFILTER_INFO@@@std@@QBEIXZ ; std::allocator<FILTER_INFO>::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator@UFILTER_INFO@@@std@@QBEIXZ ; std::allocator<FILTER_INFO>::max_size

; 885  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@@Z ; std::_Destroy_range<std::allocator<FILTER_INFO> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@@Z ; std::_Destroy_range<std::allocator<FILTER_INFO> >
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?_Destroy@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEXPAUFILTER_INFO@@0@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Destroy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEII@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@QBEIXZ ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	3b 45 f8	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00029	73 09		 jae	 SHORT $LN4@Grow_to
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00032	eb 0b		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00034	8b 55 f8	 mov	 edx, DWORD PTR __Capacity$[ebp]
  00037	d1 ea		 shr	 edx, 1
  00039	03 55 f8	 add	 edx, DWORD PTR __Capacity$[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  00042	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

  00045	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 06		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEII@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1428 : 		}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Xlen@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IBEXXZ ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Xlen
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UFILTER_INFO@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UFILTER_INFO@@@std@@QAE@ABV01@@Z PROC	; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$allocator@UFILTER_INFO@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<FILTER_INFO>::allocator<FILTER_INFO>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z PROC ; std::allocator<FILTER_INFO>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4

; 183  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?deallocate@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@I@Z ENDP ; std::allocator<FILTER_INFO>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >

; 305  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator==
  00018	0f b6 c0	 movzx	 eax, al
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	83 c0 01	 add	 eax, 1

; 209  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Allocate@UFILTER_INFO@@@std@@YAPAUFILTER_INFO@@IPAU1@@Z ; std::_Allocate<FILTER_INFO>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z PROC ; std::allocator<FILTER_INFO>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Allocate@UFILTER_INFO@@@std@@YAPAUFILTER_INFO@@IPAU1@@Z ; std::_Allocate<FILTER_INFO>
  00017	83 c4 08	 add	 esp, 8

; 188  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?allocate@?$allocator@UFILTER_INFO@@@std@@QAEPAUFILTER_INFO@@I@Z ENDP ; std::allocator<FILTER_INFO>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UFILTER_INFO@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@UFILTER_INFO@@@std@@QBEIXZ PROC	; std::allocator<FILTER_INFO>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0000c	c7 45 f8 ff ff
	ff 03		 mov	 DWORD PTR __Count$[ebp], 67108863 ; 03ffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

  00013	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	76 08		 jbe	 SHORT $LN3@max_size
  00019	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001f	eb 07		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00021	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size:
  00028	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?max_size@?$allocator@UFILTER_INFO@@@std@@QBEIXZ ENDP	; std::allocator<FILTER_INFO>::max_size
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 47   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QAE@PAUFILTER_INFO@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	33 c0		 xor	 eax, eax
  00022	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00024	0f 94 c0	 sete	 al

; 204  : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Compat, COMDAT
; _this$ = ecx

; 252  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<FILTER_INFO,std::allocator<FILTER_INFO> > >::_Compat
_TEXT	ENDS
EXTRN	_strcpy_s:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\string.h
;	COMDAT ??$strcpy_s@$0EA@@@YAHAAY0EA@DPBD@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Source$ = 12						; size = 4
??$strcpy_s@$0EA@@@YAHAAY0EA@DPBD@Z PROC		; strcpy_s<64>, COMDAT

; 104  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(errno_t, strcpy_s, _Deref_post_z_ char, _Dest, _In_z_ const char *, _Source)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Source$[ebp]
  0000c	50		 push	 eax
  0000d	6a 40		 push	 64			; 00000040H
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _strcpy_s
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$strcpy_s@$0EA@@@YAHAAY0EA@DPBD@Z ENDP		; strcpy_s<64>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z PROC ; std::addressof<FILTER_INFO const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	return ((_Ty *) &(char&)_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBUFILTER_INFO@@@std@@YAPBUFILTER_INFO@@ABU1@@Z ENDP ; std::addressof<FILTER_INFO const >
_TEXT	ENDS
PUBLIC	??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z ; std::allocator<FILTER_INFO>::construct<FILTER_INFO &>
PUBLIC	??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z ; std::forward<FILTER_INFO &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z ; std::forward<FILTER_INFO &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z ; std::allocator<FILTER_INFO>::construct<FILTER_INFO &>

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@AAU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@ABU3@@Z ; std::allocator<FILTER_INFO>::construct
PUBLIC	??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z ; std::forward<FILTER_INFO const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z ; std::forward<FILTER_INFO const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@ABU3@@Z ; std::allocator<FILTER_INFO>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@ABU3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<FILTER_INFO *,FILTER_INFO *>
PUBLIC	??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z ; std::_Ptr_cat<FILTER_INFO,FILTER_INFO>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00@Z
_TEXT	SEGMENT
$T229526 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00@Z PROC ; std::_Move<FILTER_INFO *,FILTER_INFO *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z ; std::_Ptr_cat<FILTER_INFO,FILTER_INFO>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229526[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229526[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<FILTER_INFO *,FILTER_INFO *>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00@Z ENDP ; std::_Move<FILTER_INFO *,FILTER_INFO *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@@Z ; std::_Uninitialized_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUFILTER_INFO@@@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEPAUFILTER_INFO@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUFILTER_INFO@@@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEPAUFILTER_INFO@@PAU2@00@Z PROC ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Umove<FILTER_INFO *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@@Z ; std::_Uninitialized_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUFILTER_INFO@@@?$vector@UFILTER_INFO@@V?$allocator@UFILTER_INFO@@@std@@@std@@IAEPAUFILTER_INFO@@PAU2@00@Z ENDP ; std::vector<FILTER_INFO,std::allocator<FILTER_INFO> >::_Umove<FILTER_INFO *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<FILTER_INFO> >
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@@Z
_TEXT	SEGMENT
$T229531 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@@Z PROC ; std::_Destroy_range<std::allocator<FILTER_INFO> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z ; std::_Ptr_cat<FILTER_INFO,FILTER_INFO>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229531[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229531[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<FILTER_INFO> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@UFILTER_INFO@@@std@@YAPAUFILTER_INFO@@IPAU1@@Z
_TEXT	SEGMENT
$T229534 = -80						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UFILTER_INFO@@@std@@YAPAUFILTER_INFO@@IPAU1@@Z PROC ; std::_Allocate<FILTER_INFO>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   : 	void *_Ptr = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00010	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00014	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  00016	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0001d	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001f	81 7d 08 ff ff
	ff 03		 cmp	 DWORD PTR __Count$[ebp], 67108863 ; 03ffffffH
  00026	77 18		 ja	 SHORT $LN1@Allocate
  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002b	c1 e0 06	 shl	 eax, 6
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00040	6a 00		 push	 0
  00042	8d 4d b0	 lea	 ecx, DWORD PTR $T229534[ebp]
  00045	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004f	8d 45 b0	 lea	 eax, DWORD PTR $T229534[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00058	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@UFILTER_INFO@@@std@@YAPAUFILTER_INFO@@IPAU1@@Z ENDP ; std::_Allocate<FILTER_INFO>
_TEXT	ENDS
PUBLIC	??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z ; std::_Construct<FILTER_INFO,FILTER_INFO const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@ABU3@@Z PROC ; std::allocator<FILTER_INFO>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z ; std::_Construct<FILTER_INFO,FILTER_INFO const &>
  00019	83 c4 08	 add	 esp, 8

; 198  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@ABU3@@Z ENDP ; std::allocator<FILTER_INFO>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z PROC ; std::forward<FILTER_INFO &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z ENDP ; std::forward<FILTER_INFO &>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229541 = -88						; size = 4
$T229542 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z PROC ; std::allocator<FILTER_INFO>::construct<FILTER_INFO &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 40		 push	 64			; 00000040H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T229542[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T229542[ebp], 0
  00047	74 20		 je	 SHORT $LN3@construct
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@AAUFILTER_INFO@@@std@@YAAAUFILTER_INFO@@AAU1@@Z ; std::forward<FILTER_INFO &>
  00052	83 c4 04	 add	 esp, 4
  00055	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0005a	8b f0		 mov	 esi, eax
  0005c	8b 7d ac	 mov	 edi, DWORD PTR $T229542[ebp]
  0005f	f3 a5		 rep movsd
  00061	8b 55 ac	 mov	 edx, DWORD PTR $T229542[ebp]
  00064	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00067	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00069	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  00070	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00073	89 45 a8	 mov	 DWORD PTR $T229541[ebp], eax
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229542[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUFILTER_INFO@@@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@AAU2@@Z ENDP ; std::allocator<FILTER_INFO>::construct<FILTER_INFO &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z PROC ; std::forward<FILTER_INFO const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z ENDP ; std::forward<FILTER_INFO const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z PROC ; std::_Ptr_cat<FILTER_INFO,FILTER_INFO>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00009	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z ENDP ; std::_Ptr_cat<FILTER_INFO,FILTER_INFO>
_TEXT	ENDS
PUBLIC	??$move@AAUFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ; std::move<FILTER_INFO &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<FILTER_INFO *,FILTER_INFO *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00009	eb 12		 jmp	 SHORT $LN3@Move
$LN2@Move:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 40	 add	 eax, 64			; 00000040H
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 40	 add	 ecx, 64			; 00000040H
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN3@Move:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 1a		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAUFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ; std::move<FILTER_INFO &>
  0002e	83 c4 04	 add	 esp, 4
  00031	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00036	8b f0		 mov	 esi, eax
  00038	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0003b	f3 a5		 rep movsd
  0003d	eb cc		 jmp	 SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

  0003f	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Move@PAUFILTER_INFO@@PAU1@@std@@YAPAUFILTER_INFO@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<FILTER_INFO *,FILTER_INFO *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>
PUBLIC	??$_Val_type@PAUFILTER_INFO@@@std@@YAPAUFILTER_INFO@@PAU1@@Z ; std::_Val_type<FILTER_INFO *>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@@Z
_TEXT	SEGMENT
$T229564 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@@Z PROC ; std::_Uninitialized_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Ptr_cat@UFILTER_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFILTER_INFO@@0@Z ; std::_Ptr_cat<FILTER_INFO,FILTER_INFO>
  00016	83 c4 08	 add	 esp, 8
  00019	88 45 bf	 mov	 BYTE PTR $T229564[ebp], al
  0001c	0f b6 55 bf	 movzx	 edx, BYTE PTR $T229564[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Val_type@PAUFILTER_INFO@@@std@@YAPAUFILTER_INFO@@PAU1@@Z ; std::_Val_type<FILTER_INFO *>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Uninitialized_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@@Z ENDP ; std::_Uninitialized_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z ; std::_Dest_val<std::allocator<FILTER_INFO>,FILTER_INFO>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<FILTER_INFO> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	for (; _First != _Last; ++_First)

  00009	eb 09		 jmp	 SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	83 c0 40	 add	 eax, 64			; 00000040H
  00011	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001a	74 12		 je	 SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

  0001c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z ; std::_Dest_val<std::allocator<FILTER_INFO>,FILTER_INFO>
  00029	83 c4 08	 add	 esp, 8
  0002c	eb dd		 jmp	 SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_range@V?$allocator@UFILTER_INFO@@@std@@@std@@YAXPAUFILTER_INFO@@0AAV?$allocator@UFILTER_INFO@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<FILTER_INFO> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229569 = -88						; size = 4
$T229570 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z PROC ; std::_Construct<FILTER_INFO,FILTER_INFO const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00031	50		 push	 eax
  00032	6a 40		 push	 64			; 00000040H
  00034	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 ac	 mov	 DWORD PTR $T229570[ebp], eax
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	83 7d ac 00	 cmp	 DWORD PTR $T229570[ebp], 0
  0004a	74 20		 je	 SHORT $LN3@Construct
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUFILTER_INFO@@@std@@YAABUFILTER_INFO@@ABU1@@Z ; std::forward<FILTER_INFO const &>
  00055	83 c4 04	 add	 esp, 4
  00058	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0005d	8b f0		 mov	 esi, eax
  0005f	8b 7d ac	 mov	 edi, DWORD PTR $T229570[ebp]
  00062	f3 a5		 rep movsd
  00064	8b 55 ac	 mov	 edx, DWORD PTR $T229570[ebp]
  00067	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  0006a	eb 07		 jmp	 SHORT $LN4@Construct
$LN3@Construct:
  0006c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@Construct:
  00073	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00076	89 45 a8	 mov	 DWORD PTR $T229569[ebp], eax
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229570[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UFILTER_INFO@@ABU1@@std@@YAXPAUFILTER_INFO@@ABU1@@Z ENDP ; std::_Construct<FILTER_INFO,FILTER_INFO const &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z PROC ; std::move<FILTER_INFO &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAUFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ENDP ; std::move<FILTER_INFO &>
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUFILTER_INFO@@@std@@YAPAUFILTER_INFO@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUFILTER_INFO@@@std@@YAPAUFILTER_INFO@@PAU1@@Z PROC ; std::_Val_type<FILTER_INFO *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 790  : 	return (0);

  00009	33 c0		 xor	 eax, eax

; 791  : 	}

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Val_type@PAUFILTER_INFO@@@std@@YAPAUFILTER_INFO@@PAU1@@Z ENDP ; std::_Val_type<FILTER_INFO *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO>
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	eb 12		 jmp	 SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0003b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003e	83 c0 40	 add	 eax, 64			; 00000040H
  00041	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00047	83 c1 40	 add	 ecx, 64			; 00000040H
  0004a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00053	74 16		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00055	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	eb d0		 jmp	 SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
  0006b	eb 3b		 jmp	 SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

  0006d	eb 09		 jmp	 SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00072	83 c0 40	 add	 eax, 64			; 00000040H
  00075	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
  00078	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  0007b	3b 45 10	 cmp	 eax, DWORD PTR __Dest$[ebp]
  0007e	74 12		 je	 SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

  00080	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z ; std::_Dest_val<std::allocator<FILTER_INFO>,FILTER_INFO>
  0008d	83 c4 08	 add	 esp, 8
  00090	eb dd		 jmp	 SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  : 	_CATCH_END

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, __tryend$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
  000a7	c3		 ret	 0
$LN10@Uninit_mov:
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUFILTER_INFO@@PAU1@V?$allocator@UFILTER_INFO@@@std@@U1@@std@@YAPAUFILTER_INFO@@PAU1@00AAV?$allocator@UFILTER_INFO@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<FILTER_INFO *,FILTER_INFO *,std::allocator<FILTER_INFO>,FILTER_INFO>
PUBLIC	?destroy@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@@Z ; std::allocator<FILTER_INFO>::destroy
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z PROC ; std::_Dest_val<std::allocator<FILTER_INFO>,FILTER_INFO>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 287  : 	_Alval.destroy(_Pdest);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00010	e8 00 00 00 00	 call	 ?destroy@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@@Z ; std::allocator<FILTER_INFO>::destroy

; 288  : 	}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Dest_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@@Z ENDP ; std::_Dest_val<std::allocator<FILTER_INFO>,FILTER_INFO>
_TEXT	ENDS
PUBLIC	??$_Destroy@UFILTER_INFO@@@std@@YAXPAUFILTER_INFO@@@Z ; std::_Destroy<FILTER_INFO>
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@@Z PROC ; std::allocator<FILTER_INFO>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Destroy@UFILTER_INFO@@@std@@YAXPAUFILTER_INFO@@@Z ; std::_Destroy<FILTER_INFO>
  00015	83 c4 04	 add	 esp, 4

; 214  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?destroy@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@@Z ENDP ; std::allocator<FILTER_INFO>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z ; std::allocator<FILTER_INFO>::construct
PUBLIC	??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ; std::forward<FILTER_INFO>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ; std::forward<FILTER_INFO>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  0001d	e8 00 00 00 00	 call	 ?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z ; std::allocator<FILTER_INFO>::construct

; 281  : 	}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Cons_val@V?$allocator@UFILTER_INFO@@@std@@UFILTER_INFO@@U3@@std@@YAXAAV?$allocator@UFILTER_INFO@@@0@PAUFILTER_INFO@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<FILTER_INFO>,FILTER_INFO,FILTER_INFO>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@UFILTER_INFO@@@std@@YAXPAUFILTER_INFO@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UFILTER_INFO@@@std@@YAXPAUFILTER_INFO@@@Z PROC ; std::_Destroy<FILTER_INFO>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@UFILTER_INFO@@@std@@YAXPAUFILTER_INFO@@@Z ENDP ; std::_Destroy<FILTER_INFO>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T229609 = -88						; size = 4
$T229610 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z PROC ; std::allocator<FILTER_INFO>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	50		 push	 eax
  0002f	6a 40		 push	 64			; 00000040H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 ac	 mov	 DWORD PTR $T229610[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	83 7d ac 00	 cmp	 DWORD PTR $T229610[ebp], 0
  00047	74 20		 je	 SHORT $LN3@construct@2
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ; std::forward<FILTER_INFO>
  00052	83 c4 04	 add	 esp, 4
  00055	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0005a	8b f0		 mov	 esi, eax
  0005c	8b 7d ac	 mov	 edi, DWORD PTR $T229610[ebp]
  0005f	f3 a5		 rep movsd
  00061	8b 55 ac	 mov	 edx, DWORD PTR $T229610[ebp]
  00064	89 55 a4	 mov	 DWORD PTR tv74[ebp], edx
  00067	eb 07		 jmp	 SHORT $LN4@construct@2
$LN3@construct@2:
  00069	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct@2:
  00070	8b 45 a4	 mov	 eax, DWORD PTR tv74[ebp]
  00073	89 45 a8	 mov	 DWORD PTR $T229609[ebp], eax
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ac	 mov	 ecx, DWORD PTR $T229610[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UFILTER_INFO@@@std@@QAEXPAUFILTER_INFO@@$$QAU3@@Z ENDP ; std::allocator<FILTER_INFO>::construct
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z PROC ; std::forward<FILTER_INFO>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	return ((_Ty&&)_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@UFILTER_INFO@@@std@@YA$$QAUFILTER_INFO@@AAU1@@Z ENDP ; std::forward<FILTER_INFO>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 37   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 48   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\chatfilter.cpp
;	COMDAT ??__Eg_ChatFilter@@YAXXZ
text$yc	SEGMENT
??__Eg_ChatFilter@@YAXXZ PROC				; `dynamic initializer for 'g_ChatFilter'', COMDAT

; 11   : CChatFilter g_ChatFilter;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChatFilter@@3VCChatFilter@@A ; g_ChatFilter
  0000e	e8 00 00 00 00	 call	 ??0CChatFilter@@QAE@XZ	; CChatFilter::CChatFilter
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_ChatFilter@@YAXXZ ; `dynamic atexit destructor for 'g_ChatFilter''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_ChatFilter@@YAXXZ ENDP				; `dynamic initializer for 'g_ChatFilter''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_ChatFilter@@YAXXZ
text$yd	SEGMENT
??__Fg_ChatFilter@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ChatFilter'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChatFilter@@3VCChatFilter@@A ; g_ChatFilter
  0000e	e8 00 00 00 00	 call	 ??1CChatFilter@@QAE@XZ	; CChatFilter::~CChatFilter
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_ChatFilter@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ChatFilter''
text$yd	ENDS
PUBLIC	?g_ChatFilter@@3VCChatFilter@@A			; g_ChatFilter
_BSS	SEGMENT
?g_ChatFilter@@3VCChatFilter@@A DB 01cH DUP (?)		; g_ChatFilter
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ChatFilter$initializer$ DD FLAT:??__Eg_ChatFilter@@YAXXZ
CRT$XCU	ENDS
END
