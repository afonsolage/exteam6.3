; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\NewMasterLevelSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bIsSpeedServer@@3HA				; g_bIsSpeedServer
PUBLIC	?g_MLBattleZoneAddExp@@3HA			; g_MLBattleZoneAddExp
_BSS	SEGMENT
?g_bIsSpeedServer@@3HA DD 01H DUP (?)			; g_bIsSpeedServer
?g_MLBattleZoneAddExp@@3HA DD 01H DUP (?)		; g_MLBattleZoneAddExp
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CMasterLevelSystem@@6B@			; CMasterLevelSystem::`vftable'
PUBLIC	??0CMasterLevelSystem@@QAE@XZ			; CMasterLevelSystem::CMasterLevelSystem
PUBLIC	??_R4CMasterLevelSystem@@6B@			; CMasterLevelSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMasterLevelSystem@@@8			; CMasterLevelSystem `RTTI Type Descriptor'
PUBLIC	??_R3CMasterLevelSystem@@8			; CMasterLevelSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMasterLevelSystem@@8			; CMasterLevelSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMasterLevelSystem@@8		; CMasterLevelSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMasterLevelSystem@@UAEPAXI@Z:PROC		; CMasterLevelSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMasterLevelSystem@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\newmasterlevelsystem.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMasterLevelSystem@@8 DD FLAT:??_R0?AVCMasterLevelSystem@@@8 ; CMasterLevelSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMasterLevelSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CMasterLevelSystem@@8
rdata$r	SEGMENT
??_R2CMasterLevelSystem@@8 DD FLAT:??_R1A@?0A@EA@CMasterLevelSystem@@8 ; CMasterLevelSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMasterLevelSystem@@8
rdata$r	SEGMENT
??_R3CMasterLevelSystem@@8 DD 00H			; CMasterLevelSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMasterLevelSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMasterLevelSystem@@@8
_DATA	SEGMENT
??_R0?AVCMasterLevelSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CMasterLevelSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMasterLevelSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMasterLevelSystem@@6B@
rdata$r	SEGMENT
??_R4CMasterLevelSystem@@6B@ DD 00H			; CMasterLevelSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMasterLevelSystem@@@8
	DD	FLAT:??_R3CMasterLevelSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CMasterLevelSystem@@6B@
CONST	SEGMENT
??_7CMasterLevelSystem@@6B@ DD FLAT:??_R4CMasterLevelSystem@@6B@ ; CMasterLevelSystem::`vftable'
	DD	FLAT:??_ECMasterLevelSystem@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMasterLevelSystem@@QAE@XZ PROC			; CMasterLevelSystem::CMasterLevelSystem
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMasterLevelSystem@@6B@

; 29   : 	// ----
; 30   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CMasterLevelSystem@@QAE@XZ ENDP			; CMasterLevelSystem::CMasterLevelSystem
_TEXT	ENDS
PUBLIC	??1CMasterLevelSystem@@UAE@XZ			; CMasterLevelSystem::~CMasterLevelSystem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMasterLevelSystem@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMasterLevelSystem@@UAEPAXI@Z PROC			; CMasterLevelSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMasterLevelSystem@@UAE@XZ ; CMasterLevelSystem::~CMasterLevelSystem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCMasterLevelSystem@@UAEPAXI@Z ENDP			; CMasterLevelSystem::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMasterLevelSystem@@UAE@XZ PROC			; CMasterLevelSystem::~CMasterLevelSystem
; _this$ = ecx

; 35   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMasterLevelSystem@@6B@

; 36   : 	// ----
; 37   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CMasterLevelSystem@@UAE@XZ ENDP			; CMasterLevelSystem::~CMasterLevelSystem
_TEXT	ENDS
PUBLIC	??_C@_0DL@JBCONHMB@MasterLevel?5Info?5Set?5MinMonsterK@ ; `string'
PUBLIC	??_C@_0P@ODAODKKI@CharacterGrand?$AA@		; `string'
PUBLIC	??_C@_0P@NOFCIALG@CharacterReset?$AA@		; `string'
PUBLIC	??_C@_0P@FCELILDG@CharacterLevel?$AA@		; `string'
PUBLIC	??_C@_0O@LBPJGHMN@AddExperience?$AA@		; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_0BA@ENHFBBLC@MonsterMinLevel?$AA@		; `string'
PUBLIC	?ReadMonsterList@CMasterLevelSystem@@QAEXPAD@Z	; CMasterLevelSystem::ReadMonsterList
PUBLIC	??_C@_0BI@CLAIGMPP@MasterSystemMonster?4txt?$AA@ ; `string'
PUBLIC	??_C@_06POMJKEPM@Common?$AA@			; `string'
PUBLIC	??_C@_0P@KLHHBJJ@UseMonsterList?$AA@		; `string'
PUBLIC	??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ReadCommonServerInfo@CMasterLevelSystem@@QAEXXZ ; CMasterLevelSystem::ReadCommonServerInfo
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	_atof:PROC
EXTRN	__imp__GetPrivateProfileStringA@24:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0DL@JBCONHMB@MasterLevel?5Info?5Set?5MinMonsterK@
CONST	SEGMENT
??_C@_0DL@JBCONHMB@MasterLevel?5Info?5Set?5MinMonsterK@ DB 'MasterLevel I'
	DB	'nfo Set MinMonsterKillLevel:%d, AddExpRate:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ODAODKKI@CharacterGrand?$AA@
CONST	SEGMENT
??_C@_0P@ODAODKKI@CharacterGrand?$AA@ DB 'CharacterGrand', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NOFCIALG@CharacterReset?$AA@
CONST	SEGMENT
??_C@_0P@NOFCIALG@CharacterReset?$AA@ DB 'CharacterReset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FCELILDG@CharacterLevel?$AA@
CONST	SEGMENT
??_C@_0P@FCELILDG@CharacterLevel?$AA@ DB 'CharacterLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LBPJGHMN@AddExperience?$AA@
CONST	SEGMENT
??_C@_0O@LBPJGHMN@AddExperience?$AA@ DB 'AddExperience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ENHFBBLC@MonsterMinLevel?$AA@
CONST	SEGMENT
??_C@_0BA@ENHFBBLC@MonsterMinLevel?$AA@ DB 'MonsterMinLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CLAIGMPP@MasterSystemMonster?4txt?$AA@
CONST	SEGMENT
??_C@_0BI@CLAIGMPP@MasterSystemMonster?4txt?$AA@ DB 'MasterSystemMonster.'
	DB	'txt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common?$AA@
CONST	SEGMENT
??_C@_06POMJKEPM@Common?$AA@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KLHHBJJ@UseMonsterList?$AA@
CONST	SEGMENT
??_C@_0P@KLHHBJJ@UseMonsterList?$AA@ DB 'UseMonsterList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
CONST	SEGMENT
??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@ DB 'MasterSystem.cfg', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_szTemp$ = -20						; size = 10
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ReadCommonServerInfo@CMasterLevelSystem@@QAEXXZ PROC	; CMasterLevelSystem::ReadCommonServerInfo
; _this$ = ecx

; 42   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 54	 sub	 esp, 84			; 00000054H
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0004b	33 c5		 xor	 eax, ebp
  0004d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00050	53		 push	 ebx
  00051	56		 push	 esi
  00052	57		 push	 edi
  00053	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 	this->m_UseMonsterList = GetPrivateProfileInt("Common", "UseMonsterList", true, gDirPath.GetNewPath("MasterSystem.cfg"));

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00060	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00065	50		 push	 eax
  00066	6a 01		 push	 1
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KLHHBJJ@UseMonsterList?$AA@
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00078	85 c0		 test	 eax, eax
  0007a	0f 95 c0	 setne	 al
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	88 81 68 06 00
	00		 mov	 BYTE PTR [ecx+1640], al

; 44   : 	// ----
; 45   : 	if( this->m_UseMonsterList )

  00086	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00089	0f b6 88 68 06
	00 00		 movzx	 ecx, BYTE PTR [eax+1640]
  00090	85 c9		 test	 ecx, ecx
  00092	74 18		 je	 SHORT $LN1@ReadCommon

; 46   : 	{
; 47   : 		this->ReadMonsterList(gDirPath.GetNewPath("MasterSystemMonster.txt"));

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CLAIGMPP@MasterSystemMonster?4txt?$AA@
  00099	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0009e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000a3	50		 push	 eax
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	e8 00 00 00 00	 call	 ?ReadMonsterList@CMasterLevelSystem@@QAEXPAD@Z ; CMasterLevelSystem::ReadMonsterList
$LN1@ReadCommon:

; 48   : 	}
; 49   : 	// ----
; 50   : 	this->m_iMinMonsterKillLevel = GetPrivateProfileInt("Common", "MonsterMinLevel", 110, gDirPath.GetNewPath("MasterSystem.cfg"));

  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  000b1	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000b6	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000bb	50		 push	 eax
  000bc	6a 6e		 push	 110			; 0000006eH
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ENHFBBLC@MonsterMinLevel?$AA@
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  000ce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	89 81 60 06 00
	00		 mov	 DWORD PTR [ecx+1632], eax

; 51   : 	char szTemp[10] = { 0 };

  000d7	c6 45 ec 00	 mov	 BYTE PTR _szTemp$[ebp], 0
  000db	33 c0		 xor	 eax, eax
  000dd	89 45 ed	 mov	 DWORD PTR _szTemp$[ebp+1], eax
  000e0	89 45 f1	 mov	 DWORD PTR _szTemp$[ebp+5], eax
  000e3	88 45 f5	 mov	 BYTE PTR _szTemp$[ebp+9], al

; 52   : 	GetPrivateProfileString("Common", "AddExperience", "1", szTemp, 5, gDirPath.GetNewPath("MasterSystem.cfg"));

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  000eb	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000f0	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000f5	50		 push	 eax
  000f6	6a 05		 push	 5
  000f8	8d 45 ec	 lea	 eax, DWORD PTR _szTemp$[ebp]
  000fb	50		 push	 eax
  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1?$AA@
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LBPJGHMN@AddExperience?$AA@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 53   : 	this->m_fAddExpRate = atof(szTemp);

  00111	8d 45 ec	 lea	 eax, DWORD PTR _szTemp$[ebp]
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 _atof
  0011a	83 c4 04	 add	 esp, 4
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	d9 99 64 06 00
	00		 fstp	 DWORD PTR [ecx+1636]

; 54   : 	// ----
; 55   : /*	if( g_bIsSpeedServer )	//-> New
; 56   : 	{
; 57   : 		char defaultExp[10] = "";
; 58   : 		_gcvt(3.0, 4, defaultExp);
; 59   : 		GetPrivateProfileString("GameServerInfo", "SpeedS_ML_AddExperience", defaultExp, szTemp, 5, gDirPath.GetNewPath("commonserver.cfg"));
; 60   : 		this->m_fAddExpRate  = atof(szTemp);
; 61   : 	}*/
; 62   : 
; 63   : 	this->m_CharacterLevel = GetPrivateProfileInt("Common", "CharacterLevel", 0, gDirPath.GetNewPath("MasterSystem.cfg"));

  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  0012b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00130	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00135	50		 push	 eax
  00136	6a 00		 push	 0
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FCELILDG@CharacterLevel?$AA@
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00148	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 64   : 	this->m_CharacterReset = GetPrivateProfileInt("Common", "CharacterReset", 0, gDirPath.GetNewPath("MasterSystem.cfg"));

  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  00153	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00158	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0015d	50		 push	 eax
  0015e	6a 00		 push	 0
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NOFCIALG@CharacterReset?$AA@
  00165	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00170	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00173	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   : 	this->m_CharacterGrand = GetPrivateProfileInt("Common", "CharacterGrand", 0, gDirPath.GetNewPath("MasterSystem.cfg"));

  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IHNKKHKO@MasterSystem?4cfg?$AA@
  0017b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00180	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00185	50		 push	 eax
  00186	6a 00		 push	 0
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ODAODKKI@CharacterGrand?$AA@
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common?$AA@
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00198	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   : 
; 67   : 	// ----
; 68   : 	LogAddTD("MasterLevel Info Set MinMonsterKillLevel:%d, AddExpRate:%d", this->m_iMinMonsterKillLevel,this->m_fAddExpRate);

  0019e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a1	d9 80 64 06 00
	00		 fld	 DWORD PTR [eax+1636]
  001a7	83 ec 08	 sub	 esp, 8
  001aa	dd 1c 24	 fstp	 QWORD PTR [esp]
  001ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b0	8b 91 60 06 00
	00		 mov	 edx, DWORD PTR [ecx+1632]
  001b6	52		 push	 edx
  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@JBCONHMB@MasterLevel?5Info?5Set?5MinMonsterK@
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001c2	83 c4 10	 add	 esp, 16			; 00000010H

; 69   : }

  001c5	5f		 pop	 edi
  001c6	5e		 pop	 esi
  001c7	5b		 pop	 ebx
  001c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cb	33 cd		 xor	 ecx, ebp
  001cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c3		 ret	 0
?ReadCommonServerInfo@CMasterLevelSystem@@QAEXXZ ENDP	; CMasterLevelSystem::ReadCommonServerInfo
_TEXT	ENDS
PUBLIC	??_C@_0CO@BBFFAKM@?$FLMasterSystem?$FN?5?$FL?$CFd?$FN?5Monsters?5loa@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	_memset:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CO@BBFFAKM@?$FLMasterSystem?$FN?5?$FL?$CFd?$FN?5Monsters?5loa@
CONST	SEGMENT
??_C@_0CO@BBFFAKM@?$FLMasterSystem?$FN?5?$FL?$CFd?$FN?5Monsters?5loa@ DB '['
	DB	'MasterSystem] [%d] Monsters loaded from list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_LoadedCount$ = -12					; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_File$ = 8						; size = 4
?ReadMonsterList@CMasterLevelSystem@@QAEXPAD@Z PROC	; CMasterLevelSystem::ReadMonsterList
; _this$ = ecx

; 74   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	83 ec 4c	 sub	 esp, 76			; 0000004cH
  001e6	53		 push	 ebx
  001e7	56		 push	 esi
  001e8	57		 push	 edi
  001e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 	ZeroMemory(this->m_MonsterList, sizeof(this->m_MonsterList));

  001ec	68 20 03 00 00	 push	 800			; 00000320H
  001f1	6a 00		 push	 0
  001f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f6	05 6c 06 00 00	 add	 eax, 1644		; 0000066cH
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 _memset
  00201	83 c4 0c	 add	 esp, 12			; 0000000cH

; 76   : 	int Token;
; 77   : 	int	LoadedCount = 0;

  00204	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _LoadedCount$[ebp], 0

; 78   : 	// ----
; 79   : 	SMDFile = fopen(File, "r");

  0020b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00210	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 _fopen
  00219	83 c4 08	 add	 esp, 8
  0021c	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 80   : 	// ----
; 81   : 	if( SMDFile == 0 )

  00221	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00228	75 1b		 jne	 SHORT $LN5@ReadMonste

; 82   : 	{
; 83   : 		MsgBox(lMsg.Get(MSGGET(0, 112)), File);

  0022a	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0022d	50		 push	 eax
  0022e	6a 70		 push	 112			; 00000070H
  00230	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00235	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00240	83 c4 08	 add	 esp, 8

; 84   : 		return;

  00243	eb 5e		 jmp	 SHORT $LN6@ReadMonste
$LN5@ReadMonste:

; 85   : 	}
; 86   : 	// ----
; 87   : 	while(true) 

  00245	b8 01 00 00 00	 mov	 eax, 1
  0024a	85 c0		 test	 eax, eax
  0024c	74 35		 je	 SHORT $LN3@ReadMonste

; 88   : 	{
; 89   : 		Token = GetToken();

  0024e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00253	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 90   : 		// ----
; 91   : 		if( Token == END )

  00256	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  0025a	75 04		 jne	 SHORT $LN2@ReadMonste

; 92   : 		{
; 93   : 			break;

  0025c	eb 25		 jmp	 SHORT $LN3@ReadMonste

; 94   : 		}
; 95   : 		else

  0025e	eb 21		 jmp	 SHORT $LN1@ReadMonste
$LN2@ReadMonste:

; 96   : 		{
; 97   : 			this->m_MonsterList[LoadedCount] = TokenNumber;

  00260	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00266	e8 00 00 00 00	 call	 __ftol2_sse
  0026b	8b 4d f4	 mov	 ecx, DWORD PTR _LoadedCount$[ebp]
  0026e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00271	89 84 8a 6c 06
	00 00		 mov	 DWORD PTR [edx+ecx*4+1644], eax

; 98   : 			LoadedCount++;

  00278	8b 45 f4	 mov	 eax, DWORD PTR _LoadedCount$[ebp]
  0027b	83 c0 01	 add	 eax, 1
  0027e	89 45 f4	 mov	 DWORD PTR _LoadedCount$[ebp], eax
$LN1@ReadMonste:

; 99   : 		}
; 100  : 	}

  00281	eb c2		 jmp	 SHORT $LN5@ReadMonste
$LN3@ReadMonste:

; 101  : 	// ----
; 102  : 	LogAddTD("[MasterSystem] [%d] Monsters loaded from list", LoadedCount);

  00283	8b 45 f4	 mov	 eax, DWORD PTR _LoadedCount$[ebp]
  00286	50		 push	 eax
  00287	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@BBFFAKM@?$FLMasterSystem?$FN?5?$FL?$CFd?$FN?5Monsters?5loa@
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00292	83 c4 08	 add	 esp, 8

; 103  : 	fclose(SMDFile);

  00295	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0029a	50		 push	 eax
  0029b	e8 00 00 00 00	 call	 _fclose
  002a0	83 c4 04	 add	 esp, 4
$LN6@ReadMonste:

; 104  : }

  002a3	5f		 pop	 edi
  002a4	5e		 pop	 esi
  002a5	5b		 pop	 ebx
  002a6	8b e5		 mov	 esp, ebp
  002a8	5d		 pop	 ebp
  002a9	c2 04 00	 ret	 4
?ReadMonsterList@CMasterLevelSystem@@QAEXPAD@Z ENDP	; CMasterLevelSystem::ReadMonsterList
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  002b0	55		 push	 ebp
  002b1	8b ec		 mov	 ebp, esp
  002b3	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  002b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  002be	33 c5		 xor	 eax, ebp
  002c0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  002c3	53		 push	 ebx
  002c4	56		 push	 esi
  002c5	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  002c6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  002cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  002d2	50		 push	 eax
  002d3	e8 00 00 00 00	 call	 _fgetc
  002d8	83 c4 04	 add	 esp, 4
  002db	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  002de	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  002e2	83 f9 ff	 cmp	 ecx, -1
  002e5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  002e7	b8 02 00 00 00	 mov	 eax, 2
  002ec	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  002f1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  002f3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  002f7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  002fa	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  002fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00301	50		 push	 eax
  00302	e8 00 00 00 00	 call	 _fgetc
  00307	83 c4 04	 add	 esp, 4
  0030a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0030d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00311	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00314	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00316	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0031a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0031d	74 1c		 je	 SHORT $LN23@GetToken
  0031f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00323	83 f8 ff	 cmp	 eax, -1
  00326	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00328	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0032d	50		 push	 eax
  0032e	e8 00 00 00 00	 call	 _fgetc
  00333	83 c4 04	 add	 esp, 4
  00336	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00339	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0033b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0033f	83 f8 ff	 cmp	 eax, -1
  00342	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00344	b8 02 00 00 00	 mov	 eax, 2
  00349	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0034e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00352	50		 push	 eax
  00353	e8 00 00 00 00	 call	 _isspace
  00358	83 c4 04	 add	 esp, 4
  0035b	85 c0		 test	 eax, eax
  0035d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00363	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00367	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0036d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00373	83 e9 22	 sub	 ecx, 34			; 00000022H
  00376	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0037c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00383	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00389	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0038f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00396	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0039d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  003a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  003ac	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  003b1	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  003b6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  003c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  003c5	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  003ca	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  003cf	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  003d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  003de	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  003e3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  003e8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  003f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  003f7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  003fc	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00401	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0040b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00410	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00415	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0041a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0041f	50		 push	 eax
  00420	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00424	51		 push	 ecx
  00425	e8 00 00 00 00	 call	 _ungetc
  0042a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0042d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00430	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00433	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00438	50		 push	 eax
  00439	e8 00 00 00 00	 call	 _getc
  0043e	83 c4 04	 add	 esp, 4
  00441	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00444	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00448	83 f9 ff	 cmp	 ecx, -1
  0044b	74 36		 je	 SHORT $LN12@GetToken
  0044d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00451	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00454	74 1a		 je	 SHORT $LN11@GetToken
  00456	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0045a	50		 push	 eax
  0045b	e8 00 00 00 00	 call	 _isdigit
  00460	83 c4 04	 add	 esp, 4
  00463	85 c0		 test	 eax, eax
  00465	75 09		 jne	 SHORT $LN11@GetToken
  00467	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0046b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0046e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00470	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00473	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00476	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00478	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0047b	83 c0 01	 add	 eax, 1
  0047e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00481	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00483	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00486	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00489	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0048c	50		 push	 eax
  0048d	e8 00 00 00 00	 call	 _atof
  00492	83 c4 04	 add	 esp, 4
  00495	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0049b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  004a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004aa	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  004af	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  004b4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  004bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004c0	50		 push	 eax
  004c1	e8 00 00 00 00	 call	 _getc
  004c6	83 c4 04	 add	 esp, 4
  004c9	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  004cc	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  004d0	83 f9 ff	 cmp	 ecx, -1
  004d3	74 1c		 je	 SHORT $LN8@GetToken
  004d5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004d9	83 f8 22	 cmp	 eax, 34			; 00000022H
  004dc	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  004de	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004e1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  004e4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  004e6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  004e9	83 c0 01	 add	 eax, 1
  004ec	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  004ef	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  004f1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004f5	83 f8 22	 cmp	 eax, 34			; 00000022H
  004f8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  004fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004ff	50		 push	 eax
  00500	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00504	51		 push	 ecx
  00505	e8 00 00 00 00	 call	 _ungetc
  0050a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0050d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00510	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00513	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0051d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00522	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00527	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0052c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00530	50		 push	 eax
  00531	e8 00 00 00 00	 call	 _isalpha
  00536	83 c4 04	 add	 esp, 4
  00539	85 c0		 test	 eax, eax
  0053b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00541	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00548	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0054b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0054e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00550	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00553	83 c0 01	 add	 eax, 1
  00556	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00559	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0055e	50		 push	 eax
  0055f	e8 00 00 00 00	 call	 _getc
  00564	83 c4 04	 add	 esp, 4
  00567	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0056a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0056e	83 f9 ff	 cmp	 ecx, -1
  00571	74 36		 je	 SHORT $LN3@GetToken
  00573	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00577	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0057a	74 1a		 je	 SHORT $LN2@GetToken
  0057c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00580	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00583	74 11		 je	 SHORT $LN2@GetToken
  00585	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00589	50		 push	 eax
  0058a	e8 00 00 00 00	 call	 _isalnum
  0058f	83 c4 04	 add	 esp, 4
  00592	85 c0		 test	 eax, eax
  00594	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00596	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00599	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0059c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0059e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005a1	83 c0 01	 add	 eax, 1
  005a4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  005a7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  005a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005ae	50		 push	 eax
  005af	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005b3	51		 push	 ecx
  005b4	e8 00 00 00 00	 call	 _ungetc
  005b9	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  005bc	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005bf	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  005c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  005cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  005d1	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  005d3	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  005d5	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  005df	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  005e4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  005e6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  005e8	5f		 pop	 edi
  005e9	5e		 pop	 esi
  005ea	5b		 pop	 ebx
  005eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005ee	33 cd		 xor	 ecx, ebp
  005f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005f5	8b e5		 mov	 esp, ebp
  005f7	5d		 pop	 ebp
  005f8	c3		 ret	 0
  005f9	8d 49 00	 npad	 3
$LN35@GetToken:
  005fc	00 00 00 00	 DD	 $LN10@GetToken
  00600	00 00 00 00	 DD	 $LN19@GetToken
  00604	00 00 00 00	 DD	 $LN17@GetToken
  00608	00 00 00 00	 DD	 $LN14@GetToken
  0060c	00 00 00 00	 DD	 $LN18@GetToken
  00610	00 00 00 00	 DD	 $LN16@GetToken
  00614	00 00 00 00	 DD	 $LN15@GetToken
  00618	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0061c	00		 DB	 0
  0061d	01		 DB	 1
  0061e	07		 DB	 7
  0061f	07		 DB	 7
  00620	07		 DB	 7
  00621	07		 DB	 7
  00622	07		 DB	 7
  00623	07		 DB	 7
  00624	07		 DB	 7
  00625	07		 DB	 7
  00626	02		 DB	 2
  00627	03		 DB	 3
  00628	03		 DB	 3
  00629	07		 DB	 7
  0062a	03		 DB	 3
  0062b	03		 DB	 3
  0062c	03		 DB	 3
  0062d	03		 DB	 3
  0062e	03		 DB	 3
  0062f	03		 DB	 3
  00630	03		 DB	 3
  00631	03		 DB	 3
  00632	03		 DB	 3
  00633	03		 DB	 3
  00634	07		 DB	 7
  00635	04		 DB	 4
  00636	07		 DB	 7
  00637	07		 DB	 7
  00638	07		 DB	 7
  00639	07		 DB	 7
  0063a	07		 DB	 7
  0063b	07		 DB	 7
  0063c	07		 DB	 7
  0063d	07		 DB	 7
  0063e	07		 DB	 7
  0063f	07		 DB	 7
  00640	07		 DB	 7
  00641	07		 DB	 7
  00642	07		 DB	 7
  00643	07		 DB	 7
  00644	07		 DB	 7
  00645	07		 DB	 7
  00646	07		 DB	 7
  00647	07		 DB	 7
  00648	07		 DB	 7
  00649	07		 DB	 7
  0064a	07		 DB	 7
  0064b	07		 DB	 7
  0064c	07		 DB	 7
  0064d	07		 DB	 7
  0064e	07		 DB	 7
  0064f	07		 DB	 7
  00650	07		 DB	 7
  00651	07		 DB	 7
  00652	07		 DB	 7
  00653	07		 DB	 7
  00654	07		 DB	 7
  00655	07		 DB	 7
  00656	07		 DB	 7
  00657	07		 DB	 7
  00658	07		 DB	 7
  00659	07		 DB	 7
  0065a	07		 DB	 7
  0065b	07		 DB	 7
  0065c	07		 DB	 7
  0065d	07		 DB	 7
  0065e	07		 DB	 7
  0065f	07		 DB	 7
  00660	07		 DB	 7
  00661	07		 DB	 7
  00662	07		 DB	 7
  00663	07		 DB	 7
  00664	07		 DB	 7
  00665	07		 DB	 7
  00666	07		 DB	 7
  00667	07		 DB	 7
  00668	07		 DB	 7
  00669	07		 DB	 7
  0066a	07		 DB	 7
  0066b	07		 DB	 7
  0066c	07		 DB	 7
  0066d	07		 DB	 7
  0066e	07		 DB	 7
  0066f	07		 DB	 7
  00670	07		 DB	 7
  00671	07		 DB	 7
  00672	07		 DB	 7
  00673	07		 DB	 7
  00674	07		 DB	 7
  00675	05		 DB	 5
  00676	07		 DB	 7
  00677	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0DC@NHALBMBE@Master?5level?5system?5exp?5table?5se@ ; `string'
PUBLIC	?SetExperienceTable@CMasterLevelSystem@@QAEXXZ	; CMasterLevelSystem::SetExperienceTable
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
;	COMDAT ??_C@_0DC@NHALBMBE@Master?5level?5system?5exp?5table?5se@
; File d:\projects\exteam6.3\source\gameserver\gameserver\newmasterlevelsystem.cpp
CONST	SEGMENT
??_C@_0DC@NHALBMBE@Master?5level?5system?5exp?5table?5se@ DB 'Master leve'
	DB	'l system exp table setting is complete', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_iLevel$230888 = -32					; size = 4
_i64Exp$ = -28						; size = 8
_nTotalLevel_Over$ = -20				; size = 8
_nTotalLevel$ = -12					; size = 8
_this$ = -4						; size = 4
?SetExperienceTable@CMasterLevelSystem@@QAEXXZ PROC	; CMasterLevelSystem::SetExperienceTable
; _this$ = ecx

; 109  : {

  00680	55		 push	 ebp
  00681	8b ec		 mov	 ebp, esp
  00683	83 ec 60	 sub	 esp, 96			; 00000060H
  00686	53		 push	 ebx
  00687	56		 push	 esi
  00688	57		 push	 edi
  00689	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 110  : 	this->MLExpTlb[0] = 0;

  0068c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0068f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  00696	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 111  : 	__int64 nTotalLevel				= 0;

  0069d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nTotalLevel$[ebp], 0
  006a4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nTotalLevel$[ebp+4], 0

; 112  : 	__int64 nTotalLevel_Over		= 0;

  006ab	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nTotalLevel_Over$[ebp], 0
  006b2	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _nTotalLevel_Over$[ebp+4], 0

; 113  : 	__int64 i64Exp					= 0;

  006b9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i64Exp$[ebp], 0
  006c0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i64Exp$[ebp+4], 0

; 114  : 	// ----
; 115  : 	for( int iLevel = 1; iLevel < MAX_MASTER_LEVEL + 1; iLevel++ )

  006c7	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _iLevel$230888[ebp], 1
  006ce	eb 09		 jmp	 SHORT $LN3@SetExperie
$LN2@SetExperie:
  006d0	8b 45 e0	 mov	 eax, DWORD PTR _iLevel$230888[ebp]
  006d3	83 c0 01	 add	 eax, 1
  006d6	89 45 e0	 mov	 DWORD PTR _iLevel$230888[ebp], eax
$LN3@SetExperie:
  006d9	81 7d e0 c9 00
	00 00		 cmp	 DWORD PTR _iLevel$230888[ebp], 201 ; 000000c9H
  006e0	0f 8d da 00 00
	00		 jge	 $LN1@SetExperie

; 116  : 	{
; 117  : 		nTotalLevel			= iLevel + MAX_CHAR_LEVEL;

  006e6	8b 45 e0	 mov	 eax, DWORD PTR _iLevel$230888[ebp]
  006e9	05 90 01 00 00	 add	 eax, 400		; 00000190H
  006ee	99		 cdq
  006ef	89 45 f4	 mov	 DWORD PTR _nTotalLevel$[ebp], eax
  006f2	89 55 f8	 mov	 DWORD PTR _nTotalLevel$[ebp+4], edx

; 118  : 		i64Exp				= (nTotalLevel + 9) * nTotalLevel * nTotalLevel * 10;

  006f5	8b 45 f4	 mov	 eax, DWORD PTR _nTotalLevel$[ebp]
  006f8	83 c0 09	 add	 eax, 9
  006fb	8b 4d f8	 mov	 ecx, DWORD PTR _nTotalLevel$[ebp+4]
  006fe	83 d1 00	 adc	 ecx, 0
  00701	8b 55 f8	 mov	 edx, DWORD PTR _nTotalLevel$[ebp+4]
  00704	52		 push	 edx
  00705	8b 55 f4	 mov	 edx, DWORD PTR _nTotalLevel$[ebp]
  00708	52		 push	 edx
  00709	51		 push	 ecx
  0070a	50		 push	 eax
  0070b	e8 00 00 00 00	 call	 __allmul
  00710	8b 4d f8	 mov	 ecx, DWORD PTR _nTotalLevel$[ebp+4]
  00713	51		 push	 ecx
  00714	8b 4d f4	 mov	 ecx, DWORD PTR _nTotalLevel$[ebp]
  00717	51		 push	 ecx
  00718	52		 push	 edx
  00719	50		 push	 eax
  0071a	e8 00 00 00 00	 call	 __allmul
  0071f	6a 00		 push	 0
  00721	6a 0a		 push	 10			; 0000000aH
  00723	52		 push	 edx
  00724	50		 push	 eax
  00725	e8 00 00 00 00	 call	 __allmul
  0072a	89 45 e4	 mov	 DWORD PTR _i64Exp$[ebp], eax
  0072d	89 55 e8	 mov	 DWORD PTR _i64Exp$[ebp+4], edx

; 119  : 		nTotalLevel_Over	= nTotalLevel - 255;

  00730	8b 45 f4	 mov	 eax, DWORD PTR _nTotalLevel$[ebp]
  00733	2d ff 00 00 00	 sub	 eax, 255		; 000000ffH
  00738	8b 4d f8	 mov	 ecx, DWORD PTR _nTotalLevel$[ebp+4]
  0073b	83 d9 00	 sbb	 ecx, 0
  0073e	89 45 ec	 mov	 DWORD PTR _nTotalLevel_Over$[ebp], eax
  00741	89 4d f0	 mov	 DWORD PTR _nTotalLevel_Over$[ebp+4], ecx

; 120  : 		i64Exp				+= (nTotalLevel_Over + 9) * nTotalLevel_Over * nTotalLevel_Over * 1000;

  00744	8b 45 ec	 mov	 eax, DWORD PTR _nTotalLevel_Over$[ebp]
  00747	83 c0 09	 add	 eax, 9
  0074a	8b 4d f0	 mov	 ecx, DWORD PTR _nTotalLevel_Over$[ebp+4]
  0074d	83 d1 00	 adc	 ecx, 0
  00750	8b 55 f0	 mov	 edx, DWORD PTR _nTotalLevel_Over$[ebp+4]
  00753	52		 push	 edx
  00754	8b 55 ec	 mov	 edx, DWORD PTR _nTotalLevel_Over$[ebp]
  00757	52		 push	 edx
  00758	51		 push	 ecx
  00759	50		 push	 eax
  0075a	e8 00 00 00 00	 call	 __allmul
  0075f	8b 4d f0	 mov	 ecx, DWORD PTR _nTotalLevel_Over$[ebp+4]
  00762	51		 push	 ecx
  00763	8b 4d ec	 mov	 ecx, DWORD PTR _nTotalLevel_Over$[ebp]
  00766	51		 push	 ecx
  00767	52		 push	 edx
  00768	50		 push	 eax
  00769	e8 00 00 00 00	 call	 __allmul
  0076e	6a 00		 push	 0
  00770	68 e8 03 00 00	 push	 1000			; 000003e8H
  00775	52		 push	 edx
  00776	50		 push	 eax
  00777	e8 00 00 00 00	 call	 __allmul
  0077c	03 45 e4	 add	 eax, DWORD PTR _i64Exp$[ebp]
  0077f	13 55 e8	 adc	 edx, DWORD PTR _i64Exp$[ebp+4]
  00782	89 45 e4	 mov	 DWORD PTR _i64Exp$[ebp], eax
  00785	89 55 e8	 mov	 DWORD PTR _i64Exp$[ebp+4], edx

; 121  : 		i64Exp				= (i64Exp - 3892250000) / 2;

  00788	8b 45 e4	 mov	 eax, DWORD PTR _i64Exp$[ebp]
  0078b	2d 90 05 ff e7	 sub	 eax, -402717296		; e7ff0590H
  00790	8b 4d e8	 mov	 ecx, DWORD PTR _i64Exp$[ebp+4]
  00793	83 d9 00	 sbb	 ecx, 0
  00796	6a 00		 push	 0
  00798	6a 02		 push	 2
  0079a	51		 push	 ecx
  0079b	50		 push	 eax
  0079c	e8 00 00 00 00	 call	 __alldiv
  007a1	89 45 e4	 mov	 DWORD PTR _i64Exp$[ebp], eax
  007a4	89 55 e8	 mov	 DWORD PTR _i64Exp$[ebp+4], edx

; 122  : 		// ----
; 123  : 		this->MLExpTlb[iLevel] = i64Exp;

  007a7	8b 45 e0	 mov	 eax, DWORD PTR _iLevel$230888[ebp]
  007aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007ad	8b 55 e4	 mov	 edx, DWORD PTR _i64Exp$[ebp]
  007b0	89 54 c1 18	 mov	 DWORD PTR [ecx+eax*8+24], edx
  007b4	8b 55 e8	 mov	 edx, DWORD PTR _i64Exp$[ebp+4]
  007b7	89 54 c1 1c	 mov	 DWORD PTR [ecx+eax*8+28], edx

; 124  : 	}

  007bb	e9 10 ff ff ff	 jmp	 $LN2@SetExperie
$LN1@SetExperie:

; 125  : 	// ----
; 126  : 	LogAddTD("Master level system exp table setting is complete");

  007c0	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@NHALBMBE@Master?5level?5system?5exp?5table?5se@
  007c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  007cb	83 c4 04	 add	 esp, 4

; 127  : }

  007ce	5f		 pop	 edi
  007cf	5e		 pop	 esi
  007d0	5b		 pop	 ebx
  007d1	8b e5		 mov	 esp, ebp
  007d3	5d		 pop	 ebp
  007d4	c3		 ret	 0
?SetExperienceTable@CMasterLevelSystem@@QAEXXZ ENDP	; CMasterLevelSystem::SetExperienceTable
_TEXT	ENDS
PUBLIC	?gObjNextMLExpCal@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::gObjNextMLExpCal
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_nNextML$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?gObjNextMLExpCal@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::gObjNextMLExpCal
; _this$ = ecx

; 132  : {

  007e0	55		 push	 ebp
  007e1	8b ec		 mov	 ebp, esp
  007e3	83 ec 48	 sub	 esp, 72			; 00000048H
  007e6	53		 push	 ebx
  007e7	56		 push	 esi
  007e8	57		 push	 edi
  007e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : 	int nNextML						= lpObj->MLevel + 1;

  007ec	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007ef	0f bf 88 d0 00
	00 00		 movsx	 ecx, WORD PTR [eax+208]
  007f6	83 c1 01	 add	 ecx, 1
  007f9	89 4d f8	 mov	 DWORD PTR _nNextML$[ebp], ecx

; 134  : 	lpObj->MLNextExp	= this->MLExpTlb[nNextML];

  007fc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  007ff	8b 4d f8	 mov	 ecx, DWORD PTR _nNextML$[ebp]
  00802	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00805	8b 74 ca 18	 mov	 esi, DWORD PTR [edx+ecx*8+24]
  00809	89 b0 e0 00 00
	00		 mov	 DWORD PTR [eax+224], esi
  0080f	8b 4c ca 1c	 mov	 ecx, DWORD PTR [edx+ecx*8+28]
  00813	89 88 e4 00 00
	00		 mov	 DWORD PTR [eax+228], ecx

; 135  : }

  00819	5f		 pop	 edi
  0081a	5e		 pop	 esi
  0081b	5b		 pop	 ebx
  0081c	8b e5		 mov	 esp, ebp
  0081e	5d		 pop	 ebp
  0081f	c2 04 00	 ret	 4
?gObjNextMLExpCal@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::gObjNextMLExpCal
_TEXT	ENDS
PUBLIC	?GCMasterLevelUpInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GCMasterLevelUpInfo
PUBLIC	??_C@_0EL@FOBNMCIM@ML?5Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5@ ; `string'
PUBLIC	__real@4059000000000000
PUBLIC	__real@0000000000000000
PUBLIC	?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
PUBLIC	?MasterLevelUp@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@AA_J_NH@Z ; CMasterLevelSystem::MasterLevelUp
EXTRN	?GCSendExp_INT64@@YAXHH_JHH@Z:PROC		; GCSendExp_INT64
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	?gObjSetBP@@YAXH@Z:PROC				; gObjSetBP
EXTRN	?gObjCalcMaxLifePower@@YAXH@Z:PROC		; gObjCalcMaxLifePower
EXTRN	?gObjCalcShieldPoint@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjCalcShieldPoint
EXTRN	?DCInfo@@3Vclassdef@@A:BYTE			; DCInfo
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?ExConfig@@3VcExConfigs@@A:BYTE			; ExConfig
EXTRN	?gObjSetExpPetItem@@YAXHH@Z:PROC		; gObjSetExpPetItem
EXTRN	?IsMapBattleZone@GensSystem@@QAEHH@Z:PROC	; GensSystem::IsMapBattleZone
EXTRN	?gGensSystem@@3VGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gGENS@@3HA:DWORD				; gGENS
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	__ftol2:PROC
;	COMDAT ??_C@_0EL@FOBNMCIM@ML?5Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_0EL@FOBNMCIM@ML?5Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5@ DB 'M'
	DB	'L Experience : Map[%d]-(%d,%d) [%s][%s](%d) %I64d %I64d Monst'
	DB	'erIndex : %d', 00H				; `string'
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv432 = -84						; size = 4
tv429 = -80						; size = 8
tv392 = -76						; size = 4
_iTotalMasterLevel$ = -8				; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iAddExp$ = 12						; size = 4
_bEventMapReward$ = 16					; size = 1
_iMonsterType$ = 20					; size = 4
?MasterLevelUp@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@AA_J_NH@Z PROC ; CMasterLevelSystem::MasterLevelUp
; _this$ = ecx

; 140  : {

  00830	55		 push	 ebp
  00831	8b ec		 mov	 ebp, esp
  00833	83 ec 54	 sub	 esp, 84			; 00000054H
  00836	53		 push	 ebx
  00837	56		 push	 esi
  00838	57		 push	 edi
  00839	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : 	if( !this->CheckIsMasterLevelCharacter(lpObj) )

  0083c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0083f	50		 push	 eax
  00840	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00843	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  00848	85 c0		 test	 eax, eax
  0084a	75 07		 jne	 SHORT $LN26@MasterLeve

; 142  : 	{
; 143  : 		return false;

  0084c	33 c0		 xor	 eax, eax
  0084e	e9 17 05 00 00	 jmp	 $LN27@MasterLeve
$LN26@MasterLeve:

; 144  : 	}
; 145  : 	// ----
; 146  : 
; 147  : 	int iTotalMasterLevel = MAX_MASTER_LEVEL;

  00853	c7 45 f8 c8 00
	00 00		 mov	 DWORD PTR _iTotalMasterLevel$[ebp], 200 ; 000000c8H

; 148  : 
; 149  : 	if(g_ExLicense.CheckUser(eExUB::NSGames))

  0085a	6a 51		 push	 81			; 00000051H
  0085c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00861	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00866	0f b6 c0	 movzx	 eax, al
  00869	85 c0		 test	 eax, eax
  0086b	74 07		 je	 SHORT $LN25@MasterLeve

; 150  : 	{
; 151  : 		iTotalMasterLevel = 1;

  0086d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _iTotalMasterLevel$[ebp], 1
$LN25@MasterLeve:

; 152  : 	}
; 153  : 
; 154  : 	if( lpObj->MLevel >= iTotalMasterLevel )

  00874	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00877	0f bf 88 d0 00
	00 00		 movsx	 ecx, WORD PTR [eax+208]
  0087e	3b 4d f8	 cmp	 ecx, DWORD PTR _iTotalMasterLevel$[ebp]
  00881	7c 27		 jl	 SHORT $LN24@MasterLeve

; 155  : 	{
; 156  : 		GCServerMsgStringSend(lMsg.Get(1136), lpObj->m_Index, 1);

  00883	6a 01		 push	 1
  00885	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00888	8b 08		 mov	 ecx, DWORD PTR [eax]
  0088a	51		 push	 ecx
  0088b	68 70 04 00 00	 push	 1136			; 00000470H
  00890	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00895	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0089a	50		 push	 eax
  0089b	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  008a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 		return false;

  008a3	33 c0		 xor	 eax, eax
  008a5	e9 c0 04 00 00	 jmp	 $LN27@MasterLeve
$LN24@MasterLeve:

; 158  : 	}
; 159  : 	// ----
; 160  : 	if( bEventMapReward )	//-> New

  008aa	0f b6 45 10	 movzx	 eax, BYTE PTR _bEventMapReward$[ebp]
  008ae	85 c0		 test	 eax, eax
  008b0	74 12		 je	 SHORT $LN23@MasterLeve

; 161  : 	{
; 162  : 		iAddExp = iAddExp;	//???

  008b2	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  008b5	8b 4d 0c	 mov	 ecx, DWORD PTR _iAddExp$[ebp]
  008b8	8b 11		 mov	 edx, DWORD PTR [ecx]
  008ba	89 10		 mov	 DWORD PTR [eax], edx
  008bc	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  008bf	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 163  : 	}
; 164  : 	else

  008c2	eb 7f		 jmp	 SHORT $LN18@MasterLeve
$LN23@MasterLeve:

; 165  : 	{
; 166  : 		if(gGENS)

  008c4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gGENS@@3HA, 0 ; gGENS
  008cb	74 5b		 je	 SHORT $LN21@MasterLeve

; 167  : 		{
; 168  : 				if( gGensSystem.IsMapBattleZone(lpObj->MapNumber) )	//-> Original g_GensSystem maybe

  008cd	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  008d0	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  008d7	51		 push	 ecx
  008d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VGensSystem@@A ; gGensSystem
  008dd	e8 00 00 00 00	 call	 ?IsMapBattleZone@GensSystem@@QAEHH@Z ; GensSystem::IsMapBattleZone
  008e2	85 c0		 test	 eax, eax
  008e4	74 25		 je	 SHORT $LN20@MasterLeve

; 169  : 				{
; 170  : 					iAddExp = iAddExp * (this->m_fAddExpRate + g_MLBattleZoneAddExp);

  008e6	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  008e9	df 28		 fild	 QWORD PTR [eax]
  008eb	db 05 00 00 00
	00		 fild	 DWORD PTR ?g_MLBattleZoneAddExp@@3HA ; g_MLBattleZoneAddExp
  008f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008f4	d8 81 64 06 00
	00		 fadd	 DWORD PTR [ecx+1636]
  008fa	de c9		 fmulp	 ST(1), ST(0)
  008fc	e8 00 00 00 00	 call	 __ftol2
  00901	8b 4d 0c	 mov	 ecx, DWORD PTR _iAddExp$[ebp]
  00904	89 01		 mov	 DWORD PTR [ecx], eax
  00906	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 171  : 				}
; 172  : 				else

  00909	eb 1b		 jmp	 SHORT $LN19@MasterLeve
$LN20@MasterLeve:

; 173  : 				{
; 174  : 					iAddExp = iAddExp * this->m_fAddExpRate;

  0090b	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  0090e	df 28		 fild	 QWORD PTR [eax]
  00910	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00913	d8 89 64 06 00
	00		 fmul	 DWORD PTR [ecx+1636]
  00919	e8 00 00 00 00	 call	 __ftol2
  0091e	8b 4d 0c	 mov	 ecx, DWORD PTR _iAddExp$[ebp]
  00921	89 01		 mov	 DWORD PTR [ecx], eax
  00923	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN19@MasterLeve:

; 175  : 				}
; 176  : 		}
; 177  : 		else

  00926	eb 1b		 jmp	 SHORT $LN18@MasterLeve
$LN21@MasterLeve:

; 178  : 		{
; 179  : 				iAddExp = iAddExp * this->m_fAddExpRate;

  00928	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  0092b	df 28		 fild	 QWORD PTR [eax]
  0092d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00930	d8 89 64 06 00
	00		 fmul	 DWORD PTR [ecx+1636]
  00936	e8 00 00 00 00	 call	 __ftol2
  0093b	8b 4d 0c	 mov	 ecx, DWORD PTR _iAddExp$[ebp]
  0093e	89 01		 mov	 DWORD PTR [ecx], eax
  00940	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@MasterLeve:

; 180  : 		}
; 181  : 	}
; 182  : 	// ----
; 183  : 	if( lpObj->m_MPSkillOpt.MpsPlusExp > 0 )

  00943	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00946	d9 80 70 27 00
	00		 fld	 DWORD PTR [eax+10096]
  0094c	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00952	df e0		 fnstsw	 ax
  00954	f6 c4 41	 test	 ah, 65			; 00000041H
  00957	75 28		 jne	 SHORT $LN17@MasterLeve

; 184  : 	{
; 185  : 		iAddExp += iAddExp * lpObj->m_MPSkillOpt.MpsPlusExp / 100;

  00959	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  0095c	df 28		 fild	 QWORD PTR [eax]
  0095e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00961	d8 89 70 27 00
	00		 fmul	 DWORD PTR [ecx+10096]
  00967	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0096d	8b 55 0c	 mov	 edx, DWORD PTR _iAddExp$[ebp]
  00970	df 2a		 fild	 QWORD PTR [edx]
  00972	de c1		 faddp	 ST(1), ST(0)
  00974	e8 00 00 00 00	 call	 __ftol2
  00979	8b 4d 0c	 mov	 ecx, DWORD PTR _iAddExp$[ebp]
  0097c	89 01		 mov	 DWORD PTR [ecx], eax
  0097e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN17@MasterLeve:

; 186  : 	}
; 187  : 	// ----
; 188  : 	if( iAddExp > 0 )

  00981	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  00984	89 45 b4	 mov	 DWORD PTR tv392[ebp], eax
  00987	8b 4d b4	 mov	 ecx, DWORD PTR tv392[ebp]
  0098a	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0098e	0f 8c d1 03 00
	00		 jl	 $LN16@MasterLeve
  00994	7f 0c		 jg	 SHORT $LN29@MasterLeve
  00996	8b 55 b4	 mov	 edx, DWORD PTR tv392[ebp]
  00999	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0099c	0f 86 c3 03 00
	00		 jbe	 $LN16@MasterLeve
$LN29@MasterLeve:

; 189  : 	{
; 190  : 		gObjSetExpPetItem(lpObj->m_Index, iAddExp);

  009a2	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  009a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  009a7	51		 push	 ecx
  009a8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  009ab	8b 02		 mov	 eax, DWORD PTR [edx]
  009ad	50		 push	 eax
  009ae	e8 00 00 00 00	 call	 ?gObjSetExpPetItem@@YAXHH@Z ; gObjSetExpPetItem
  009b3	83 c4 08	 add	 esp, 8

; 191  : 		// ----
; 192  : 		LogAddTD("ML Experience : Map[%d]-(%d,%d) [%s][%s](%d) %I64d %I64d MonsterIndex : %d",	//-> Updated
; 193  :           lpObj->MapNumber, lpObj->X, lpObj->Y, lpObj->AccountID,lpObj->Name,
; 194  :           lpObj->MLevel, lpObj->MLExp, iAddExp, iMonsterType);

  009b6	8b 45 14	 mov	 eax, DWORD PTR _iMonsterType$[ebp]
  009b9	50		 push	 eax
  009ba	8b 4d 0c	 mov	 ecx, DWORD PTR _iAddExp$[ebp]
  009bd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  009c0	52		 push	 edx
  009c1	8b 01		 mov	 eax, DWORD PTR [ecx]
  009c3	50		 push	 eax
  009c4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  009c7	8b 91 dc 00 00
	00		 mov	 edx, DWORD PTR [ecx+220]
  009cd	52		 push	 edx
  009ce	8b 81 d8 00 00
	00		 mov	 eax, DWORD PTR [ecx+216]
  009d4	50		 push	 eax
  009d5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  009d8	0f bf 91 d0 00
	00 00		 movsx	 edx, WORD PTR [ecx+208]
  009df	52		 push	 edx
  009e0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  009e3	83 c0 77	 add	 eax, 119		; 00000077H
  009e6	50		 push	 eax
  009e7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  009ea	83 c1 6c	 add	 ecx, 108		; 0000006cH
  009ed	51		 push	 ecx
  009ee	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  009f1	0f bf 82 46 01
	00 00		 movsx	 eax, WORD PTR [edx+326]
  009f8	50		 push	 eax
  009f9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  009fc	0f bf 91 44 01
	00 00		 movsx	 edx, WORD PTR [ecx+324]
  00a03	52		 push	 edx
  00a04	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a07	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00a0e	51		 push	 ecx
  00a0f	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@FOBNMCIM@ML?5Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5@
  00a14	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00a1a	83 c4 30	 add	 esp, 48			; 00000030H

; 195  : 		// ----
; 196  : 		if( iAddExp + lpObj->MLExp >= lpObj->MLNextExp )

  00a1d	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  00a20	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00a23	8b 10		 mov	 edx, DWORD PTR [eax]
  00a25	03 91 d8 00 00
	00		 add	 edx, DWORD PTR [ecx+216]
  00a2b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00a2e	13 81 dc 00 00
	00		 adc	 eax, DWORD PTR [ecx+220]
  00a34	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00a37	89 55 b0	 mov	 DWORD PTR tv429[ebp], edx
  00a3a	89 45 b4	 mov	 DWORD PTR tv429[ebp+4], eax
  00a3d	89 4d ac	 mov	 DWORD PTR tv432[ebp], ecx
  00a40	8b 55 ac	 mov	 edx, DWORD PTR tv432[ebp]
  00a43	8b 45 b4	 mov	 eax, DWORD PTR tv429[ebp+4]
  00a46	3b 82 e4 00 00
	00		 cmp	 eax, DWORD PTR [edx+228]
  00a4c	0f 8c cc 02 00
	00		 jl	 $LN15@MasterLeve
  00a52	7f 12		 jg	 SHORT $LN30@MasterLeve
  00a54	8b 4d ac	 mov	 ecx, DWORD PTR tv432[ebp]
  00a57	8b 55 b0	 mov	 edx, DWORD PTR tv429[ebp]
  00a5a	3b 91 e0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+224]
  00a60	0f 82 b8 02 00
	00		 jb	 $LN15@MasterLeve
$LN30@MasterLeve:

; 197  : 		{
; 198  : 			iAddExp = 0;

  00a66	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  00a69	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00a6f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 199  : 			// -----
; 200  : 			lpObj->MLExp	= lpObj->MLNextExp;

  00a76	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a79	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00a7c	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00a82	89 90 d8 00 00
	00		 mov	 DWORD PTR [eax+216], edx
  00a88	8b 89 e4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+228]
  00a8e	89 88 dc 00 00
	00		 mov	 DWORD PTR [eax+220], ecx

; 201  : 			lpObj->MLevel++;

  00a94	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00a97	66 8b 88 d0 00
	00 00		 mov	 cx, WORD PTR [eax+208]
  00a9e	66 83 c1 01	 add	 cx, 1
  00aa2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00aa5	66 89 8a d0 00
	00 00		 mov	 WORD PTR [edx+208], cx

; 202  : #ifdef LVL_UP_POINTS
; 203  : 			if(lpObj->Class == CLASS_WIZARD)

  00aac	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00aaf	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00ab6	85 c9		 test	 ecx, ecx
  00ab8	75 1d		 jne	 SHORT $LN14@MasterLeve

; 204  : 			{
; 205  : 				lpObj->MLPoint += ExConfig.AddMasterLvlPoint.DwLevelPoints;

  00aba	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00abd	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00ac3	03 0d 4c 0c 00
	00		 add	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+3148
  00ac9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00acc	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx
  00ad2	e9 fa 00 00 00	 jmp	 $LN2@MasterLeve
$LN14@MasterLeve:

; 206  : 			}
; 207  : 			else if(lpObj->Class == CLASS_KNIGHT)

  00ad7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ada	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00ae1	83 f9 01	 cmp	 ecx, 1
  00ae4	75 1d		 jne	 SHORT $LN12@MasterLeve

; 208  : 			{
; 209  : 				lpObj->MLPoint += ExConfig.AddMasterLvlPoint.DkLevelPoints;

  00ae6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ae9	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00aef	03 0d 48 0c 00
	00		 add	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+3144
  00af5	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00af8	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx
  00afe	e9 ce 00 00 00	 jmp	 $LN2@MasterLeve
$LN12@MasterLeve:

; 210  : 			}
; 211  : 			else if(lpObj->Class == CLASS_ELF)

  00b03	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b06	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00b0d	83 f9 02	 cmp	 ecx, 2
  00b10	75 1d		 jne	 SHORT $LN10@MasterLeve

; 212  : 			{
; 213  : 				lpObj->MLPoint += ExConfig.AddMasterLvlPoint.ElfLevelPoints;

  00b12	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b15	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00b1b	03 0d 50 0c 00
	00		 add	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+3152
  00b21	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00b24	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx
  00b2a	e9 a2 00 00 00	 jmp	 $LN2@MasterLeve
$LN10@MasterLeve:

; 214  : 			}
; 215  : 			else if ( lpObj->Class == CLASS_MAGUMSA )

  00b2f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b32	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00b39	83 f9 03	 cmp	 ecx, 3
  00b3c	75 1a		 jne	 SHORT $LN8@MasterLeve

; 216  : 			{
; 217  : 				lpObj->MLPoint += ExConfig.AddMasterLvlPoint.MgLevelPoints;

  00b3e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b41	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00b47	03 0d 58 0c 00
	00		 add	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+3160
  00b4d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00b50	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx
  00b56	eb 79		 jmp	 SHORT $LN2@MasterLeve
$LN8@MasterLeve:

; 218  : 			}
; 219  : 			else if ( lpObj->Class == CLASS_DARKLORD )

  00b58	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b5b	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00b62	83 f9 04	 cmp	 ecx, 4
  00b65	75 1a		 jne	 SHORT $LN6@MasterLeve

; 220  : 			{
; 221  : 				lpObj->MLPoint += ExConfig.AddMasterLvlPoint.DlLevelPoints;

  00b67	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b6a	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00b70	03 0d 5c 0c 00
	00		 add	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+3164
  00b76	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00b79	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx
  00b7f	eb 50		 jmp	 SHORT $LN2@MasterLeve
$LN6@MasterLeve:

; 222  : 			}
; 223  : 			else if(lpObj->Class == CLASS_SUMMONER)

  00b81	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b84	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00b8b	83 f9 05	 cmp	 ecx, 5
  00b8e	75 1a		 jne	 SHORT $LN4@MasterLeve

; 224  : 			{
; 225  : 				lpObj->MLPoint += ExConfig.AddMasterLvlPoint.SumLevelPoints;

  00b90	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00b93	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00b99	03 0d 54 0c 00
	00		 add	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+3156
  00b9f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00ba2	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx
  00ba8	eb 27		 jmp	 SHORT $LN2@MasterLeve
$LN4@MasterLeve:

; 226  : 			}
; 227  : #ifdef MONK
; 228  : 			else if ( lpObj->Class == CLASS_MONK )

  00baa	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bad	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00bb4	83 f9 06	 cmp	 ecx, 6
  00bb7	75 18		 jne	 SHORT $LN2@MasterLeve

; 229  : 			{
; 230  : 				lpObj->MLPoint += ExConfig.AddMasterLvlPoint.RfLevelPoints;

  00bb9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bbc	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00bc2	03 0d 60 0c 00
	00		 add	 ecx, DWORD PTR ?ExConfig@@3VcExConfigs@@A+3168
  00bc8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00bcb	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx
$LN2@MasterLeve:

; 231  : 			}
; 232  : #endif
; 233  : #else
; 234  : 			lpObj->MLPoint++;	//-> In future can use it for change ml point per level)
; 235  : #endif
; 236  : 			// -----
; 237  : 			gObjCalCharacter(lpObj->m_Index);

  00bd1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bd4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bd6	51		 push	 ecx
  00bd7	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00bdc	83 c4 04	 add	 esp, 4

; 238  : 			// -----
; 239  : 			lpObj->MaxLife				+= DCInfo.DefClass[ lpObj->Class ].LevelLife;

  00bdf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00be2	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00be9	69 c9 c8 0b 00
	00		 imul	 ecx, 3016		; 00000bc8H
  00bef	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00bf2	d9 82 00 01 00
	00		 fld	 DWORD PTR [edx+256]
  00bf8	d8 81 10 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+16]
  00bfe	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c01	d9 98 00 01 00
	00		 fstp	 DWORD PTR [eax+256]

; 240  : 			lpObj->MaxMana				+= DCInfo.DefClass[ lpObj->Class ].LevelMana;

  00c07	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c0a	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00c11	69 c9 c8 0b 00
	00		 imul	 ecx, 3016		; 00000bc8H
  00c17	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c1a	d9 82 14 01 00
	00		 fld	 DWORD PTR [edx+276]
  00c20	d8 81 1c 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+28]
  00c26	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c29	d9 98 14 01 00
	00		 fstp	 DWORD PTR [eax+276]

; 241  : 			lpObj->Life					= lpObj->AddLife + lpObj->MaxLife;

  00c2f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c32	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  00c38	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00c3b	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  00c41	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c44	d9 9a fc 00 00
	00		 fstp	 DWORD PTR [edx+252]

; 242  : 			lpObj->Mana					= lpObj->AddMana + lpObj->MaxMana;

  00c4a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c4d	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  00c53	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00c56	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  00c5c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c5f	d9 9a 10 01 00
	00		 fstp	 DWORD PTR [edx+272]

; 243  : 			// -----
; 244  : 			gObjCalcShieldPoint(lpObj);

  00c65	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c68	50		 push	 eax
  00c69	e8 00 00 00 00	 call	 ?gObjCalcShieldPoint@@YAXPAUOBJECTSTRUCT@@@Z ; gObjCalcShieldPoint
  00c6e	83 c4 04	 add	 esp, 4

; 245  : 			lpObj->iShield				= lpObj->iAddShield + lpObj->iMaxShield;

  00c71	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c74	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  00c7a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00c7d	03 8a 58 01 00
	00		 add	 ecx, DWORD PTR [edx+344]
  00c83	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c86	89 88 54 01 00
	00		 mov	 DWORD PTR [eax+340], ecx

; 246  : 			// -----
; 247  : 			this->gObjNextMLExpCal(lpObj);

  00c8c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c8f	50		 push	 eax
  00c90	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c93	e8 00 00 00 00	 call	 ?gObjNextMLExpCal@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::gObjNextMLExpCal

; 248  : 			// ----
; 249  : 			gObjCalcMaxLifePower(lpObj->m_Index);

  00c98	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00c9b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c9d	51		 push	 ecx
  00c9e	e8 00 00 00 00	 call	 ?gObjCalcMaxLifePower@@YAXH@Z ; gObjCalcMaxLifePower
  00ca3	83 c4 04	 add	 esp, 4

; 250  : 			gObjSetBP(lpObj->m_Index);

  00ca6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ca9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cab	51		 push	 ecx
  00cac	e8 00 00 00 00	 call	 ?gObjSetBP@@YAXH@Z	; gObjSetBP
  00cb1	83 c4 04	 add	 esp, 4

; 251  : 			//GJSetCharacterInfo(lpObj, lpObj->m_Index, 0, 0);
; 252  : #ifndef FIX_DS_CRASH
; 253  : 			GJSetCharacterInfo(lpObj, lpObj->m_Index, 0);
; 254  : #endif
; 255  : 			this->GCMasterLevelUpInfo(lpObj);

  00cb4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cb7	50		 push	 eax
  00cb8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cbb	e8 00 00 00 00	 call	 ?GCMasterLevelUpInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GCMasterLevelUpInfo

; 256  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  00cc0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cc3	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00cc9	51		 push	 ecx
  00cca	6a 00		 push	 0
  00ccc	68 ff 00 00 00	 push	 255			; 000000ffH
  00cd1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00cd4	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  00cda	e8 00 00 00 00	 call	 __ftol2_sse
  00cdf	50		 push	 eax
  00ce0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ce3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ce5	51		 push	 ecx
  00ce6	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00ceb	83 c4 14	 add	 esp, 20			; 00000014H

; 257  : 			GCManaSend(lpObj->m_Index, lpObj->Mana, 0xFF, 0, lpObj->BP);	//-> Original name ->_BP

  00cee	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00cf1	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  00cf7	51		 push	 ecx
  00cf8	6a 00		 push	 0
  00cfa	68 ff 00 00 00	 push	 255			; 000000ffH
  00cff	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00d02	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  00d08	e8 00 00 00 00	 call	 __ftol2_sse
  00d0d	50		 push	 eax
  00d0e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d11	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d13	51		 push	 ecx
  00d14	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00d19	83 c4 14	 add	 esp, 20			; 00000014H

; 258  : 		}
; 259  : 		else

  00d1c	eb 26		 jmp	 SHORT $LN1@MasterLeve
$LN15@MasterLeve:

; 260  : 		{
; 261  : 			lpObj->MLExp += iAddExp;

  00d1e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d21	8b 4d 0c	 mov	 ecx, DWORD PTR _iAddExp$[ebp]
  00d24	8b 90 d8 00 00
	00		 mov	 edx, DWORD PTR [eax+216]
  00d2a	03 11		 add	 edx, DWORD PTR [ecx]
  00d2c	8b 80 dc 00 00
	00		 mov	 eax, DWORD PTR [eax+220]
  00d32	13 41 04	 adc	 eax, DWORD PTR [ecx+4]
  00d35	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00d38	89 91 d8 00 00
	00		 mov	 DWORD PTR [ecx+216], edx
  00d3e	89 81 dc 00 00
	00		 mov	 DWORD PTR [ecx+220], eax
$LN1@MasterLeve:

; 262  : 		}
; 263  : 		// ----
; 264  : 		GCSendExp_INT64(lpObj->m_Index, 65535, iAddExp, 0, 0);		

  00d44	6a 00		 push	 0
  00d46	6a 00		 push	 0
  00d48	8b 45 0c	 mov	 eax, DWORD PTR _iAddExp$[ebp]
  00d4b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00d4e	51		 push	 ecx
  00d4f	8b 10		 mov	 edx, DWORD PTR [eax]
  00d51	52		 push	 edx
  00d52	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00d57	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d5c	51		 push	 ecx
  00d5d	e8 00 00 00 00	 call	 ?GCSendExp_INT64@@YAXHH_JHH@Z ; GCSendExp_INT64
  00d62	83 c4 18	 add	 esp, 24			; 00000018H
$LN16@MasterLeve:

; 265  : 	}
; 266  : 	// ----
; 267  : 	return true;

  00d65	b8 01 00 00 00	 mov	 eax, 1
$LN27@MasterLeve:

; 268  : }

  00d6a	5f		 pop	 edi
  00d6b	5e		 pop	 esi
  00d6c	5b		 pop	 ebx
  00d6d	8b e5		 mov	 esp, ebp
  00d6f	5d		 pop	 ebp
  00d70	c2 10 00	 ret	 16			; 00000010H
?MasterLevelUp@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@AA_J_NH@Z ENDP ; CMasterLevelSystem::MasterLevelUp
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::CheckIsMasterLevelCharacter
; _this$ = ecx

; 273  : {

  00d80	55		 push	 ebp
  00d81	8b ec		 mov	 ebp, esp
  00d83	83 ec 44	 sub	 esp, 68			; 00000044H
  00d86	53		 push	 ebx
  00d87	56		 push	 esi
  00d88	57		 push	 edi
  00d89	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 274  : 	if( lpObj == NULL )

  00d8c	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  00d90	75 04		 jne	 SHORT $LN3@CheckIsMas

; 275  : 	{
; 276  : 		return false;

  00d92	33 c0		 xor	 eax, eax
  00d94	eb 3a		 jmp	 SHORT $LN4@CheckIsMas
$LN3@CheckIsMas:

; 277  : 	}
; 278  : 	// ----
; 279  : 	if( !lpObj->MLInfoLoad )

  00d96	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00d99	83 b8 ec 00 00
	00 00		 cmp	 DWORD PTR [eax+236], 0
  00da0	75 04		 jne	 SHORT $LN2@CheckIsMas

; 280  : 	{
; 281  : 		return false;

  00da2	33 c0		 xor	 eax, eax
  00da4	eb 2a		 jmp	 SHORT $LN4@CheckIsMas
$LN2@CheckIsMas:

; 282  : 	}
; 283  : 	// ----
; 284  : 	if( lpObj->Level >= MAX_CHAR_LEVEL && lpObj->ChangeUP3rd == 1 )

  00da6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00da9	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00db0	81 f9 90 01 00
	00		 cmp	 ecx, 400		; 00000190H
  00db6	7c 16		 jl	 SHORT $LN1@CheckIsMas
  00db8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00dbb	0f b6 88 bc 00
	00 00		 movzx	 ecx, BYTE PTR [eax+188]
  00dc2	83 f9 01	 cmp	 ecx, 1
  00dc5	75 07		 jne	 SHORT $LN1@CheckIsMas

; 285  : 	{
; 286  : 		return true;

  00dc7	b8 01 00 00 00	 mov	 eax, 1
  00dcc	eb 02		 jmp	 SHORT $LN4@CheckIsMas
$LN1@CheckIsMas:

; 287  : 	}
; 288  : 
; 289  : 
; 290  : 
; 291  : 	// ----
; 292  : 	return false;

  00dce	33 c0		 xor	 eax, eax
$LN4@CheckIsMas:

; 293  : }

  00dd0	5f		 pop	 edi
  00dd1	5e		 pop	 esi
  00dd2	5b		 pop	 ebx
  00dd3	8b e5		 mov	 esp, ebp
  00dd5	5d		 pop	 ebp
  00dd6	c2 04 00	 ret	 4
?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::CheckIsMasterLevelCharacter
_TEXT	ENDS
PUBLIC	?CheckMinMonsterLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@0@Z ; CMasterLevelSystem::CheckMinMonsterLevel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_i$230966 = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?CheckMinMonsterLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@0@Z PROC ; CMasterLevelSystem::CheckMinMonsterLevel
; _this$ = ecx

; 298  : {

  00de0	55		 push	 ebp
  00de1	8b ec		 mov	 ebp, esp
  00de3	83 ec 48	 sub	 esp, 72			; 00000048H
  00de6	53		 push	 ebx
  00de7	56		 push	 esi
  00de8	57		 push	 edi
  00de9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 299  : 
; 300  : 	//if(this->CheckIsMasterLevelCharacter(lpObj) != FALSE)
; 301  : 	//{
; 302  : 	//	if(lpTargetObj->Level < this->m_iMinMonsterKillLevel)
; 303  : 	//	{
; 304  : 	//		return 0;
; 305  : 	//	}
; 306  : 	//}
; 307  : 	//return 1;
; 308  : 
; 309  : 	if(this->CheckIsMasterLevelCharacter(lpObj) != FALSE)

  00dec	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00def	50		 push	 eax
  00df0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00df3	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  00df8	85 c0		 test	 eax, eax
  00dfa	0f 84 b0 00 00
	00		 je	 $LN11@CheckMinMo

; 310  : 	{
; 311  : 		if(this->m_CharacterLevel > lpObj->Level)

  00e00	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00e03	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00e0a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e0d	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00e10	7e 07		 jle	 SHORT $LN10@CheckMinMo

; 312  : 		{
; 313  : 			return false;

  00e12	33 c0		 xor	 eax, eax
  00e14	e9 9c 00 00 00	 jmp	 $LN12@CheckMinMo
$LN10@CheckMinMo:

; 314  : 		}
; 315  : 
; 316  : 		if(this->m_CharacterReset > lpObj->Reset)

  00e19	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e1c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00e1f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00e22	3b 91 90 22 00
	00		 cmp	 edx, DWORD PTR [ecx+8848]
  00e28	7e 07		 jle	 SHORT $LN9@CheckMinMo

; 317  : 		{
; 318  : 			return false;

  00e2a	33 c0		 xor	 eax, eax
  00e2c	e9 84 00 00 00	 jmp	 $LN12@CheckMinMo
$LN9@CheckMinMo:

; 319  : 		}
; 320  : 
; 321  : 		if(this->m_CharacterGrand > lpObj->GReset)

  00e31	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e34	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00e37	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00e3a	3b 91 94 22 00
	00		 cmp	 edx, DWORD PTR [ecx+8852]
  00e40	7e 04		 jle	 SHORT $LN8@CheckMinMo

; 322  : 		{
; 323  : 			return false;

  00e42	33 c0		 xor	 eax, eax
  00e44	eb 6f		 jmp	 SHORT $LN12@CheckMinMo
$LN8@CheckMinMo:

; 324  : 		}
; 325  : 
; 326  : 		if(this->m_UseMonsterList)

  00e46	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e49	0f b6 88 68 06
	00 00		 movzx	 ecx, BYTE PTR [eax+1640]
  00e50	85 c9		 test	 ecx, ecx
  00e52	74 43		 je	 SHORT $LN7@CheckMinMo

; 327  : 		{
; 328  : 			for(int i = 0; i < MASTER_MAX_LIST; i++)

  00e54	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$230966[ebp], 0
  00e5b	eb 09		 jmp	 SHORT $LN6@CheckMinMo
$LN5@CheckMinMo:
  00e5d	8b 45 f8	 mov	 eax, DWORD PTR _i$230966[ebp]
  00e60	83 c0 01	 add	 eax, 1
  00e63	89 45 f8	 mov	 DWORD PTR _i$230966[ebp], eax
$LN6@CheckMinMo:
  00e66	81 7d f8 c8 00
	00 00		 cmp	 DWORD PTR _i$230966[ebp], 200 ; 000000c8H
  00e6d	7d 22		 jge	 SHORT $LN4@CheckMinMo

; 329  : 			{
; 330  : 				if(this->m_MonsterList[i] == lpTargetObj->Class)

  00e6f	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00e72	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00e79	8b 55 f8	 mov	 edx, DWORD PTR _i$230966[ebp]
  00e7c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e7f	39 8c 90 6c 06
	00 00		 cmp	 DWORD PTR [eax+edx*4+1644], ecx
  00e86	75 07		 jne	 SHORT $LN3@CheckMinMo

; 331  : 				{
; 332  : 					return true;

  00e88	b8 01 00 00 00	 mov	 eax, 1
  00e8d	eb 26		 jmp	 SHORT $LN12@CheckMinMo
$LN3@CheckMinMo:

; 333  : 				}
; 334  : 			}

  00e8f	eb cc		 jmp	 SHORT $LN5@CheckMinMo
$LN4@CheckMinMo:

; 335  : 
; 336  : 			return false;

  00e91	33 c0		 xor	 eax, eax
  00e93	eb 20		 jmp	 SHORT $LN12@CheckMinMo

; 337  : 		}
; 338  : 		else

  00e95	eb 19		 jmp	 SHORT $LN11@CheckMinMo
$LN7@CheckMinMo:

; 339  : 		{
; 340  : 			if(lpTargetObj->Level < this->m_iMinMonsterKillLevel)

  00e97	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00e9a	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00ea1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ea4	3b 8a 60 06 00
	00		 cmp	 ecx, DWORD PTR [edx+1632]
  00eaa	7d 04		 jge	 SHORT $LN11@CheckMinMo

; 341  : 			{
; 342  : 				return false;

  00eac	33 c0		 xor	 eax, eax
  00eae	eb 05		 jmp	 SHORT $LN12@CheckMinMo
$LN11@CheckMinMo:

; 343  : 			}
; 344  : 		}
; 345  : 
; 346  : 	}
; 347  : 
; 348  : 	return true;

  00eb0	b8 01 00 00 00	 mov	 eax, 1
$LN12@CheckMinMo:

; 349  : }

  00eb5	5f		 pop	 edi
  00eb6	5e		 pop	 esi
  00eb7	5b		 pop	 ebx
  00eb8	8b e5		 mov	 esp, ebp
  00eba	5d		 pop	 ebp
  00ebb	c2 08 00	 ret	 8
?CheckMinMonsterLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP ; CMasterLevelSystem::CheckMinMonsterLevel
_TEXT	ENDS
PUBLIC	?GetLevelExperienceTable@CMasterLevelSystem@@QAE_JH@Z ; CMasterLevelSystem::GetLevelExperienceTable
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMasterLevel$ = 8					; size = 4
?GetLevelExperienceTable@CMasterLevelSystem@@QAE_JH@Z PROC ; CMasterLevelSystem::GetLevelExperienceTable
; _this$ = ecx

; 354  : {

  00ec0	55		 push	 ebp
  00ec1	8b ec		 mov	 ebp, esp
  00ec3	83 ec 44	 sub	 esp, 68			; 00000044H
  00ec6	53		 push	 ebx
  00ec7	56		 push	 esi
  00ec8	57		 push	 edi
  00ec9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 355  : 	return MLExpTlb[iMasterLevel];

  00ecc	8b 4d 08	 mov	 ecx, DWORD PTR _iMasterLevel$[ebp]
  00ecf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ed2	8b 44 ca 18	 mov	 eax, DWORD PTR [edx+ecx*8+24]
  00ed6	8b 54 ca 1c	 mov	 edx, DWORD PTR [edx+ecx*8+28]

; 356  : }

  00eda	5f		 pop	 edi
  00edb	5e		 pop	 esi
  00edc	5b		 pop	 ebx
  00edd	8b e5		 mov	 esp, ebp
  00edf	5d		 pop	 ebp
  00ee0	c2 04 00	 ret	 4
?GetLevelExperienceTable@CMasterLevelSystem@@QAE_JH@Z ENDP ; CMasterLevelSystem::GetLevelExperienceTable
_TEXT	ENDS
PUBLIC	?CheckMasterLevelCharacterPkLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckMasterLevelCharacterPkLevel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iRetValue$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?CheckMasterLevelCharacterPkLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::CheckMasterLevelCharacterPkLevel
; _this$ = ecx

; 361  : {

  00ef0	55		 push	 ebp
  00ef1	8b ec		 mov	 ebp, esp
  00ef3	83 ec 48	 sub	 esp, 72			; 00000048H
  00ef6	53		 push	 ebx
  00ef7	56		 push	 esi
  00ef8	57		 push	 edi
  00ef9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 362  : 	if( !this->CheckIsMasterLevelCharacter(lpObj) )

  00efc	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00eff	50		 push	 eax
  00f00	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f03	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  00f08	85 c0		 test	 eax, eax
  00f0a	75 05		 jne	 SHORT $LN8@CheckMaste

; 363  : 	{
; 364  : 		return -1;

  00f0c	83 c8 ff	 or	 eax, -1
  00f0f	eb 68		 jmp	 SHORT $LN9@CheckMaste
$LN8@CheckMaste:

; 365  : 	}
; 366  : 	// ----
; 367  : 	int iRetValue = 0;

  00f11	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iRetValue$[ebp], 0

; 368  : 	// ----
; 369  : 	if( lpObj->m_PK_Level <= 3 )

  00f18	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f1b	0f be 88 3d 01
	00 00		 movsx	 ecx, BYTE PTR [eax+317]
  00f22	83 f9 03	 cmp	 ecx, 3
  00f25	7f 09		 jg	 SHORT $LN7@CheckMaste

; 370  : 	{
; 371  : 		iRetValue = 7;

  00f27	c7 45 f8 07 00
	00 00		 mov	 DWORD PTR _iRetValue$[ebp], 7
  00f2e	eb 46		 jmp	 SHORT $LN6@CheckMaste
$LN7@CheckMaste:

; 372  : 	}
; 373  : 	else if( lpObj->m_PK_Level == 4 )

  00f30	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f33	0f be 88 3d 01
	00 00		 movsx	 ecx, BYTE PTR [eax+317]
  00f3a	83 f9 04	 cmp	 ecx, 4
  00f3d	75 09		 jne	 SHORT $LN5@CheckMaste

; 374  : 	{
; 375  : 		iRetValue = 20;

  00f3f	c7 45 f8 14 00
	00 00		 mov	 DWORD PTR _iRetValue$[ebp], 20 ; 00000014H
  00f46	eb 2e		 jmp	 SHORT $LN6@CheckMaste
$LN5@CheckMaste:

; 376  : 	}
; 377  : 	else if( lpObj->m_PK_Level == 5 )

  00f48	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f4b	0f be 88 3d 01
	00 00		 movsx	 ecx, BYTE PTR [eax+317]
  00f52	83 f9 05	 cmp	 ecx, 5
  00f55	75 09		 jne	 SHORT $LN3@CheckMaste

; 378  : 	{
; 379  : 		iRetValue = 30;

  00f57	c7 45 f8 1e 00
	00 00		 mov	 DWORD PTR _iRetValue$[ebp], 30 ; 0000001eH
  00f5e	eb 16		 jmp	 SHORT $LN6@CheckMaste
$LN3@CheckMaste:

; 380  : 	}
; 381  : 	else if( lpObj->m_PK_Level >= 6 )

  00f60	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f63	0f be 88 3d 01
	00 00		 movsx	 ecx, BYTE PTR [eax+317]
  00f6a	83 f9 06	 cmp	 ecx, 6
  00f6d	7c 07		 jl	 SHORT $LN6@CheckMaste

; 382  : 	{
; 383  : 		iRetValue = 40;

  00f6f	c7 45 f8 28 00
	00 00		 mov	 DWORD PTR _iRetValue$[ebp], 40 ; 00000028H
$LN6@CheckMaste:

; 384  : 	}
; 385  : 	// ----
; 386  : 	return iRetValue;

  00f76	8b 45 f8	 mov	 eax, DWORD PTR _iRetValue$[ebp]
$LN9@CheckMaste:

; 387  : }

  00f79	5f		 pop	 edi
  00f7a	5e		 pop	 esi
  00f7b	5b		 pop	 ebx
  00f7c	8b e5		 mov	 esp, ebp
  00f7e	5d		 pop	 ebp
  00f7f	c2 04 00	 ret	 4
?CheckMasterLevelCharacterPkLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::CheckMasterLevelCharacterPkLevel
_TEXT	ENDS
PUBLIC	?CheckMasterLevelCharacterMoneyLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckMasterLevelCharacterMoneyLevel
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?CheckMasterLevelCharacterMoneyLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::CheckMasterLevelCharacterMoneyLevel
; _this$ = ecx

; 392  : {

  00f90	55		 push	 ebp
  00f91	8b ec		 mov	 ebp, esp
  00f93	83 ec 44	 sub	 esp, 68			; 00000044H
  00f96	53		 push	 ebx
  00f97	56		 push	 esi
  00f98	57		 push	 edi
  00f99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 393  : 	if( !this->CheckIsMasterLevelCharacter(lpObj) )

  00f9c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00f9f	50		 push	 eax
  00fa0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fa3	e8 00 00 00 00	 call	 ?CheckIsMasterLevelCharacter@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::CheckIsMasterLevelCharacter
  00fa8	85 c0		 test	 eax, eax
  00faa	75 05		 jne	 SHORT $LN1@CheckMaste@2

; 394  : 	{
; 395  : 		return -1;

  00fac	83 c8 ff	 or	 eax, -1
  00faf	eb 05		 jmp	 SHORT $LN2@CheckMaste@2
$LN1@CheckMaste@2:

; 396  : 	}
; 397  : 	// ----
; 398  : 	return MASTER_ZEN_DEC;

  00fb1	b8 04 00 00 00	 mov	 eax, 4
$LN2@CheckMaste@2:

; 399  : }

  00fb6	5f		 pop	 edi
  00fb7	5e		 pop	 esi
  00fb8	5b		 pop	 ebx
  00fb9	8b e5		 mov	 esp, ebp
  00fbb	5d		 pop	 ebp
  00fbc	c2 04 00	 ret	 4
?CheckMasterLevelCharacterMoneyLevel@CMasterLevelSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::CheckMasterLevelCharacterMoneyLevel
_TEXT	ENDS
PUBLIC	??_C@_0CJ@LLCFPEEA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Request?5master?5level?5in@ ; `string'
PUBLIC	?set@PBMSG_HEAD@@QAEXPAEEE@Z			; PBMSG_HEAD::set
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDReqMasterLevelInfo
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0CJ@LLCFPEEA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Request?5master?5level?5in@
CONST	SEGMENT
??_C@_0CJ@LLCFPEEA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Request?5master?5level?5in@ DB '['
	DB	'%s][%s] Request master level info to DB', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pMsg$ = -28						; size = 20
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::GDReqMasterLevelInfo
; _this$ = ecx

; 404  : {

  00fc0	55		 push	 ebp
  00fc1	8b ec		 mov	 ebp, esp
  00fc3	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00fc6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00fcb	33 c5		 xor	 eax, ebp
  00fcd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00fd0	53		 push	 ebx
  00fd1	56		 push	 esi
  00fd2	57		 push	 edi
  00fd3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 405  : 	if( lpObj->MLInfoLoad )

  00fd6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00fd9	83 b8 ec 00 00
	00 00		 cmp	 DWORD PTR [eax+236], 0
  00fe0	74 02		 je	 SHORT $LN1@GDReqMaste

; 406  : 	{
; 407  : 		return;

  00fe2	eb 60		 jmp	 SHORT $LN2@GDReqMaste
$LN1@GDReqMaste:

; 408  : 	}
; 409  : 	// ----
; 410  : 	MLP_REQ_MASTERLEVEL_INFO pMsg;
; 411  : 	pMsg.h.set((LPBYTE)&pMsg, 0x30, sizeof(MLP_REQ_MASTERLEVEL_INFO));

  00fe4	6a 14		 push	 20			; 00000014H
  00fe6	6a 30		 push	 48			; 00000030H
  00fe8	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00feb	50		 push	 eax
  00fec	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00fef	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD@@QAEXPAEEE@Z ; PBMSG_HEAD::set

; 412  : 	// ----
; 413  : 	pMsg.iUserIndex = lpObj->m_Index;

  00ff4	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00ff7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ff9	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 414  :     memcpy(pMsg.szCharName, lpObj->Name, MAX_IDSTRING);

  00ffc	6a 0a		 push	 10			; 0000000aH
  00ffe	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01001	83 c0 77	 add	 eax, 119		; 00000077H
  01004	50		 push	 eax
  01005	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp+8]
  01008	51		 push	 ecx
  01009	e8 00 00 00 00	 call	 _memcpy
  0100e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 415  :     pMsg.szCharName[MAX_IDSTRING] = 0;

  01011	c6 45 f6 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 416  : 	// ----
; 417  :     cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  01015	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01019	50		 push	 eax
  0101a	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0101d	51		 push	 ecx
  0101e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  01023	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 418  : 	// ----
; 419  :     LogAddTD("[%s][%s] Request master level info to DB", lpObj->AccountID, lpObj->Name);

  01028	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0102b	83 c0 77	 add	 eax, 119		; 00000077H
  0102e	50		 push	 eax
  0102f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01032	83 c1 6c	 add	 ecx, 108		; 0000006cH
  01035	51		 push	 ecx
  01036	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LLCFPEEA@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Request?5master?5level?5in@
  0103b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01041	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@GDReqMaste:

; 420  : }

  01044	5f		 pop	 edi
  01045	5e		 pop	 esi
  01046	5b		 pop	 ebx
  01047	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0104a	33 cd		 xor	 ecx, ebp
  0104c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01051	8b e5		 mov	 esp, ebp
  01053	5d		 pop	 ebp
  01054	c2 04 00	 ret	 4
?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::GDReqMasterLevelInfo
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD@@QAEXPAEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 1
?set@PBMSG_HEAD@@QAEXPAEEE@Z PROC			; PBMSG_HEAD::set, COMDAT
; _this$ = ecx

; 80   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 82   : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 10	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 83   : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 84   : 	};	// line : 22

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
?set@PBMSG_HEAD@@QAEXPAEEE@Z ENDP			; PBMSG_HEAD::set
_TEXT	ENDS
PUBLIC	?GCSendMasterLevelWindowStatus@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GCSendMasterLevelWindowStatus
PUBLIC	??_C@_0EM@BOGEFCCG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Reset?5Max?5Value?5For?5Mas@ ; `string'
PUBLIC	??_C@_0FF@JCEEFFEK@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Recv?5MasterLevel?5Info?5?$FL@ ; `string'
PUBLIC	?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDRequestMasterLevelInfoSave
PUBLIC	??_C@_0FK@KDMMLNLP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5First?5@ ; `string'
PUBLIC	??_C@_0CE@KENINDIJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Load?5F@ ; `string'
PUBLIC	?DGRequestMasterLevelInfoLoad@CMasterLevelSystem@@QAEXPAE@Z ; CMasterLevelSystem::DGRequestMasterLevelInfoLoad
EXTRN	?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z:PROC ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	?gObjCalcMLSkillItemOption@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjCalcMLSkillItemOption
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnectedGP@@YAHH@Z:PROC			; gObjIsConnectedGP
;	COMDAT ??_C@_0EM@BOGEFCCG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Reset?5Max?5Value?5For?5Mas@
; File d:\projects\exteam6.3\source\gameserver\gameserver\newmasterlevelsystem.cpp
CONST	SEGMENT
??_C@_0EM@BOGEFCCG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Reset?5Max?5Value?5For?5Mas@ DB '['
	DB	'%s][%s] Reset Max Value For MasterLevel [MaxLife:%d][MaxMana:'
	DB	'%d][MaxSD:%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@JCEEFFEK@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Recv?5MasterLevel?5Info?5?$FL@
CONST	SEGMENT
??_C@_0FF@JCEEFFEK@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Recv?5MasterLevel?5Info?5?$FL@ DB '['
	DB	'%s][%s] Recv MasterLevel Info [MLevel:%d][MLExp:%I64d][MLNext'
	DB	'Exp:%I64d][MLPoint:%d]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@KDMMLNLP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5First?5@
CONST	SEGMENT
??_C@_0FK@KDMMLNLP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5First?5@ DB '['
	DB	'%s][%s] MasterLevel Info First Set [MLevel:%d][MLExp:%I64d][M'
	DB	'LNextExp:%I64d][MLPoint:%d]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KENINDIJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Load?5F@
CONST	SEGMENT
??_C@_0CE@KENINDIJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Load?5F@ DB '['
	DB	'%s][%s] MasterLevel Info Load Fail', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv437 = -88						; size = 4
tv413 = -88						; size = 4
tv432 = -84						; size = 4
tv408 = -84						; size = 4
tv329 = -84						; size = 4
_lpObj$ = -16						; size = 4
_iIndex$ = -12						; size = 4
_lpRecvMsg$ = -8					; size = 4
_this$ = -4						; size = 4
_aRecv$ = 8						; size = 4
?DGRequestMasterLevelInfoLoad@CMasterLevelSystem@@QAEXPAE@Z PROC ; CMasterLevelSystem::DGRequestMasterLevelInfoLoad
; _this$ = ecx

; 425  : {

  01060	55		 push	 ebp
  01061	8b ec		 mov	 ebp, esp
  01063	83 ec 58	 sub	 esp, 88			; 00000058H
  01066	53		 push	 ebx
  01067	56		 push	 esi
  01068	57		 push	 edi
  01069	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 426  : 	if( !aRecv )

  0106c	83 7d 08 00	 cmp	 DWORD PTR _aRecv$[ebp], 0
  01070	75 05		 jne	 SHORT $LN9@DGRequestM

; 427  : 	{
; 428  : 		return;

  01072	e9 73 04 00 00	 jmp	 $LN10@DGRequestM
$LN9@DGRequestM:

; 429  : 	}
; 430  : 	// ----
; 431  : 	MLP_ANS_MASTERLEVEL_INFO * lpRecvMsg = (MLP_ANS_MASTERLEVEL_INFO*)aRecv;

  01077	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0107a	89 45 f8	 mov	 DWORD PTR _lpRecvMsg$[ebp], eax

; 432  : 	// ----
; 433  : 	if( !gObjIsConnectedGP(lpRecvMsg->iUserIndex) )

  0107d	8b 45 f8	 mov	 eax, DWORD PTR _lpRecvMsg$[ebp]
  01080	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01083	51		 push	 ecx
  01084	e8 00 00 00 00	 call	 ?gObjIsConnectedGP@@YAHH@Z ; gObjIsConnectedGP
  01089	83 c4 04	 add	 esp, 4
  0108c	85 c0		 test	 eax, eax
  0108e	75 05		 jne	 SHORT $LN8@DGRequestM

; 434  : 	{
; 435  : 		return;

  01090	e9 55 04 00 00	 jmp	 $LN10@DGRequestM
$LN8@DGRequestM:

; 436  : 	}
; 437  : 	// ----
; 438  : 	int iIndex	= lpRecvMsg->iUserIndex;

  01095	8b 45 f8	 mov	 eax, DWORD PTR _lpRecvMsg$[ebp]
  01098	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0109b	89 4d f4	 mov	 DWORD PTR _iIndex$[ebp], ecx

; 439  : 	LPOBJ lpObj	= &gObj[lpRecvMsg->iUserIndex];

  0109e	8b 45 f8	 mov	 eax, DWORD PTR _lpRecvMsg$[ebp]
  010a1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  010a4	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  010aa	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  010b0	89 4d f0	 mov	 DWORD PTR _lpObj$[ebp], ecx

; 440  : 	// ---
; 441  : 	if( lpObj->MLInfoLoad )

  010b3	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010b6	83 b8 ec 00 00
	00 00		 cmp	 DWORD PTR [eax+236], 0
  010bd	74 05		 je	 SHORT $LN7@DGRequestM

; 442  : 	{
; 443  : 		return;

  010bf	e9 26 04 00 00	 jmp	 $LN10@DGRequestM
$LN7@DGRequestM:

; 444  : 	}
; 445  : 	// ----
; 446  : 	if( !lpRecvMsg->btResult )

  010c4	8b 45 f8	 mov	 eax, DWORD PTR _lpRecvMsg$[ebp]
  010c7	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  010cb	85 c9		 test	 ecx, ecx
  010cd	75 21		 jne	 SHORT $LN6@DGRequestM

; 447  : 	{
; 448  : 		LogAddTD("[%s][%s] MasterLevel Info Load Fail", lpObj->AccountID, lpObj->Name);	//-> New

  010cf	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  010d2	83 c0 77	 add	 eax, 119		; 00000077H
  010d5	50		 push	 eax
  010d6	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  010d9	83 c1 6c	 add	 ecx, 108		; 0000006cH
  010dc	51		 push	 ecx
  010dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KENINDIJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Load?5F@
  010e2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  010e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 449  : 		return;

  010eb	e9 fa 03 00 00	 jmp	 $LN10@DGRequestM
$LN6@DGRequestM:

; 450  : 	}
; 451  : 	// ----
; 452  : 	if( lpRecvMsg->btResult == 1 )

  010f0	8b 45 f8	 mov	 eax, DWORD PTR _lpRecvMsg$[ebp]
  010f3	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  010f7	83 f9 01	 cmp	 ecx, 1
  010fa	0f 85 c0 03 00
	00		 jne	 $LN5@DGRequestM

; 453  : 	{
; 454  : 		/*if( lpObj->MLPoint + lpRecvMsg->nMLPoint != lpRecvMsg->nMLevel )	//-> New (be good use MASTER_MAX_POINT for check)
; 455  : 		{
; 456  : 			LogAddTD("[%s][%s] MasterLevel Info Mismatch!! - Point(%d), Use Point(%d), Level(%d)",
; 457  : 				lpObj->AccountID, lpObj->Name,
; 458  : 				lpRecvMsg->nMLPoint, lpObj->MLInfoLoad, lpRecvMsg->nMLevel);
; 459  : 		}*/
; 460  : 		// ----
; 461  : 		lpObj->MLInfoLoad = 1;

  01100	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01103	c7 80 ec 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+236], 1

; 462  : 		// ----
; 463  : 		if( lpRecvMsg->nMLevel == 0 && lpRecvMsg->i64NextMLExp == 0 )

  0110d	8b 45 f8	 mov	 eax, DWORD PTR _lpRecvMsg$[ebp]
  01110	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  01114	85 c9		 test	 ecx, ecx
  01116	0f 85 cd 00 00
	00		 jne	 $LN4@DGRequestM
  0111c	8b 45 f8	 mov	 eax, DWORD PTR _lpRecvMsg$[ebp]
  0111f	89 45 ac	 mov	 DWORD PTR tv329[ebp], eax
  01122	8b 4d ac	 mov	 ecx, DWORD PTR tv329[ebp]
  01125	8b 55 ac	 mov	 edx, DWORD PTR tv329[ebp]
  01128	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0112b	0b 42 24	 or	 eax, DWORD PTR [edx+36]
  0112e	0f 85 b5 00 00
	00		 jne	 $LN4@DGRequestM

; 464  : 		{
; 465  : 			lpObj->MLevel			= lpRecvMsg->nMLevel;

  01134	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01137	8b 4d f8	 mov	 ecx, DWORD PTR _lpRecvMsg$[ebp]
  0113a	66 8b 51 14	 mov	 dx, WORD PTR [ecx+20]
  0113e	66 89 90 d0 00
	00 00		 mov	 WORD PTR [eax+208], dx

; 466  : 			lpObj->MLExp		= lpRecvMsg->i64MLExp;

  01145	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01148	8b 4d f8	 mov	 ecx, DWORD PTR _lpRecvMsg$[ebp]
  0114b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0114e	89 90 d8 00 00
	00		 mov	 DWORD PTR [eax+216], edx
  01154	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  01157	89 88 dc 00 00
	00		 mov	 DWORD PTR [eax+220], ecx

; 467  : 			lpObj->MLNextExp	= MLExpTlb[1];

  0115d	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01160	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01163	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  01166	89 90 e0 00 00
	00		 mov	 DWORD PTR [eax+224], edx
  0116c	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0116f	89 88 e4 00 00
	00		 mov	 DWORD PTR [eax+228], ecx

; 468  : 			lpObj->MLPoint		= lpRecvMsg->nMLPoint;

  01175	8b 45 f8	 mov	 eax, DWORD PTR _lpRecvMsg$[ebp]
  01178	0f bf 48 28	 movsx	 ecx, WORD PTR [eax+40]
  0117c	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0117f	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx

; 469  : 			// ----
; 470  : 			LogAddTD("[%s][%s] MasterLevel Info First Set [MLevel:%d][MLExp:%I64d][MLNextExp:%I64d][MLPoint:%d]",
; 471  : 				lpObj->AccountID, lpObj->Name, lpObj->MLevel, 
; 472  : 				lpObj->MLExp, lpObj->MLNextExp, lpObj->MLPoint);

  01185	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01188	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  0118e	51		 push	 ecx
  0118f	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01192	8b 82 e4 00 00
	00		 mov	 eax, DWORD PTR [edx+228]
  01198	50		 push	 eax
  01199	8b 8a e0 00 00
	00		 mov	 ecx, DWORD PTR [edx+224]
  0119f	51		 push	 ecx
  011a0	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  011a3	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  011a9	50		 push	 eax
  011aa	8b 8a d8 00 00
	00		 mov	 ecx, DWORD PTR [edx+216]
  011b0	51		 push	 ecx
  011b1	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  011b4	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  011bb	50		 push	 eax
  011bc	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  011bf	83 c1 77	 add	 ecx, 119		; 00000077H
  011c2	51		 push	 ecx
  011c3	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  011c6	83 c2 6c	 add	 edx, 108		; 0000006cH
  011c9	52		 push	 edx
  011ca	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@KDMMLNLP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5First?5@
  011cf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  011d5	83 c4 24	 add	 esp, 36			; 00000024H

; 473  : 			// ----
; 474  : 			this->GDRequestMasterLevelInfoSave(lpObj);

  011d8	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011db	50		 push	 eax
  011dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011df	e8 00 00 00 00	 call	 ?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDRequestMasterLevelInfoSave

; 475  : 		}
; 476  : 		else

  011e4	e9 b0 00 00 00	 jmp	 $LN3@DGRequestM
$LN4@DGRequestM:

; 477  : 		{
; 478  : 			lpObj->MLevel			= lpRecvMsg->nMLevel;

  011e9	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011ec	8b 4d f8	 mov	 ecx, DWORD PTR _lpRecvMsg$[ebp]
  011ef	66 8b 51 14	 mov	 dx, WORD PTR [ecx+20]
  011f3	66 89 90 d0 00
	00 00		 mov	 WORD PTR [eax+208], dx

; 479  : 			lpObj->MLExp		= lpRecvMsg->i64MLExp;

  011fa	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  011fd	8b 4d f8	 mov	 ecx, DWORD PTR _lpRecvMsg$[ebp]
  01200	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01203	89 90 d8 00 00
	00		 mov	 DWORD PTR [eax+216], edx
  01209	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0120c	89 88 dc 00 00
	00		 mov	 DWORD PTR [eax+220], ecx

; 480  : 			lpObj->MLNextExp	= lpRecvMsg->i64NextMLExp;

  01212	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01215	8b 4d f8	 mov	 ecx, DWORD PTR _lpRecvMsg$[ebp]
  01218	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0121b	89 90 e0 00 00
	00		 mov	 DWORD PTR [eax+224], edx
  01221	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  01224	89 88 e4 00 00
	00		 mov	 DWORD PTR [eax+228], ecx

; 481  : 			lpObj->MLPoint		= lpRecvMsg->nMLPoint;

  0122a	8b 45 f8	 mov	 eax, DWORD PTR _lpRecvMsg$[ebp]
  0122d	0f bf 48 28	 movsx	 ecx, WORD PTR [eax+40]
  01231	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01234	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx

; 482  : 			// ----
; 483  : 			LogAddTD("[%s][%s] Recv MasterLevel Info [MLevel:%d][MLExp:%I64d][MLNextExp:%I64d][MLPoint:%d]", 
; 484  : 				lpObj->AccountID, lpObj->Name, lpObj->MLevel, 
; 485  : 				lpObj->MLExp, lpObj->MLNextExp, lpObj->MLPoint);

  0123a	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0123d	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  01243	51		 push	 ecx
  01244	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01247	8b 82 e4 00 00
	00		 mov	 eax, DWORD PTR [edx+228]
  0124d	50		 push	 eax
  0124e	8b 8a e0 00 00
	00		 mov	 ecx, DWORD PTR [edx+224]
  01254	51		 push	 ecx
  01255	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01258	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  0125e	50		 push	 eax
  0125f	8b 8a d8 00 00
	00		 mov	 ecx, DWORD PTR [edx+216]
  01265	51		 push	 ecx
  01266	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01269	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  01270	50		 push	 eax
  01271	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01274	83 c1 77	 add	 ecx, 119		; 00000077H
  01277	51		 push	 ecx
  01278	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0127b	83 c2 6c	 add	 edx, 108		; 0000006cH
  0127e	52		 push	 edx
  0127f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@JCEEFFEK@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Recv?5MasterLevel?5Info?5?$FL@
  01284	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0128a	83 c4 24	 add	 esp, 36			; 00000024H

; 486  : 			// ----
; 487  : 			this->GDRequestMasterLevelInfoSave(lpObj);

  0128d	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01290	50		 push	 eax
  01291	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01294	e8 00 00 00 00	 call	 ?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDRequestMasterLevelInfoSave
$LN3@DGRequestM:

; 488  : 		}
; 489  : 		// ----
; 490  : 		lpObj->MaxLife = DCInfo.DefClass[lpObj->Class].Life + (lpObj->Level + lpObj->MLevel - 1) * DCInfo.DefClass[lpObj->Class].LevelLife  + ((lpObj->Vitality - DCInfo.DefClass[lpObj->Class].Vitality ) * DCInfo.DefClass[lpObj->Class].VitalityToLife);

  01299	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0129c	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  012a3	69 c9 c8 0b 00
	00		 imul	 ecx, 3016		; 00000bc8H
  012a9	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  012ac	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  012b3	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  012b6	0f bf 92 d0 00
	00 00		 movsx	 edx, WORD PTR [edx+208]
  012bd	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  012c1	89 45 ac	 mov	 DWORD PTR tv408[ebp], eax
  012c4	db 45 ac	 fild	 DWORD PTR tv408[ebp]
  012c7	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  012ca	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  012d1	69 c0 c8 0b 00
	00		 imul	 eax, 3016		; 00000bc8H
  012d7	d8 88 10 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+16]
  012dd	d8 81 14 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+20]
  012e3	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  012e6	0f b7 91 f8 00
	00 00		 movzx	 edx, WORD PTR [ecx+248]
  012ed	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  012f0	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  012f7	69 c9 c8 0b 00
	00		 imul	 ecx, 3016		; 00000bc8H
  012fd	0f b7 81 0c 00
	00 00		 movzx	 eax, WORD PTR ?DCInfo@@3Vclassdef@@A[ecx+12]
  01304	2b d0		 sub	 edx, eax
  01306	89 55 a8	 mov	 DWORD PTR tv413[ebp], edx
  01309	db 45 a8	 fild	 DWORD PTR tv413[ebp]
  0130c	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0130f	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  01316	69 d2 c8 0b 00
	00		 imul	 edx, 3016		; 00000bc8H
  0131c	d8 8a 28 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[edx+40]
  01322	de c1		 faddp	 ST(1), ST(0)
  01324	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01327	d9 98 00 01 00
	00		 fstp	 DWORD PTR [eax+256]

; 491  : 		// ----
; 492  : 		if( lpObj->Life > lpObj->MaxLife + lpObj->AddLife )

  0132d	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01330	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  01336	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01339	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  0133f	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01342	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  01348	de d9		 fcompp
  0134a	df e0		 fnstsw	 ax
  0134c	f6 c4 41	 test	 ah, 65			; 00000041H
  0134f	75 12		 jne	 SHORT $LN2@DGRequestM

; 493  : 		{
; 494  : 			lpObj->Life = lpObj->MaxLife;

  01351	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01354	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01357	d9 81 00 01 00
	00		 fld	 DWORD PTR [ecx+256]
  0135d	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]
$LN2@DGRequestM:

; 495  : 		}
; 496  : 		// ----
; 497  : 		lpObj->MaxMana = DCInfo.DefClass[lpObj->Class].Mana + (lpObj->Level + lpObj->MLevel - 1) * DCInfo.DefClass[lpObj->Class].LevelMana  + ((lpObj->Energy - DCInfo.DefClass[lpObj->Class].Energy ) * DCInfo.DefClass[lpObj->Class].EnergyToMana);

  01363	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01366	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0136d	69 c9 c8 0b 00
	00		 imul	 ecx, 3016		; 00000bc8H
  01373	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01376	0f bf 82 be 00
	00 00		 movsx	 eax, WORD PTR [edx+190]
  0137d	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01380	0f bf 92 d0 00
	00 00		 movsx	 edx, WORD PTR [edx+208]
  01387	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  0138b	89 45 ac	 mov	 DWORD PTR tv432[ebp], eax
  0138e	db 45 ac	 fild	 DWORD PTR tv432[ebp]
  01391	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01394	0f b7 82 b8 00
	00 00		 movzx	 eax, WORD PTR [edx+184]
  0139b	69 c0 c8 0b 00
	00		 imul	 eax, 3016		; 00000bc8H
  013a1	d8 88 1c 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+28]
  013a7	d8 81 20 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[ecx+32]
  013ad	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  013b0	0f b7 91 fa 00
	00 00		 movzx	 edx, WORD PTR [ecx+250]
  013b7	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013ba	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  013c1	69 c9 c8 0b 00
	00		 imul	 ecx, 3016		; 00000bc8H
  013c7	0f b7 81 0e 00
	00 00		 movzx	 eax, WORD PTR ?DCInfo@@3Vclassdef@@A[ecx+14]
  013ce	2b d0		 sub	 edx, eax
  013d0	89 55 a8	 mov	 DWORD PTR tv437[ebp], edx
  013d3	db 45 a8	 fild	 DWORD PTR tv437[ebp]
  013d6	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  013d9	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  013e0	69 d2 c8 0b 00
	00		 imul	 edx, 3016		; 00000bc8H
  013e6	d8 8a 2c 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[edx+44]
  013ec	de c1		 faddp	 ST(1), ST(0)
  013ee	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013f1	d9 98 14 01 00
	00		 fstp	 DWORD PTR [eax+276]

; 498  : 		// ----
; 499  : 		if( lpObj->Mana > lpObj->MaxMana + lpObj->AddMana )

  013f7	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  013fa	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  01400	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01403	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  01409	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0140c	d9 82 10 01 00
	00		 fld	 DWORD PTR [edx+272]
  01412	de d9		 fcompp
  01414	df e0		 fnstsw	 ax
  01416	f6 c4 41	 test	 ah, 65			; 00000041H
  01419	75 12		 jne	 SHORT $LN1@DGRequestM

; 500  : 		{
; 501  : 			lpObj->Mana = lpObj->MaxMana;

  0141b	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0141e	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01421	d9 81 14 01 00
	00		 fld	 DWORD PTR [ecx+276]
  01427	d9 98 10 01 00
	00		 fstp	 DWORD PTR [eax+272]
$LN1@DGRequestM:

; 502  : 		}
; 503  : 		// ----
; 504  : 		gObjCalcMaxLifePower(lpObj->m_Index);

  0142d	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01430	8b 08		 mov	 ecx, DWORD PTR [eax]
  01432	51		 push	 ecx
  01433	e8 00 00 00 00	 call	 ?gObjCalcMaxLifePower@@YAXH@Z ; gObjCalcMaxLifePower
  01438	83 c4 04	 add	 esp, 4

; 505  : 		gObjSetBP(lpObj->m_Index);

  0143b	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0143e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01440	51		 push	 ecx
  01441	e8 00 00 00 00	 call	 ?gObjSetBP@@YAXH@Z	; gObjSetBP
  01446	83 c4 04	 add	 esp, 4

; 506  : 		gObjCalcShieldPoint(lpObj);

  01449	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0144c	50		 push	 eax
  0144d	e8 00 00 00 00	 call	 ?gObjCalcShieldPoint@@YAXPAUOBJECTSTRUCT@@@Z ; gObjCalcShieldPoint
  01452	83 c4 04	 add	 esp, 4

; 507  : 		// ----
; 508  : 		lpObj->iShield = lpObj->iMaxShield + lpObj->iAddShield;

  01455	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01458	8b 88 58 01 00
	00		 mov	 ecx, DWORD PTR [eax+344]
  0145e	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01461	03 8a 5c 01 00
	00		 add	 ecx, DWORD PTR [edx+348]
  01467	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0146a	89 88 54 01 00
	00		 mov	 DWORD PTR [eax+340], ecx

; 509  : 		// ----
; 510  : 		LogAddTD("[%s][%s] Reset Max Value For MasterLevel [MaxLife:%d][MaxMana:%d][MaxSD:%d]", lpObj->AccountID, lpObj->Name, lpObj->MaxLife, lpObj->MaxMana, lpObj->iShield);

  01470	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01473	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  01479	51		 push	 ecx
  0147a	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0147d	d9 82 14 01 00
	00		 fld	 DWORD PTR [edx+276]
  01483	83 ec 08	 sub	 esp, 8
  01486	dd 1c 24	 fstp	 QWORD PTR [esp]
  01489	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0148c	d9 80 00 01 00
	00		 fld	 DWORD PTR [eax+256]
  01492	83 ec 08	 sub	 esp, 8
  01495	dd 1c 24	 fstp	 QWORD PTR [esp]
  01498	8b 4d f0	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0149b	83 c1 77	 add	 ecx, 119		; 00000077H
  0149e	51		 push	 ecx
  0149f	8b 55 f0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  014a2	83 c2 6c	 add	 edx, 108		; 0000006cH
  014a5	52		 push	 edx
  014a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@BOGEFCCG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Reset?5Max?5Value?5For?5Mas@
  014ab	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  014b1	83 c4 20	 add	 esp, 32			; 00000020H

; 511  : 		// ----
; 512  : 		this->GCSendMasterLevelWindowStatus(lpObj);

  014b4	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014b7	50		 push	 eax
  014b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014bb	e8 00 00 00 00	 call	 ?GCSendMasterLevelWindowStatus@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GCSendMasterLevelWindowStatus
$LN5@DGRequestM:

; 513  : 		// ----
; 514  : 		//	GCSendMasterLevelWindowStatus
; 515  : 		//GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield);
; 516  : 		//GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 517  : 	}
; 518  : 	// ----
; 519  : 	gObjCalCharacter(lpObj->m_Index);

  014c0	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  014c5	51		 push	 ecx
  014c6	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  014cb	83 c4 04	 add	 esp, 4

; 520  : 	// -----
; 521  : 	gObjCalcMLSkillItemOption(lpObj);

  014ce	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014d1	50		 push	 eax
  014d2	e8 00 00 00 00	 call	 ?gObjCalcMLSkillItemOption@@YAXPAUOBJECTSTRUCT@@@Z ; gObjCalcMLSkillItemOption
  014d7	83 c4 04	 add	 esp, 4

; 522  : 	g_MasterSkillSystem.CGReqGetMasterLevelSkillTree(lpObj->m_Index);

  014da	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$[ebp]
  014dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  014df	51		 push	 ecx
  014e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  014e5	e8 00 00 00 00	 call	 ?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
$LN10@DGRequestM:

; 523  : }

  014ea	5f		 pop	 edi
  014eb	5e		 pop	 esi
  014ec	5b		 pop	 ebx
  014ed	8b e5		 mov	 esp, ebp
  014ef	5d		 pop	 ebp
  014f0	c2 04 00	 ret	 4
?DGRequestMasterLevelInfoLoad@CMasterLevelSystem@@QAEXPAE@Z ENDP ; CMasterLevelSystem::DGRequestMasterLevelInfoLoad
_TEXT	ENDS
PUBLIC	??_C@_0FF@KOBCGNEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Save?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__allshr:PROC
;	COMDAT ??_C@_0FF@KOBCGNEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Save?5?$FL@
CONST	SEGMENT
??_C@_0FF@KOBCGNEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Save?5?$FL@ DB '['
	DB	'%s][%s] MasterLevel Info Save [MLevel:%d][MLExp:%I64d][MLNext'
	DB	'Exp:%I64d][MLPoint:%d]', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_pMsg$ = -48						; size = 40
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::GDRequestMasterLevelInfoSave
; _this$ = ecx

; 528  : {

  01500	55		 push	 ebp
  01501	8b ec		 mov	 ebp, esp
  01503	83 ec 70	 sub	 esp, 112		; 00000070H
  01506	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0150b	33 c5		 xor	 eax, ebp
  0150d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01510	53		 push	 ebx
  01511	56		 push	 esi
  01512	57		 push	 edi
  01513	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 529  : 	if( !lpObj->MLInfoLoad )

  01516	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01519	83 b8 ec 00 00
	00 00		 cmp	 DWORD PTR [eax+236], 0
  01520	75 05		 jne	 SHORT $LN1@GDRequestM

; 530  : 	{
; 531  : 		return;

  01522	e9 0c 01 00 00	 jmp	 $LN2@GDRequestM
$LN1@GDRequestM:

; 532  : 	}
; 533  : 	// ----
; 534  : 	MLP_REQ_MASTERLEVEL_INFOSAVE pMsg;
; 535  : 	pMsg.h.set((LPBYTE)&pMsg, 0x31, sizeof(MLP_REQ_MASTERLEVEL_INFOSAVE));

  01527	6a 28		 push	 40			; 00000028H
  01529	6a 31		 push	 49			; 00000031H
  0152b	8d 45 d0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0152e	50		 push	 eax
  0152f	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01532	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD@@QAEXPAEEE@Z ; PBMSG_HEAD::set

; 536  : 	// ----
; 537  : 	memcpy(pMsg.szCharName, lpObj->Name, MAX_IDSTRING);

  01537	6a 0a		 push	 10			; 0000000aH
  01539	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0153c	83 c0 77	 add	 eax, 119		; 00000077H
  0153f	50		 push	 eax
  01540	8d 4d d3	 lea	 ecx, DWORD PTR _pMsg$[ebp+3]
  01543	51		 push	 ecx
  01544	e8 00 00 00 00	 call	 _memcpy
  01549	83 c4 0c	 add	 esp, 12			; 0000000cH

; 538  : 	pMsg.szCharName[MAX_IDSTRING] = 0;

  0154c	c6 45 dd 00	 mov	 BYTE PTR _pMsg$[ebp+13], 0

; 539  : 	pMsg.nMLevel		= lpObj->MLevel;

  01550	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01553	66 8b 88 d0 00
	00 00		 mov	 cx, WORD PTR [eax+208]
  0155a	66 89 4d de	 mov	 WORD PTR _pMsg$[ebp+14], cx

; 540  : 	pMsg.i64MLExp		= lpObj->MLExp;

  0155e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01561	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  01567	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+16], ecx
  0156a	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  01570	89 55 e4	 mov	 DWORD PTR _pMsg$[ebp+20], edx

; 541  : 	pMsg.i64NextMLExp	= lpObj->MLNextExp;

  01573	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01576	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  0157c	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  0157f	8b 90 e4 00 00
	00		 mov	 edx, DWORD PTR [eax+228]
  01585	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+28], edx

; 542  : 	pMsg.nMLPoint		= LOWORD(lpObj->MLPoint);

  01588	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0158b	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  01591	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01597	66 89 4d f0	 mov	 WORD PTR _pMsg$[ebp+32], cx

; 543  : 	// ----
; 544  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0159b	0f b6 45 d1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0159f	50		 push	 eax
  015a0	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  015a3	51		 push	 ecx
  015a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  015a9	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 545  : 	// ----
; 546  : 	LogAddTD("[%s][%s] MasterLevel Info Save [MLevel:%d][MLExp:%I64d][MLNextExp:%I64d][MLPoint:%d]",
; 547  : 		lpObj->AccountID, lpObj->Name, lpObj->MLevel, 
; 548  : 		LODWORD(lpObj->MLExp), HIDWORD(lpObj->MLExp), 
; 549  : 		LODWORD(lpObj->MLNextExp), HIDWORD(lpObj->MLNextExp),
; 550  : 		lpObj->MLPoint);

  015ae	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015b1	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  015b7	51		 push	 ecx
  015b8	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  015bb	8b 82 e0 00 00
	00		 mov	 eax, DWORD PTR [edx+224]
  015c1	8b 92 e4 00 00
	00		 mov	 edx, DWORD PTR [edx+228]
  015c7	b1 20		 mov	 cl, 32			; 00000020H
  015c9	e8 00 00 00 00	 call	 __allshr
  015ce	50		 push	 eax
  015cf	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  015d2	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  015d8	8b 90 e4 00 00
	00		 mov	 edx, DWORD PTR [eax+228]
  015de	83 e2 00	 and	 edx, 0
  015e1	51		 push	 ecx
  015e2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  015e5	8b 81 d8 00 00
	00		 mov	 eax, DWORD PTR [ecx+216]
  015eb	8b 91 dc 00 00
	00		 mov	 edx, DWORD PTR [ecx+220]
  015f1	b1 20		 mov	 cl, 32			; 00000020H
  015f3	e8 00 00 00 00	 call	 __allshr
  015f8	50		 push	 eax
  015f9	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  015fc	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  01602	8b 8a dc 00 00
	00		 mov	 ecx, DWORD PTR [edx+220]
  01608	83 e1 00	 and	 ecx, 0
  0160b	50		 push	 eax
  0160c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0160f	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  01616	50		 push	 eax
  01617	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0161a	83 c1 77	 add	 ecx, 119		; 00000077H
  0161d	51		 push	 ecx
  0161e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01621	83 c2 6c	 add	 edx, 108		; 0000006cH
  01624	52		 push	 edx
  01625	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KOBCGNEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5MasterLevel?5Info?5Save?5?$FL@
  0162a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01630	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@GDRequestM:

; 551  : }

  01633	5f		 pop	 edi
  01634	5e		 pop	 esi
  01635	5b		 pop	 ebx
  01636	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01639	33 cd		 xor	 ecx, ebp
  0163b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01640	8b e5		 mov	 esp, ebp
  01642	5d		 pop	 ebp
  01643	c2 04 00	 ret	 4
?GDRequestMasterLevelInfoSave@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::GDRequestMasterLevelInfoSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv463 = -116						; size = 4
tv454 = -116						; size = 4
tv461 = -112						; size = 4
tv452 = -112						; size = 4
tv458 = -106						; size = 2
tv449 = -106						; size = 2
_pMsg$ = -40						; size = 32
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GCSendMasterLevelWindowStatus@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::GCSendMasterLevelWindowStatus
; _this$ = ecx

; 556  : {

  01650	55		 push	 ebp
  01651	8b ec		 mov	 ebp, esp
  01653	83 ec 74	 sub	 esp, 116		; 00000074H
  01656	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0165b	33 c5		 xor	 eax, ebp
  0165d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01660	53		 push	 ebx
  01661	56		 push	 esi
  01662	57		 push	 edi
  01663	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 557  : 	if( !lpObj->MLInfoLoad )

  01666	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01669	83 b8 ec 00 00
	00 00		 cmp	 DWORD PTR [eax+236], 0
  01670	75 11		 jne	 SHORT $LN1@GCSendMast

; 558  : 	{
; 559  : 		this->GDReqMasterLevelInfo(lpObj);

  01672	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01675	50		 push	 eax
  01676	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01679	e8 00 00 00 00	 call	 ?GDReqMasterLevelInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSystem::GDReqMasterLevelInfo

; 560  : 		return;

  0167e	e9 2d 03 00 00	 jmp	 $LN2@GCSendMast
$LN1@GCSendMast:

; 561  : 	}
; 562  : 	// ----
; 563  : 	PMSG_MASTERLEVEL_INFO pMsg;
; 564  : 	PHeadSubSetB(&pMsg.h.c, 0xF3, 0x50, sizeof(PMSG_MASTERLEVEL_INFO));

  01683	6a 20		 push	 32			; 00000020H
  01685	6a 50		 push	 80			; 00000050H
  01687	68 f3 00 00 00	 push	 243			; 000000f3H
  0168c	8d 45 d8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0168f	50		 push	 eax
  01690	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  01695	83 c4 10	 add	 esp, 16			; 00000010H

; 565  : 	// ----
; 566  : 	pMsg.nMLevel		= lpObj->MLevel;// lpObj->MLevel;

  01698	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0169b	66 8b 88 d0 00
	00 00		 mov	 cx, WORD PTR [eax+208]
  016a2	66 89 4d dc	 mov	 WORD PTR _pMsg$[ebp+4], cx

; 567  : 	// ----
; 568  : 	pMsg.btMLExp1		= SET_NUMBERH(SET_NUMBERHW(HIDWORD(lpObj->MLExp)));

  016a6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016a9	8b 81 d8 00 00
	00		 mov	 eax, DWORD PTR [ecx+216]
  016af	8b 91 dc 00 00
	00		 mov	 edx, DWORD PTR [ecx+220]
  016b5	b1 20		 mov	 cl, 32			; 00000020H
  016b7	e8 00 00 00 00	 call	 __allshr
  016bc	c1 e8 10	 shr	 eax, 16			; 00000010H
  016bf	0f b7 d0	 movzx	 edx, ax
  016c2	c1 ea 08	 shr	 edx, 8
  016c5	88 55 de	 mov	 BYTE PTR _pMsg$[ebp+6], dl

; 569  : 	pMsg.btMLExp2		= SET_NUMBERL(SET_NUMBERHW(HIDWORD(lpObj->MLExp)));

  016c8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016cb	8b 81 d8 00 00
	00		 mov	 eax, DWORD PTR [ecx+216]
  016d1	8b 91 dc 00 00
	00		 mov	 edx, DWORD PTR [ecx+220]
  016d7	b1 20		 mov	 cl, 32			; 00000020H
  016d9	e8 00 00 00 00	 call	 __allshr
  016de	c1 e8 10	 shr	 eax, 16			; 00000010H
  016e1	0f b7 d0	 movzx	 edx, ax
  016e4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  016ea	88 55 df	 mov	 BYTE PTR _pMsg$[ebp+7], dl

; 570  : 	pMsg.btMLExp3		= SET_NUMBERH(SET_NUMBERLW(HIDWORD(lpObj->MLExp)));

  016ed	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  016f0	8b 81 d8 00 00
	00		 mov	 eax, DWORD PTR [ecx+216]
  016f6	8b 91 dc 00 00
	00		 mov	 edx, DWORD PTR [ecx+220]
  016fc	b1 20		 mov	 cl, 32			; 00000020H
  016fe	e8 00 00 00 00	 call	 __allshr
  01703	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  01708	0f b7 d0	 movzx	 edx, ax
  0170b	c1 ea 08	 shr	 edx, 8
  0170e	88 55 e0	 mov	 BYTE PTR _pMsg$[ebp+8], dl

; 571  : 	pMsg.btMLExp4		= SET_NUMBERL(SET_NUMBERLW(HIDWORD(lpObj->MLExp)));

  01711	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01714	8b 81 d8 00 00
	00		 mov	 eax, DWORD PTR [ecx+216]
  0171a	8b 91 dc 00 00
	00		 mov	 edx, DWORD PTR [ecx+220]
  01720	b1 20		 mov	 cl, 32			; 00000020H
  01722	e8 00 00 00 00	 call	 __allshr
  01727	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0172c	0f b7 d0	 movzx	 edx, ax
  0172f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01735	88 55 e1	 mov	 BYTE PTR _pMsg$[ebp+9], dl

; 572  : 	pMsg.btMLExp5		= SET_NUMBERH(SET_NUMBERHW(LODWORD(lpObj->MLExp)));

  01738	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0173b	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  01741	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  01747	83 e2 00	 and	 edx, 0
  0174a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0174d	0f b7 c1	 movzx	 eax, cx
  01750	c1 e8 08	 shr	 eax, 8
  01753	88 45 e2	 mov	 BYTE PTR _pMsg$[ebp+10], al

; 573  : 	pMsg.btMLExp6		= SET_NUMBERL(SET_NUMBERHW(LODWORD(lpObj->MLExp)));

  01756	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01759	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0175f	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  01765	83 e2 00	 and	 edx, 0
  01768	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0176b	0f b7 c1	 movzx	 eax, cx
  0176e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01773	88 45 e3	 mov	 BYTE PTR _pMsg$[ebp+11], al

; 574  : 	pMsg.btMLExp7		= SET_NUMBERH(SET_NUMBERLW(LODWORD(lpObj->MLExp)));

  01776	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01779	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0177f	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  01785	83 e2 00	 and	 edx, 0
  01788	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0178e	0f b7 c1	 movzx	 eax, cx
  01791	c1 e8 08	 shr	 eax, 8
  01794	88 45 e4	 mov	 BYTE PTR _pMsg$[ebp+12], al

; 575  : 	pMsg.btMLExp8		= SET_NUMBERL(SET_NUMBERLW(LODWORD(lpObj->MLExp)));

  01797	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0179a	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  017a0	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  017a6	83 e2 00	 and	 edx, 0
  017a9	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  017af	0f b7 c1	 movzx	 eax, cx
  017b2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  017b7	88 45 e5	 mov	 BYTE PTR _pMsg$[ebp+13], al

; 576  : 	// ----
; 577  : 	pMsg.btMLNextExp1	= SET_NUMBERH(SET_NUMBERHW(HIDWORD(lpObj->MLNextExp)));

  017ba	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  017bd	8b 81 e0 00 00
	00		 mov	 eax, DWORD PTR [ecx+224]
  017c3	8b 91 e4 00 00
	00		 mov	 edx, DWORD PTR [ecx+228]
  017c9	b1 20		 mov	 cl, 32			; 00000020H
  017cb	e8 00 00 00 00	 call	 __allshr
  017d0	c1 e8 10	 shr	 eax, 16			; 00000010H
  017d3	0f b7 d0	 movzx	 edx, ax
  017d6	c1 ea 08	 shr	 edx, 8
  017d9	88 55 e6	 mov	 BYTE PTR _pMsg$[ebp+14], dl

; 578  : 	pMsg.btMLNextExp2	= SET_NUMBERL(SET_NUMBERHW(HIDWORD(lpObj->MLNextExp)));

  017dc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  017df	8b 81 e0 00 00
	00		 mov	 eax, DWORD PTR [ecx+224]
  017e5	8b 91 e4 00 00
	00		 mov	 edx, DWORD PTR [ecx+228]
  017eb	b1 20		 mov	 cl, 32			; 00000020H
  017ed	e8 00 00 00 00	 call	 __allshr
  017f2	c1 e8 10	 shr	 eax, 16			; 00000010H
  017f5	0f b7 d0	 movzx	 edx, ax
  017f8	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  017fe	88 55 e7	 mov	 BYTE PTR _pMsg$[ebp+15], dl

; 579  : 	pMsg.btMLNextExp3	= SET_NUMBERH(SET_NUMBERLW(HIDWORD(lpObj->MLNextExp)));

  01801	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01804	8b 81 e0 00 00
	00		 mov	 eax, DWORD PTR [ecx+224]
  0180a	8b 91 e4 00 00
	00		 mov	 edx, DWORD PTR [ecx+228]
  01810	b1 20		 mov	 cl, 32			; 00000020H
  01812	e8 00 00 00 00	 call	 __allshr
  01817	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0181c	0f b7 d0	 movzx	 edx, ax
  0181f	c1 ea 08	 shr	 edx, 8
  01822	88 55 e8	 mov	 BYTE PTR _pMsg$[ebp+16], dl

; 580  : 	pMsg.btMLNextExp4	= SET_NUMBERL(SET_NUMBERLW(HIDWORD(lpObj->MLNextExp)));

  01825	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01828	8b 81 e0 00 00
	00		 mov	 eax, DWORD PTR [ecx+224]
  0182e	8b 91 e4 00 00
	00		 mov	 edx, DWORD PTR [ecx+228]
  01834	b1 20		 mov	 cl, 32			; 00000020H
  01836	e8 00 00 00 00	 call	 __allshr
  0183b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  01840	0f b7 d0	 movzx	 edx, ax
  01843	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01849	88 55 e9	 mov	 BYTE PTR _pMsg$[ebp+17], dl

; 581  : 	pMsg.btMLNextExp5	= SET_NUMBERH(SET_NUMBERHW(LODWORD(lpObj->MLNextExp)));

  0184c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0184f	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  01855	8b 90 e4 00 00
	00		 mov	 edx, DWORD PTR [eax+228]
  0185b	83 e2 00	 and	 edx, 0
  0185e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  01861	0f b7 c1	 movzx	 eax, cx
  01864	c1 e8 08	 shr	 eax, 8
  01867	88 45 ea	 mov	 BYTE PTR _pMsg$[ebp+18], al

; 582  : 	pMsg.btMLNextExp6	= SET_NUMBERL(SET_NUMBERHW(LODWORD(lpObj->MLNextExp)));

  0186a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0186d	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  01873	8b 90 e4 00 00
	00		 mov	 edx, DWORD PTR [eax+228]
  01879	83 e2 00	 and	 edx, 0
  0187c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0187f	0f b7 c1	 movzx	 eax, cx
  01882	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01887	88 45 eb	 mov	 BYTE PTR _pMsg$[ebp+19], al

; 583  : 	pMsg.btMLNextExp7	= SET_NUMBERH(SET_NUMBERLW(LODWORD(lpObj->MLNextExp)));

  0188a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0188d	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  01893	8b 90 e4 00 00
	00		 mov	 edx, DWORD PTR [eax+228]
  01899	83 e2 00	 and	 edx, 0
  0189c	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  018a2	0f b7 c1	 movzx	 eax, cx
  018a5	c1 e8 08	 shr	 eax, 8
  018a8	88 45 ec	 mov	 BYTE PTR _pMsg$[ebp+20], al

; 584  : 	pMsg.btMLNextExp8	= SET_NUMBERL(SET_NUMBERLW(LODWORD(lpObj->MLNextExp)));

  018ab	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  018ae	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  018b4	8b 90 e4 00 00
	00		 mov	 edx, DWORD PTR [eax+228]
  018ba	83 e2 00	 and	 edx, 0
  018bd	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  018c3	0f b7 c1	 movzx	 eax, cx
  018c6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  018cb	88 45 ed	 mov	 BYTE PTR _pMsg$[ebp+21], al

; 585  : 	// ----
; 586  : 	pMsg.nMLPoint		= LOWORD(lpObj->MLPoint);

  018ce	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  018d1	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  018d7	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  018dd	66 89 4d ee	 mov	 WORD PTR _pMsg$[ebp+22], cx

; 587  : 	pMsg.wMaxLife		= (double)lpObj->AddLife + lpObj->MaxLife;

  018e1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  018e4	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  018ea	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  018ed	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  018f3	d9 7d 96	 fnstcw	 WORD PTR tv449[ebp]
  018f6	0f b7 45 96	 movzx	 eax, WORD PTR tv449[ebp]
  018fa	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  018ff	89 45 90	 mov	 DWORD PTR tv452[ebp], eax
  01902	d9 6d 90	 fldcw	 WORD PTR tv452[ebp]
  01905	db 5d 8c	 fistp	 DWORD PTR tv454[ebp]
  01908	d9 6d 96	 fldcw	 WORD PTR tv449[ebp]
  0190b	66 8b 55 8c	 mov	 dx, WORD PTR tv454[ebp]
  0190f	66 89 55 f0	 mov	 WORD PTR _pMsg$[ebp+24], dx

; 588  : 	pMsg.wMaxMana		= (double)lpObj->AddMana + lpObj->MaxMana;

  01913	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01916	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  0191c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0191f	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  01925	d9 7d 96	 fnstcw	 WORD PTR tv458[ebp]
  01928	0f b7 45 96	 movzx	 eax, WORD PTR tv458[ebp]
  0192c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  01931	89 45 90	 mov	 DWORD PTR tv461[ebp], eax
  01934	d9 6d 90	 fldcw	 WORD PTR tv461[ebp]
  01937	db 5d 8c	 fistp	 DWORD PTR tv463[ebp]
  0193a	d9 6d 96	 fldcw	 WORD PTR tv458[ebp]
  0193d	66 8b 55 8c	 mov	 dx, WORD PTR tv463[ebp]
  01941	66 89 55 f2	 mov	 WORD PTR _pMsg$[ebp+26], dx

; 589  : 	pMsg.wMaxShield		= LOWORD(lpObj->iAddShield) + LOWORD(lpObj->iMaxShield);

  01945	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01948	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  0194e	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01954	0f b7 d1	 movzx	 edx, cx
  01957	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0195a	8b 88 58 01 00
	00		 mov	 ecx, DWORD PTR [eax+344]
  01960	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01966	0f b7 c1	 movzx	 eax, cx
  01969	03 d0		 add	 edx, eax
  0196b	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+28], dx

; 590  : 	pMsg.wMaxBP			= LOWORD(lpObj->AddBP) + LOWORD(lpObj->MaxBP);

  0196f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01972	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  01978	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0197e	0f b7 d1	 movzx	 edx, cx
  01981	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01984	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  0198a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01990	0f b7 c1	 movzx	 eax, cx
  01993	03 d0		 add	 edx, eax
  01995	66 89 55 f6	 mov	 WORD PTR _pMsg$[ebp+30], dx

; 591  : 	// ----
; 592  : 	DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  01999	0f b6 45 d9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0199d	50		 push	 eax
  0199e	8d 4d d8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  019a1	51		 push	 ecx
  019a2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  019a5	8b 02		 mov	 eax, DWORD PTR [edx]
  019a7	50		 push	 eax
  019a8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  019ad	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@GCSendMast:

; 593  : }

  019b0	5f		 pop	 edi
  019b1	5e		 pop	 esi
  019b2	5b		 pop	 ebx
  019b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  019b6	33 cd		 xor	 ecx, ebp
  019b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  019bd	8b e5		 mov	 esp, ebp
  019bf	5d		 pop	 ebp
  019c0	c2 04 00	 ret	 4
?GCSendMasterLevelWindowStatus@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::GCSendMasterLevelWindowStatus
_TEXT	ENDS
PUBLIC	??_C@_0CM@MJJKBDCN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Master?5Level?5Up?5?3?$CFd?0?5ML@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	?GCSendEffectInfo@@YAXHE@Z:PROC			; GCSendEffectInfo
;	COMDAT ??_C@_0CM@MJJKBDCN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Master?5Level?5Up?5?3?$CFd?0?5ML@
CONST	SEGMENT
??_C@_0CM@MJJKBDCN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Master?5Level?5Up?5?3?$CFd?0?5ML@ DB '['
	DB	'%s][%s] Master Level Up :%d, MLPoint:%d/%d', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv176 = -104						; size = 4
tv167 = -104						; size = 4
tv174 = -100						; size = 4
tv165 = -100						; size = 4
tv171 = -94						; size = 2
tv162 = -94						; size = 2
_pMsg$ = -28						; size = 20
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GCMasterLevelUpInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSystem::GCMasterLevelUpInfo
; _this$ = ecx

; 598  : {

  019d0	55		 push	 ebp
  019d1	8b ec		 mov	 ebp, esp
  019d3	83 ec 68	 sub	 esp, 104		; 00000068H
  019d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  019db	33 c5		 xor	 eax, ebp
  019dd	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  019e0	53		 push	 ebx
  019e1	56		 push	 esi
  019e2	57		 push	 edi
  019e3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 599  : 	PMSG_MASTERLEVEL_UP pMsg;
; 600  : 	PHeadSubSetB(&pMsg.h.c, 0xF3, 0x51, 0x20);

  019e6	6a 20		 push	 32			; 00000020H
  019e8	6a 51		 push	 81			; 00000051H
  019ea	68 f3 00 00 00	 push	 243			; 000000f3H
  019ef	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  019f2	50		 push	 eax
  019f3	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  019f8	83 c4 10	 add	 esp, 16			; 00000010H

; 601  : 	// ----
; 602  : 	pMsg.nMLevel		= lpObj->MLevel;

  019fb	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  019fe	66 8b 88 d0 00
	00 00		 mov	 cx, WORD PTR [eax+208]
  01a05	66 89 4d e8	 mov	 WORD PTR _pMsg$[ebp+4], cx

; 603  : 	pMsg.nAddMLPoint	= 1;

  01a09	b8 01 00 00 00	 mov	 eax, 1
  01a0e	66 89 45 ea	 mov	 WORD PTR _pMsg$[ebp+6], ax

; 604  : 	pMsg.nMLPoint		= lpObj->MLPoint;

  01a12	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a15	66 8b 88 e8 00
	00 00		 mov	 cx, WORD PTR [eax+232]
  01a1c	66 89 4d ec	 mov	 WORD PTR _pMsg$[ebp+8], cx

; 605  : 	pMsg.nMaxMLPoint	= MASTER_MAX_POINT;

  01a20	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  01a25	66 89 45 ee	 mov	 WORD PTR _pMsg$[ebp+10], ax

; 606  : 	pMsg.wMaxLife		= (double)lpObj->AddLife + lpObj->MaxLife;

  01a29	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a2c	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  01a32	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01a35	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  01a3b	d9 7d a2	 fnstcw	 WORD PTR tv162[ebp]
  01a3e	0f b7 45 a2	 movzx	 eax, WORD PTR tv162[ebp]
  01a42	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  01a47	89 45 9c	 mov	 DWORD PTR tv165[ebp], eax
  01a4a	d9 6d 9c	 fldcw	 WORD PTR tv165[ebp]
  01a4d	db 5d 98	 fistp	 DWORD PTR tv167[ebp]
  01a50	d9 6d a2	 fldcw	 WORD PTR tv162[ebp]
  01a53	66 8b 55 98	 mov	 dx, WORD PTR tv167[ebp]
  01a57	66 89 55 f0	 mov	 WORD PTR _pMsg$[ebp+12], dx

; 607  : 	pMsg.wMaxMana		= (double)lpObj->AddMana + lpObj->MaxMana;

  01a5b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a5e	db 80 50 01 00
	00		 fild	 DWORD PTR [eax+336]
  01a64	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01a67	d8 81 14 01 00
	00		 fadd	 DWORD PTR [ecx+276]
  01a6d	d9 7d a2	 fnstcw	 WORD PTR tv171[ebp]
  01a70	0f b7 45 a2	 movzx	 eax, WORD PTR tv171[ebp]
  01a74	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  01a79	89 45 9c	 mov	 DWORD PTR tv174[ebp], eax
  01a7c	d9 6d 9c	 fldcw	 WORD PTR tv174[ebp]
  01a7f	db 5d 98	 fistp	 DWORD PTR tv176[ebp]
  01a82	d9 6d a2	 fldcw	 WORD PTR tv171[ebp]
  01a85	66 8b 55 98	 mov	 dx, WORD PTR tv176[ebp]
  01a89	66 89 55 f2	 mov	 WORD PTR _pMsg$[ebp+14], dx

; 608  : 	pMsg.wMaxShield		= LOWORD(lpObj->iAddShield) + LOWORD(lpObj->iMaxShield);

  01a8d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01a90	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  01a96	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01a9c	0f b7 d1	 movzx	 edx, cx
  01a9f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01aa2	8b 88 58 01 00
	00		 mov	 ecx, DWORD PTR [eax+344]
  01aa8	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01aae	0f b7 c1	 movzx	 eax, cx
  01ab1	03 d0		 add	 edx, eax
  01ab3	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+16], dx

; 609  : 	pMsg.wMaxBP			= LOWORD(lpObj->AddBP) + LOWORD(lpObj->MaxBP);

  01ab7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01aba	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  01ac0	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01ac6	0f b7 d1	 movzx	 edx, cx
  01ac9	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01acc	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  01ad2	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01ad8	0f b7 c1	 movzx	 eax, cx
  01adb	03 d0		 add	 edx, eax
  01add	66 89 55 f6	 mov	 WORD PTR _pMsg$[ebp+18], dx

; 610  : 	// ----
; 611  : 	DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  01ae1	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  01ae5	50		 push	 eax
  01ae6	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  01ae9	51		 push	 ecx
  01aea	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01aed	8b 02		 mov	 eax, DWORD PTR [edx]
  01aef	50		 push	 eax
  01af0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01af5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 612  : 	GCSendEffectInfo(lpObj->m_Index, 16);

  01af8	6a 10		 push	 16			; 00000010H
  01afa	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01afd	8b 08		 mov	 ecx, DWORD PTR [eax]
  01aff	51		 push	 ecx
  01b00	e8 00 00 00 00	 call	 ?GCSendEffectInfo@@YAXHE@Z ; GCSendEffectInfo
  01b05	83 c4 08	 add	 esp, 8

; 613  : 	// ----
; 614  : 	LogAddTD("[%s][%s] Master Level Up :%d, MLPoint:%d/%d", lpObj->AccountID, lpObj->Name, lpObj->MLevel, lpObj->MLPoint, MASTER_MAX_POINT);

  01b08	68 c8 00 00 00	 push	 200			; 000000c8H
  01b0d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  01b10	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  01b16	51		 push	 ecx
  01b17	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01b1a	0f bf 82 d0 00
	00 00		 movsx	 eax, WORD PTR [edx+208]
  01b21	50		 push	 eax
  01b22	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  01b25	83 c1 77	 add	 ecx, 119		; 00000077H
  01b28	51		 push	 ecx
  01b29	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  01b2c	83 c2 6c	 add	 edx, 108		; 0000006cH
  01b2f	52		 push	 edx
  01b30	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@MJJKBDCN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Master?5Level?5Up?5?3?$CFd?0?5ML@
  01b35	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  01b3b	83 c4 18	 add	 esp, 24			; 00000018H

; 615  : }

  01b3e	5f		 pop	 edi
  01b3f	5e		 pop	 esi
  01b40	5b		 pop	 ebx
  01b41	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01b44	33 cd		 xor	 ecx, ebp
  01b46	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01b4b	8b e5		 mov	 esp, ebp
  01b4d	5d		 pop	 ebp
  01b4e	c2 04 00	 ret	 4
?GCMasterLevelUpInfo@CMasterLevelSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSystem::GCMasterLevelUpInfo
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_MasterLevelSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_MasterLevelSystem@@YAXXZ PROC			; `dynamic initializer for 'g_MasterLevelSystem'', COMDAT

; 23   : CMasterLevelSystem g_MasterLevelSystem;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  0000e	e8 00 00 00 00	 call	 ??0CMasterLevelSystem@@QAE@XZ ; CMasterLevelSystem::CMasterLevelSystem
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_MasterLevelSystem@@YAXXZ ; `dynamic atexit destructor for 'g_MasterLevelSystem''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_MasterLevelSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_MasterLevelSystem''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_MasterLevelSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_MasterLevelSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MasterLevelSystem'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterLevelSystem@@3VCMasterLevelSystem@@A ; g_MasterLevelSystem
  0000e	e8 00 00 00 00	 call	 ??1CMasterLevelSystem@@UAE@XZ ; CMasterLevelSystem::~CMasterLevelSystem
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_MasterLevelSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MasterLevelSystem''
text$yd	ENDS
PUBLIC	?g_MasterLevelSystem@@3VCMasterLevelSystem@@A	; g_MasterLevelSystem
_BSS	SEGMENT
?g_MasterLevelSystem@@3VCMasterLevelSystem@@A DB 0990H DUP (?) ; g_MasterLevelSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MasterLevelSystem$initializer$ DD FLAT:??__Eg_MasterLevelSystem@@YAXXZ
CRT$XCU	ENDS
END
