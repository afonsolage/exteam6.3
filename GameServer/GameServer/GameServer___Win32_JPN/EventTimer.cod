; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\EventTimer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0cEventTimer@@QAE@XZ				; cEventTimer::cEventTimer
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\eventtimer.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0cEventTimer@@QAE@XZ PROC				; cEventTimer::cEventTimer
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 
; 28   : }

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0cEventTimer@@QAE@XZ ENDP				; cEventTimer::cEventTimer
_TEXT	ENDS
PUBLIC	??1cEventTimer@@QAE@XZ				; cEventTimer::~cEventTimer
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1cEventTimer@@QAE@XZ PROC				; cEventTimer::~cEventTimer
; _this$ = ecx

; 31   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 
; 33   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1cEventTimer@@QAE@XZ ENDP				; cEventTimer::~cEventTimer
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0BN@PJNAMCJO@?4?2Events?2EventManagement?4dat?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BMBCGMBM@?4?2Events?2ChaosCastle?4dat?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DJALDJOM@?4?2Events?2DevilSquare?4dat?$AA@ ; `string'
PUBLIC	??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_0BJ@ILBNMJBN@?4?2Events?2BloodCastle?4dat?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_0L@JKOGOOIH@EventTimer?$AA@		; `string'
PUBLIC	??_C@_0BM@LMFNOFKJ@?4?4?2Data?2ExData?2ExCustom?4ini?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadTimer@cEventTimer@@QAEXXZ			; cEventTimer::LoadTimer
EXTRN	_strcmp:PROC
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PJNAMCJO@?4?2Events?2EventManagement?4dat?$AA@
CONST	SEGMENT
??_C@_0BN@PJNAMCJO@?4?2Events?2EventManagement?4dat?$AA@ DB '.\Events\Eve'
	DB	'ntManagement.dat', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BMBCGMBM@?4?2Events?2ChaosCastle?4dat?$AA@
CONST	SEGMENT
??_C@_0BJ@BMBCGMBM@?4?2Events?2ChaosCastle?4dat?$AA@ DB '.\Events\ChaosCa'
	DB	'stle.dat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DJALDJOM@?4?2Events?2DevilSquare?4dat?$AA@
CONST	SEGMENT
??_C@_0BJ@DJALDJOM@?4?2Events?2DevilSquare?4dat?$AA@ DB '.\Events\DevilSq'
	DB	'uare.dat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@ DB '%d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ILBNMJBN@?4?2Events?2BloodCastle?4dat?$AA@
CONST	SEGMENT
??_C@_0BJ@ILBNMJBN@?4?2Events?2BloodCastle?4dat?$AA@ DB '.\Events\BloodCa'
	DB	'stle.dat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JKOGOOIH@EventTimer?$AA@
CONST	SEGMENT
??_C@_0L@JKOGOOIH@EventTimer?$AA@ DB 'EventTimer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LMFNOFKJ@?4?4?2Data?2ExData?2ExCustom?4ini?$AA@
CONST	SEGMENT
??_C@_0BM@LMFNOFKJ@?4?4?2Data?2ExData?2ExCustom?4ini?$AA@ DB '..\Data\ExD'
	DB	'ata\ExCustom.ini', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_EventMin$228835 = -844					; size = 4
_EventHour$228833 = -840				; size = 4
_EventType$228831 = -836				; size = 4
_type$ = -832						; size = 4
_Token$ = -828						; size = 4
_n$228815 = -824					; size = 8
_Flag3$ = -816						; size = 4
_Buff3$ = -812						; size = 256
_file3$ = -556						; size = 4
_n$228804 = -552					; size = 8
_Flag2$ = -544						; size = 4
_Buff2$ = -540						; size = 256
_file2$ = -284						; size = 4
_n$228792 = -280					; size = 8
_Flag$ = -272						; size = 4
_Buff$ = -268						; size = 256
_file$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?LoadTimer@cEventTimer@@QAEXXZ PROC			; cEventTimer::LoadTimer
; _this$ = ecx

; 36   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	81 ec 8c 03 00
	00		 sub	 esp, 908		; 0000038cH
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0004e	33 c5		 xor	 eax, ebp
  00050	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00053	53		 push	 ebx
  00054	56		 push	 esi
  00055	57		 push	 edi
  00056	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 	this->Enable = GetPrivateProfileInt("ExTeam","EventTimer",0,ExCustom_DIR);

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LMFNOFKJ@?4?4?2Data?2ExData?2ExCustom?4ini?$AA@
  0005e	6a 00		 push	 0
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JKOGOOIH@EventTimer?$AA@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00070	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	89 01		 mov	 DWORD PTR [ecx], eax

; 38   : 
; 39   : 	if(!this->Enable) return;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007b	75 05		 jne	 SHORT $LN27@LoadTimer
  0007d	e9 cf 05 00 00	 jmp	 $LN28@LoadTimer
$LN27@LoadTimer:

; 40   : 
; 41   : 	FILE * file = fopen(gDirPath.GetNewPath(".\\Events\\BloodCastle.dat"),"r");

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@ILBNMJBN@?4?2Events?2BloodCastle?4dat?$AA@
  0008c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00091	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _fopen
  0009c	83 c4 08	 add	 esp, 8
  0009f	89 45 f4	 mov	 DWORD PTR _file$[ebp], eax

; 42   : 	if(file == NULL)

  000a2	83 7d f4 00	 cmp	 DWORD PTR _file$[ebp], 0
  000a6	75 27		 jne	 SHORT $LN26@LoadTimer

; 43   : 	{
; 44   : 		MessageBoxA(0,gDirPath.GetNewPath(".\\Events\\BloodCastle.dat"),"LOAD FILE ERROR",0);

  000a8	6a 00		 push	 0
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@ILBNMJBN@?4?2Events?2BloodCastle?4dat?$AA@
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000b9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000be	50		 push	 eax
  000bf	6a 00		 push	 0
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 45   : 		ExitProcess(0);

  000c7	6a 00		 push	 0
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN26@LoadTimer:

; 46   : 	}
; 47   : 	char Buff[256];
; 48   : 	int Flag = 0;

  000cf	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0

; 49   : 	this->CountBC = 0;

  000d9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	c7 80 24 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+804], 0
$LN30@LoadTimer:

; 50   : 	while(!feof(file))

  000e6	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _feof
  000ef	83 c4 04	 add	 esp, 4
  000f2	85 c0		 test	 eax, eax
  000f4	0f 85 a8 00 00
	00		 jne	 $LN24@LoadTimer

; 51   : 	{
; 52   : 		fgets(Buff,256,file);

  000fa	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  000fd	50		 push	 eax
  000fe	68 00 01 00 00	 push	 256			; 00000100H
  00103	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _fgets
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 53   : 		if(Ex_IsBadFileLine(Buff, Flag))

  00112	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  00118	50		 push	 eax
  00119	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0011f	51		 push	 ecx
  00120	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  00125	83 c4 08	 add	 esp, 8
  00128	0f b6 d0	 movzx	 edx, al
  0012b	85 d2		 test	 edx, edx
  0012d	74 02		 je	 SHORT $LN23@LoadTimer

; 54   : 			continue;

  0012f	eb b5		 jmp	 SHORT $LN30@LoadTimer
$LN23@LoadTimer:

; 55   : 		if(Flag == 4)

  00131	83 bd f0 fe ff
	ff 04		 cmp	 DWORD PTR _Flag$[ebp], 4
  00138	75 63		 jne	 SHORT $LN22@LoadTimer

; 56   : 		{
; 57   : 			int n[2];
; 58   : 			sscanf(Buff, "%d %d", &n[0], &n[1]);

  0013a	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$228792[ebp+4]
  00140	50		 push	 eax
  00141	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$228792[ebp]
  00147	51		 push	 ecx
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  0014d	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  00153	52		 push	 edx
  00154	e8 00 00 00 00	 call	 _sscanf
  00159	83 c4 10	 add	 esp, 16			; 00000010H

; 59   : 			this->BC[this->CountBC].Hour = n[0];

  0015c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	8b 88 24 03 00
	00		 mov	 ecx, DWORD PTR [eax+804]
  00165	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00168	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _n$228792[ebp]
  0016e	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax

; 60   : 			this->BC[this->CountBC].Min = n[1];

  00172	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00175	8b 88 24 03 00
	00		 mov	 ecx, DWORD PTR [eax+804]
  0017b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0017e	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _n$228792[ebp+4]
  00184	89 44 ca 08	 mov	 DWORD PTR [edx+ecx*8+8], eax

; 61   : 			this->CountBC++;

  00188	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	8b 88 24 03 00
	00		 mov	 ecx, DWORD PTR [eax+804]
  00191	83 c1 01	 add	 ecx, 1
  00194	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00197	89 8a 24 03 00
	00		 mov	 DWORD PTR [edx+804], ecx
$LN22@LoadTimer:

; 62   : 		}
; 63   : 	}

  0019d	e9 44 ff ff ff	 jmp	 $LN30@LoadTimer
$LN24@LoadTimer:

; 64   : 	fclose(file);

  001a2	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 _fclose
  001ab	83 c4 04	 add	 esp, 4

; 65   : 
; 66   : 	// ----
; 67   : 
; 68   : 	FILE * file2 = fopen(gDirPath.GetNewPath(".\\Events\\DevilSquare.dat"),"r");

  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  001b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DJALDJOM@?4?2Events?2DevilSquare?4dat?$AA@
  001b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  001bd	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 _fopen
  001c8	83 c4 08	 add	 esp, 8
  001cb	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _file2$[ebp], eax

; 69   : 	if(file2 == NULL)

  001d1	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _file2$[ebp], 0
  001d8	75 27		 jne	 SHORT $LN21@LoadTimer

; 70   : 	{
; 71   : 		MessageBoxA(0,gDirPath.GetNewPath(".\\Events\\DevilSquare.dat"),"LOAD FILE ERROR",0);

  001da	6a 00		 push	 0
  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DJALDJOM@?4?2Events?2DevilSquare?4dat?$AA@
  001e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  001eb	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  001f0	50		 push	 eax
  001f1	6a 00		 push	 0
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 72   : 		ExitProcess(0);

  001f9	6a 00		 push	 0
  001fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN21@LoadTimer:

; 73   : 	}
; 74   : 	char Buff2[256];
; 75   : 	int Flag2 = 0;

  00201	c7 85 e0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag2$[ebp], 0

; 76   : 	this->CountDS = 0;

  0020b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0020e	c7 80 48 06 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1608], 0
$LN31@LoadTimer:

; 77   : 	while(!feof(file2))

  00218	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _file2$[ebp]
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 _feof
  00224	83 c4 04	 add	 esp, 4
  00227	85 c0		 test	 eax, eax
  00229	0f 85 ae 00 00
	00		 jne	 $LN19@LoadTimer

; 78   : 	{
; 79   : 		fgets(Buff2,256,file);

  0022f	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00232	50		 push	 eax
  00233	68 00 01 00 00	 push	 256			; 00000100H
  00238	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _Buff2$[ebp]
  0023e	51		 push	 ecx
  0023f	e8 00 00 00 00	 call	 _fgets
  00244	83 c4 0c	 add	 esp, 12			; 0000000cH

; 80   : 		if(Ex_IsBadFileLine(Buff2, Flag2))

  00247	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _Flag2$[ebp]
  0024d	50		 push	 eax
  0024e	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _Buff2$[ebp]
  00254	51		 push	 ecx
  00255	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  0025a	83 c4 08	 add	 esp, 8
  0025d	0f b6 d0	 movzx	 edx, al
  00260	85 d2		 test	 edx, edx
  00262	74 02		 je	 SHORT $LN18@LoadTimer

; 81   : 			continue;

  00264	eb b2		 jmp	 SHORT $LN31@LoadTimer
$LN18@LoadTimer:

; 82   : 		if(Flag2 == 4)

  00266	83 bd e0 fd ff
	ff 04		 cmp	 DWORD PTR _Flag2$[ebp], 4
  0026d	75 69		 jne	 SHORT $LN17@LoadTimer

; 83   : 		{
; 84   : 			int n[2];
; 85   : 			sscanf(Buff2, "%d %d", &n[0], &n[1]);

  0026f	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _n$228804[ebp+4]
  00275	50		 push	 eax
  00276	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _n$228804[ebp]
  0027c	51		 push	 ecx
  0027d	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  00282	8d 95 e4 fd ff
	ff		 lea	 edx, DWORD PTR _Buff2$[ebp]
  00288	52		 push	 edx
  00289	e8 00 00 00 00	 call	 _sscanf
  0028e	83 c4 10	 add	 esp, 16			; 00000010H

; 86   : 			this->DS[this->CountDS].Hour = n[0];

  00291	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00294	8b 88 48 06 00
	00		 mov	 ecx, DWORD PTR [eax+1608]
  0029a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0029d	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _n$228804[ebp]
  002a3	89 84 ca 28 03
	00 00		 mov	 DWORD PTR [edx+ecx*8+808], eax

; 87   : 			this->DS[this->CountDS].Min = n[1];

  002aa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002ad	8b 88 48 06 00
	00		 mov	 ecx, DWORD PTR [eax+1608]
  002b3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002b6	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _n$228804[ebp+4]
  002bc	89 84 ca 2c 03
	00 00		 mov	 DWORD PTR [edx+ecx*8+812], eax

; 88   : 			this->CountDS++;

  002c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002c6	8b 88 48 06 00
	00		 mov	 ecx, DWORD PTR [eax+1608]
  002cc	83 c1 01	 add	 ecx, 1
  002cf	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002d2	89 8a 48 06 00
	00		 mov	 DWORD PTR [edx+1608], ecx
$LN17@LoadTimer:

; 89   : 		}
; 90   : 	}

  002d8	e9 3b ff ff ff	 jmp	 $LN31@LoadTimer
$LN19@LoadTimer:

; 91   : 	fclose(file2);

  002dd	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _file2$[ebp]
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 _fclose
  002e9	83 c4 04	 add	 esp, 4

; 92   : 
; 93   : 	// ----
; 94   : 
; 95   : 	FILE * file3 = fopen(gDirPath.GetNewPath(".\\Events\\ChaosCastle.dat"),"r");

  002ec	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BMBCGMBM@?4?2Events?2ChaosCastle?4dat?$AA@
  002f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  002fb	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00300	50		 push	 eax
  00301	e8 00 00 00 00	 call	 _fopen
  00306	83 c4 08	 add	 esp, 8
  00309	89 85 d4 fd ff
	ff		 mov	 DWORD PTR _file3$[ebp], eax

; 96   : 	if(file3 == NULL)

  0030f	83 bd d4 fd ff
	ff 00		 cmp	 DWORD PTR _file3$[ebp], 0
  00316	75 27		 jne	 SHORT $LN16@LoadTimer

; 97   : 	{
; 98   : 		MessageBoxA(0,gDirPath.GetNewPath(".\\Events\\ChaosCastle.dat"),"LOAD FILE ERROR",0);

  00318	6a 00		 push	 0
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  0031f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BMBCGMBM@?4?2Events?2ChaosCastle?4dat?$AA@
  00324	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00329	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0032e	50		 push	 eax
  0032f	6a 00		 push	 0
  00331	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 99   : 		ExitProcess(0);

  00337	6a 00		 push	 0
  00339	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN16@LoadTimer:

; 100  : 	}
; 101  : 	char Buff3[256];
; 102  : 	int Flag3 = 0;

  0033f	c7 85 d0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag3$[ebp], 0

; 103  : 	this->CountCC = 0;

  00349	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0034c	c7 80 6c 09 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+2412], 0
$LN32@LoadTimer:

; 104  : 	while(!feof(file3))

  00356	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _file3$[ebp]
  0035c	50		 push	 eax
  0035d	e8 00 00 00 00	 call	 _feof
  00362	83 c4 04	 add	 esp, 4
  00365	85 c0		 test	 eax, eax
  00367	0f 85 b1 00 00
	00		 jne	 $LN14@LoadTimer

; 105  : 	{
; 106  : 		fgets(Buff3,256,file3);

  0036d	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _file3$[ebp]
  00373	50		 push	 eax
  00374	68 00 01 00 00	 push	 256			; 00000100H
  00379	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR _Buff3$[ebp]
  0037f	51		 push	 ecx
  00380	e8 00 00 00 00	 call	 _fgets
  00385	83 c4 0c	 add	 esp, 12			; 0000000cH

; 107  : 		if(Ex_IsBadFileLine(Buff3, Flag3))

  00388	8d 85 d0 fc ff
	ff		 lea	 eax, DWORD PTR _Flag3$[ebp]
  0038e	50		 push	 eax
  0038f	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR _Buff3$[ebp]
  00395	51		 push	 ecx
  00396	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  0039b	83 c4 08	 add	 esp, 8
  0039e	0f b6 d0	 movzx	 edx, al
  003a1	85 d2		 test	 edx, edx
  003a3	74 02		 je	 SHORT $LN13@LoadTimer

; 108  : 			continue;

  003a5	eb af		 jmp	 SHORT $LN32@LoadTimer
$LN13@LoadTimer:

; 109  : 		if(Flag3 == 2)

  003a7	83 bd d0 fc ff
	ff 02		 cmp	 DWORD PTR _Flag3$[ebp], 2
  003ae	75 69		 jne	 SHORT $LN12@LoadTimer

; 110  : 		{
; 111  : 			int n[2];
; 112  : 			sscanf(Buff3, "%d %d", &n[0], &n[1]);

  003b0	8d 85 cc fc ff
	ff		 lea	 eax, DWORD PTR _n$228815[ebp+4]
  003b6	50		 push	 eax
  003b7	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _n$228815[ebp]
  003bd	51		 push	 ecx
  003be	68 00 00 00 00	 push	 OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
  003c3	8d 95 d4 fc ff
	ff		 lea	 edx, DWORD PTR _Buff3$[ebp]
  003c9	52		 push	 edx
  003ca	e8 00 00 00 00	 call	 _sscanf
  003cf	83 c4 10	 add	 esp, 16			; 00000010H

; 113  : 			this->CC[this->CountCC].Hour = n[0];

  003d2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d5	8b 88 6c 09 00
	00		 mov	 ecx, DWORD PTR [eax+2412]
  003db	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003de	8b 85 c8 fc ff
	ff		 mov	 eax, DWORD PTR _n$228815[ebp]
  003e4	89 84 ca 4c 06
	00 00		 mov	 DWORD PTR [edx+ecx*8+1612], eax

; 114  : 			this->CC[this->CountCC].Min = n[1];

  003eb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003ee	8b 88 6c 09 00
	00		 mov	 ecx, DWORD PTR [eax+2412]
  003f4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003f7	8b 85 cc fc ff
	ff		 mov	 eax, DWORD PTR _n$228815[ebp+4]
  003fd	89 84 ca 50 06
	00 00		 mov	 DWORD PTR [edx+ecx*8+1616], eax

; 115  : 			this->CountCC++;

  00404	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00407	8b 88 6c 09 00
	00		 mov	 ecx, DWORD PTR [eax+2412]
  0040d	83 c1 01	 add	 ecx, 1
  00410	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00413	89 8a 6c 09 00
	00		 mov	 DWORD PTR [edx+2412], ecx
$LN12@LoadTimer:

; 116  : 		}
; 117  : 	}

  00419	e9 38 ff ff ff	 jmp	 $LN32@LoadTimer
$LN14@LoadTimer:

; 118  : 	fclose(file3);

  0041e	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _file3$[ebp]
  00424	50		 push	 eax
  00425	e8 00 00 00 00	 call	 _fclose
  0042a	83 c4 04	 add	 esp, 4

; 119  : 
; 120  : 	// ----
; 121  : 
; 122  : 	SMDFile = fopen(gDirPath.GetNewPath(".\\Events\\EventManagement.dat"), "r");

  0042d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00432	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PJNAMCJO@?4?2Events?2EventManagement?4dat?$AA@
  00437	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0043c	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00441	50		 push	 eax
  00442	e8 00 00 00 00	 call	 _fopen
  00447	83 c4 08	 add	 esp, 8
  0044a	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 123  : 
; 124  : 	if ( SMDFile == NULL )

  0044f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00456	75 27		 jne	 SHORT $LN11@LoadTimer

; 125  : 	{
; 126  : 		MessageBoxA(0,gDirPath.GetNewPath(".\\Events\\EventManagement.dat"),"LOAD FILE ERROR",0);

  00458	6a 00		 push	 0
  0045a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  0045f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PJNAMCJO@?4?2Events?2EventManagement?4dat?$AA@
  00464	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00469	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0046e	50		 push	 eax
  0046f	6a 00		 push	 0
  00471	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 127  : 		ExitProcess(0);

  00477	6a 00		 push	 0
  00479	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN11@LoadTimer:

; 128  : 	}
; 129  : 
; 130  : 	int Token;
; 131  : 	int type = -1;

  0047f	c7 85 c0 fc ff
	ff ff ff ff ff	 mov	 DWORD PTR _type$[ebp], -1
$LN10@LoadTimer:

; 132  : 
; 133  : 	while ( true )

  00489	b8 01 00 00 00	 mov	 eax, 1
  0048e	85 c0		 test	 eax, eax
  00490	0f 84 ad 01 00
	00		 je	 $LN9@LoadTimer

; 134  : 	{
; 135  : 		Token = GetToken();

  00496	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0049b	89 85 c4 fc ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 136  : 
; 137  : 		if ( Token == 2 )

  004a1	83 bd c4 fc ff
	ff 02		 cmp	 DWORD PTR _Token$[ebp], 2
  004a8	75 05		 jne	 SHORT $LN8@LoadTimer

; 138  : 		{
; 139  : 			break;

  004aa	e9 94 01 00 00	 jmp	 $LN9@LoadTimer
$LN8@LoadTimer:

; 140  : 		}
; 141  : 
; 142  : 		type = (int)TokenNumber;

  004af	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004b5	e8 00 00 00 00	 call	 __ftol2_sse
  004ba	89 85 c0 fc ff
	ff		 mov	 DWORD PTR _type$[ebp], eax
$LN7@LoadTimer:

; 143  : 
; 144  : 		while ( true )

  004c0	b8 01 00 00 00	 mov	 eax, 1
  004c5	85 c0		 test	 eax, eax
  004c7	0f 84 71 01 00
	00		 je	 $LN6@LoadTimer

; 145  : 		{
; 146  : 			if ( type == 0 )

  004cd	83 bd c0 fc ff
	ff 00		 cmp	 DWORD PTR _type$[ebp], 0
  004d4	0f 85 5f 01 00
	00		 jne	 $LN1@LoadTimer

; 147  : 			{
; 148  : 				Token = GetToken();

  004da	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004df	89 85 c4 fc ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 149  : 
; 150  : 				if ( strcmp("end", TokenString) == 0 )

  004e5	68 00 00 00 00	 push	 OFFSET _TokenString
  004ea	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  004ef	e8 00 00 00 00	 call	 _strcmp
  004f4	83 c4 08	 add	 esp, 8
  004f7	85 c0		 test	 eax, eax
  004f9	75 05		 jne	 SHORT $LN4@LoadTimer

; 151  : 				{
; 152  : 					break;

  004fb	e9 3e 01 00 00	 jmp	 $LN6@LoadTimer
$LN4@LoadTimer:

; 153  : 				}
; 154  : 
; 155  : 				int EventType  = (int)TokenNumber;

  00500	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00506	e8 00 00 00 00	 call	 __ftol2_sse
  0050b	89 85 bc fc ff
	ff		 mov	 DWORD PTR _EventType$228831[ebp], eax

; 156  : 
; 157  : 				Token = GetToken();

  00511	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00516	89 85 c4 fc ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 158  : 				int EventHour = (int)TokenNumber;

  0051c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00522	e8 00 00 00 00	 call	 __ftol2_sse
  00527	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _EventHour$228833[ebp], eax

; 159  : 
; 160  : 				Token = GetToken();

  0052d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00532	89 85 c4 fc ff
	ff		 mov	 DWORD PTR _Token$[ebp], eax

; 161  : 				int EventMin = (int)TokenNumber;

  00538	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0053e	e8 00 00 00 00	 call	 __ftol2_sse
  00543	89 85 b4 fc ff
	ff		 mov	 DWORD PTR _EventMin$228835[ebp], eax

; 162  : 
; 163  : 				if(EventType == 2)

  00549	83 bd bc fc ff
	ff 02		 cmp	 DWORD PTR _EventType$228831[ebp], 2
  00550	75 47		 jne	 SHORT $LN3@LoadTimer

; 164  : 				{
; 165  : 					this->GD[this->CountGD].Hour = EventHour;

  00552	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00555	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  0055b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0055e	8b 85 b8 fc ff
	ff		 mov	 eax, DWORD PTR _EventHour$228833[ebp]
  00564	89 84 ca 70 09
	00 00		 mov	 DWORD PTR [edx+ecx*8+2416], eax

; 166  : 					this->GD[this->CountGD].Min = EventMin;

  0056b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0056e	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00574	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00577	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR _EventMin$228835[ebp]
  0057d	89 84 ca 74 09
	00 00		 mov	 DWORD PTR [edx+ecx*8+2420], eax

; 167  : 					this->CountGD++;

  00584	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00587	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  0058d	83 c1 01	 add	 ecx, 1
  00590	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00593	89 8a 90 0c 00
	00		 mov	 DWORD PTR [edx+3216], ecx
$LN3@LoadTimer:

; 168  : 				}
; 169  : 				if(EventType == 3)

  00599	83 bd bc fc ff
	ff 03		 cmp	 DWORD PTR _EventType$228831[ebp], 3
  005a0	75 47		 jne	 SHORT $LN2@LoadTimer

; 170  : 				{
; 171  : 					this->WW[this->CountWW].Hour = EventHour;

  005a2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005a5	8b 88 b4 0f 00
	00		 mov	 ecx, DWORD PTR [eax+4020]
  005ab	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005ae	8b 85 b8 fc ff
	ff		 mov	 eax, DWORD PTR _EventHour$228833[ebp]
  005b4	89 84 ca 94 0c
	00 00		 mov	 DWORD PTR [edx+ecx*8+3220], eax

; 172  : 					this->WW[this->CountWW].Min = EventMin;

  005bb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005be	8b 88 b4 0f 00
	00		 mov	 ecx, DWORD PTR [eax+4020]
  005c4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005c7	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR _EventMin$228835[ebp]
  005cd	89 84 ca 98 0c
	00 00		 mov	 DWORD PTR [edx+ecx*8+3224], eax

; 173  : 					this->CountWW++;

  005d4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005d7	8b 88 b4 0f 00
	00		 mov	 ecx, DWORD PTR [eax+4020]
  005dd	83 c1 01	 add	 ecx, 1
  005e0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005e3	89 8a b4 0f 00
	00		 mov	 DWORD PTR [edx+4020], ecx
$LN2@LoadTimer:

; 174  : 				}
; 175  : 				if(EventType == 0)

  005e9	83 bd bc fc ff
	ff 00		 cmp	 DWORD PTR _EventType$228831[ebp], 0
  005f0	75 47		 jne	 SHORT $LN1@LoadTimer

; 176  : 				{
; 177  : 					this->RD[this->CountRD].Hour = EventHour;

  005f2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005f5	8b 88 d8 12 00
	00		 mov	 ecx, DWORD PTR [eax+4824]
  005fb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005fe	8b 85 b8 fc ff
	ff		 mov	 eax, DWORD PTR _EventHour$228833[ebp]
  00604	89 84 ca b8 0f
	00 00		 mov	 DWORD PTR [edx+ecx*8+4024], eax

; 178  : 					this->RD[this->CountRD].Min = EventMin;

  0060b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0060e	8b 88 d8 12 00
	00		 mov	 ecx, DWORD PTR [eax+4824]
  00614	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00617	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR _EventMin$228835[ebp]
  0061d	89 84 ca bc 0f
	00 00		 mov	 DWORD PTR [edx+ecx*8+4028], eax

; 179  : 					this->CountRD++;

  00624	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00627	8b 88 d8 12 00
	00		 mov	 ecx, DWORD PTR [eax+4824]
  0062d	83 c1 01	 add	 ecx, 1
  00630	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00633	89 8a d8 12 00
	00		 mov	 DWORD PTR [edx+4824], ecx
$LN1@LoadTimer:

; 180  : 				}
; 181  : 			}
; 182  : 		}

  00639	e9 82 fe ff ff	 jmp	 $LN7@LoadTimer
$LN6@LoadTimer:

; 183  : 	}

  0063e	e9 46 fe ff ff	 jmp	 $LN10@LoadTimer
$LN9@LoadTimer:

; 184  : 
; 185  : 	fclose(SMDFile);

  00643	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00648	50		 push	 eax
  00649	e8 00 00 00 00	 call	 _fclose
  0064e	83 c4 04	 add	 esp, 4
$LN28@LoadTimer:

; 186  : 
; 187  : }

  00651	5f		 pop	 edi
  00652	5e		 pop	 esi
  00653	5b		 pop	 ebx
  00654	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00657	33 cd		 xor	 ecx, ebp
  00659	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0065e	8b e5		 mov	 esp, ebp
  00660	5d		 pop	 ebp
  00661	c3		 ret	 0
?LoadTimer@cEventTimer@@QAEXXZ ENDP			; cEventTimer::LoadTimer
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00670	55		 push	 ebp
  00671	8b ec		 mov	 ebp, esp
  00673	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00679	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0067e	33 c5		 xor	 eax, ebp
  00680	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00683	53		 push	 ebx
  00684	56		 push	 esi
  00685	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00686	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0068d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00692	50		 push	 eax
  00693	e8 00 00 00 00	 call	 _fgetc
  00698	83 c4 04	 add	 esp, 4
  0069b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0069e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006a2	83 f9 ff	 cmp	 ecx, -1
  006a5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  006a7	b8 02 00 00 00	 mov	 eax, 2
  006ac	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  006b1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  006b3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006b7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  006ba	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  006bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006c1	50		 push	 eax
  006c2	e8 00 00 00 00	 call	 _fgetc
  006c7	83 c4 04	 add	 esp, 4
  006ca	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  006cd	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006d1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  006d4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  006d6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006da	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  006dd	74 1c		 je	 SHORT $LN23@GetToken
  006df	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006e3	83 f8 ff	 cmp	 eax, -1
  006e6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  006e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006ed	50		 push	 eax
  006ee	e8 00 00 00 00	 call	 _fgetc
  006f3	83 c4 04	 add	 esp, 4
  006f6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  006f9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  006fb	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006ff	83 f8 ff	 cmp	 eax, -1
  00702	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00704	b8 02 00 00 00	 mov	 eax, 2
  00709	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0070e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00712	50		 push	 eax
  00713	e8 00 00 00 00	 call	 _isspace
  00718	83 c4 04	 add	 esp, 4
  0071b	85 c0		 test	 eax, eax
  0071d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00723	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00727	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0072d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00733	83 e9 22	 sub	 ecx, 34			; 00000022H
  00736	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0073c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00743	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00749	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0074f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00756	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0075d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00767	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0076c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00771	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00776	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00780	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00785	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0078a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0078f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00799	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0079e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  007a3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  007a8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  007b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007b7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  007bc	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  007c1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  007cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007d0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  007d5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  007da	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007df	50		 push	 eax
  007e0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  007e4	51		 push	 ecx
  007e5	e8 00 00 00 00	 call	 _ungetc
  007ea	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  007ed	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  007f0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  007f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  007f8	50		 push	 eax
  007f9	e8 00 00 00 00	 call	 _getc
  007fe	83 c4 04	 add	 esp, 4
  00801	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00804	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00808	83 f9 ff	 cmp	 ecx, -1
  0080b	74 36		 je	 SHORT $LN12@GetToken
  0080d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00811	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00814	74 1a		 je	 SHORT $LN11@GetToken
  00816	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0081a	50		 push	 eax
  0081b	e8 00 00 00 00	 call	 _isdigit
  00820	83 c4 04	 add	 esp, 4
  00823	85 c0		 test	 eax, eax
  00825	75 09		 jne	 SHORT $LN11@GetToken
  00827	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0082b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0082e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00830	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00833	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00836	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00838	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0083b	83 c0 01	 add	 eax, 1
  0083e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00841	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00843	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00846	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00849	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0084c	50		 push	 eax
  0084d	e8 00 00 00 00	 call	 _atof
  00852	83 c4 04	 add	 esp, 4
  00855	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0085b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00865	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0086a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0086f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00874	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0087b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00880	50		 push	 eax
  00881	e8 00 00 00 00	 call	 _getc
  00886	83 c4 04	 add	 esp, 4
  00889	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0088c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00890	83 f9 ff	 cmp	 ecx, -1
  00893	74 1c		 je	 SHORT $LN8@GetToken
  00895	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00899	83 f8 22	 cmp	 eax, 34			; 00000022H
  0089c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0089e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008a1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  008a4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  008a6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008a9	83 c0 01	 add	 eax, 1
  008ac	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  008af	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  008b1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008b5	83 f8 22	 cmp	 eax, 34			; 00000022H
  008b8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  008ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  008bf	50		 push	 eax
  008c0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  008c4	51		 push	 ecx
  008c5	e8 00 00 00 00	 call	 _ungetc
  008ca	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  008cd	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  008d0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  008d3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  008dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  008e2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  008e7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  008ec	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  008f0	50		 push	 eax
  008f1	e8 00 00 00 00	 call	 _isalpha
  008f6	83 c4 04	 add	 esp, 4
  008f9	85 c0		 test	 eax, eax
  008fb	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00901	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00908	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0090b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0090e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00910	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00913	83 c0 01	 add	 eax, 1
  00916	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00919	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0091e	50		 push	 eax
  0091f	e8 00 00 00 00	 call	 _getc
  00924	83 c4 04	 add	 esp, 4
  00927	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0092a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0092e	83 f9 ff	 cmp	 ecx, -1
  00931	74 36		 je	 SHORT $LN3@GetToken
  00933	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00937	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0093a	74 1a		 je	 SHORT $LN2@GetToken
  0093c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00940	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00943	74 11		 je	 SHORT $LN2@GetToken
  00945	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00949	50		 push	 eax
  0094a	e8 00 00 00 00	 call	 _isalnum
  0094f	83 c4 04	 add	 esp, 4
  00952	85 c0		 test	 eax, eax
  00954	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00956	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00959	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0095c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0095e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00961	83 c0 01	 add	 eax, 1
  00964	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00967	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00969	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0096e	50		 push	 eax
  0096f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00973	51		 push	 ecx
  00974	e8 00 00 00 00	 call	 _ungetc
  00979	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0097c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0097f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00982	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0098c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00991	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00993	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00995	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0099f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  009a4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  009a6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  009a8	5f		 pop	 edi
  009a9	5e		 pop	 esi
  009aa	5b		 pop	 ebx
  009ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009ae	33 cd		 xor	 ecx, ebp
  009b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009b5	8b e5		 mov	 esp, ebp
  009b7	5d		 pop	 ebp
  009b8	c3		 ret	 0
  009b9	8d 49 00	 npad	 3
$LN35@GetToken:
  009bc	00 00 00 00	 DD	 $LN10@GetToken
  009c0	00 00 00 00	 DD	 $LN19@GetToken
  009c4	00 00 00 00	 DD	 $LN17@GetToken
  009c8	00 00 00 00	 DD	 $LN14@GetToken
  009cc	00 00 00 00	 DD	 $LN18@GetToken
  009d0	00 00 00 00	 DD	 $LN16@GetToken
  009d4	00 00 00 00	 DD	 $LN15@GetToken
  009d8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  009dc	00		 DB	 0
  009dd	01		 DB	 1
  009de	07		 DB	 7
  009df	07		 DB	 7
  009e0	07		 DB	 7
  009e1	07		 DB	 7
  009e2	07		 DB	 7
  009e3	07		 DB	 7
  009e4	07		 DB	 7
  009e5	07		 DB	 7
  009e6	02		 DB	 2
  009e7	03		 DB	 3
  009e8	03		 DB	 3
  009e9	07		 DB	 7
  009ea	03		 DB	 3
  009eb	03		 DB	 3
  009ec	03		 DB	 3
  009ed	03		 DB	 3
  009ee	03		 DB	 3
  009ef	03		 DB	 3
  009f0	03		 DB	 3
  009f1	03		 DB	 3
  009f2	03		 DB	 3
  009f3	03		 DB	 3
  009f4	07		 DB	 7
  009f5	04		 DB	 4
  009f6	07		 DB	 7
  009f7	07		 DB	 7
  009f8	07		 DB	 7
  009f9	07		 DB	 7
  009fa	07		 DB	 7
  009fb	07		 DB	 7
  009fc	07		 DB	 7
  009fd	07		 DB	 7
  009fe	07		 DB	 7
  009ff	07		 DB	 7
  00a00	07		 DB	 7
  00a01	07		 DB	 7
  00a02	07		 DB	 7
  00a03	07		 DB	 7
  00a04	07		 DB	 7
  00a05	07		 DB	 7
  00a06	07		 DB	 7
  00a07	07		 DB	 7
  00a08	07		 DB	 7
  00a09	07		 DB	 7
  00a0a	07		 DB	 7
  00a0b	07		 DB	 7
  00a0c	07		 DB	 7
  00a0d	07		 DB	 7
  00a0e	07		 DB	 7
  00a0f	07		 DB	 7
  00a10	07		 DB	 7
  00a11	07		 DB	 7
  00a12	07		 DB	 7
  00a13	07		 DB	 7
  00a14	07		 DB	 7
  00a15	07		 DB	 7
  00a16	07		 DB	 7
  00a17	07		 DB	 7
  00a18	07		 DB	 7
  00a19	07		 DB	 7
  00a1a	07		 DB	 7
  00a1b	07		 DB	 7
  00a1c	07		 DB	 7
  00a1d	07		 DB	 7
  00a1e	07		 DB	 7
  00a1f	07		 DB	 7
  00a20	07		 DB	 7
  00a21	07		 DB	 7
  00a22	07		 DB	 7
  00a23	07		 DB	 7
  00a24	07		 DB	 7
  00a25	07		 DB	 7
  00a26	07		 DB	 7
  00a27	07		 DB	 7
  00a28	07		 DB	 7
  00a29	07		 DB	 7
  00a2a	07		 DB	 7
  00a2b	07		 DB	 7
  00a2c	07		 DB	 7
  00a2d	07		 DB	 7
  00a2e	07		 DB	 7
  00a2f	07		 DB	 7
  00a30	07		 DB	 7
  00a31	07		 DB	 7
  00a32	07		 DB	 7
  00a33	07		 DB	 7
  00a34	07		 DB	 7
  00a35	05		 DB	 5
  00a36	07		 DB	 7
  00a37	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
PUBLIC	__$ArrayPad$
PUBLIC	?Client@cEventTimer@@QAEXXZ			; cEventTimer::Client
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	_memset:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_DungeonSiege@@3VCDungeonSiege@@A:BYTE	; g_DungeonSiege
EXTRN	?GetStateDate@CCastleSiege@@QAEXHPAU_SYSTEMTIME@@@Z:PROC ; CCastleSiege::GetStateDate
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?g_Crywolf@@3VCCrywolf@@A:BYTE			; g_Crywolf
EXTRN	?DropEvent@@3VcDropEvent@@A:BYTE		; DropEvent
EXTRN	?HappyHour@@3VcHappyHour@@A:BYTE		; HappyHour
EXTRN	?g_TeleportShop@@3VTeleportShop@@A:BYTE		; g_TeleportShop
EXTRN	?SearchEvent@@3VcSearchEvent@@A:BYTE		; SearchEvent
EXTRN	?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A:BYTE	; gPandoraBoxEvent
EXTRN	?TvT@@3VcTvTEvent@@A:BYTE			; TvT
EXTRN	?g_DeviasBattle@@3VCDeviasBattle@@A:BYTE	; g_DeviasBattle
EXTRN	?LoraBattle@@3VcLoraBattle@@A:BYTE		; LoraBattle
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	__imp__GetLocalTime@4:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\eventtimer.cpp
_TEXT	SEGMENT
_tSend$229023 = -428					; size = 72
_lpObj$229021 = -356					; size = 4
_n$229017 = -352					; size = 4
_fTime$229015 = -348					; size = 4
_lTime$229014 = -344					; size = 4
_fTime$229011 = -340					; size = 4
_lTime$229010 = -336					; size = 4
_i$229006 = -332					; size = 4
_fTime$229003 = -328					; size = 4
_fTime$229000 = -324					; size = 4
_tm$228999 = -320					; size = 16
_fTime$228995 = -304					; size = 4
_fTime$228992 = -300					; size = 4
_fTime$228989 = -296					; size = 4
_i$228985 = -292					; size = 4
_fTime$228983 = -288					; size = 4
_fTime$228980 = -284					; size = 4
_i$228976 = -280					; size = 4
_fTime$228974 = -276					; size = 4
_fTime$228971 = -272					; size = 4
_i$228967 = -268					; size = 4
_fTime$228965 = -264					; size = 4
_fTime$228962 = -260					; size = 4
_i$228958 = -256					; size = 4
_fTime$228956 = -252					; size = 4
_fTime$228953 = -248					; size = 4
_i$228949 = -244					; size = 4
_fTime$228947 = -240					; size = 4
_fTime$228944 = -236					; size = 4
_i$228940 = -232					; size = 4
_fTime$228938 = -228					; size = 4
_fTime$228935 = -224					; size = 4
_i$228931 = -220					; size = 4
_fTime$228929 = -216					; size = 4
_fTime$228926 = -212					; size = 4
_i$228922 = -208					; size = 4
_iCount$228921 = -204					; size = 4
_lTime$228920 = -200					; size = 4
_TimeDungeonSiege$ = -196				; size = 4
_TimeCastleSiege$ = -192				; size = 4
_TimeCryWolf$ = -188					; size = 4
_TimeDropEvent$ = -184					; size = 4
_TimeHappy$ = -180					; size = 4
_TimeShop$ = -176					; size = 4
_TimeEvengelion$ = -172					; size = 4
_TimePandora$ = -168					; size = 4
_TimeTvT$ = -164					; size = 4
_TimeDevias$ = -160					; size = 4
_TimeLora$ = -156					; size = 4
_fTime$228905 = -152					; size = 4
_lTime$228904 = -148					; size = 4
_fTime$228901 = -144					; size = 4
_lTime$228900 = -140					; size = 4
_i$228896 = -136					; size = 4
_fTime$228894 = -132					; size = 4
_lTime$228893 = -128					; size = 4
_fTime$228890 = -124					; size = 4
_lTime$228889 = -120					; size = 4
_i$228885 = -116					; size = 4
_fTime$228883 = -112					; size = 4
_lTime$228882 = -108					; size = 4
_fTime$228879 = -104					; size = 4
_lTime$228878 = -100					; size = 4
_i$228874 = -96						; size = 4
_fTime$228872 = -92					; size = 4
_lTime$228871 = -88					; size = 4
_fTime$228868 = -84					; size = 4
_lTime$228867 = -80					; size = 4
_i$228863 = -76						; size = 4
_fTime$228861 = -72					; size = 4
_lTime$228860 = -68					; size = 4
_fTime$228857 = -64					; size = 4
_lTime$228856 = -60					; size = 4
_i$228852 = -56						; size = 4
_Tim$ = -52						; size = 4
_t$ = -48						; size = 16
_RDStart$ = -32						; size = 4
_WWStart$ = -28						; size = 4
_GDStart$ = -24						; size = 4
_CCStart$ = -20						; size = 4
_DSStart$ = -16						; size = 4
_BCStart$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Client@cEventTimer@@QAEXXZ PROC			; cEventTimer::Client
; _this$ = ecx

; 190  : {

  00a40	55		 push	 ebp
  00a41	8b ec		 mov	 ebp, esp
  00a43	81 ec ec 01 00
	00		 sub	 esp, 492		; 000001ecH
  00a49	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00a4e	33 c5		 xor	 eax, ebp
  00a50	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00a53	53		 push	 ebx
  00a54	56		 push	 esi
  00a55	57		 push	 edi
  00a56	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 191  : 	if(!this->Enable) return;

  00a59	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a5c	83 38 00	 cmp	 DWORD PTR [eax], 0
  00a5f	75 05		 jne	 SHORT $LN99@Client
  00a61	e9 37 10 00 00	 jmp	 $LN100@Client
$LN99@Client:

; 192  : 
; 193  : 	DWORD BCStart = 0;

  00a66	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _BCStart$[ebp], 0

; 194  : 	DWORD DSStart = 0;

  00a6d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _DSStart$[ebp], 0

; 195  : 	DWORD CCStart = 0;

  00a74	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _CCStart$[ebp], 0

; 196  : 	DWORD GDStart = 0;

  00a7b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _GDStart$[ebp], 0

; 197  : 	DWORD WWStart = 0;

  00a82	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _WWStart$[ebp], 0

; 198  : 	DWORD RDStart = 0;

  00a89	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _RDStart$[ebp], 0

; 199  : 
; 200  : 	SYSTEMTIME t;
; 201  : 	GetLocalTime(&t);

  00a90	8d 45 d0	 lea	 eax, DWORD PTR _t$[ebp]
  00a93	50		 push	 eax
  00a94	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 202  : 
; 203  : 	DWORD Tim = time(NULL);

  00a9a	6a 00		 push	 0
  00a9c	e8 00 00 00 00	 call	 _time
  00aa1	83 c4 04	 add	 esp, 4
  00aa4	89 45 cc	 mov	 DWORD PTR _Tim$[ebp], eax

; 204  : 
; 205  : 	for(int i=0;i<this->CountBC;i++)

  00aa7	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$228852[ebp], 0
  00aae	eb 09		 jmp	 SHORT $LN98@Client
$LN97@Client:
  00ab0	8b 45 c8	 mov	 eax, DWORD PTR _i$228852[ebp]
  00ab3	83 c0 01	 add	 eax, 1
  00ab6	89 45 c8	 mov	 DWORD PTR _i$228852[ebp], eax
$LN98@Client:
  00ab9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00abc	8b 4d c8	 mov	 ecx, DWORD PTR _i$228852[ebp]
  00abf	3b 88 24 03 00
	00		 cmp	 ecx, DWORD PTR [eax+804]
  00ac5	7d 53		 jge	 SHORT $LN96@Client

; 206  : 	{
; 207  : /*
; 208  : 	ATLENSURE( nYear >= 1900 );
; 209  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );
; 210  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );
; 211  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );
; 212  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );
; 213  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );
; 214  : */
; 215  : 
; 216  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00ac7	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00acb	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00ad1	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00ad5	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00ad8	03 c1		 add	 eax, ecx
  00ada	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00ade	03 c2		 add	 eax, edx
  00ae0	89 45 c4	 mov	 DWORD PTR _lTime$228856[ebp], eax

; 217  : 		int fTime = this->BC[i].Hour * 3600 + this->BC[i].Min * 60 ;

  00ae3	8b 45 c8	 mov	 eax, DWORD PTR _i$228852[ebp]
  00ae6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ae9	8b 54 c1 04	 mov	 edx, DWORD PTR [ecx+eax*8+4]
  00aed	69 d2 10 0e 00
	00		 imul	 edx, 3600		; 00000e10H
  00af3	8b 45 c8	 mov	 eax, DWORD PTR _i$228852[ebp]
  00af6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00af9	8b 44 c1 08	 mov	 eax, DWORD PTR [ecx+eax*8+8]
  00afd	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00b00	03 d0		 add	 edx, eax
  00b02	89 55 c0	 mov	 DWORD PTR _fTime$228857[ebp], edx

; 218  : 
; 219  : 		if(fTime > lTime )

  00b05	8b 45 c0	 mov	 eax, DWORD PTR _fTime$228857[ebp]
  00b08	3b 45 c4	 cmp	 eax, DWORD PTR _lTime$228856[ebp]
  00b0b	7e 0b		 jle	 SHORT $LN95@Client

; 220  : 		{
; 221  : 			BCStart = fTime - lTime;

  00b0d	8b 45 c0	 mov	 eax, DWORD PTR _fTime$228857[ebp]
  00b10	2b 45 c4	 sub	 eax, DWORD PTR _lTime$228856[ebp]
  00b13	89 45 f4	 mov	 DWORD PTR _BCStart$[ebp], eax

; 222  : 			break;

  00b16	eb 02		 jmp	 SHORT $LN96@Client
$LN95@Client:

; 223  : 		}
; 224  : 	}

  00b18	eb 96		 jmp	 SHORT $LN97@Client
$LN96@Client:

; 225  : 
; 226  : 	if(BCStart == 0)

  00b1a	83 7d f4 00	 cmp	 DWORD PTR _BCStart$[ebp], 0
  00b1e	75 4c		 jne	 SHORT $LN94@Client

; 227  : 	{
; 228  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00b20	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00b24	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00b2a	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00b2e	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00b31	03 c1		 add	 eax, ecx
  00b33	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00b37	03 c2		 add	 eax, edx
  00b39	89 45 bc	 mov	 DWORD PTR _lTime$228860[ebp], eax

; 229  : 		int fTime =  86400 + this->BC[0].Hour * 3600 + this->BC[0].Min * 60 ;

  00b3c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b3f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00b42	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  00b48	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00b4b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00b4e	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00b51	8d 8c 01 80 51
	01 00		 lea	 ecx, DWORD PTR [ecx+eax+86400]
  00b58	89 4d b8	 mov	 DWORD PTR _fTime$228861[ebp], ecx

; 230  : 
; 231  : 		if(fTime > lTime )

  00b5b	8b 45 b8	 mov	 eax, DWORD PTR _fTime$228861[ebp]
  00b5e	3b 45 bc	 cmp	 eax, DWORD PTR _lTime$228860[ebp]
  00b61	7e 09		 jle	 SHORT $LN94@Client

; 232  : 		{
; 233  : 			BCStart = fTime - lTime;

  00b63	8b 45 b8	 mov	 eax, DWORD PTR _fTime$228861[ebp]
  00b66	2b 45 bc	 sub	 eax, DWORD PTR _lTime$228860[ebp]
  00b69	89 45 f4	 mov	 DWORD PTR _BCStart$[ebp], eax
$LN94@Client:

; 234  : 		}
; 235  : 	}
; 236  : 
; 237  : 	// ----
; 238  : 
; 239  : 	for(int i=0;i<this->CountDS;i++)

  00b6c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _i$228863[ebp], 0
  00b73	eb 09		 jmp	 SHORT $LN92@Client
$LN91@Client:
  00b75	8b 45 b4	 mov	 eax, DWORD PTR _i$228863[ebp]
  00b78	83 c0 01	 add	 eax, 1
  00b7b	89 45 b4	 mov	 DWORD PTR _i$228863[ebp], eax
$LN92@Client:
  00b7e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b81	8b 4d b4	 mov	 ecx, DWORD PTR _i$228863[ebp]
  00b84	3b 88 48 06 00
	00		 cmp	 ecx, DWORD PTR [eax+1608]
  00b8a	7d 59		 jge	 SHORT $LN90@Client

; 240  : 	{
; 241  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00b8c	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00b90	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00b96	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00b9a	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00b9d	03 c1		 add	 eax, ecx
  00b9f	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00ba3	03 c2		 add	 eax, edx
  00ba5	89 45 b0	 mov	 DWORD PTR _lTime$228867[ebp], eax

; 242  : 		int fTime = this->DS[i].Hour * 3600 + this->DS[i].Min * 60 ;

  00ba8	8b 45 b4	 mov	 eax, DWORD PTR _i$228863[ebp]
  00bab	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00bae	8b 94 c1 28 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+808]
  00bb5	69 d2 10 0e 00
	00		 imul	 edx, 3600		; 00000e10H
  00bbb	8b 45 b4	 mov	 eax, DWORD PTR _i$228863[ebp]
  00bbe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00bc1	8b 84 c1 2c 03
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+812]
  00bc8	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00bcb	03 d0		 add	 edx, eax
  00bcd	89 55 ac	 mov	 DWORD PTR _fTime$228868[ebp], edx

; 243  : 
; 244  : 		if(fTime > lTime )

  00bd0	8b 45 ac	 mov	 eax, DWORD PTR _fTime$228868[ebp]
  00bd3	3b 45 b0	 cmp	 eax, DWORD PTR _lTime$228867[ebp]
  00bd6	7e 0b		 jle	 SHORT $LN89@Client

; 245  : 		{
; 246  : 			DSStart = fTime - lTime;

  00bd8	8b 45 ac	 mov	 eax, DWORD PTR _fTime$228868[ebp]
  00bdb	2b 45 b0	 sub	 eax, DWORD PTR _lTime$228867[ebp]
  00bde	89 45 f0	 mov	 DWORD PTR _DSStart$[ebp], eax

; 247  : 			break;

  00be1	eb 02		 jmp	 SHORT $LN90@Client
$LN89@Client:

; 248  : 		}
; 249  : 	}

  00be3	eb 90		 jmp	 SHORT $LN91@Client
$LN90@Client:

; 250  : 
; 251  : 	if(DSStart == 0)

  00be5	83 7d f0 00	 cmp	 DWORD PTR _DSStart$[ebp], 0
  00be9	75 52		 jne	 SHORT $LN88@Client

; 252  : 	{
; 253  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00beb	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00bef	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00bf5	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00bf9	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00bfc	03 c1		 add	 eax, ecx
  00bfe	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00c02	03 c2		 add	 eax, edx
  00c04	89 45 a8	 mov	 DWORD PTR _lTime$228871[ebp], eax

; 254  : 		int fTime =  86400 + this->DS[0].Hour * 3600 + this->DS[0].Min * 60 ;

  00c07	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c0a	8b 88 28 03 00
	00		 mov	 ecx, DWORD PTR [eax+808]
  00c10	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  00c16	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c19	8b 82 2c 03 00
	00		 mov	 eax, DWORD PTR [edx+812]
  00c1f	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00c22	8d 8c 01 80 51
	01 00		 lea	 ecx, DWORD PTR [ecx+eax+86400]
  00c29	89 4d a4	 mov	 DWORD PTR _fTime$228872[ebp], ecx

; 255  : 
; 256  : 		if(fTime > lTime )

  00c2c	8b 45 a4	 mov	 eax, DWORD PTR _fTime$228872[ebp]
  00c2f	3b 45 a8	 cmp	 eax, DWORD PTR _lTime$228871[ebp]
  00c32	7e 09		 jle	 SHORT $LN88@Client

; 257  : 		{
; 258  : 			DSStart = fTime - lTime;

  00c34	8b 45 a4	 mov	 eax, DWORD PTR _fTime$228872[ebp]
  00c37	2b 45 a8	 sub	 eax, DWORD PTR _lTime$228871[ebp]
  00c3a	89 45 f0	 mov	 DWORD PTR _DSStart$[ebp], eax
$LN88@Client:

; 259  : 		}
; 260  : 	}
; 261  : 
; 262  : 	// ----
; 263  : 
; 264  : 	for(int i=0;i<this->CountCC;i++)

  00c3d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$228874[ebp], 0
  00c44	eb 09		 jmp	 SHORT $LN86@Client
$LN85@Client:
  00c46	8b 45 a0	 mov	 eax, DWORD PTR _i$228874[ebp]
  00c49	83 c0 01	 add	 eax, 1
  00c4c	89 45 a0	 mov	 DWORD PTR _i$228874[ebp], eax
$LN86@Client:
  00c4f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c52	8b 4d a0	 mov	 ecx, DWORD PTR _i$228874[ebp]
  00c55	3b 88 6c 09 00
	00		 cmp	 ecx, DWORD PTR [eax+2412]
  00c5b	7d 59		 jge	 SHORT $LN84@Client

; 265  : 	{
; 266  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00c5d	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00c61	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00c67	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00c6b	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00c6e	03 c1		 add	 eax, ecx
  00c70	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00c74	03 c2		 add	 eax, edx
  00c76	89 45 9c	 mov	 DWORD PTR _lTime$228878[ebp], eax

; 267  : 		int fTime = this->CC[i].Hour * 3600 + this->CC[i].Min * 60 ;

  00c79	8b 45 a0	 mov	 eax, DWORD PTR _i$228874[ebp]
  00c7c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c7f	8b 94 c1 4c 06
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+1612]
  00c86	69 d2 10 0e 00
	00		 imul	 edx, 3600		; 00000e10H
  00c8c	8b 45 a0	 mov	 eax, DWORD PTR _i$228874[ebp]
  00c8f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c92	8b 84 c1 50 06
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+1616]
  00c99	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00c9c	03 d0		 add	 edx, eax
  00c9e	89 55 98	 mov	 DWORD PTR _fTime$228879[ebp], edx

; 268  : 
; 269  : 		if(fTime > lTime )

  00ca1	8b 45 98	 mov	 eax, DWORD PTR _fTime$228879[ebp]
  00ca4	3b 45 9c	 cmp	 eax, DWORD PTR _lTime$228878[ebp]
  00ca7	7e 0b		 jle	 SHORT $LN83@Client

; 270  : 		{
; 271  : 			CCStart = fTime - lTime;

  00ca9	8b 45 98	 mov	 eax, DWORD PTR _fTime$228879[ebp]
  00cac	2b 45 9c	 sub	 eax, DWORD PTR _lTime$228878[ebp]
  00caf	89 45 ec	 mov	 DWORD PTR _CCStart$[ebp], eax

; 272  : 			break;

  00cb2	eb 02		 jmp	 SHORT $LN84@Client
$LN83@Client:

; 273  : 		}
; 274  : 	}

  00cb4	eb 90		 jmp	 SHORT $LN85@Client
$LN84@Client:

; 275  : 
; 276  : 	if(CCStart == 0)

  00cb6	83 7d ec 00	 cmp	 DWORD PTR _CCStart$[ebp], 0
  00cba	75 52		 jne	 SHORT $LN82@Client

; 277  : 	{
; 278  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00cbc	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00cc0	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00cc6	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00cca	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00ccd	03 c1		 add	 eax, ecx
  00ccf	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00cd3	03 c2		 add	 eax, edx
  00cd5	89 45 94	 mov	 DWORD PTR _lTime$228882[ebp], eax

; 279  : 		int fTime =  86400 + this->CC[0].Hour * 3600 + this->CC[0].Min * 60 ;

  00cd8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00cdb	8b 88 4c 06 00
	00		 mov	 ecx, DWORD PTR [eax+1612]
  00ce1	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  00ce7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00cea	8b 82 50 06 00
	00		 mov	 eax, DWORD PTR [edx+1616]
  00cf0	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00cf3	8d 8c 01 80 51
	01 00		 lea	 ecx, DWORD PTR [ecx+eax+86400]
  00cfa	89 4d 90	 mov	 DWORD PTR _fTime$228883[ebp], ecx

; 280  : 
; 281  : 		if(fTime > lTime )

  00cfd	8b 45 90	 mov	 eax, DWORD PTR _fTime$228883[ebp]
  00d00	3b 45 94	 cmp	 eax, DWORD PTR _lTime$228882[ebp]
  00d03	7e 09		 jle	 SHORT $LN82@Client

; 282  : 		{
; 283  : 			CCStart = fTime - lTime;

  00d05	8b 45 90	 mov	 eax, DWORD PTR _fTime$228883[ebp]
  00d08	2b 45 94	 sub	 eax, DWORD PTR _lTime$228882[ebp]
  00d0b	89 45 ec	 mov	 DWORD PTR _CCStart$[ebp], eax
$LN82@Client:

; 284  : 		}
; 285  : 	}
; 286  : 
; 287  : 	// ----
; 288  : 
; 289  : 	for(int i=0;i<this->CountGD;i++)

  00d0e	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$228885[ebp], 0
  00d15	eb 09		 jmp	 SHORT $LN80@Client
$LN79@Client:
  00d17	8b 45 8c	 mov	 eax, DWORD PTR _i$228885[ebp]
  00d1a	83 c0 01	 add	 eax, 1
  00d1d	89 45 8c	 mov	 DWORD PTR _i$228885[ebp], eax
$LN80@Client:
  00d20	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d23	8b 4d 8c	 mov	 ecx, DWORD PTR _i$228885[ebp]
  00d26	3b 88 90 0c 00
	00		 cmp	 ecx, DWORD PTR [eax+3216]
  00d2c	7d 59		 jge	 SHORT $LN78@Client

; 290  : 	{
; 291  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00d2e	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00d32	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00d38	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00d3c	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00d3f	03 c1		 add	 eax, ecx
  00d41	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00d45	03 c2		 add	 eax, edx
  00d47	89 45 88	 mov	 DWORD PTR _lTime$228889[ebp], eax

; 292  : 		int fTime = this->GD[i].Hour * 3600 + this->GD[i].Min * 60 ;

  00d4a	8b 45 8c	 mov	 eax, DWORD PTR _i$228885[ebp]
  00d4d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d50	8b 94 c1 70 09
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+2416]
  00d57	69 d2 10 0e 00
	00		 imul	 edx, 3600		; 00000e10H
  00d5d	8b 45 8c	 mov	 eax, DWORD PTR _i$228885[ebp]
  00d60	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d63	8b 84 c1 74 09
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+2420]
  00d6a	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00d6d	03 d0		 add	 edx, eax
  00d6f	89 55 84	 mov	 DWORD PTR _fTime$228890[ebp], edx

; 293  : 
; 294  : 		if(fTime > lTime )

  00d72	8b 45 84	 mov	 eax, DWORD PTR _fTime$228890[ebp]
  00d75	3b 45 88	 cmp	 eax, DWORD PTR _lTime$228889[ebp]
  00d78	7e 0b		 jle	 SHORT $LN77@Client

; 295  : 		{
; 296  : 			GDStart = fTime - lTime;

  00d7a	8b 45 84	 mov	 eax, DWORD PTR _fTime$228890[ebp]
  00d7d	2b 45 88	 sub	 eax, DWORD PTR _lTime$228889[ebp]
  00d80	89 45 e8	 mov	 DWORD PTR _GDStart$[ebp], eax

; 297  : 			break;

  00d83	eb 02		 jmp	 SHORT $LN78@Client
$LN77@Client:

; 298  : 		}
; 299  : 	}

  00d85	eb 90		 jmp	 SHORT $LN79@Client
$LN78@Client:

; 300  : 
; 301  : 	if(GDStart == 0)

  00d87	83 7d e8 00	 cmp	 DWORD PTR _GDStart$[ebp], 0
  00d8b	75 5b		 jne	 SHORT $LN76@Client

; 302  : 	{
; 303  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00d8d	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00d91	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00d97	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00d9b	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00d9e	03 c1		 add	 eax, ecx
  00da0	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00da4	03 c2		 add	 eax, edx
  00da6	89 45 80	 mov	 DWORD PTR _lTime$228893[ebp], eax

; 304  : 		int fTime =  86400 + this->GD[0].Hour * 3600 + this->GD[0].Min * 60 ;

  00da9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00dac	8b 88 70 09 00
	00		 mov	 ecx, DWORD PTR [eax+2416]
  00db2	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  00db8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00dbb	8b 82 74 09 00
	00		 mov	 eax, DWORD PTR [edx+2420]
  00dc1	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00dc4	8d 8c 01 80 51
	01 00		 lea	 ecx, DWORD PTR [ecx+eax+86400]
  00dcb	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _fTime$228894[ebp], ecx

; 305  : 
; 306  : 		if(fTime > lTime )

  00dd1	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228894[ebp]
  00dd7	3b 45 80	 cmp	 eax, DWORD PTR _lTime$228893[ebp]
  00dda	7e 0c		 jle	 SHORT $LN76@Client

; 307  : 		{
; 308  : 			GDStart = fTime - lTime;

  00ddc	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228894[ebp]
  00de2	2b 45 80	 sub	 eax, DWORD PTR _lTime$228893[ebp]
  00de5	89 45 e8	 mov	 DWORD PTR _GDStart$[ebp], eax
$LN76@Client:

; 309  : 		}
; 310  : 	}
; 311  : 
; 312  : 	// ----
; 313  : 
; 314  : 	for(int i=0;i<this->CountWW;i++)

  00de8	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228896[ebp], 0
  00df2	eb 0f		 jmp	 SHORT $LN74@Client
$LN73@Client:
  00df4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$228896[ebp]
  00dfa	83 c0 01	 add	 eax, 1
  00dfd	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$228896[ebp], eax
$LN74@Client:
  00e03	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e06	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _i$228896[ebp]
  00e0c	3b 88 b4 0f 00
	00		 cmp	 ecx, DWORD PTR [eax+4020]
  00e12	7d 74		 jge	 SHORT $LN72@Client

; 315  : 	{
; 316  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00e14	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00e18	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00e1e	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00e22	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00e25	03 c1		 add	 eax, ecx
  00e27	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00e2b	03 c2		 add	 eax, edx
  00e2d	89 85 74 ff ff
	ff		 mov	 DWORD PTR _lTime$228900[ebp], eax

; 317  : 		int fTime = this->WW[i].Hour * 3600 + this->WW[i].Min * 60 ;

  00e33	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$228896[ebp]
  00e39	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e3c	8b 94 c1 94 0c
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+3220]
  00e43	69 d2 10 0e 00
	00		 imul	 edx, 3600		; 00000e10H
  00e49	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$228896[ebp]
  00e4f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e52	8b 84 c1 98 0c
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+3224]
  00e59	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00e5c	03 d0		 add	 edx, eax
  00e5e	89 95 70 ff ff
	ff		 mov	 DWORD PTR _fTime$228901[ebp], edx

; 318  : 
; 319  : 		if(fTime > lTime )

  00e64	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228901[ebp]
  00e6a	3b 85 74 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228900[ebp]
  00e70	7e 11		 jle	 SHORT $LN71@Client

; 320  : 		{
; 321  : 			WWStart = fTime - lTime;

  00e72	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228901[ebp]
  00e78	2b 85 74 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228900[ebp]
  00e7e	89 45 e4	 mov	 DWORD PTR _WWStart$[ebp], eax

; 322  : 			break;

  00e81	eb 05		 jmp	 SHORT $LN72@Client
$LN71@Client:

; 323  : 		}
; 324  : 	}

  00e83	e9 6c ff ff ff	 jmp	 $LN73@Client
$LN72@Client:

; 325  : 
; 326  : 	if(WWStart == 0)

  00e88	83 7d e4 00	 cmp	 DWORD PTR _WWStart$[ebp], 0
  00e8c	75 64		 jne	 SHORT $LN70@Client

; 327  : 	{
; 328  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00e8e	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00e92	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00e98	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00e9c	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00e9f	03 c1		 add	 eax, ecx
  00ea1	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00ea5	03 c2		 add	 eax, edx
  00ea7	89 85 6c ff ff
	ff		 mov	 DWORD PTR _lTime$228904[ebp], eax

; 329  : 		int fTime =  86400 + this->WW[0].Hour * 3600 + this->WW[0].Min * 60 ;

  00ead	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00eb0	8b 88 94 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3220]
  00eb6	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  00ebc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ebf	8b 82 98 0c 00
	00		 mov	 eax, DWORD PTR [edx+3224]
  00ec5	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00ec8	8d 8c 01 80 51
	01 00		 lea	 ecx, DWORD PTR [ecx+eax+86400]
  00ecf	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _fTime$228905[ebp], ecx

; 330  : 
; 331  : 		if(fTime > lTime )

  00ed5	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228905[ebp]
  00edb	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228904[ebp]
  00ee1	7e 0f		 jle	 SHORT $LN70@Client

; 332  : 		{
; 333  : 			WWStart = fTime - lTime;

  00ee3	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228905[ebp]
  00ee9	2b 85 6c ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228904[ebp]
  00eef	89 45 e4	 mov	 DWORD PTR _WWStart$[ebp], eax
$LN70@Client:

; 334  : 		}
; 335  : 	}
; 336  : 
; 337  : #if(EVENT_TIMER_EX)
; 338  : 
; 339  : 	DWORD TimeLora = 0;

  00ef2	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeLora$[ebp], 0

; 340  : 	DWORD TimeDevias = 0;

  00efc	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeDevias$[ebp], 0

; 341  : 	DWORD TimeTvT = 0;

  00f06	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeTvT$[ebp], 0

; 342  : 	DWORD TimePandora = 0;

  00f10	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimePandora$[ebp], 0

; 343  : 	DWORD TimeEvengelion = 0;

  00f1a	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeEvengelion$[ebp], 0

; 344  : 	DWORD TimeShop = 0;

  00f24	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeShop$[ebp], 0

; 345  : 	DWORD TimeHappy = 0;

  00f2e	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeHappy$[ebp], 0

; 346  : 	DWORD TimeDropEvent = 0;

  00f38	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeDropEvent$[ebp], 0

; 347  : 	DWORD TimeCryWolf = 0;

  00f42	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeCryWolf$[ebp], 0

; 348  : 	DWORD TimeCastleSiege = 0;

  00f4c	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeCastleSiege$[ebp], 0

; 349  : 	DWORD TimeDungeonSiege = 0;

  00f56	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _TimeDungeonSiege$[ebp], 0

; 350  : 
; 351  : 	if(g_ExLicense.CheckUser(eExUB::Local) || 
; 352  : 		g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2) || 
; 353  : 		g_ExLicense.CheckUser(eExUB::Artem) || g_ExLicense.CheckUser(eExUB::Artem2) )

  00f60	6a 00		 push	 0
  00f62	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00f67	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00f6c	0f b6 c0	 movzx	 eax, al
  00f6f	85 c0		 test	 eax, eax
  00f71	75 63		 jne	 SHORT $LN67@Client
  00f73	6a 20		 push	 32			; 00000020H
  00f75	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00f7a	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00f7f	0f b6 c0	 movzx	 eax, al
  00f82	85 c0		 test	 eax, eax
  00f84	75 50		 jne	 SHORT $LN67@Client
  00f86	6a 21		 push	 33			; 00000021H
  00f88	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00f8d	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00f92	0f b6 c0	 movzx	 eax, al
  00f95	85 c0		 test	 eax, eax
  00f97	75 3d		 jne	 SHORT $LN67@Client
  00f99	6a 22		 push	 34			; 00000022H
  00f9b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00fa0	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00fa5	0f b6 c0	 movzx	 eax, al
  00fa8	85 c0		 test	 eax, eax
  00faa	75 2a		 jne	 SHORT $LN67@Client
  00fac	6a 30		 push	 48			; 00000030H
  00fae	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00fb3	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00fb8	0f b6 c0	 movzx	 eax, al
  00fbb	85 c0		 test	 eax, eax
  00fbd	75 17		 jne	 SHORT $LN67@Client
  00fbf	6a 31		 push	 49			; 00000031H
  00fc1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00fc6	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00fcb	0f b6 c0	 movzx	 eax, al
  00fce	85 c0		 test	 eax, eax
  00fd0	0f 84 3f 08 00
	00		 je	 $LN68@Client
$LN67@Client:

; 354  : 	{
; 355  : 		// --
; 356  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  00fd6	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  00fda	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  00fe0	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00fe4	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  00fe7	03 c1		 add	 eax, ecx
  00fe9	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  00fed	03 c2		 add	 eax, edx
  00fef	89 85 38 ff ff
	ff		 mov	 DWORD PTR _lTime$228920[ebp], eax

; 357  : 		// --> Lorencia Battle
; 358  : 		int iCount = LoraBattle.Count;

  00ff5	a1 c0 1c 02 00	 mov	 eax, DWORD PTR ?LoraBattle@@3VcLoraBattle@@A+138432
  00ffa	89 85 34 ff ff
	ff		 mov	 DWORD PTR _iCount$228921[ebp], eax

; 359  : 		for(int i = 0; i < iCount; i++)

  01000	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228922[ebp], 0
  0100a	eb 0f		 jmp	 SHORT $LN66@Client
$LN65@Client:
  0100c	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$228922[ebp]
  01012	83 c0 01	 add	 eax, 1
  01015	89 85 30 ff ff
	ff		 mov	 DWORD PTR _i$228922[ebp], eax
$LN66@Client:
  0101b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$228922[ebp]
  01021	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _iCount$228921[ebp]
  01027	7d 53		 jge	 SHORT $LN64@Client

; 360  : 		{
; 361  : 			int fTime = LoraBattle.Time[i].Hour * 3600 + LoraBattle.Time[i].Min * 60;

  01029	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$228922[ebp]
  0102f	6b c0 18	 imul	 eax, 24			; 00000018H
  01032	8b 88 c8 10 02
	00		 mov	 ecx, DWORD PTR ?LoraBattle@@3VcLoraBattle@@A[eax+135368]
  01038	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  0103e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _i$228922[ebp]
  01044	6b d2 18	 imul	 edx, 24			; 00000018H
  01047	8b 82 cc 10 02
	00		 mov	 eax, DWORD PTR ?LoraBattle@@3VcLoraBattle@@A[edx+135372]
  0104d	6b c0 3c	 imul	 eax, 60			; 0000003cH
  01050	03 c8		 add	 ecx, eax
  01052	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _fTime$228926[ebp], ecx

; 362  : 			if(fTime > lTime )

  01058	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228926[ebp]
  0105e	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  01064	7e 14		 jle	 SHORT $LN63@Client

; 363  : 			{
; 364  : 				TimeLora = fTime - lTime;

  01066	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228926[ebp]
  0106c	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  01072	89 85 64 ff ff
	ff		 mov	 DWORD PTR _TimeLora$[ebp], eax

; 365  : 				break;

  01078	eb 02		 jmp	 SHORT $LN64@Client
$LN63@Client:

; 366  : 			}
; 367  : 		}

  0107a	eb 90		 jmp	 SHORT $LN65@Client
$LN64@Client:

; 368  : 		if(TimeLora == 0)

  0107c	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _TimeLora$[ebp], 0
  01083	75 3e		 jne	 SHORT $LN62@Client

; 369  : 		{
; 370  : 			int fTime =  86400 + LoraBattle.Time[0].Hour * 3600 + LoraBattle.Time[0].Min;

  01085	a1 c8 10 02 00	 mov	 eax, DWORD PTR ?LoraBattle@@3VcLoraBattle@@A+135368
  0108a	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  01090	8b 0d cc 10 02
	00		 mov	 ecx, DWORD PTR ?LoraBattle@@3VcLoraBattle@@A+135372
  01096	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  0109d	89 95 28 ff ff
	ff		 mov	 DWORD PTR _fTime$228929[ebp], edx

; 371  : 			if(fTime > lTime)

  010a3	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228929[ebp]
  010a9	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  010af	7e 12		 jle	 SHORT $LN62@Client

; 372  : 			{
; 373  : 				TimeLora = fTime - lTime;

  010b1	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228929[ebp]
  010b7	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  010bd	89 85 64 ff ff
	ff		 mov	 DWORD PTR _TimeLora$[ebp], eax
$LN62@Client:

; 374  : 			}
; 375  : 		}	
; 376  : 		// --> Devias Battle
; 377  : 		iCount = g_DeviasBattle.Count;

  010c3	a1 c0 1c 02 00	 mov	 eax, DWORD PTR ?g_DeviasBattle@@3VCDeviasBattle@@A+138432
  010c8	89 85 34 ff ff
	ff		 mov	 DWORD PTR _iCount$228921[ebp], eax

; 378  : 		for(int i = 0; i < iCount; i++)

  010ce	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228931[ebp], 0
  010d8	eb 0f		 jmp	 SHORT $LN60@Client
$LN59@Client:
  010da	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _i$228931[ebp]
  010e0	83 c0 01	 add	 eax, 1
  010e3	89 85 24 ff ff
	ff		 mov	 DWORD PTR _i$228931[ebp], eax
$LN60@Client:
  010e9	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _i$228931[ebp]
  010ef	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _iCount$228921[ebp]
  010f5	7d 53		 jge	 SHORT $LN58@Client

; 379  : 		{
; 380  : 			int fTime = g_DeviasBattle.Time[i].Hour * 3600 + g_DeviasBattle.Time[i].Min * 60;

  010f7	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _i$228931[ebp]
  010fd	6b c0 18	 imul	 eax, 24			; 00000018H
  01100	8b 88 c8 10 02
	00		 mov	 ecx, DWORD PTR ?g_DeviasBattle@@3VCDeviasBattle@@A[eax+135368]
  01106	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  0110c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR _i$228931[ebp]
  01112	6b d2 18	 imul	 edx, 24			; 00000018H
  01115	8b 82 cc 10 02
	00		 mov	 eax, DWORD PTR ?g_DeviasBattle@@3VCDeviasBattle@@A[edx+135372]
  0111b	6b c0 3c	 imul	 eax, 60			; 0000003cH
  0111e	03 c8		 add	 ecx, eax
  01120	89 8d 20 ff ff
	ff		 mov	 DWORD PTR _fTime$228935[ebp], ecx

; 381  : 			if(fTime > lTime )

  01126	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228935[ebp]
  0112c	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  01132	7e 14		 jle	 SHORT $LN57@Client

; 382  : 			{
; 383  : 				TimeDevias = fTime - lTime;

  01134	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228935[ebp]
  0113a	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  01140	89 85 60 ff ff
	ff		 mov	 DWORD PTR _TimeDevias$[ebp], eax

; 384  : 				break;

  01146	eb 02		 jmp	 SHORT $LN58@Client
$LN57@Client:

; 385  : 			}
; 386  : 		}

  01148	eb 90		 jmp	 SHORT $LN59@Client
$LN58@Client:

; 387  : 		if(TimeDevias == 0)

  0114a	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _TimeDevias$[ebp], 0
  01151	75 3e		 jne	 SHORT $LN56@Client

; 388  : 		{
; 389  : 			int fTime = 86400 + g_DeviasBattle.Time[0].Hour * 3600 + g_DeviasBattle.Time[0].Min;

  01153	a1 c8 10 02 00	 mov	 eax, DWORD PTR ?g_DeviasBattle@@3VCDeviasBattle@@A+135368
  01158	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  0115e	8b 0d cc 10 02
	00		 mov	 ecx, DWORD PTR ?g_DeviasBattle@@3VCDeviasBattle@@A+135372
  01164	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  0116b	89 95 1c ff ff
	ff		 mov	 DWORD PTR _fTime$228938[ebp], edx

; 390  : 			if(fTime > lTime)

  01171	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228938[ebp]
  01177	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  0117d	7e 12		 jle	 SHORT $LN56@Client

; 391  : 			{
; 392  : 				TimeDevias = fTime - lTime;

  0117f	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228938[ebp]
  01185	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  0118b	89 85 60 ff ff
	ff		 mov	 DWORD PTR _TimeDevias$[ebp], eax
$LN56@Client:

; 393  : 			}
; 394  : 		}	
; 395  : 		// --> TvT
; 396  : 		iCount = TvT.Count;

  01191	a1 a8 00 00 00	 mov	 eax, DWORD PTR ?TvT@@3VcTvTEvent@@A+168
  01196	89 85 34 ff ff
	ff		 mov	 DWORD PTR _iCount$228921[ebp], eax

; 397  : 		for(int i = 0; i < iCount; i++)

  0119c	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228940[ebp], 0
  011a6	eb 0f		 jmp	 SHORT $LN54@Client
$LN53@Client:
  011a8	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$228940[ebp]
  011ae	83 c0 01	 add	 eax, 1
  011b1	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$228940[ebp], eax
$LN54@Client:
  011b7	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$228940[ebp]
  011bd	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _iCount$228921[ebp]
  011c3	7d 51		 jge	 SHORT $LN52@Client

; 398  : 		{
; 399  : 			int fTime = TvT.T[i].H * 3600 + g_DeviasBattle.Time[i].Min * 60;

  011c5	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$228940[ebp]
  011cb	8b 0c c5 58 00
	00 00		 mov	 ecx, DWORD PTR ?TvT@@3VcTvTEvent@@A[eax*8+88]
  011d2	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  011d8	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _i$228940[ebp]
  011de	6b d2 18	 imul	 edx, 24			; 00000018H
  011e1	8b 82 cc 10 02
	00		 mov	 eax, DWORD PTR ?g_DeviasBattle@@3VCDeviasBattle@@A[edx+135372]
  011e7	6b c0 3c	 imul	 eax, 60			; 0000003cH
  011ea	03 c8		 add	 ecx, eax
  011ec	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _fTime$228944[ebp], ecx

; 400  : 			if(fTime > lTime )

  011f2	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228944[ebp]
  011f8	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  011fe	7e 14		 jle	 SHORT $LN51@Client

; 401  : 			{
; 402  : 				TimeTvT = fTime - lTime;

  01200	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228944[ebp]
  01206	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  0120c	89 85 5c ff ff
	ff		 mov	 DWORD PTR _TimeTvT$[ebp], eax

; 403  : 				break;

  01212	eb 02		 jmp	 SHORT $LN52@Client
$LN51@Client:

; 404  : 			}
; 405  : 		}

  01214	eb 92		 jmp	 SHORT $LN53@Client
$LN52@Client:

; 406  : 		if(TimeTvT == 0)

  01216	83 bd 5c ff ff
	ff 00		 cmp	 DWORD PTR _TimeTvT$[ebp], 0
  0121d	75 3e		 jne	 SHORT $LN50@Client

; 407  : 		{
; 408  : 			int fTime = 86400 + TvT.T[0].H * 3600 + g_DeviasBattle.Time[0].Min;

  0121f	a1 58 00 00 00	 mov	 eax, DWORD PTR ?TvT@@3VcTvTEvent@@A+88
  01224	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  0122a	8b 0d cc 10 02
	00		 mov	 ecx, DWORD PTR ?g_DeviasBattle@@3VCDeviasBattle@@A+135372
  01230	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  01237	89 95 10 ff ff
	ff		 mov	 DWORD PTR _fTime$228947[ebp], edx

; 409  : 			if(fTime > lTime)

  0123d	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228947[ebp]
  01243	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  01249	7e 12		 jle	 SHORT $LN50@Client

; 410  : 			{
; 411  : 				TimeTvT = fTime - lTime;

  0124b	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228947[ebp]
  01251	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  01257	89 85 5c ff ff
	ff		 mov	 DWORD PTR _TimeTvT$[ebp], eax
$LN50@Client:

; 412  : 			}
; 413  : 		}	
; 414  : 		// --> Pandora
; 415  : 		iCount = gPandoraBoxEvent.CountTimes;

  0125d	a1 bc 0e 00 00	 mov	 eax, DWORD PTR ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A+3772
  01262	89 85 34 ff ff
	ff		 mov	 DWORD PTR _iCount$228921[ebp], eax

; 416  : 		for(int i = 0; i < iCount; i++)

  01268	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228949[ebp], 0
  01272	eb 0f		 jmp	 SHORT $LN48@Client
$LN47@Client:
  01274	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _i$228949[ebp]
  0127a	83 c0 01	 add	 eax, 1
  0127d	89 85 0c ff ff
	ff		 mov	 DWORD PTR _i$228949[ebp], eax
$LN48@Client:
  01283	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _i$228949[ebp]
  01289	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _iCount$228921[ebp]
  0128f	7d 4f		 jge	 SHORT $LN46@Client

; 417  : 		{
; 418  : 			int fTime = gPandoraBoxEvent.Times[i].Hour * 3600 + gPandoraBoxEvent.Times[i].Min * 60;

  01291	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _i$228949[ebp]
  01297	8b 0c c5 1c 0e
	00 00		 mov	 ecx, DWORD PTR ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A[eax*8+3612]
  0129e	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  012a4	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _i$228949[ebp]
  012aa	8b 04 d5 20 0e
	00 00		 mov	 eax, DWORD PTR ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A[edx*8+3616]
  012b1	6b c0 3c	 imul	 eax, 60			; 0000003cH
  012b4	03 c8		 add	 ecx, eax
  012b6	89 8d 08 ff ff
	ff		 mov	 DWORD PTR _fTime$228953[ebp], ecx

; 419  : 			if(fTime > lTime )

  012bc	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228953[ebp]
  012c2	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  012c8	7e 14		 jle	 SHORT $LN45@Client

; 420  : 			{
; 421  : 				TimePandora = fTime - lTime;

  012ca	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228953[ebp]
  012d0	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  012d6	89 85 58 ff ff
	ff		 mov	 DWORD PTR _TimePandora$[ebp], eax

; 422  : 				break;

  012dc	eb 02		 jmp	 SHORT $LN46@Client
$LN45@Client:

; 423  : 			}
; 424  : 		}

  012de	eb 94		 jmp	 SHORT $LN47@Client
$LN46@Client:

; 425  : 		if(TimePandora == 0)

  012e0	83 bd 58 ff ff
	ff 00		 cmp	 DWORD PTR _TimePandora$[ebp], 0
  012e7	75 3e		 jne	 SHORT $LN44@Client

; 426  : 		{
; 427  : 			int fTime = 86400 + gPandoraBoxEvent.Times[0].Hour * 3600 + gPandoraBoxEvent.Times[0].Min;

  012e9	a1 1c 0e 00 00	 mov	 eax, DWORD PTR ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A+3612
  012ee	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  012f4	8b 0d 20 0e 00
	00		 mov	 ecx, DWORD PTR ?gPandoraBoxEvent@@3VcPandoraBoxEvent@@A+3616
  012fa	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  01301	89 95 04 ff ff
	ff		 mov	 DWORD PTR _fTime$228956[ebp], edx

; 428  : 			if(fTime > lTime)

  01307	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228956[ebp]
  0130d	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  01313	7e 12		 jle	 SHORT $LN44@Client

; 429  : 			{
; 430  : 				TimePandora = fTime - lTime;

  01315	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _fTime$228956[ebp]
  0131b	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  01321	89 85 58 ff ff
	ff		 mov	 DWORD PTR _TimePandora$[ebp], eax
$LN44@Client:

; 431  : 			}
; 432  : 		}	
; 433  : 		// --> Evangelion
; 434  : 		/*iCount = gPandoraBoxEvent.CountTimes;
; 435  : 		for(int i = 0; i < iCount; i++)
; 436  : 		{
; 437  : 			int fTime = gPandoraBoxEvent.Times[i].Hour * 3600 + gPandoraBoxEvent.Times[i].Min * 60;
; 438  : 			if(fTime > lTime )
; 439  : 			{
; 440  : 				TimePandora = fTime - lTime;
; 441  : 				break;
; 442  : 			}
; 443  : 		}
; 444  : 		if(TimePandora == 0)
; 445  : 		{
; 446  : 			int fTime = 86400 + gPandoraBoxEvent.Times[0].Hour * 3600 + gPandoraBoxEvent.Times[0].Min;
; 447  : 			if(fTime > lTime)
; 448  : 			{
; 449  : 				TimePandora = fTime - lTime;
; 450  : 			}
; 451  : 		}	*/
; 452  : 		// --> SearchEvent
; 453  : 		iCount = SearchEvent.Count;

  01327	a1 1c 2d 00 00	 mov	 eax, DWORD PTR ?SearchEvent@@3VcSearchEvent@@A+11548
  0132c	89 85 34 ff ff
	ff		 mov	 DWORD PTR _iCount$228921[ebp], eax

; 454  : 		for(int i = 0; i < iCount; i++)

  01332	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228958[ebp], 0
  0133c	eb 0f		 jmp	 SHORT $LN42@Client
$LN41@Client:
  0133e	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _i$228958[ebp]
  01344	83 c0 01	 add	 eax, 1
  01347	89 85 00 ff ff
	ff		 mov	 DWORD PTR _i$228958[ebp], eax
$LN42@Client:
  0134d	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _i$228958[ebp]
  01353	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _iCount$228921[ebp]
  01359	7d 4f		 jge	 SHORT $LN40@Client

; 455  : 		{
; 456  : 			int fTime = SearchEvent.TickTime[i].Hour * 3600 + SearchEvent.TickTime[i].Min * 60;

  0135b	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _i$228958[ebp]
  01361	8b 0c c5 6c 00
	00 00		 mov	 ecx, DWORD PTR ?SearchEvent@@3VcSearchEvent@@A[eax*8+108]
  01368	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  0136e	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _i$228958[ebp]
  01374	8b 04 d5 70 00
	00 00		 mov	 eax, DWORD PTR ?SearchEvent@@3VcSearchEvent@@A[edx*8+112]
  0137b	6b c0 3c	 imul	 eax, 60			; 0000003cH
  0137e	03 c8		 add	 ecx, eax
  01380	89 8d fc fe ff
	ff		 mov	 DWORD PTR _fTime$228962[ebp], ecx

; 457  : 			if(fTime > lTime )

  01386	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228962[ebp]
  0138c	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  01392	7e 14		 jle	 SHORT $LN39@Client

; 458  : 			{
; 459  : 				TimeEvengelion = fTime - lTime;

  01394	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228962[ebp]
  0139a	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  013a0	89 85 54 ff ff
	ff		 mov	 DWORD PTR _TimeEvengelion$[ebp], eax

; 460  : 				break;

  013a6	eb 02		 jmp	 SHORT $LN40@Client
$LN39@Client:

; 461  : 			}
; 462  : 		}

  013a8	eb 94		 jmp	 SHORT $LN41@Client
$LN40@Client:

; 463  : 		if(TimeEvengelion == 0)

  013aa	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _TimeEvengelion$[ebp], 0
  013b1	75 3e		 jne	 SHORT $LN38@Client

; 464  : 		{
; 465  : 			int fTime = 86400 + SearchEvent.TickTime[0].Hour * 3600 + SearchEvent.TickTime[0].Min;

  013b3	a1 6c 00 00 00	 mov	 eax, DWORD PTR ?SearchEvent@@3VcSearchEvent@@A+108
  013b8	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  013be	8b 0d 70 00 00
	00		 mov	 ecx, DWORD PTR ?SearchEvent@@3VcSearchEvent@@A+112
  013c4	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  013cb	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _fTime$228965[ebp], edx

; 466  : 			if(fTime > lTime)

  013d1	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228965[ebp]
  013d7	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  013dd	7e 12		 jle	 SHORT $LN38@Client

; 467  : 			{
; 468  : 				TimeEvengelion = fTime - lTime;

  013df	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228965[ebp]
  013e5	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  013eb	89 85 54 ff ff
	ff		 mov	 DWORD PTR _TimeEvengelion$[ebp], eax
$LN38@Client:

; 469  : 			}
; 470  : 		}	
; 471  : 		// --> Shop Event
; 472  : 		iCount = g_TeleportShop.TimeLoaded;

  013f1	a1 3c 01 00 00	 mov	 eax, DWORD PTR ?g_TeleportShop@@3VTeleportShop@@A+316
  013f6	89 85 34 ff ff
	ff		 mov	 DWORD PTR _iCount$228921[ebp], eax

; 473  : 		for(int i = 0; i < iCount; i++)

  013fc	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228967[ebp], 0
  01406	eb 0f		 jmp	 SHORT $LN36@Client
$LN35@Client:
  01408	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$228967[ebp]
  0140e	83 c0 01	 add	 eax, 1
  01411	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _i$228967[ebp], eax
$LN36@Client:
  01417	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$228967[ebp]
  0141d	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _iCount$228921[ebp]
  01423	7d 4f		 jge	 SHORT $LN34@Client

; 474  : 		{
; 475  : 			int fTime = g_TeleportShop.DataTime[i].Hour * 3600 + g_TeleportShop.DataTime[i].Min * 60;

  01425	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$228967[ebp]
  0142b	8b 0c c5 ec 00
	00 00		 mov	 ecx, DWORD PTR ?g_TeleportShop@@3VTeleportShop@@A[eax*8+236]
  01432	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  01438	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _i$228967[ebp]
  0143e	8b 04 d5 f0 00
	00 00		 mov	 eax, DWORD PTR ?g_TeleportShop@@3VTeleportShop@@A[edx*8+240]
  01445	6b c0 3c	 imul	 eax, 60			; 0000003cH
  01448	03 c8		 add	 ecx, eax
  0144a	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _fTime$228971[ebp], ecx

; 476  : 			if(fTime > lTime )

  01450	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228971[ebp]
  01456	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  0145c	7e 14		 jle	 SHORT $LN33@Client

; 477  : 			{
; 478  : 				TimeShop = fTime - lTime;

  0145e	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228971[ebp]
  01464	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  0146a	89 85 50 ff ff
	ff		 mov	 DWORD PTR _TimeShop$[ebp], eax

; 479  : 				break;

  01470	eb 02		 jmp	 SHORT $LN34@Client
$LN33@Client:

; 480  : 			}
; 481  : 		}

  01472	eb 94		 jmp	 SHORT $LN35@Client
$LN34@Client:

; 482  : 		if(TimeShop == 0)

  01474	83 bd 50 ff ff
	ff 00		 cmp	 DWORD PTR _TimeShop$[ebp], 0
  0147b	75 3e		 jne	 SHORT $LN32@Client

; 483  : 		{
; 484  : 			int fTime = 86400 + g_TeleportShop.DataTime[0].Hour * 3600 + g_TeleportShop.DataTime[0].Min;

  0147d	a1 ec 00 00 00	 mov	 eax, DWORD PTR ?g_TeleportShop@@3VTeleportShop@@A+236
  01482	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  01488	8b 0d f0 00 00
	00		 mov	 ecx, DWORD PTR ?g_TeleportShop@@3VTeleportShop@@A+240
  0148e	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  01495	89 95 ec fe ff
	ff		 mov	 DWORD PTR _fTime$228974[ebp], edx

; 485  : 			if(fTime > lTime)

  0149b	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228974[ebp]
  014a1	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  014a7	7e 12		 jle	 SHORT $LN32@Client

; 486  : 			{
; 487  : 				TimeShop = fTime - lTime;

  014a9	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228974[ebp]
  014af	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  014b5	89 85 50 ff ff
	ff		 mov	 DWORD PTR _TimeShop$[ebp], eax
$LN32@Client:

; 488  : 			}
; 489  : 		}	
; 490  : 		// --> Happy hour
; 491  : 		iCount = HappyHour.Count;

  014bb	a1 10 08 00 00	 mov	 eax, DWORD PTR ?HappyHour@@3VcHappyHour@@A+2064
  014c0	89 85 34 ff ff
	ff		 mov	 DWORD PTR _iCount$228921[ebp], eax

; 492  : 		for(int i = 0; i < iCount; i++)

  014c6	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228976[ebp], 0
  014d0	eb 0f		 jmp	 SHORT $LN30@Client
$LN29@Client:
  014d2	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _i$228976[ebp]
  014d8	83 c0 01	 add	 eax, 1
  014db	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _i$228976[ebp], eax
$LN30@Client:
  014e1	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _i$228976[ebp]
  014e7	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _iCount$228921[ebp]
  014ed	7d 53		 jge	 SHORT $LN28@Client

; 493  : 		{
; 494  : 			int fTime = HappyHour.HappyStruct[i].Hour * 3600 + HappyHour.HappyStruct[i].Min * 60;

  014ef	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _i$228976[ebp]
  014f5	c1 e0 04	 shl	 eax, 4
  014f8	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR ?HappyHour@@3VcHappyHour@@A[eax+16]
  014fe	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  01504	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _i$228976[ebp]
  0150a	c1 e2 04	 shl	 edx, 4
  0150d	8b 82 14 00 00
	00		 mov	 eax, DWORD PTR ?HappyHour@@3VcHappyHour@@A[edx+20]
  01513	6b c0 3c	 imul	 eax, 60			; 0000003cH
  01516	03 c8		 add	 ecx, eax
  01518	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _fTime$228980[ebp], ecx

; 495  : 			if(fTime > lTime )

  0151e	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228980[ebp]
  01524	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  0152a	7e 14		 jle	 SHORT $LN27@Client

; 496  : 			{
; 497  : 				TimeHappy = fTime - lTime;

  0152c	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228980[ebp]
  01532	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  01538	89 85 4c ff ff
	ff		 mov	 DWORD PTR _TimeHappy$[ebp], eax

; 498  : 				break;

  0153e	eb 02		 jmp	 SHORT $LN28@Client
$LN27@Client:

; 499  : 			}
; 500  : 		}

  01540	eb 90		 jmp	 SHORT $LN29@Client
$LN28@Client:

; 501  : 		if(TimeHappy == 0)

  01542	83 bd 4c ff ff
	ff 00		 cmp	 DWORD PTR _TimeHappy$[ebp], 0
  01549	75 3e		 jne	 SHORT $LN26@Client

; 502  : 		{
; 503  : 			int fTime = 86400 + HappyHour.HappyStruct[0].Hour * 3600 + HappyHour.HappyStruct[0].Min;

  0154b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?HappyHour@@3VcHappyHour@@A+16
  01550	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  01556	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?HappyHour@@3VcHappyHour@@A+20
  0155c	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  01563	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _fTime$228983[ebp], edx

; 504  : 			if(fTime > lTime)

  01569	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228983[ebp]
  0156f	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  01575	7e 12		 jle	 SHORT $LN26@Client

; 505  : 			{
; 506  : 				TimeHappy = fTime - lTime;

  01577	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228983[ebp]
  0157d	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  01583	89 85 4c ff ff
	ff		 mov	 DWORD PTR _TimeHappy$[ebp], eax
$LN26@Client:

; 507  : 			}
; 508  : 		}
; 509  : 		// --> Drop
; 510  : 		iCount = DropEvent.Count[2];

  01589	a1 bc 2c 00 00	 mov	 eax, DWORD PTR ?DropEvent@@3VcDropEvent@@A+11452
  0158e	89 85 34 ff ff
	ff		 mov	 DWORD PTR _iCount$228921[ebp], eax

; 511  : 		for(int i = 0; i < iCount; i++)

  01594	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$228985[ebp], 0
  0159e	eb 0f		 jmp	 SHORT $LN24@Client
$LN23@Client:
  015a0	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _i$228985[ebp]
  015a6	83 c0 01	 add	 eax, 1
  015a9	89 85 dc fe ff
	ff		 mov	 DWORD PTR _i$228985[ebp], eax
$LN24@Client:
  015af	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _i$228985[ebp]
  015b5	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _iCount$228921[ebp]
  015bb	7d 4f		 jge	 SHORT $LN22@Client

; 512  : 		{
; 513  : 			int fTime = DropEvent.Time[i].Hour * 3600 + DropEvent.Time[i].Min * 60;

  015bd	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _i$228985[ebp]
  015c3	8b 0c c5 04 20
	00 00		 mov	 ecx, DWORD PTR ?DropEvent@@3VcDropEvent@@A[eax*8+8196]
  015ca	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  015d0	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _i$228985[ebp]
  015d6	8b 04 d5 08 20
	00 00		 mov	 eax, DWORD PTR ?DropEvent@@3VcDropEvent@@A[edx*8+8200]
  015dd	6b c0 3c	 imul	 eax, 60			; 0000003cH
  015e0	03 c8		 add	 ecx, eax
  015e2	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _fTime$228989[ebp], ecx

; 514  : 			if(fTime > lTime )

  015e8	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228989[ebp]
  015ee	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  015f4	7e 14		 jle	 SHORT $LN21@Client

; 515  : 			{
; 516  : 				TimeDropEvent = fTime - lTime;

  015f6	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228989[ebp]
  015fc	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  01602	89 85 48 ff ff
	ff		 mov	 DWORD PTR _TimeDropEvent$[ebp], eax

; 517  : 				break;

  01608	eb 02		 jmp	 SHORT $LN22@Client
$LN21@Client:

; 518  : 			}
; 519  : 		}

  0160a	eb 94		 jmp	 SHORT $LN23@Client
$LN22@Client:

; 520  : 		if(TimeDropEvent == 0)

  0160c	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _TimeDropEvent$[ebp], 0
  01613	75 3e		 jne	 SHORT $LN20@Client

; 521  : 		{
; 522  : 			int fTime = 86400 + DropEvent.Time[0].Hour * 3600 + DropEvent.Time[0].Min;

  01615	a1 04 20 00 00	 mov	 eax, DWORD PTR ?DropEvent@@3VcDropEvent@@A+8196
  0161a	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  01620	8b 0d 08 20 00
	00		 mov	 ecx, DWORD PTR ?DropEvent@@3VcDropEvent@@A+8200
  01626	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  0162d	89 95 d4 fe ff
	ff		 mov	 DWORD PTR _fTime$228992[ebp], edx

; 523  : 			if(fTime > lTime)

  01633	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228992[ebp]
  01639	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  0163f	7e 12		 jle	 SHORT $LN20@Client

; 524  : 			{
; 525  : 				TimeDropEvent = fTime - lTime;

  01641	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228992[ebp]
  01647	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  0164d	89 85 48 ff ff
	ff		 mov	 DWORD PTR _TimeDropEvent$[ebp], eax
$LN20@Client:

; 526  : 			}
; 527  : 		}
; 528  : 
; 529  : 		// --> CryWolf
; 530  : 		if(TimeCryWolf == 0)

  01653	83 bd 44 ff ff
	ff 00		 cmp	 DWORD PTR _TimeCryWolf$[ebp], 0
  0165a	0f 85 89 00 00
	00		 jne	 $LN18@Client

; 531  : 		{
; 532  : 			int fTime = 86400 + g_Crywolf.m_StartTimeInfo[0].m_iHour * 3600 + g_Crywolf.m_StartTimeInfo[0].m_iMinute;

  01660	a1 2c cc 0f 00	 mov	 eax, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1035308
  01665	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  0166b	8b 0d 30 cc 0f
	00		 mov	 ecx, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1035312
  01671	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  01678	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _fTime$228995[ebp], edx

; 533  : 
; 534  : 			if(g_Crywolf.m_StartTimeInfo[0].m_iDayOfWeek > 0)

  0167e	83 3d 28 cc 0f
	00 00		 cmp	 DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1035304, 0
  01685	7e 42		 jle	 SHORT $LN17@Client

; 535  : 			{
; 536  : 				lTime = t.wDayOfWeek * 86400 + t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  01687	0f b7 45 d4	 movzx	 eax, WORD PTR _t$[ebp+4]
  0168b	69 c0 80 51 01
	00		 imul	 eax, 86400		; 00015180H
  01691	0f b7 4d d8	 movzx	 ecx, WORD PTR _t$[ebp+8]
  01695	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  0169b	03 c1		 add	 eax, ecx
  0169d	0f b7 55 da	 movzx	 edx, WORD PTR _t$[ebp+10]
  016a1	6b d2 3c	 imul	 edx, 60			; 0000003cH
  016a4	03 c2		 add	 eax, edx
  016a6	0f b7 4d dc	 movzx	 ecx, WORD PTR _t$[ebp+12]
  016aa	03 c1		 add	 eax, ecx
  016ac	89 85 38 ff ff
	ff		 mov	 DWORD PTR _lTime$228920[ebp], eax

; 537  : 				fTime += 86400 * g_Crywolf.m_StartTimeInfo[0].m_iDayOfWeek;

  016b2	a1 28 cc 0f 00	 mov	 eax, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1035304
  016b7	69 c0 80 51 01
	00		 imul	 eax, 86400		; 00015180H
  016bd	03 85 d0 fe ff
	ff		 add	 eax, DWORD PTR _fTime$228995[ebp]
  016c3	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _fTime$228995[ebp], eax
$LN17@Client:

; 538  : 			}
; 539  : 
; 540  : 			if(fTime > lTime)

  016c9	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228995[ebp]
  016cf	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  016d5	7e 12		 jle	 SHORT $LN18@Client

; 541  : 			{
; 542  : 				TimeCryWolf = fTime - lTime;

  016d7	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$228995[ebp]
  016dd	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  016e3	89 85 44 ff ff
	ff		 mov	 DWORD PTR _TimeCryWolf$[ebp], eax
$LN18@Client:

; 543  : 			}
; 544  : 		}
; 545  : 		// --> CastleSiege
; 546  : 		if(TimeCastleSiege == 0)

  016e9	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _TimeCastleSiege$[ebp], 0
  016f0	0f 85 89 00 00
	00		 jne	 $LN15@Client

; 547  : 		{
; 548  : 			SYSTEMTIME tm;
; 549  : 			g_CastleSiege.GetStateDate(CASTLESIEGE_STATE_STARTSIEGE, &tm);

  016f6	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _tm$228999[ebp]
  016fc	50		 push	 eax
  016fd	6a 07		 push	 7
  016ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  01704	e8 00 00 00 00	 call	 ?GetStateDate@CCastleSiege@@QAEXHPAU_SYSTEMTIME@@@Z ; CCastleSiege::GetStateDate

; 550  : 
; 551  : 			lTime = t.wDayOfWeek * 86400 + t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  01709	0f b7 45 d4	 movzx	 eax, WORD PTR _t$[ebp+4]
  0170d	69 c0 80 51 01
	00		 imul	 eax, 86400		; 00015180H
  01713	0f b7 4d d8	 movzx	 ecx, WORD PTR _t$[ebp+8]
  01717	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  0171d	03 c1		 add	 eax, ecx
  0171f	0f b7 55 da	 movzx	 edx, WORD PTR _t$[ebp+10]
  01723	6b d2 3c	 imul	 edx, 60			; 0000003cH
  01726	03 c2		 add	 eax, edx
  01728	0f b7 4d dc	 movzx	 ecx, WORD PTR _t$[ebp+12]
  0172c	03 c1		 add	 eax, ecx
  0172e	89 85 38 ff ff
	ff		 mov	 DWORD PTR _lTime$228920[ebp], eax

; 552  : 
; 553  : 			int fTime = 86400 * tm.wDay + tm.wHour * 3600 + tm.wMinute;

  01734	0f b7 85 c6 fe
	ff ff		 movzx	 eax, WORD PTR _tm$228999[ebp+6]
  0173b	69 c0 80 51 01
	00		 imul	 eax, 86400		; 00015180H
  01741	0f b7 8d c8 fe
	ff ff		 movzx	 ecx, WORD PTR _tm$228999[ebp+8]
  01748	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  0174e	03 c1		 add	 eax, ecx
  01750	0f b7 95 ca fe
	ff ff		 movzx	 edx, WORD PTR _tm$228999[ebp+10]
  01757	03 c2		 add	 eax, edx
  01759	89 85 bc fe ff
	ff		 mov	 DWORD PTR _fTime$229000[ebp], eax

; 554  : 
; 555  : 			if(fTime > lTime)

  0175f	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _fTime$229000[ebp]
  01765	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  0176b	7e 12		 jle	 SHORT $LN15@Client

; 556  : 			{
; 557  : 				TimeCastleSiege = fTime - lTime;

  0176d	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _fTime$229000[ebp]
  01773	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  01779	89 85 40 ff ff
	ff		 mov	 DWORD PTR _TimeCastleSiege$[ebp], eax
$LN15@Client:

; 558  : 			}
; 559  : 		}
; 560  : 		// --> DungeonSiege
; 561  : 		if(TimeDungeonSiege == 0)

  0177f	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _TimeDungeonSiege$[ebp], 0
  01786	0f 85 89 00 00
	00		 jne	 $LN68@Client

; 562  : 		{
; 563  : 			int fTime = 86400 + g_DungeonSiege.iEventStartHour * 3600 + g_DungeonSiege.iEventeStartMinut;

  0178c	a1 60 00 00 00	 mov	 eax, DWORD PTR ?g_DungeonSiege@@3VCDungeonSiege@@A+96
  01791	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  01797	8b 0d 64 00 00
	00		 mov	 ecx, DWORD PTR ?g_DungeonSiege@@3VCDungeonSiege@@A+100
  0179d	8d 94 08 80 51
	01 00		 lea	 edx, DWORD PTR [eax+ecx+86400]
  017a4	89 95 b8 fe ff
	ff		 mov	 DWORD PTR _fTime$229003[ebp], edx

; 564  : 
; 565  : 			if(g_DungeonSiege.iEventStartDay > 0)

  017aa	83 3d 5c 00 00
	00 00		 cmp	 DWORD PTR ?g_DungeonSiege@@3VCDungeonSiege@@A+92, 0
  017b1	7e 42		 jle	 SHORT $LN12@Client

; 566  : 			{
; 567  : 				lTime = t.wDayOfWeek * 86400 + t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  017b3	0f b7 45 d4	 movzx	 eax, WORD PTR _t$[ebp+4]
  017b7	69 c0 80 51 01
	00		 imul	 eax, 86400		; 00015180H
  017bd	0f b7 4d d8	 movzx	 ecx, WORD PTR _t$[ebp+8]
  017c1	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  017c7	03 c1		 add	 eax, ecx
  017c9	0f b7 55 da	 movzx	 edx, WORD PTR _t$[ebp+10]
  017cd	6b d2 3c	 imul	 edx, 60			; 0000003cH
  017d0	03 c2		 add	 eax, edx
  017d2	0f b7 4d dc	 movzx	 ecx, WORD PTR _t$[ebp+12]
  017d6	03 c1		 add	 eax, ecx
  017d8	89 85 38 ff ff
	ff		 mov	 DWORD PTR _lTime$228920[ebp], eax

; 568  : 				fTime += 86400 * g_DungeonSiege.iEventStartDay;

  017de	a1 5c 00 00 00	 mov	 eax, DWORD PTR ?g_DungeonSiege@@3VCDungeonSiege@@A+92
  017e3	69 c0 80 51 01
	00		 imul	 eax, 86400		; 00015180H
  017e9	03 85 b8 fe ff
	ff		 add	 eax, DWORD PTR _fTime$229003[ebp]
  017ef	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _fTime$229003[ebp], eax
$LN12@Client:

; 569  : 			}
; 570  : 
; 571  : 			if(fTime > lTime)

  017f5	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$229003[ebp]
  017fb	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _lTime$228920[ebp]
  01801	7e 12		 jle	 SHORT $LN68@Client

; 572  : 			{
; 573  : 				TimeDungeonSiege = fTime - lTime;

  01803	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$229003[ebp]
  01809	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR _lTime$228920[ebp]
  0180f	89 85 3c ff ff
	ff		 mov	 DWORD PTR _TimeDungeonSiege$[ebp], eax
$LN68@Client:

; 574  : 			}
; 575  : 		}
; 576  : 	}
; 577  : 
; 578  : 
; 579  : 	// ----
; 580  : 
; 581  : 	for(int i=0;i<this->CountRD;i++)

  01815	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$229006[ebp], 0
  0181f	eb 0f		 jmp	 SHORT $LN10@Client
$LN9@Client:
  01821	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _i$229006[ebp]
  01827	83 c0 01	 add	 eax, 1
  0182a	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _i$229006[ebp], eax
$LN10@Client:
  01830	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01833	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$229006[ebp]
  01839	3b 88 d8 12 00
	00		 cmp	 ecx, DWORD PTR [eax+4824]
  0183f	7d 74		 jge	 SHORT $LN8@Client

; 582  : 	{
; 583  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  01841	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  01845	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  0184b	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  0184f	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  01852	03 c1		 add	 eax, ecx
  01854	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  01858	03 c2		 add	 eax, edx
  0185a	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _lTime$229010[ebp], eax

; 584  : 		int fTime = this->RD[i].Hour * 3600 + this->RD[i].Min * 60 ;

  01860	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _i$229006[ebp]
  01866	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01869	8b 94 c1 b8 0f
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+4024]
  01870	69 d2 10 0e 00
	00		 imul	 edx, 3600		; 00000e10H
  01876	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _i$229006[ebp]
  0187c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0187f	8b 84 c1 bc 0f
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+4028]
  01886	6b c0 3c	 imul	 eax, 60			; 0000003cH
  01889	03 d0		 add	 edx, eax
  0188b	89 95 ac fe ff
	ff		 mov	 DWORD PTR _fTime$229011[ebp], edx

; 585  : 
; 586  : 		if(fTime > lTime )

  01891	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _fTime$229011[ebp]
  01897	3b 85 b0 fe ff
	ff		 cmp	 eax, DWORD PTR _lTime$229010[ebp]
  0189d	7e 11		 jle	 SHORT $LN7@Client

; 587  : 		{
; 588  : 			RDStart = fTime - lTime;

  0189f	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _fTime$229011[ebp]
  018a5	2b 85 b0 fe ff
	ff		 sub	 eax, DWORD PTR _lTime$229010[ebp]
  018ab	89 45 e0	 mov	 DWORD PTR _RDStart$[ebp], eax

; 589  : 			break;

  018ae	eb 05		 jmp	 SHORT $LN8@Client
$LN7@Client:

; 590  : 		}
; 591  : 	}

  018b0	e9 6c ff ff ff	 jmp	 $LN9@Client
$LN8@Client:

; 592  : 
; 593  : 	if(RDStart == 0)

  018b5	83 7d e0 00	 cmp	 DWORD PTR _RDStart$[ebp], 0
  018b9	75 64		 jne	 SHORT $LN6@Client

; 594  : 	{
; 595  : 		int lTime = t.wHour * 3600 + t.wMinute * 60 + t.wSecond;

  018bb	0f b7 45 d8	 movzx	 eax, WORD PTR _t$[ebp+8]
  018bf	69 c0 10 0e 00
	00		 imul	 eax, 3600		; 00000e10H
  018c5	0f b7 4d da	 movzx	 ecx, WORD PTR _t$[ebp+10]
  018c9	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  018cc	03 c1		 add	 eax, ecx
  018ce	0f b7 55 dc	 movzx	 edx, WORD PTR _t$[ebp+12]
  018d2	03 c2		 add	 eax, edx
  018d4	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _lTime$229014[ebp], eax

; 596  : 		int fTime =  86400 + this->RD[0].Hour * 3600 + this->RD[0].Min * 60 ;

  018da	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  018dd	8b 88 b8 0f 00
	00		 mov	 ecx, DWORD PTR [eax+4024]
  018e3	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  018e9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  018ec	8b 82 bc 0f 00
	00		 mov	 eax, DWORD PTR [edx+4028]
  018f2	6b c0 3c	 imul	 eax, 60			; 0000003cH
  018f5	8d 8c 01 80 51
	01 00		 lea	 ecx, DWORD PTR [ecx+eax+86400]
  018fc	89 8d a4 fe ff
	ff		 mov	 DWORD PTR _fTime$229015[ebp], ecx

; 597  : 
; 598  : 		if(fTime > lTime )

  01902	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$229015[ebp]
  01908	3b 85 a8 fe ff
	ff		 cmp	 eax, DWORD PTR _lTime$229014[ebp]
  0190e	7e 0f		 jle	 SHORT $LN6@Client

; 599  : 		{
; 600  : 			RDStart = fTime - lTime;

  01910	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _fTime$229015[ebp]
  01916	2b 85 a8 fe ff
	ff		 sub	 eax, DWORD PTR _lTime$229014[ebp]
  0191c	89 45 e0	 mov	 DWORD PTR _RDStart$[ebp], eax
$LN6@Client:

; 601  : 		}
; 602  : 	}
; 603  : 
; 604  : 	// ----
; 605  : 
; 606  : #endif
; 607  : 
; 608  : 	// ----
; 609  : 
; 610  : 	for (int n=OBJ_STARTUSERINDEX;n<OBJMAX; n++)

  0191f	c7 85 a0 fe ff
	ff b0 36 00 00	 mov	 DWORD PTR _n$229017[ebp], 14000 ; 000036b0H
  01929	eb 0f		 jmp	 SHORT $LN4@Client
$LN3@Client:
  0192b	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _n$229017[ebp]
  01931	83 c0 01	 add	 eax, 1
  01934	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _n$229017[ebp], eax
$LN4@Client:
  0193a	81 bd a0 fe ff
	ff 98 3a 00 00	 cmp	 DWORD PTR _n$229017[ebp], 15000 ; 00003a98H
  01944	0f 8d 53 01 00
	00		 jge	 $LN100@Client

; 611  : 	{
; 612  : 		LPOBJ lpObj = &gObj[n];

  0194a	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _n$229017[ebp]
  01950	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  01956	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0195c	89 85 9c fe ff
	ff		 mov	 DWORD PTR _lpObj$229021[ebp], eax

; 613  : 		if ( lpObj->Connected >= PLAYER_PLAYING && lpObj->OffExp == 0 && lpObj->OffTrade == 0)

  01962	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _lpObj$229021[ebp]
  01968	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0196c	0f 8c 26 01 00
	00		 jl	 $LN1@Client
  01972	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _lpObj$229021[ebp]
  01978	83 b8 98 22 00
	00 00		 cmp	 DWORD PTR [eax+8856], 0
  0197f	0f 85 13 01 00
	00		 jne	 $LN1@Client
  01985	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _lpObj$229021[ebp]
  0198b	83 b8 ac 22 00
	00 00		 cmp	 DWORD PTR [eax+8876], 0
  01992	0f 85 00 01 00
	00		 jne	 $LN1@Client

; 614  : 		{
; 615  : 			GCTEventTime tSend;
; 616  : 			ZeroMemory(&tSend,sizeof(tSend));

  01998	6a 48		 push	 72			; 00000048H
  0199a	6a 00		 push	 0
  0199c	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _tSend$229023[ebp]
  019a2	50		 push	 eax
  019a3	e8 00 00 00 00	 call	 _memset
  019a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 617  : 			tSend.h.set((LPBYTE)&tSend, 0xFB, 16, sizeof(tSend));

  019ab	6a 48		 push	 72			; 00000048H
  019ad	6a 10		 push	 16			; 00000010H
  019af	68 fb 00 00 00	 push	 251			; 000000fbH
  019b4	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _tSend$229023[ebp]
  019ba	50		 push	 eax
  019bb	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR _tSend$229023[ebp]
  019c1	e8 00 00 00 00	 call	 ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ; PBMSG_HEAD2::set

; 618  : 			tSend.TimeBC = BCStart;

  019c6	8b 45 f4	 mov	 eax, DWORD PTR _BCStart$[ebp]
  019c9	89 85 58 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+4], eax

; 619  : 			tSend.TimeDS = DSStart;

  019cf	8b 45 f0	 mov	 eax, DWORD PTR _DSStart$[ebp]
  019d2	89 85 5c fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+8], eax

; 620  : 			tSend.TimeCC = CCStart;

  019d8	8b 45 ec	 mov	 eax, DWORD PTR _CCStart$[ebp]
  019db	89 85 60 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+12], eax

; 621  : 			tSend.TimeGD = GDStart;

  019e1	8b 45 e8	 mov	 eax, DWORD PTR _GDStart$[ebp]
  019e4	89 85 64 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+16], eax

; 622  : 			tSend.TimeWW = WWStart;

  019ea	8b 45 e4	 mov	 eax, DWORD PTR _WWStart$[ebp]
  019ed	89 85 68 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+20], eax

; 623  : #if(EVENT_TIMER_EX)
; 624  : 			tSend.TimeLora = TimeLora;

  019f3	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _TimeLora$[ebp]
  019f9	89 85 6c fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+24], eax

; 625  : 			tSend.TimeDevias = TimeDevias;

  019ff	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _TimeDevias$[ebp]
  01a05	89 85 70 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+28], eax

; 626  : 			tSend.TimeTvT = TimeTvT;

  01a0b	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _TimeTvT$[ebp]
  01a11	89 85 74 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+32], eax

; 627  : 			tSend.TimePandora = TimePandora;

  01a17	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _TimePandora$[ebp]
  01a1d	89 85 78 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+36], eax

; 628  : 			tSend.TimeEvengelion = TimeEvengelion;

  01a23	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _TimeEvengelion$[ebp]
  01a29	89 85 7c fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+40], eax

; 629  : 			tSend.TimeShop = TimeShop;

  01a2f	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _TimeShop$[ebp]
  01a35	89 85 80 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+44], eax

; 630  : 			tSend.TimeHappy = TimeHappy;

  01a3b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _TimeHappy$[ebp]
  01a41	89 85 84 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+48], eax

; 631  : 			tSend.TimeDropEvent = TimeDropEvent;

  01a47	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _TimeDropEvent$[ebp]
  01a4d	89 85 88 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+52], eax

; 632  : 
; 633  : 			tSend.TimeCryWolf = TimeCryWolf;

  01a53	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _TimeCryWolf$[ebp]
  01a59	89 85 8c fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+56], eax

; 634  : 			tSend.TimeCastleSiege = TimeCastleSiege;

  01a5f	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _TimeCastleSiege$[ebp]
  01a65	89 85 90 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+60], eax

; 635  : 			tSend.TimeDungeonSiege = TimeDungeonSiege;

  01a6b	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _TimeDungeonSiege$[ebp]
  01a71	89 85 94 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+64], eax

; 636  : 			tSend.TimeRedDragon = RDStart;

  01a77	8b 45 e0	 mov	 eax, DWORD PTR _RDStart$[ebp]
  01a7a	89 85 98 fe ff
	ff		 mov	 DWORD PTR _tSend$229023[ebp+68], eax

; 637  : #endif
; 638  : 			DataSend(n,(LPBYTE)&tSend,sizeof(tSend));

  01a80	6a 48		 push	 72			; 00000048H
  01a82	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _tSend$229023[ebp]
  01a88	50		 push	 eax
  01a89	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _n$229017[ebp]
  01a8f	51		 push	 ecx
  01a90	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  01a95	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Client:

; 639  : 		}
; 640  : 	}

  01a98	e9 8e fe ff ff	 jmp	 $LN3@Client
$LN100@Client:

; 641  : }

  01a9d	5f		 pop	 edi
  01a9e	5e		 pop	 esi
  01a9f	5b		 pop	 ebx
  01aa0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01aa3	33 cd		 xor	 ecx, ebp
  01aa5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01aaa	8b e5		 mov	 esp, ebp
  01aac	5d		 pop	 ebp
  01aad	c3		 ret	 0
?Client@cEventTimer@@QAEXXZ ENDP			; cEventTimer::Client
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\prodef.h
_TEXT	ENDS
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 		lpBuf[0] = 0xC1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0000f	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 106  : 		lpBuf[1] = size;

  00012	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00015	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]
  00018	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 107  : 		lpBuf[2] = head;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  0001e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00021	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 108  : 		lpBuf[3] = sub;

  00024	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00027	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  0002a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 132  : {

  01ab0	55		 push	 ebp
  01ab1	8b ec		 mov	 ebp, esp
  01ab3	83 ec 40	 sub	 esp, 64			; 00000040H
  01ab6	53		 push	 ebx
  01ab7	56		 push	 esi
  01ab8	57		 push	 edi

; 133  :     return _time64(_Time);

  01ab9	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  01abc	50		 push	 eax
  01abd	e8 00 00 00 00	 call	 __time64
  01ac2	83 c4 04	 add	 esp, 4

; 134  : }

  01ac5	5f		 pop	 edi
  01ac6	5e		 pop	 esi
  01ac7	5b		 pop	 ebx
  01ac8	8b e5		 mov	 esp, ebp
  01aca	5d		 pop	 ebp
  01acb	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\eventtimer.cpp
;	COMDAT ??__EgEventTimer@@YAXXZ
text$yc	SEGMENT
??__EgEventTimer@@YAXXZ PROC				; `dynamic initializer for 'gEventTimer'', COMDAT

; 23   : cEventTimer gEventTimer;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gEventTimer@@3VcEventTimer@@A ; gEventTimer
  0000e	e8 00 00 00 00	 call	 ??0cEventTimer@@QAE@XZ	; cEventTimer::cEventTimer
  00013	68 00 00 00 00	 push	 OFFSET ??__FgEventTimer@@YAXXZ ; `dynamic atexit destructor for 'gEventTimer''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgEventTimer@@YAXXZ ENDP				; `dynamic initializer for 'gEventTimer''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FgEventTimer@@YAXXZ
text$yd	SEGMENT
??__FgEventTimer@@YAXXZ PROC				; `dynamic atexit destructor for 'gEventTimer'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gEventTimer@@3VcEventTimer@@A ; gEventTimer
  0000e	e8 00 00 00 00	 call	 ??1cEventTimer@@QAE@XZ	; cEventTimer::~cEventTimer
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgEventTimer@@YAXXZ ENDP				; `dynamic atexit destructor for 'gEventTimer''
text$yd	ENDS
PUBLIC	?gEventTimer@@3VcEventTimer@@A			; gEventTimer
_BSS	SEGMENT
?gEventTimer@@3VcEventTimer@@A DB 012dcH DUP (?)	; gEventTimer
_BSS	ENDS
CRT$XCU	SEGMENT
_gEventTimer$initializer$ DD FLAT:??__EgEventTimer@@YAXXZ
CRT$XCU	ENDS
END
