; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\QuestSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?S5Quest@@3VNewS5Quest@@A			; S5Quest
_BSS	SEGMENT
?S5Quest@@3VNewS5Quest@@A DB 03b928H DUP (?)		; S5Quest
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0DO@GEAGCICB@?$FLGensQuest?$FN?5Info?5file?5Load?5Fail?5@ ; `string'
PUBLIC	??_C@_0BM@DECMOAFE@?4?4?2Data?2Quest?2GensQuest?4ini?$AA@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DM@LFODNLCE@?$FLElfQuest?$FN?5Info?5file?5Load?5Fail?5?$FL@ ; `string'
PUBLIC	??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@		; `string'
PUBLIC	??_C@_0BL@POAKIAID@?4?4?2Data?2Quest?2ElfQuest?4ini?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadConfig@NewS5Quest@@QAEXXZ			; NewS5Quest::ReadConfig
EXTRN	_fclose:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0DO@GEAGCICB@?$FLGensQuest?$FN?5Info?5file?5Load?5Fail?5@
; File d:\projects\exteam6.3\source\gameserver\gameserver\questsystem.cpp
CONST	SEGMENT
??_C@_0DO@GEAGCICB@?$FLGensQuest?$FN?5Info?5file?5Load?5Fail?5@ DB '[Gens'
	DB	'Quest] Info file Load Fail [..\Data\Quest\GensQuest.ini]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DECMOAFE@?4?4?2Data?2Quest?2GensQuest?4ini?$AA@
CONST	SEGMENT
??_C@_0BM@DECMOAFE@?4?4?2Data?2Quest?2GensQuest?4ini?$AA@ DB '..\Data\Que'
	DB	'st\GensQuest.ini', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LFODNLCE@?$FLElfQuest?$FN?5Info?5file?5Load?5Fail?5?$FL@
CONST	SEGMENT
??_C@_0DM@LFODNLCE@?$FLElfQuest?$FN?5Info?5file?5Load?5Fail?5?$FL@ DB '[E'
	DB	'lfQuest] Info file Load Fail [..\Data\Quest\ElfQuest.ini]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
CONST	SEGMENT
??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@ DB 'CRITICAL ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@POAKIAID@?4?4?2Data?2Quest?2ElfQuest?4ini?$AA@
CONST	SEGMENT
??_C@_0BL@POAKIAID@?4?4?2Data?2Quest?2ElfQuest?4ini?$AA@ DB '..\Data\Ques'
	DB	't\ElfQuest.ini', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_Tokentype$ = -16					; size = 4
_type$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
?ReadConfig@NewS5Quest@@QAEXXZ PROC			; NewS5Quest::ReadConfig
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 13   : 	SMDFile = fopen(ELFQUEST_DIR, "r");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@POAKIAID@?4?4?2Data?2Quest?2ElfQuest?4ini?$AA@
  00016	e8 00 00 00 00	 call	 _fopen
  0001b	83 c4 08	 add	 esp, 8
  0001e	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 14   : 
; 15   : 	if ( SMDFile == NULL )

  00023	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  0002a	75 1c		 jne	 SHORT $LN14@ReadConfig

; 16   : 	{
; 17   : 		MessageBoxA(0,"[ElfQuest] Info file Load Fail [..\\Data\\Quest\\ElfQuest.ini]","CRITICAL ERROR",0);

  0002c	6a 00		 push	 0
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LFODNLCE@?$FLElfQuest?$FN?5Info?5file?5Load?5Fail?5?$FL@
  00038	6a 00		 push	 0
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 18   : 		ExitProcess(1);

  00040	6a 01		 push	 1
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN14@ReadConfig:

; 19   : 	}
; 20   : 
; 21   : 	int Token;
; 22   : 	int type = -1;

  00048	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _type$[ebp], -1

; 23   : 	this->eCount = 1;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 80 00 f4 01
	00 01 00 00 00	 mov	 DWORD PTR [eax+128000], 1
$LN13@ReadConfig:

; 24   : 
; 25   : 	while ( true )

  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	85 c0		 test	 eax, eax
  00063	0f 84 9d 01 00
	00		 je	 $LN12@ReadConfig

; 26   : 	{
; 27   : 	    Token = GetToken();

  00069	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0006e	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 28   : 
; 29   :         if( Token == 2)

  00071	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00075	75 05		 jne	 SHORT $LN11@ReadConfig

; 30   : 		{
; 31   :             break;

  00077	e9 8a 01 00 00	 jmp	 $LN12@ReadConfig
$LN11@ReadConfig:

; 32   : 		}
; 33   : 
; 34   : 		type = (int)TokenNumber;

  0007c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00082	e8 00 00 00 00	 call	 __ftol2_sse
  00087	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax
$LN10@ReadConfig:

; 35   : 
; 36   : 		while ( true )

  0008a	b8 01 00 00 00	 mov	 eax, 1
  0008f	85 c0		 test	 eax, eax
  00091	0f 84 6a 01 00
	00		 je	 $LN9@ReadConfig

; 37   : 		{
; 38   : 			//if ( type < 0 || type > 4 )
; 39   : 			//{
; 40   : 			//	break;
; 41   : 			//}
; 42   : 		    Token = GetToken();

  00097	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0009c	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 43   : 
; 44   : 			if ( strcmp("end", TokenString ) == 0)

  0009f	68 00 00 00 00	 push	 OFFSET _TokenString
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000a9	e8 00 00 00 00	 call	 _strcmp
  000ae	83 c4 08	 add	 esp, 8
  000b1	85 c0		 test	 eax, eax
  000b3	75 05		 jne	 SHORT $LN8@ReadConfig

; 45   : 			{
; 46   : 				break;

  000b5	e9 47 01 00 00	 jmp	 $LN9@ReadConfig
$LN8@ReadConfig:

; 47   : 			}
; 48   : 
; 49   : 			this->ElfQuest[this->eCount].Mob = (int)TokenNumber;

  000ba	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c0	e8 00 00 00 00	 call	 __ftol2_sse
  000c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	8b 91 00 f4 01
	00		 mov	 edx, DWORD PTR [ecx+128000]
  000ce	c1 e2 07	 shl	 edx, 7
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 50   : 
; 51   : 			Token = GetToken();

  000d7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000dc	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 52   : 			this->ElfQuest[this->eCount].CountMob = (int)TokenNumber;

  000df	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e5	e8 00 00 00 00	 call	 __ftol2_sse
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 91 00 f4 01
	00		 mov	 edx, DWORD PTR [ecx+128000]
  000f3	c1 e2 07	 shl	 edx, 7
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	89 44 11 04	 mov	 DWORD PTR [ecx+edx+4], eax

; 53   : 
; 54   : 			Token = GetToken();

  000fd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00102	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 55   : 			this->ElfQuest[this->eCount].Proc = (int)TokenNumber;

  00105	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0010b	e8 00 00 00 00	 call	 __ftol2_sse
  00110	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	8b 91 00 f4 01
	00		 mov	 edx, DWORD PTR [ecx+128000]
  00119	c1 e2 07	 shl	 edx, 7
  0011c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	89 44 11 08	 mov	 DWORD PTR [ecx+edx+8], eax

; 56   : 
; 57   : 			Token = GetToken();

  00123	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00128	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 58   : 			strcpy(this->ElfQuest[this->eCount].MSG,TokenString);

  0012b	68 00 00 00 00	 push	 OFFSET _TokenString
  00130	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00133	8b 88 00 f4 01
	00		 mov	 ecx, DWORD PTR [eax+128000]
  00139	c1 e1 07	 shl	 ecx, 7
  0013c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013f	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _strcpy
  00149	83 c4 08	 add	 esp, 8

; 59   : 
; 60   : 			Token = GetToken();

  0014c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00151	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 61   : 			strcpy(this->ElfQuest[this->eCount].MS2,TokenString);

  00154	68 00 00 00 00	 push	 OFFSET _TokenString
  00159	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	8b 88 00 f4 01
	00		 mov	 ecx, DWORD PTR [eax+128000]
  00162	c1 e1 07	 shl	 ecx, 7
  00165	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00168	8d 44 0a 3e	 lea	 eax, DWORD PTR [edx+ecx+62]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _strcpy
  00172	83 c4 08	 add	 esp, 8

; 62   : 
; 63   : 			Token = GetToken();

  00175	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0017a	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 64   : 			this->ElfQuest[this->eCount].iType = (int)TokenNumber;

  0017d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00183	e8 00 00 00 00	 call	 __ftol2_sse
  00188	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018b	8b 91 00 f4 01
	00		 mov	 edx, DWORD PTR [ecx+128000]
  00191	c1 e2 07	 shl	 edx, 7
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	89 44 11 70	 mov	 DWORD PTR [ecx+edx+112], eax

; 65   : 
; 66   : 			Token = GetToken();

  0019b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001a0	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 67   : 			this->ElfQuest[this->eCount].iIndex = (int)TokenNumber;

  001a3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a9	e8 00 00 00 00	 call	 __ftol2_sse
  001ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b1	8b 91 00 f4 01
	00		 mov	 edx, DWORD PTR [ecx+128000]
  001b7	c1 e2 07	 shl	 edx, 7
  001ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bd	89 44 11 74	 mov	 DWORD PTR [ecx+edx+116], eax

; 68   : 
; 69   : 			Token = GetToken();

  001c1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001c6	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 70   : 			this->ElfQuest[this->eCount].iLevel = (int)TokenNumber;

  001c9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001cf	e8 00 00 00 00	 call	 __ftol2_sse
  001d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d7	8b 91 00 f4 01
	00		 mov	 edx, DWORD PTR [ecx+128000]
  001dd	c1 e2 07	 shl	 edx, 7
  001e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e3	89 44 11 78	 mov	 DWORD PTR [ecx+edx+120], eax

; 71   : 
; 72   : 			this->eCount++;

  001e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ea	8b 88 00 f4 01
	00		 mov	 ecx, DWORD PTR [eax+128000]
  001f0	83 c1 01	 add	 ecx, 1
  001f3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001f6	89 8a 00 f4 01
	00		 mov	 DWORD PTR [edx+128000], ecx

; 73   : 		}

  001fc	e9 89 fe ff ff	 jmp	 $LN10@ReadConfig
$LN9@ReadConfig:

; 74   :     }

  00201	e9 56 fe ff ff	 jmp	 $LN13@ReadConfig
$LN12@ReadConfig:

; 75   : 	fclose(SMDFile);

  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 _fclose
  00211	83 c4 04	 add	 esp, 4

; 76   : 	// ---
; 77   : 	SMDFile = fopen(GENSQUEST_DIR, "r");

  00214	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00219	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DECMOAFE@?4?4?2Data?2Quest?2GensQuest?4ini?$AA@
  0021e	e8 00 00 00 00	 call	 _fopen
  00223	83 c4 08	 add	 esp, 8
  00226	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 78   : 
; 79   : 	if ( SMDFile == NULL )

  0022b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  00232	75 1c		 jne	 SHORT $LN7@ReadConfig

; 80   : 	{
; 81   : 		MessageBoxA(0,"[GensQuest] Info file Load Fail [..\\Data\\Quest\\GensQuest.ini]","CRITICAL ERROR",0);

  00234	6a 00		 push	 0
  00236	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@GEAGCICB@?$FLGensQuest?$FN?5Info?5file?5Load?5Fail?5@
  00240	6a 00		 push	 0
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 82   : 		ExitProcess(1);

  00248	6a 01		 push	 1
  0024a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN7@ReadConfig:

; 83   : 	}
; 84   : 
; 85   : 	Token = 0;

  00250	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Token$[ebp], 0

; 86   : 	int Tokentype = -1;

  00257	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _Tokentype$[ebp], -1

; 87   : 	this->gCount = 1;

  0025e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00261	c7 80 24 b9 03
	00 01 00 00 00	 mov	 DWORD PTR [eax+244004], 1
$LN6@ReadConfig:

; 88   : 
; 89   : 	while ( true )

  0026b	b8 01 00 00 00	 mov	 eax, 1
  00270	85 c0		 test	 eax, eax
  00272	0f 84 64 01 00
	00		 je	 $LN5@ReadConfig

; 90   : 	{
; 91   : 	    Token = GetToken();

  00278	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0027d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 92   : 
; 93   :         if( Token == 2)

  00280	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00284	75 05		 jne	 SHORT $LN4@ReadConfig

; 94   : 		{
; 95   :             break;

  00286	e9 51 01 00 00	 jmp	 $LN5@ReadConfig
$LN4@ReadConfig:

; 96   : 		}
; 97   : 
; 98   : 		Tokentype = (int)TokenNumber;

  0028b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00291	e8 00 00 00 00	 call	 __ftol2_sse
  00296	89 45 f0	 mov	 DWORD PTR _Tokentype$[ebp], eax
$LN3@ReadConfig:

; 99   : 
; 100  : 		while ( true )

  00299	b8 01 00 00 00	 mov	 eax, 1
  0029e	85 c0		 test	 eax, eax
  002a0	0f 84 31 01 00
	00		 je	 $LN2@ReadConfig

; 101  : 		{
; 102  : 			//if ( type < 0 || type > 4 )
; 103  : 			//{
; 104  : 			//	break;
; 105  : 			//}
; 106  : 		    Token = GetToken();

  002a6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002ab	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 107  : 
; 108  : 			if ( strcmp("end", TokenString ) == 0)

  002ae	68 00 00 00 00	 push	 OFFSET _TokenString
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  002b8	e8 00 00 00 00	 call	 _strcmp
  002bd	83 c4 08	 add	 esp, 8
  002c0	85 c0		 test	 eax, eax
  002c2	75 05		 jne	 SHORT $LN1@ReadConfig

; 109  : 			{
; 110  : 				break;

  002c4	e9 0e 01 00 00	 jmp	 $LN2@ReadConfig
$LN1@ReadConfig:

; 111  : 			}
; 112  : 
; 113  : 			this->GensQuest[this->gCount].Mob = (int)TokenNumber;

  002c9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002cf	e8 00 00 00 00	 call	 __ftol2_sse
  002d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d7	8b 91 24 b9 03
	00		 mov	 edx, DWORD PTR [ecx+244004]
  002dd	6b d2 74	 imul	 edx, 116		; 00000074H
  002e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e3	89 84 11 04 f4
	01 00		 mov	 DWORD PTR [ecx+edx+128004], eax

; 114  : 
; 115  : 			Token = GetToken();

  002ea	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002ef	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 116  : 			this->GensQuest[this->gCount].CountMob = (int)TokenNumber;

  002f2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002f8	e8 00 00 00 00	 call	 __ftol2_sse
  002fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00300	8b 91 24 b9 03
	00		 mov	 edx, DWORD PTR [ecx+244004]
  00306	6b d2 74	 imul	 edx, 116		; 00000074H
  00309	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0030c	89 84 11 08 f4
	01 00		 mov	 DWORD PTR [ecx+edx+128008], eax

; 117  : 
; 118  : 			Token = GetToken();

  00313	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00318	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 119  : 			this->GensQuest[this->gCount].Proc = (int)TokenNumber;

  0031b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00321	e8 00 00 00 00	 call	 __ftol2_sse
  00326	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00329	8b 91 24 b9 03
	00		 mov	 edx, DWORD PTR [ecx+244004]
  0032f	6b d2 74	 imul	 edx, 116		; 00000074H
  00332	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00335	89 84 11 0c f4
	01 00		 mov	 DWORD PTR [ecx+edx+128012], eax

; 120  : 
; 121  : 			Token = GetToken();

  0033c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00341	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 122  : 			strcpy(this->GensQuest[this->gCount].MSG,TokenString);

  00344	68 00 00 00 00	 push	 OFFSET _TokenString
  00349	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0034c	8b 88 24 b9 03
	00		 mov	 ecx, DWORD PTR [eax+244004]
  00352	6b c9 74	 imul	 ecx, 116		; 00000074H
  00355	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00358	8d 84 0a 10 f4
	01 00		 lea	 eax, DWORD PTR [edx+ecx+128016]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 _strcpy
  00365	83 c4 08	 add	 esp, 8

; 123  : 
; 124  : 			Token = GetToken();

  00368	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0036d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 125  : 			strcpy(this->GensQuest[this->gCount].MS2,TokenString);

  00370	68 00 00 00 00	 push	 OFFSET _TokenString
  00375	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00378	8b 88 24 b9 03
	00		 mov	 ecx, DWORD PTR [eax+244004]
  0037e	6b c9 74	 imul	 ecx, 116		; 00000074H
  00381	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00384	8d 84 0a 42 f4
	01 00		 lea	 eax, DWORD PTR [edx+ecx+128066]
  0038b	50		 push	 eax
  0038c	e8 00 00 00 00	 call	 _strcpy
  00391	83 c4 08	 add	 esp, 8

; 126  : 
; 127  : 			Token = GetToken();

  00394	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00399	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 128  : 			this->GensQuest[this->gCount].Contribution = (int)TokenNumber;

  0039c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003a2	e8 00 00 00 00	 call	 __ftol2_sse
  003a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003aa	8b 91 24 b9 03
	00		 mov	 edx, DWORD PTR [ecx+244004]
  003b0	6b d2 74	 imul	 edx, 116		; 00000074H
  003b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b6	89 84 11 74 f4
	01 00		 mov	 DWORD PTR [ecx+edx+128116], eax

; 129  : 
; 130  : 			this->gCount++;

  003bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003c0	8b 88 24 b9 03
	00		 mov	 ecx, DWORD PTR [eax+244004]
  003c6	83 c1 01	 add	 ecx, 1
  003c9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003cc	89 8a 24 b9 03
	00		 mov	 DWORD PTR [edx+244004], ecx

; 131  : 		}

  003d2	e9 c2 fe ff ff	 jmp	 $LN3@ReadConfig
$LN2@ReadConfig:

; 132  :     }

  003d7	e9 8f fe ff ff	 jmp	 $LN6@ReadConfig
$LN5@ReadConfig:

; 133  : 	fclose(SMDFile);

  003dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _fclose
  003e7	83 c4 04	 add	 esp, 4
$LN15@ReadConfig:

; 134  : }

  003ea	5f		 pop	 edi
  003eb	5e		 pop	 esi
  003ec	5b		 pop	 ebx
  003ed	8b e5		 mov	 esp, ebp
  003ef	5d		 pop	 ebp
  003f0	c3		 ret	 0
?ReadConfig@NewS5Quest@@QAEXXZ ENDP			; NewS5Quest::ReadConfig
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00400	55		 push	 ebp
  00401	8b ec		 mov	 ebp, esp
  00403	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0040e	33 c5		 xor	 eax, ebp
  00410	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00413	53		 push	 ebx
  00414	56		 push	 esi
  00415	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00416	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0041d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 _fgetc
  00428	83 c4 04	 add	 esp, 4
  0042b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0042e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00432	83 f9 ff	 cmp	 ecx, -1
  00435	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00437	b8 02 00 00 00	 mov	 eax, 2
  0043c	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  00441	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00443	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00447	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0044a	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0044c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00451	50		 push	 eax
  00452	e8 00 00 00 00	 call	 _fgetc
  00457	83 c4 04	 add	 esp, 4
  0045a	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0045d	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00461	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00464	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00466	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0046a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0046d	74 1c		 je	 SHORT $LN23@GetToken
  0046f	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00473	83 f8 ff	 cmp	 eax, -1
  00476	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00478	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0047d	50		 push	 eax
  0047e	e8 00 00 00 00	 call	 _fgetc
  00483	83 c4 04	 add	 esp, 4
  00486	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  00489	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  0048b	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0048f	83 f8 ff	 cmp	 eax, -1
  00492	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00494	b8 02 00 00 00	 mov	 eax, 2
  00499	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0049e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004a2	50		 push	 eax
  004a3	e8 00 00 00 00	 call	 _isspace
  004a8	83 c4 04	 add	 esp, 4
  004ab	85 c0		 test	 eax, eax
  004ad	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  004b3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004b7	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  004bd	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  004c3	83 e9 22	 sub	 ecx, 34			; 00000022H
  004c6	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  004cc	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  004d3	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  004d9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  004df	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  004e6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  004ed	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  004f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  004fc	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00501	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00506	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00510	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00515	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0051a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0051f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00529	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0052e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  00533	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00538	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  00542	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00547	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  0054c	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00551	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  0055b	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00560	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  00565	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  0056a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0056f	50		 push	 eax
  00570	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00574	51		 push	 ecx
  00575	e8 00 00 00 00	 call	 _ungetc
  0057a	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  0057d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00580	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  00583	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00588	50		 push	 eax
  00589	e8 00 00 00 00	 call	 _getc
  0058e	83 c4 04	 add	 esp, 4
  00591	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00594	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00598	83 f9 ff	 cmp	 ecx, -1
  0059b	74 36		 je	 SHORT $LN12@GetToken
  0059d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005a1	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  005a4	74 1a		 je	 SHORT $LN11@GetToken
  005a6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005aa	50		 push	 eax
  005ab	e8 00 00 00 00	 call	 _isdigit
  005b0	83 c4 04	 add	 esp, 4
  005b3	85 c0		 test	 eax, eax
  005b5	75 09		 jne	 SHORT $LN11@GetToken
  005b7	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  005bb	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  005be	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  005c0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005c3	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  005c6	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  005c8	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005cb	83 c0 01	 add	 eax, 1
  005ce	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  005d1	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  005d3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  005d6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  005d9	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  005dc	50		 push	 eax
  005dd	e8 00 00 00 00	 call	 _atof
  005e2	83 c4 04	 add	 esp, 4
  005e5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  005eb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  005f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  005fa	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  005ff	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00604	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0060b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00610	50		 push	 eax
  00611	e8 00 00 00 00	 call	 _getc
  00616	83 c4 04	 add	 esp, 4
  00619	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0061c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00620	83 f9 ff	 cmp	 ecx, -1
  00623	74 1c		 je	 SHORT $LN8@GetToken
  00625	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00629	83 f8 22	 cmp	 eax, 34			; 00000022H
  0062c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0062e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00631	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00634	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  00636	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00639	83 c0 01	 add	 eax, 1
  0063c	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  0063f	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  00641	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00645	83 f8 22	 cmp	 eax, 34			; 00000022H
  00648	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  0064a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0064f	50		 push	 eax
  00650	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00654	51		 push	 ecx
  00655	e8 00 00 00 00	 call	 _ungetc
  0065a	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  0065d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00660	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  00663	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  0066d	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00672	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  00677	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0067c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00680	50		 push	 eax
  00681	e8 00 00 00 00	 call	 _isalpha
  00686	83 c4 04	 add	 esp, 4
  00689	85 c0		 test	 eax, eax
  0068b	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00691	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00698	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0069b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0069e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  006a0	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  006a3	83 c0 01	 add	 eax, 1
  006a6	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  006a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006ae	50		 push	 eax
  006af	e8 00 00 00 00	 call	 _getc
  006b4	83 c4 04	 add	 esp, 4
  006b7	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  006ba	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006be	83 f9 ff	 cmp	 ecx, -1
  006c1	74 36		 je	 SHORT $LN3@GetToken
  006c3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006c7	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  006ca	74 1a		 je	 SHORT $LN2@GetToken
  006cc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006d0	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  006d3	74 11		 je	 SHORT $LN2@GetToken
  006d5	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006d9	50		 push	 eax
  006da	e8 00 00 00 00	 call	 _isalnum
  006df	83 c4 04	 add	 esp, 4
  006e2	85 c0		 test	 eax, eax
  006e4	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  006e6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  006e9	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  006ec	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  006ee	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  006f1	83 c0 01	 add	 eax, 1
  006f4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  006f7	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  006f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006fe	50		 push	 eax
  006ff	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00703	51		 push	 ecx
  00704	e8 00 00 00 00	 call	 _ungetc
  00709	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0070c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0070f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00712	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0071c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00721	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00723	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00725	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0072f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00734	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  00736	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  00738	5f		 pop	 edi
  00739	5e		 pop	 esi
  0073a	5b		 pop	 ebx
  0073b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0073e	33 cd		 xor	 ecx, ebp
  00740	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00745	8b e5		 mov	 esp, ebp
  00747	5d		 pop	 ebp
  00748	c3		 ret	 0
  00749	8d 49 00	 npad	 3
$LN35@GetToken:
  0074c	00 00 00 00	 DD	 $LN10@GetToken
  00750	00 00 00 00	 DD	 $LN19@GetToken
  00754	00 00 00 00	 DD	 $LN17@GetToken
  00758	00 00 00 00	 DD	 $LN14@GetToken
  0075c	00 00 00 00	 DD	 $LN18@GetToken
  00760	00 00 00 00	 DD	 $LN16@GetToken
  00764	00 00 00 00	 DD	 $LN15@GetToken
  00768	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  0076c	00		 DB	 0
  0076d	01		 DB	 1
  0076e	07		 DB	 7
  0076f	07		 DB	 7
  00770	07		 DB	 7
  00771	07		 DB	 7
  00772	07		 DB	 7
  00773	07		 DB	 7
  00774	07		 DB	 7
  00775	07		 DB	 7
  00776	02		 DB	 2
  00777	03		 DB	 3
  00778	03		 DB	 3
  00779	07		 DB	 7
  0077a	03		 DB	 3
  0077b	03		 DB	 3
  0077c	03		 DB	 3
  0077d	03		 DB	 3
  0077e	03		 DB	 3
  0077f	03		 DB	 3
  00780	03		 DB	 3
  00781	03		 DB	 3
  00782	03		 DB	 3
  00783	03		 DB	 3
  00784	07		 DB	 7
  00785	04		 DB	 4
  00786	07		 DB	 7
  00787	07		 DB	 7
  00788	07		 DB	 7
  00789	07		 DB	 7
  0078a	07		 DB	 7
  0078b	07		 DB	 7
  0078c	07		 DB	 7
  0078d	07		 DB	 7
  0078e	07		 DB	 7
  0078f	07		 DB	 7
  00790	07		 DB	 7
  00791	07		 DB	 7
  00792	07		 DB	 7
  00793	07		 DB	 7
  00794	07		 DB	 7
  00795	07		 DB	 7
  00796	07		 DB	 7
  00797	07		 DB	 7
  00798	07		 DB	 7
  00799	07		 DB	 7
  0079a	07		 DB	 7
  0079b	07		 DB	 7
  0079c	07		 DB	 7
  0079d	07		 DB	 7
  0079e	07		 DB	 7
  0079f	07		 DB	 7
  007a0	07		 DB	 7
  007a1	07		 DB	 7
  007a2	07		 DB	 7
  007a3	07		 DB	 7
  007a4	07		 DB	 7
  007a5	07		 DB	 7
  007a6	07		 DB	 7
  007a7	07		 DB	 7
  007a8	07		 DB	 7
  007a9	07		 DB	 7
  007aa	07		 DB	 7
  007ab	07		 DB	 7
  007ac	07		 DB	 7
  007ad	07		 DB	 7
  007ae	07		 DB	 7
  007af	07		 DB	 7
  007b0	07		 DB	 7
  007b1	07		 DB	 7
  007b2	07		 DB	 7
  007b3	07		 DB	 7
  007b4	07		 DB	 7
  007b5	07		 DB	 7
  007b6	07		 DB	 7
  007b7	07		 DB	 7
  007b8	07		 DB	 7
  007b9	07		 DB	 7
  007ba	07		 DB	 7
  007bb	07		 DB	 7
  007bc	07		 DB	 7
  007bd	07		 DB	 7
  007be	07		 DB	 7
  007bf	07		 DB	 7
  007c0	07		 DB	 7
  007c1	07		 DB	 7
  007c2	07		 DB	 7
  007c3	07		 DB	 7
  007c4	07		 DB	 7
  007c5	05		 DB	 5
  007c6	07		 DB	 7
  007c7	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?GensMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ; NewS5Quest::GensMainQuest
PUBLIC	?ElfMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ; NewS5Quest::ElfMainQuest
PUBLIC	__$ArrayPad$
PUBLIC	?NPCQuest@NewS5Quest@@QAEXH@Z			; NewS5Quest::NPCQuest
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\questsystem.cpp
_TEXT	SEGMENT
_Packet$ = -212						; size = 200
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?NPCQuest@NewS5Quest@@QAEXH@Z PROC			; NewS5Quest::NPCQuest
; _this$ = ecx

; 136  : {

  007d0	55		 push	 ebp
  007d1	8b ec		 mov	 ebp, esp
  007d3	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  007d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  007de	33 c5		 xor	 eax, ebp
  007e0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  007e3	53		 push	 ebx
  007e4	56		 push	 esi
  007e5	57		 push	 edi
  007e6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 137  : 	LPOBJ lpObj = &gObj[aIndex];

  007e9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  007ec	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  007f2	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  007f8	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 138  : 
; 139  : 	BYTE Packet[200] = {0};

  007fb	c6 85 2c ff ff
	ff 00		 mov	 BYTE PTR _Packet$[ebp], 0
  00802	68 c7 00 00 00	 push	 199			; 000000c7H
  00807	6a 00		 push	 0
  00809	8d 85 2d ff ff
	ff		 lea	 eax, DWORD PTR _Packet$[ebp+1]
  0080f	50		 push	 eax
  00810	e8 00 00 00 00	 call	 _memset
  00815	83 c4 0c	 add	 esp, 12			; 0000000cH

; 140  : 	Packet[0] = 0xC1;

  00818	c6 85 2c ff ff
	ff c1		 mov	 BYTE PTR _Packet$[ebp], 193 ; 000000c1H

; 141  : 	Packet[1] = 0x08;

  0081f	c6 85 2d ff ff
	ff 08		 mov	 BYTE PTR _Packet$[ebp+1], 8

; 142  : 	Packet[2] = 0xF6;

  00826	c6 85 2e ff ff
	ff f6		 mov	 BYTE PTR _Packet$[ebp+2], 246 ; 000000f6H

; 143  : 	Packet[3] = 0x0A;

  0082d	c6 85 2f ff ff
	ff 0a		 mov	 BYTE PTR _Packet$[ebp+3], 10 ; 0000000aH

; 144  : 	Packet[4] = 0x01;

  00834	c6 85 30 ff ff
	ff 01		 mov	 BYTE PTR _Packet$[ebp+4], 1

; 145  : 	Packet[5] = 0x01;

  0083b	c6 85 31 ff ff
	ff 01		 mov	 BYTE PTR _Packet$[ebp+5], 1

; 146  : 	Packet[6] = 0x00;

  00842	c6 85 32 ff ff
	ff 00		 mov	 BYTE PTR _Packet$[ebp+6], 0

; 147  : 	Packet[7] = 0x00;

  00849	c6 85 33 ff ff
	ff 00		 mov	 BYTE PTR _Packet$[ebp+7], 0

; 148  : 
; 149  : 	if(lpObj->NPC == 257)

  00850	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00853	81 b8 a4 22 00
	00 01 01 00 00	 cmp	 DWORD PTR [eax+8868], 257 ; 00000101H
  0085d	75 0e		 jne	 SHORT $LN4@NPCQuest

; 150  : 	{
; 151  : 		this->ElfMainQuest(lpObj);

  0085f	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00862	50		 push	 eax
  00863	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00866	e8 00 00 00 00	 call	 ?ElfMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ; NewS5Quest::ElfMainQuest
  0086b	eb 2a		 jmp	 SHORT $LN3@NPCQuest
$LN4@NPCQuest:

; 152  : 	}
; 153  : 	else if(lpObj->NPC == 543 || lpObj->NPC == 544)

  0086d	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00870	81 b8 a4 22 00
	00 1f 02 00 00	 cmp	 DWORD PTR [eax+8868], 543 ; 0000021fH
  0087a	74 0f		 je	 SHORT $LN1@NPCQuest
  0087c	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0087f	81 b8 a4 22 00
	00 20 02 00 00	 cmp	 DWORD PTR [eax+8868], 544 ; 00000220H
  00889	75 0c		 jne	 SHORT $LN3@NPCQuest
$LN1@NPCQuest:

; 154  : 	{
; 155  : 		this->GensMainQuest(lpObj);

  0088b	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0088e	50		 push	 eax
  0088f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00892	e8 00 00 00 00	 call	 ?GensMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ; NewS5Quest::GensMainQuest
$LN3@NPCQuest:

; 156  : 	}
; 157  : 	DataSend(aIndex,Packet,Packet[1]);

  00897	0f b6 85 2d ff
	ff ff		 movzx	 eax, BYTE PTR _Packet$[ebp+1]
  0089e	50		 push	 eax
  0089f	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _Packet$[ebp]
  008a5	51		 push	 ecx
  008a6	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  008a9	52		 push	 edx
  008aa	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  008af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 158  : }

  008b2	5f		 pop	 edi
  008b3	5e		 pop	 esi
  008b4	5b		 pop	 ebx
  008b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008b8	33 cd		 xor	 ecx, ebp
  008ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008bf	8b e5		 mov	 esp, ebp
  008c1	5d		 pop	 ebp
  008c2	c2 04 00	 ret	 4
?NPCQuest@NewS5Quest@@QAEXH@Z ENDP			; NewS5Quest::NPCQuest
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?ElfMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z PROC	; NewS5Quest::ElfMainQuest
; _this$ = ecx

; 161  : {

  008d0	55		 push	 ebp
  008d1	8b ec		 mov	 ebp, esp
  008d3	83 ec 44	 sub	 esp, 68			; 00000044H
  008d6	53		 push	 ebx
  008d7	56		 push	 esi
  008d8	57		 push	 edi
  008d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 	//if(lpObj->ElfQuestNum == 0) lpObj->ElfQuestNum++;
; 163  : 
; 164  : 	//int Num = lpObj->ElfQuestNum;
; 165  : 
; 166  : 	//if(Num >= this->eCount)
; 167  : 	//{
; 168  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: Finish!");
; 169  : 	//	return;
; 170  : 	//}
; 171  : 	//if(lpObj->ElfMonsterCount == this->ElfQuest[Num].CountMob)
; 172  : 	//{
; 173  : 	//	this->ElfReward(lpObj,Num);
; 174  : 	//	lpObj->ElfQuestNum++;
; 175  : 	//	lpObj->ElfMonsterCount = 0;
; 176  : 	//}
; 177  : 	//else
; 178  : 	//{
; 179  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: Mission #%d",Num);	//Fix
; 180  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: %s",this->ElfQuest[Num].MSG);
; 181  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: %s [%d/%d]",this->ElfQuest[Num].MS2,lpObj->ElfMonsterCount,this->ElfQuest[Num].CountMob);
; 182  : 	//}
; 183  : }

  008dc	5f		 pop	 edi
  008dd	5e		 pop	 esi
  008de	5b		 pop	 ebx
  008df	8b e5		 mov	 esp, ebp
  008e1	5d		 pop	 ebp
  008e2	c2 04 00	 ret	 4
?ElfMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ENDP	; NewS5Quest::ElfMainQuest
_TEXT	ENDS
PUBLIC	?ElfMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z ; NewS5Quest::ElfMonsterKillProc
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?ElfMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z PROC ; NewS5Quest::ElfMonsterKillProc
; _this$ = ecx

; 186  : {

  008f0	55		 push	 ebp
  008f1	8b ec		 mov	 ebp, esp
  008f3	83 ec 44	 sub	 esp, 68			; 00000044H
  008f6	53		 push	 ebx
  008f7	56		 push	 esi
  008f8	57		 push	 edi
  008f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 	//int Num = lpTargetObj->ElfQuestNum;;
; 188  : 	//if(Num==0) return;
; 189  : 	//if(lpObj->Class == this->ElfQuest[Num].Mob)
; 190  : 	//{
; 191  : 	//	if(this->ElfQuest[Num].CountMob == lpTargetObj->ElfMonsterCount)
; 192  : 	//	{
; 193  : 	//		return;
; 194  : 	//	}
; 195  : 	//	srand(time(NULL));
; 196  : 	//	if(this->ElfQuest[Num].Proc > rand()%100)
; 197  : 	//	{
; 198  : 	//		lpTargetObj->ElfMonsterCount++;
; 199  : 	//		MessageChat(lpTargetObj->m_Index,"@[ElfQuest]: %s [%d/%d]",this->ElfQuest[Num].MS2,lpTargetObj->ElfMonsterCount,this->ElfQuest[Num].CountMob);
; 200  : 
; 201  : 	//		if(this->ElfQuest[Num].CountMob == lpTargetObj->ElfMonsterCount)
; 202  : 	//		{
; 203  : 	//			MessageChat(lpTargetObj->m_Index,"@[ElfQuest]: Mission accomplished!");
; 204  : 	//		}
; 205  : 	//	}
; 206  : 	//}
; 207  : }

  008fc	5f		 pop	 edi
  008fd	5e		 pop	 esi
  008fe	5b		 pop	 ebx
  008ff	8b e5		 mov	 esp, ebp
  00901	5d		 pop	 ebp
  00902	c2 08 00	 ret	 8
?ElfMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z ENDP ; NewS5Quest::ElfMonsterKillProc
_TEXT	ENDS
PUBLIC	?ElfReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z	; NewS5Quest::ElfReward
EXTRN	?ExFireCracker@@YAXHEE@Z:PROC			; ExFireCracker
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_Type$ = -8						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_Rew$ = 12						; size = 4
?ElfReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z PROC	; NewS5Quest::ElfReward
; _this$ = ecx

; 210  : {

  00910	55		 push	 ebp
  00911	8b ec		 mov	 ebp, esp
  00913	83 ec 48	 sub	 esp, 72			; 00000048H
  00916	53		 push	 ebx
  00917	56		 push	 esi
  00918	57		 push	 edi
  00919	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 211  : 	int Type = ITEMGET(this->ElfQuest[Rew].iType,this->ElfQuest[Rew].iIndex);

  0091c	8b 45 0c	 mov	 eax, DWORD PTR _Rew$[ebp]
  0091f	c1 e0 07	 shl	 eax, 7
  00922	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00925	8b 54 01 70	 mov	 edx, DWORD PTR [ecx+eax+112]
  00929	c1 e2 09	 shl	 edx, 9
  0092c	8b 45 0c	 mov	 eax, DWORD PTR _Rew$[ebp]
  0092f	c1 e0 07	 shl	 eax, 7
  00932	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00935	03 54 01 74	 add	 edx, DWORD PTR [ecx+eax+116]
  00939	89 55 f8	 mov	 DWORD PTR _Type$[ebp], edx

; 212  : 	ItemSerialCreateSend(lpObj->m_Index,(BYTE)lpObj->MapNumber,(BYTE)lpObj->X,(BYTE)lpObj->Y,Type,this->ElfQuest[Rew].iLevel,0,0,0,0,lpObj->m_Index,0,0);

  0093c	6a 00		 push	 0
  0093e	6a 00		 push	 0
  00940	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00943	8b 08		 mov	 ecx, DWORD PTR [eax]
  00945	51		 push	 ecx
  00946	6a 00		 push	 0
  00948	6a 00		 push	 0
  0094a	6a 00		 push	 0
  0094c	6a 00		 push	 0
  0094e	8b 55 0c	 mov	 edx, DWORD PTR _Rew$[ebp]
  00951	c1 e2 07	 shl	 edx, 7
  00954	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00957	0f b6 4c 10 78	 movzx	 ecx, BYTE PTR [eax+edx+120]
  0095c	51		 push	 ecx
  0095d	8b 55 f8	 mov	 edx, DWORD PTR _Type$[ebp]
  00960	52		 push	 edx
  00961	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00964	0f b6 88 46 01
	00 00		 movzx	 ecx, BYTE PTR [eax+326]
  0096b	51		 push	 ecx
  0096c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0096f	0f b6 82 44 01
	00 00		 movzx	 eax, BYTE PTR [edx+324]
  00976	50		 push	 eax
  00977	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0097a	0f b6 91 49 01
	00 00		 movzx	 edx, BYTE PTR [ecx+329]
  00981	52		 push	 edx
  00982	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00985	8b 08		 mov	 ecx, DWORD PTR [eax]
  00987	51		 push	 ecx
  00988	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  0098d	83 c4 34	 add	 esp, 52			; 00000034H

; 213  : 	ExFireCracker(lpObj->m_Index, lpObj->X, lpObj->Y);

  00990	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00993	0f b6 88 46 01
	00 00		 movzx	 ecx, BYTE PTR [eax+326]
  0099a	51		 push	 ecx
  0099b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0099e	0f b6 82 44 01
	00 00		 movzx	 eax, BYTE PTR [edx+324]
  009a5	50		 push	 eax
  009a6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  009a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  009ab	52		 push	 edx
  009ac	e8 00 00 00 00	 call	 ?ExFireCracker@@YAXHEE@Z ; ExFireCracker
  009b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 214  : }

  009b4	5f		 pop	 edi
  009b5	5e		 pop	 esi
  009b6	5b		 pop	 ebx
  009b7	8b e5		 mov	 esp, ebp
  009b9	5d		 pop	 ebp
  009ba	c2 08 00	 ret	 8
?ElfReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z ENDP	; NewS5Quest::ElfReward
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?GensMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z PROC	; NewS5Quest::GensMainQuest
; _this$ = ecx

; 219  : {

  009c0	55		 push	 ebp
  009c1	8b ec		 mov	 ebp, esp
  009c3	83 ec 44	 sub	 esp, 68			; 00000044H
  009c6	53		 push	 ebx
  009c7	56		 push	 esi
  009c8	57		 push	 edi
  009c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 220  : 	//if(lpObj->GensQuestNum == 0) lpObj->GensQuestNum++;
; 221  : 
; 222  : 	//int Num = lpObj->GensQuestNum;
; 223  : 
; 224  : 	//if(Num >= this->eCount)
; 225  : 	//{
; 226  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: Finish!");
; 227  : 	//	return;
; 228  : 	//}
; 229  : 	//if(lpObj->GensMonsterCount == this->GensQuest[Num].CountMob)
; 230  : 	//{
; 231  : 	//	this->GensReward(lpObj,Num);
; 232  : 	//	lpObj->GensQuestNum++;
; 233  : 	//	lpObj->GensMonsterCount = 0;
; 234  : 	//}
; 235  : 	//else
; 236  : 	//{
; 237  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: Mission #%d",Num);	//Fix
; 238  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: %s",this->GensQuest[Num].MSG);
; 239  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: %s [%d/%d]",this->GensQuest[Num].MS2,lpObj->GensMonsterCount,this->GensQuest[Num].CountMob);
; 240  : 	//}
; 241  : }

  009cc	5f		 pop	 edi
  009cd	5e		 pop	 esi
  009ce	5b		 pop	 ebx
  009cf	8b e5		 mov	 esp, ebp
  009d1	5d		 pop	 ebp
  009d2	c2 04 00	 ret	 4
?GensMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ENDP	; NewS5Quest::GensMainQuest
_TEXT	ENDS
PUBLIC	?GensMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z ; NewS5Quest::GensMonsterKillProc
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?GensMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z PROC ; NewS5Quest::GensMonsterKillProc
; _this$ = ecx

; 244  : {

  009e0	55		 push	 ebp
  009e1	8b ec		 mov	 ebp, esp
  009e3	83 ec 44	 sub	 esp, 68			; 00000044H
  009e6	53		 push	 ebx
  009e7	56		 push	 esi
  009e8	57		 push	 edi
  009e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 245  : 	//int Num = lpTargetObj->GensQuestNum;;
; 246  : 	//if(Num==0) return;
; 247  : 	//if(lpObj->Class == this->GensQuest[Num].Mob)
; 248  : 	//{
; 249  : 	//	if(this->GensQuest[Num].CountMob == lpTargetObj->GensMonsterCount)
; 250  : 	//	{
; 251  : 	//		return;
; 252  : 	//	}
; 253  : 	//	srand(time(NULL));
; 254  : 	//	if(this->GensQuest[Num].Proc > rand()%100)
; 255  : 	//	{
; 256  : 	//		lpTargetObj->GensMonsterCount++;
; 257  : 	//		MessageChat(lpTargetObj->m_Index,"~[GensQuest]: %s [%d/%d]",this->GensQuest[Num].MS2,lpTargetObj->GensMonsterCount,this->GensQuest[Num].CountMob);
; 258  : 
; 259  : 	//		if(this->ElfQuest[Num].CountMob == lpTargetObj->GensMonsterCount)
; 260  : 	//		{
; 261  : 	//			MessageChat(lpTargetObj->m_Index,"~[GensQuest]: Mission accomplished!");
; 262  : 	//		}
; 263  : 	//	}
; 264  : 	//}
; 265  : }

  009ec	5f		 pop	 edi
  009ed	5e		 pop	 esi
  009ee	5b		 pop	 ebx
  009ef	8b e5		 mov	 esp, ebp
  009f1	5d		 pop	 ebp
  009f2	c2 08 00	 ret	 8
?GensMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z ENDP ; NewS5Quest::GensMonsterKillProc
_TEXT	ENDS
PUBLIC	?GensReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z ; NewS5Quest::GensReward
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_Rew$ = 12						; size = 4
?GensReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z PROC	; NewS5Quest::GensReward
; _this$ = ecx

; 268  : {

  00a00	55		 push	 ebp
  00a01	8b ec		 mov	 ebp, esp
  00a03	83 ec 44	 sub	 esp, 68			; 00000044H
  00a06	53		 push	 ebx
  00a07	56		 push	 esi
  00a08	57		 push	 edi
  00a09	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 269  : 	//MessageChat(lpObj->m_Index,"~[GensQuest]: +%d Contribution!",this->GensQuest[Rew].Contribution);
; 270  : 	//lpObj->GensExp += this->GensQuest[Rew].Contribution;
; 271  : }

  00a0c	5f		 pop	 edi
  00a0d	5e		 pop	 esi
  00a0e	5b		 pop	 ebx
  00a0f	8b e5		 mov	 esp, ebp
  00a11	5d		 pop	 ebp
  00a12	c2 08 00	 ret	 8
?GensReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z ENDP	; NewS5Quest::GensReward
_TEXT	ENDS
PUBLIC	?MainKillMonster@NewS5Quest@@QAEXPAUOBJECTSTRUCT@@0@Z ; NewS5Quest::MainKillMonster
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?MainKillMonster@NewS5Quest@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; NewS5Quest::MainKillMonster
; _this$ = ecx

; 274  : {

  00a20	55		 push	 ebp
  00a21	8b ec		 mov	 ebp, esp
  00a23	83 ec 44	 sub	 esp, 68			; 00000044H
  00a26	53		 push	 ebx
  00a27	56		 push	 esi
  00a28	57		 push	 edi
  00a29	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 275  : 	//this->ElfMonsterKillProc(lpObj,lpTargetObj);
; 276  : 	//this->GensMonsterKillProc(lpObj,lpTargetObj);
; 277  : }

  00a2c	5f		 pop	 edi
  00a2d	5e		 pop	 esi
  00a2e	5b		 pop	 ebx
  00a2f	8b e5		 mov	 esp, ebp
  00a31	5d		 pop	 ebp
  00a32	c2 08 00	 ret	 8
?MainKillMonster@NewS5Quest@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; NewS5Quest::MainKillMonster
_TEXT	ENDS
PUBLIC	?Info@NewS5Quest@@QAEXH@Z			; NewS5Quest::Info
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?Info@NewS5Quest@@QAEXH@Z PROC				; NewS5Quest::Info
; _this$ = ecx

; 280  : {

  00a40	55		 push	 ebp
  00a41	8b ec		 mov	 ebp, esp
  00a43	83 ec 44	 sub	 esp, 68			; 00000044H
  00a46	53		 push	 ebx
  00a47	56		 push	 esi
  00a48	57		 push	 edi
  00a49	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  : 	//LPOBJ lpObj = &gObj[aIndex];
; 282  : 	//int eNum = lpObj->ElfQuestNum;
; 283  : 	//int gNum = lpObj->GensQuestNum;
; 284  : 	//if(eNum != 0)
; 285  : 	//{
; 286  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: %s [%d/%d]",this->ElfQuest[eNum].MS2,lpObj->ElfMonsterCount,this->ElfQuest[eNum].CountMob);
; 287  : 	//}
; 288  : 	//if(gNum != 0)
; 289  : 	//{
; 290  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: %s [%d/%d]",this->GensQuest[gNum].MS2,lpObj->GensMonsterCount,this->GensQuest[gNum].CountMob);
; 291  : 	//}
; 292  : }

  00a4c	5f		 pop	 edi
  00a4d	5e		 pop	 esi
  00a4e	5b		 pop	 ebx
  00a4f	8b e5		 mov	 esp, ebp
  00a51	5d		 pop	 ebp
  00a52	c2 04 00	 ret	 4
?Info@NewS5Quest@@QAEXH@Z ENDP				; NewS5Quest::Info
_TEXT	ENDS
END
