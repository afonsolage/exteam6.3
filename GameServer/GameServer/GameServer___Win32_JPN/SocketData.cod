; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\SocketData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ClearData@CSeed@@QAEXXZ			; CSeed::ClearData
PUBLIC	??0CSeed@@QAE@XZ				; CSeed::CSeed
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\socketdata.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSeed@@QAE@XZ PROC					; CSeed::CSeed
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : 	this->ClearData();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ClearData@CSeed@@QAEXXZ ; CSeed::ClearData

; 13   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CSeed@@QAE@XZ ENDP					; CSeed::CSeed
_TEXT	ENDS
PUBLIC	??1CSeed@@QAE@XZ				; CSeed::~CSeed
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSeed@@QAE@XZ PROC					; CSeed::~CSeed
; _this$ = ecx

; 17   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : 
; 19   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CSeed@@QAE@XZ ENDP					; CSeed::~CSeed
; Function compile flags: /Odtp /ZI
_i$205118 = -8						; size = 4
_this$ = -4						; size = 4
?ClearData@CSeed@@QAEXXZ PROC				; CSeed::ClearData
; _this$ = ecx

; 23   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 48	 sub	 esp, 72			; 00000048H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	this->m_btOptionIndex = 0;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 25   : 	this->m_btElementIndex = 0;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 26   : 	this->m_btItemLevel = 0;

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 27   : 	this->m_btOptionType = 0;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0

; 28   : 
; 29   : 	for(int i = 0; i < 5;i++)

  00067	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$205118[ebp], 0
  0006e	eb 09		 jmp	 SHORT $LN3@ClearData
$LN2@ClearData:
  00070	8b 45 f8	 mov	 eax, DWORD PTR _i$205118[ebp]
  00073	83 c0 01	 add	 eax, 1
  00076	89 45 f8	 mov	 DWORD PTR _i$205118[ebp], eax
$LN3@ClearData:
  00079	83 7d f8 05	 cmp	 DWORD PTR _i$205118[ebp], 5
  0007d	7d 0c		 jge	 SHORT $LN1@ClearData

; 30   : 	{
; 31   : 		this->m_btSocketSlot[i] = 0;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	03 45 f8	 add	 eax, DWORD PTR _i$205118[ebp]
  00085	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 32   : 	}

  00089	eb e5		 jmp	 SHORT $LN2@ClearData
$LN1@ClearData:

; 33   : 
; 34   : 	this->m_iSocketSlotCount = 0;

  0008b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 35   : 	this->m_iItemIndex = 0;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00098	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 36   : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
?ClearData@CSeed@@QAEXXZ ENDP				; CSeed::ClearData
_TEXT	ENDS
PUBLIC	?CheckSphere@CSeed@@QAEEPAVCItem@@@Z		; CSeed::CheckSphere
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pItem$ = 8						; size = 4
?CheckSphere@CSeed@@QAEEPAVCItem@@@Z PROC		; CSeed::CheckSphere
; _this$ = ecx

; 40   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	83 ec 44	 sub	 esp, 68			; 00000044H
  000b6	53		 push	 ebx
  000b7	56		 push	 esi
  000b8	57		 push	 edi
  000b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	if(pItem == NULL)

  000bc	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  000c0	75 04		 jne	 SHORT $LN3@CheckSpher

; 42   : 	{
; 43   : 		return 0;

  000c2	32 c0		 xor	 al, al
  000c4	eb 37		 jmp	 SHORT $LN4@CheckSpher
$LN3@CheckSpher:

; 44   : 	}
; 45   : 
; 46   : 	if(pItem->IsItem() == 0)

  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  000c9	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000ce	85 c0		 test	 eax, eax
  000d0	75 04		 jne	 SHORT $LN2@CheckSpher

; 47   : 	{
; 48   : 		return 0;

  000d2	32 c0		 xor	 al, al
  000d4	eb 27		 jmp	 SHORT $LN4@CheckSpher
$LN2@CheckSpher:

; 49   : 	}
; 50   : 
; 51   : 	if(this->m_iItemIndex == pItem->m_Type && this->m_btItemLevel == pItem->m_Level)

  000d6	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  000d9	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  000dd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e0	39 4a 0c	 cmp	 DWORD PTR [edx+12], ecx
  000e3	75 16		 jne	 SHORT $LN1@CheckSpher
  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _pItem$[ebp]
  000ef	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  000f3	3b c8		 cmp	 ecx, eax
  000f5	75 04		 jne	 SHORT $LN1@CheckSpher

; 52   : 	{
; 53   : 		return 1;

  000f7	b0 01		 mov	 al, 1
  000f9	eb 02		 jmp	 SHORT $LN4@CheckSpher
$LN1@CheckSpher:

; 54   : 	}
; 55   : 	
; 56   : 	return 0;

  000fb	32 c0		 xor	 al, al
$LN4@CheckSpher:

; 57   : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 04 00	 ret	 4
?CheckSphere@CSeed@@QAEEPAVCItem@@@Z ENDP		; CSeed::CheckSphere
_TEXT	ENDS
PUBLIC	?SetInfo@CSeed@@QAEXEEEEQAEH@Z			; CSeed::SetInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv74 = -76						; size = 4
_i$205138 = -8						; size = 4
_this$ = -4						; size = 4
_OptionIndex$ = 8					; size = 1
_ElementIndex$ = 12					; size = 1
_Level$ = 16						; size = 1
_OptionType$ = 20					; size = 1
_SocketSlot$ = 24					; size = 4
_SocketSlotCount$ = 28					; size = 4
?SetInfo@CSeed@@QAEXEEEEQAEH@Z PROC			; CSeed::SetInfo
; _this$ = ecx

; 61   : {

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00116	53		 push	 ebx
  00117	56		 push	 esi
  00118	57		 push	 edi
  00119	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	this->m_btOptionIndex = OptionIndex;

  0011c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8a 4d 08	 mov	 cl, BYTE PTR _OptionIndex$[ebp]
  00122	88 08		 mov	 BYTE PTR [eax], cl

; 63   : 	this->m_btElementIndex = ElementIndex;

  00124	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00127	8a 4d 0c	 mov	 cl, BYTE PTR _ElementIndex$[ebp]
  0012a	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 64   : 	this->m_btItemLevel = Level;

  0012d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00130	8a 4d 10	 mov	 cl, BYTE PTR _Level$[ebp]
  00133	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 65   : 	this->m_btOptionType = OptionType;

  00136	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00139	8a 4d 14	 mov	 cl, BYTE PTR _OptionType$[ebp]
  0013c	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 66   : 
; 67   : 	for(int i = 0;i < 5;i++)

  0013f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$205138[ebp], 0
  00146	eb 09		 jmp	 SHORT $LN12@SetInfo
$LN11@SetInfo:
  00148	8b 45 f8	 mov	 eax, DWORD PTR _i$205138[ebp]
  0014b	83 c0 01	 add	 eax, 1
  0014e	89 45 f8	 mov	 DWORD PTR _i$205138[ebp], eax
$LN12@SetInfo:
  00151	83 7d f8 05	 cmp	 DWORD PTR _i$205138[ebp], 5
  00155	7d 13		 jge	 SHORT $LN10@SetInfo

; 68   : 	{
; 69   : 		this->m_btSocketSlot[i] = SocketSlot[i];

  00157	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015a	03 45 f8	 add	 eax, DWORD PTR _i$205138[ebp]
  0015d	8b 4d 18	 mov	 ecx, DWORD PTR _SocketSlot$[ebp]
  00160	03 4d f8	 add	 ecx, DWORD PTR _i$205138[ebp]
  00163	8a 11		 mov	 dl, BYTE PTR [ecx]
  00165	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 70   : 	}

  00168	eb de		 jmp	 SHORT $LN11@SetInfo
$LN10@SetInfo:

; 71   : 
; 72   : 	this->m_iSocketSlotCount = SocketSlotCount;

  0016a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016d	8b 4d 1c	 mov	 ecx, DWORD PTR _SocketSlotCount$[ebp]
  00170	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 73   : 	
; 74   : 	switch(ElementIndex)

  00173	0f b6 45 0c	 movzx	 eax, BYTE PTR _ElementIndex$[ebp]
  00177	89 45 b4	 mov	 DWORD PTR tv74[ebp], eax
  0017a	8b 4d b4	 mov	 ecx, DWORD PTR tv74[ebp]
  0017d	83 e9 01	 sub	 ecx, 1
  00180	89 4d b4	 mov	 DWORD PTR tv74[ebp], ecx
  00183	83 7d b4 06	 cmp	 DWORD PTR tv74[ebp], 6
  00187	77 5c		 ja	 SHORT $LN13@SetInfo
  00189	8b 55 b4	 mov	 edx, DWORD PTR tv74[ebp]
  0018c	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN15@SetInfo[edx*4]
$LN7@SetInfo:

; 75   : 	{
; 76   : 	case 1:	this->m_iItemIndex = ITEMGET(12,60);break;

  00193	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00196	c7 40 0c 3c 18
	00 00		 mov	 DWORD PTR [eax+12], 6204 ; 0000183cH
  0019d	eb 46		 jmp	 SHORT $LN13@SetInfo
$LN6@SetInfo:

; 77   : 	case 2:	this->m_iItemIndex = ITEMGET(12,61);break;

  0019f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a2	c7 40 0c 3d 18
	00 00		 mov	 DWORD PTR [eax+12], 6205 ; 0000183dH
  001a9	eb 3a		 jmp	 SHORT $LN13@SetInfo
$LN5@SetInfo:

; 78   : 	case 3:	this->m_iItemIndex = ITEMGET(12,62);break;

  001ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ae	c7 40 0c 3e 18
	00 00		 mov	 DWORD PTR [eax+12], 6206 ; 0000183eH
  001b5	eb 2e		 jmp	 SHORT $LN13@SetInfo
$LN4@SetInfo:

; 79   : 	case 4:	this->m_iItemIndex = ITEMGET(12,63);break;

  001b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ba	c7 40 0c 3f 18
	00 00		 mov	 DWORD PTR [eax+12], 6207 ; 0000183fH
  001c1	eb 22		 jmp	 SHORT $LN13@SetInfo
$LN3@SetInfo:

; 80   : 	case 5:	this->m_iItemIndex = ITEMGET(12,64);break;

  001c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c6	c7 40 0c 40 18
	00 00		 mov	 DWORD PTR [eax+12], 6208 ; 00001840H
  001cd	eb 16		 jmp	 SHORT $LN13@SetInfo
$LN2@SetInfo:

; 81   : 	case 6:	this->m_iItemIndex = ITEMGET(12,65);break;

  001cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d2	c7 40 0c 41 18
	00 00		 mov	 DWORD PTR [eax+12], 6209 ; 00001841H
  001d9	eb 0a		 jmp	 SHORT $LN13@SetInfo
$LN1@SetInfo:

; 82   : 	case 7:	this->m_iItemIndex = ITEMGET(12,66);break; //reserved

  001db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001de	c7 40 0c 42 18
	00 00		 mov	 DWORD PTR [eax+12], 6210 ; 00001842H
$LN13@SetInfo:

; 83   : 	}
; 84   : }

  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 18 00	 ret	 24			; 00000018H
  001ee	8b ff		 npad	 2
$LN15@SetInfo:
  001f0	00 00 00 00	 DD	 $LN7@SetInfo
  001f4	00 00 00 00	 DD	 $LN6@SetInfo
  001f8	00 00 00 00	 DD	 $LN5@SetInfo
  001fc	00 00 00 00	 DD	 $LN4@SetInfo
  00200	00 00 00 00	 DD	 $LN3@SetInfo
  00204	00 00 00 00	 DD	 $LN2@SetInfo
  00208	00 00 00 00	 DD	 $LN1@SetInfo
?SetInfo@CSeed@@QAEXEEEEQAEH@Z ENDP			; CSeed::SetInfo
_TEXT	ENDS
PUBLIC	??0CSphere@@QAE@XZ				; CSphere::CSphere
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSphere@@QAE@XZ PROC					; CSphere::CSphere
; _this$ = ecx

; 92   : {

  00210	55		 push	 ebp
  00211	8b ec		 mov	 ebp, esp
  00213	83 ec 44	 sub	 esp, 68			; 00000044H
  00216	53		 push	 ebx
  00217	56		 push	 esi
  00218	57		 push	 edi
  00219	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 
; 94   : }

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0021f	5f		 pop	 edi
  00220	5e		 pop	 esi
  00221	5b		 pop	 ebx
  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c3		 ret	 0
??0CSphere@@QAE@XZ ENDP					; CSphere::CSphere
_TEXT	ENDS
PUBLIC	??1CSphere@@QAE@XZ				; CSphere::~CSphere
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSphere@@QAE@XZ PROC					; CSphere::~CSphere
; _this$ = ecx

; 98   : {

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	83 ec 44	 sub	 esp, 68			; 00000044H
  00236	53		 push	 ebx
  00237	56		 push	 esi
  00238	57		 push	 edi
  00239	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 
; 100  : }

  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	5b		 pop	 ebx
  0023f	8b e5		 mov	 esp, ebp
  00241	5d		 pop	 ebp
  00242	c3		 ret	 0
??1CSphere@@QAE@XZ ENDP					; CSphere::~CSphere
_TEXT	ENDS
PUBLIC	?ClearData@CSphere@@QAEXXZ			; CSphere::ClearData
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearData@CSphere@@QAEXXZ PROC				; CSphere::ClearData
; _this$ = ecx

; 104  : {

  00250	55		 push	 ebp
  00251	8b ec		 mov	 ebp, esp
  00253	83 ec 44	 sub	 esp, 68			; 00000044H
  00256	53		 push	 ebx
  00257	56		 push	 esi
  00258	57		 push	 edi
  00259	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 	this->m_btItemLevel	=   0;

  0025c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 106  : 	this->m_iElementIndex	=	0;

  00262	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00265	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 107  : 	this->m_iItemIndex	=	0;

  0026c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 108  : }

  00276	5f		 pop	 edi
  00277	5e		 pop	 esi
  00278	5b		 pop	 ebx
  00279	8b e5		 mov	 esp, ebp
  0027b	5d		 pop	 ebp
  0027c	c3		 ret	 0
?ClearData@CSphere@@QAEXXZ ENDP				; CSphere::ClearData
_TEXT	ENDS
PUBLIC	?SetInfo@CSphere@@QAEXEH@Z			; CSphere::SetInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
_level$ = 8						; size = 1
_index$ = 12						; size = 4
?SetInfo@CSphere@@QAEXEH@Z PROC				; CSphere::SetInfo
; _this$ = ecx

; 112  : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 48	 sub	 esp, 72			; 00000048H
  00286	53		 push	 ebx
  00287	56		 push	 esi
  00288	57		 push	 edi
  00289	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 	this->m_btItemLevel = level;

  0028c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028f	8a 4d 08	 mov	 cl, BYTE PTR _level$[ebp]
  00292	88 08		 mov	 BYTE PTR [eax], cl

; 114  : 	this->m_iElementIndex = index;

  00294	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00297	8b 4d 0c	 mov	 ecx, DWORD PTR _index$[ebp]
  0029a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 115  : 
; 116  : 	switch(level)

  0029d	0f b6 45 08	 movzx	 eax, BYTE PTR _level$[ebp]
  002a1	89 45 b8	 mov	 DWORD PTR tv66[ebp], eax
  002a4	8b 4d b8	 mov	 ecx, DWORD PTR tv66[ebp]
  002a7	83 e9 01	 sub	 ecx, 1
  002aa	89 4d b8	 mov	 DWORD PTR tv66[ebp], ecx
  002ad	83 7d b8 04	 cmp	 DWORD PTR tv66[ebp], 4
  002b1	77 44		 ja	 SHORT $LN8@SetInfo@2
  002b3	8b 55 b8	 mov	 edx, DWORD PTR tv66[ebp]
  002b6	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN10@SetInfo@2[edx*4]
$LN5@SetInfo@2:

; 117  : 	{
; 118  : 	case 1:this->m_iItemIndex = ITEMGET(12,70);break;

  002bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c0	c7 40 08 46 18
	00 00		 mov	 DWORD PTR [eax+8], 6214	; 00001846H
  002c7	eb 2e		 jmp	 SHORT $LN8@SetInfo@2
$LN4@SetInfo@2:

; 119  : 	case 2:this->m_iItemIndex = ITEMGET(12,71);break;

  002c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002cc	c7 40 08 47 18
	00 00		 mov	 DWORD PTR [eax+8], 6215	; 00001847H
  002d3	eb 22		 jmp	 SHORT $LN8@SetInfo@2
$LN3@SetInfo@2:

; 120  : 	case 3:this->m_iItemIndex = ITEMGET(12,72);break;

  002d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d8	c7 40 08 48 18
	00 00		 mov	 DWORD PTR [eax+8], 6216	; 00001848H
  002df	eb 16		 jmp	 SHORT $LN8@SetInfo@2
$LN2@SetInfo@2:

; 121  : 	case 4:this->m_iItemIndex = ITEMGET(12,73);break;

  002e1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002e4	c7 40 08 49 18
	00 00		 mov	 DWORD PTR [eax+8], 6217	; 00001849H
  002eb	eb 0a		 jmp	 SHORT $LN8@SetInfo@2
$LN1@SetInfo@2:

; 122  : 	case 5:this->m_iItemIndex = ITEMGET(12,74);break;

  002ed	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002f0	c7 40 08 4a 18
	00 00		 mov	 DWORD PTR [eax+8], 6218	; 0000184aH
$LN8@SetInfo@2:

; 123  : 	}
; 124  : }

  002f7	5f		 pop	 edi
  002f8	5e		 pop	 esi
  002f9	5b		 pop	 ebx
  002fa	8b e5		 mov	 esp, ebp
  002fc	5d		 pop	 ebp
  002fd	c2 08 00	 ret	 8
$LN10@SetInfo@2:
  00300	00 00 00 00	 DD	 $LN5@SetInfo@2
  00304	00 00 00 00	 DD	 $LN4@SetInfo@2
  00308	00 00 00 00	 DD	 $LN3@SetInfo@2
  0030c	00 00 00 00	 DD	 $LN2@SetInfo@2
  00310	00 00 00 00	 DD	 $LN1@SetInfo@2
?SetInfo@CSphere@@QAEXEH@Z ENDP				; CSphere::SetInfo
_TEXT	ENDS
PUBLIC	?ClearData@CSeedSphere@@QAEXXZ			; CSeedSphere::ClearData
PUBLIC	??0CSeedSphere@@QAE@XZ				; CSeedSphere::CSeedSphere
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSeedSphere@@QAE@XZ PROC				; CSeedSphere::CSeedSphere
; _this$ = ecx

; 132  : {

  00320	55		 push	 ebp
  00321	8b ec		 mov	 ebp, esp
  00323	83 ec 44	 sub	 esp, 68			; 00000044H
  00326	53		 push	 ebx
  00327	56		 push	 esi
  00328	57		 push	 edi
  00329	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : 	this->ClearData();

  0032c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032f	e8 00 00 00 00	 call	 ?ClearData@CSeedSphere@@QAEXXZ ; CSeedSphere::ClearData

; 134  : }

  00334	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00337	5f		 pop	 edi
  00338	5e		 pop	 esi
  00339	5b		 pop	 ebx
  0033a	8b e5		 mov	 esp, ebp
  0033c	5d		 pop	 ebp
  0033d	c3		 ret	 0
??0CSeedSphere@@QAE@XZ ENDP				; CSeedSphere::CSeedSphere
_TEXT	ENDS
PUBLIC	??1CSeedSphere@@QAE@XZ				; CSeedSphere::~CSeedSphere
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSeedSphere@@QAE@XZ PROC				; CSeedSphere::~CSeedSphere
; _this$ = ecx

; 138  : {

  00340	55		 push	 ebp
  00341	8b ec		 mov	 ebp, esp
  00343	83 ec 44	 sub	 esp, 68			; 00000044H
  00346	53		 push	 ebx
  00347	56		 push	 esi
  00348	57		 push	 edi
  00349	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 139  : 
; 140  : }

  0034c	5f		 pop	 edi
  0034d	5e		 pop	 esi
  0034e	5b		 pop	 ebx
  0034f	8b e5		 mov	 esp, ebp
  00351	5d		 pop	 ebp
  00352	c3		 ret	 0
??1CSeedSphere@@QAE@XZ ENDP				; CSeedSphere::~CSeedSphere
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ClearData@CSeedSphere@@QAEXXZ PROC			; CSeedSphere::ClearData
; _this$ = ecx

; 144  : {

  00360	55		 push	 ebp
  00361	8b ec		 mov	 ebp, esp
  00363	83 ec 44	 sub	 esp, 68			; 00000044H
  00366	53		 push	 ebx
  00367	56		 push	 esi
  00368	57		 push	 edi
  00369	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 145  : 	this->m_btItemByteOption	= 0; // 0

  0036c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0036f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 146  : 	this->m_btOptionIndex	= 0; // 1

  00372	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00375	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 147  : 	this->m_btElementIndex	= 0; // 2

  00379	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0037c	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 148  : 	this->m_btItemLevel	= 0; // 8

  00380	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00383	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0

; 149  : 	this->m_btOptionType	= 0; // 9

  00387	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0038a	c6 40 09 00	 mov	 BYTE PTR [eax+9], 0

; 150  : 	this->m_wSocketSlot  = 0; // A

  0038e	33 c0		 xor	 eax, eax
  00390	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00393	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 151  : 	this->m_iItemIndex   = 0;  // 4

  00397	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0039a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 152  : }

  003a1	5f		 pop	 edi
  003a2	5e		 pop	 esi
  003a3	5b		 pop	 ebx
  003a4	8b e5		 mov	 esp, ebp
  003a6	5d		 pop	 ebp
  003a7	c3		 ret	 0
?ClearData@CSeedSphere@@QAEXXZ ENDP			; CSeedSphere::ClearData
_TEXT	ENDS
PUBLIC	?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z		; CSeedSphere::SetInfo
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv88 = -72						; size = 4
_this$ = -4						; size = 4
_lpSeed$ = 8						; size = 4
_slot_count$ = 12					; size = 1
?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z PROC		; CSeedSphere::SetInfo
; _this$ = ecx

; 156  : {

  003b0	55		 push	 ebp
  003b1	8b ec		 mov	 ebp, esp
  003b3	83 ec 48	 sub	 esp, 72			; 00000048H
  003b6	53		 push	 ebx
  003b7	56		 push	 esi
  003b8	57		 push	 edi
  003b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 157  : 	if(lpSeed == NULL || !slot_count)

  003bc	83 7d 08 00	 cmp	 DWORD PTR _lpSeed$[ebp], 0
  003c0	74 08		 je	 SHORT $LN11@SetInfo@3
  003c2	0f b6 45 0c	 movzx	 eax, BYTE PTR _slot_count$[ebp]
  003c6	85 c0		 test	 eax, eax
  003c8	75 07		 jne	 SHORT $LN12@SetInfo@3
$LN11@SetInfo@3:

; 158  : 	{
; 159  : 		return 0;

  003ca	32 c0		 xor	 al, al
  003cc	e9 ec 00 00 00	 jmp	 $LN13@SetInfo@3
$LN12@SetInfo@3:

; 160  : 	}
; 161  : 	
; 162  : 	this->m_btItemByteOption	= slot_count * 50 + lpSeed->m_btOptionIndex;

  003d1	0f b6 45 0c	 movzx	 eax, BYTE PTR _slot_count$[ebp]
  003d5	6b c0 32	 imul	 eax, 50			; 00000032H
  003d8	8b 4d 08	 mov	 ecx, DWORD PTR _lpSeed$[ebp]
  003db	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  003de	03 c2		 add	 eax, edx
  003e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e3	88 01		 mov	 BYTE PTR [ecx], al

; 163  : 	this->m_btOptionIndex	= lpSeed->m_btOptionIndex;

  003e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e8	8b 4d 08	 mov	 ecx, DWORD PTR _lpSeed$[ebp]
  003eb	8a 11		 mov	 dl, BYTE PTR [ecx]
  003ed	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 164  : 
; 165  : 	this->m_btElementIndex	= lpSeed->m_btElementIndex;

  003f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f3	8b 4d 08	 mov	 ecx, DWORD PTR _lpSeed$[ebp]
  003f6	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  003f9	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 166  : 	
; 167  : 	this->m_btItemLevel	= lpSeed->m_btItemLevel;

  003fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003ff	8b 4d 08	 mov	 ecx, DWORD PTR _lpSeed$[ebp]
  00402	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00405	88 50 08	 mov	 BYTE PTR [eax+8], dl

; 168  : 	
; 169  : 	this->m_btOptionType	= lpSeed->m_btOptionType;

  00408	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0040b	8b 4d 08	 mov	 ecx, DWORD PTR _lpSeed$[ebp]
  0040e	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  00411	88 50 09	 mov	 BYTE PTR [eax+9], dl

; 170  : 	
; 171  : 	this->m_btSocketSlotCount	= slot_count;

  00414	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00417	8a 4d 0c	 mov	 cl, BYTE PTR _slot_count$[ebp]
  0041a	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 172  : 	
; 173  : 	this->m_wSocketSlot  = lpSeed->m_btSocketSlot[slot_count-1];

  0041d	0f b6 45 0c	 movzx	 eax, BYTE PTR _slot_count$[ebp]
  00421	8b 4d 08	 mov	 ecx, DWORD PTR _lpSeed$[ebp]
  00424	66 0f b6 54 01
	03		 movzx	 dx, BYTE PTR [ecx+eax+3]
  0042a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0042d	66 89 50 0a	 mov	 WORD PTR [eax+10], dx

; 174  : 
; 175  : 	switch(lpSeed->m_btElementIndex)

  00431	8b 45 08	 mov	 eax, DWORD PTR _lpSeed$[ebp]
  00434	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00438	89 4d b8	 mov	 DWORD PTR tv88[ebp], ecx
  0043b	8b 55 b8	 mov	 edx, DWORD PTR tv88[ebp]
  0043e	83 ea 01	 sub	 edx, 1
  00441	89 55 b8	 mov	 DWORD PTR tv88[ebp], edx
  00444	83 7d b8 06	 cmp	 DWORD PTR tv88[ebp], 6
  00448	77 54		 ja	 SHORT $LN1@SetInfo@3
  0044a	8b 45 b8	 mov	 eax, DWORD PTR tv88[ebp]
  0044d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN15@SetInfo@3[eax*4]
$LN8@SetInfo@3:

; 176  : 	{
; 177  : 	case 1:this->m_iItemIndex = ITEMGET(12,100);	break;

  00454	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00457	c7 40 04 64 18
	00 00		 mov	 DWORD PTR [eax+4], 6244	; 00001864H
  0045e	eb 42		 jmp	 SHORT $LN9@SetInfo@3
$LN7@SetInfo@3:

; 178  : 	case 2:this->m_iItemIndex = ITEMGET(12,101);	break;

  00460	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00463	c7 40 04 65 18
	00 00		 mov	 DWORD PTR [eax+4], 6245	; 00001865H
  0046a	eb 36		 jmp	 SHORT $LN9@SetInfo@3
$LN6@SetInfo@3:

; 179  : 	case 3:this->m_iItemIndex = ITEMGET(12,102);	break;

  0046c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0046f	c7 40 04 66 18
	00 00		 mov	 DWORD PTR [eax+4], 6246	; 00001866H
  00476	eb 2a		 jmp	 SHORT $LN9@SetInfo@3
$LN5@SetInfo@3:

; 180  : 	case 4:this->m_iItemIndex = ITEMGET(12,103);	break;

  00478	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0047b	c7 40 04 67 18
	00 00		 mov	 DWORD PTR [eax+4], 6247	; 00001867H
  00482	eb 1e		 jmp	 SHORT $LN9@SetInfo@3
$LN4@SetInfo@3:

; 181  : 	case 5:this->m_iItemIndex = ITEMGET(12,104);	break;

  00484	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00487	c7 40 04 68 18
	00 00		 mov	 DWORD PTR [eax+4], 6248	; 00001868H
  0048e	eb 12		 jmp	 SHORT $LN9@SetInfo@3
$LN3@SetInfo@3:

; 182  : 	case 6:this->m_iItemIndex = ITEMGET(12,105);	break;

  00490	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00493	c7 40 04 69 18
	00 00		 mov	 DWORD PTR [eax+4], 6249	; 00001869H
  0049a	eb 06		 jmp	 SHORT $LN9@SetInfo@3
$LN2@SetInfo@3:

; 183  : 	case 7:								break;

  0049c	eb 04		 jmp	 SHORT $LN9@SetInfo@3
$LN1@SetInfo@3:

; 184  : 	default:							return 0;

  0049e	32 c0		 xor	 al, al
  004a0	eb 1b		 jmp	 SHORT $LN13@SetInfo@3
$LN9@SetInfo@3:

; 185  : 	}
; 186  : 
; 187  : 	this->m_iItemIndex += (this->m_btSocketSlotCount - 1) * 6;

  004a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004a5	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  004a9	83 e9 01	 sub	 ecx, 1
  004ac	6b c9 06	 imul	 ecx, 6
  004af	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004b2	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  004b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004b8	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 188  : 
; 189  : 	return 1;

  004bb	b0 01		 mov	 al, 1
$LN13@SetInfo@3:

; 190  : }

  004bd	5f		 pop	 edi
  004be	5e		 pop	 esi
  004bf	5b		 pop	 ebx
  004c0	8b e5		 mov	 esp, ebp
  004c2	5d		 pop	 ebp
  004c3	c2 08 00	 ret	 8
  004c6	8b ff		 npad	 2
$LN15@SetInfo@3:
  004c8	00 00 00 00	 DD	 $LN8@SetInfo@3
  004cc	00 00 00 00	 DD	 $LN7@SetInfo@3
  004d0	00 00 00 00	 DD	 $LN6@SetInfo@3
  004d4	00 00 00 00	 DD	 $LN5@SetInfo@3
  004d8	00 00 00 00	 DD	 $LN4@SetInfo@3
  004dc	00 00 00 00	 DD	 $LN3@SetInfo@3
  004e0	00 00 00 00	 DD	 $LN2@SetInfo@3
?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z ENDP		; CSeedSphere::SetInfo
_TEXT	ENDS
PUBLIC	?IncSocketSlot@CSeedSphere@@QAEXE@Z		; CSeedSphere::IncSocketSlot
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 1
?IncSocketSlot@CSeedSphere@@QAEXE@Z PROC		; CSeedSphere::IncSocketSlot
; _this$ = ecx

; 194  : {

  004f0	55		 push	 ebp
  004f1	8b ec		 mov	 ebp, esp
  004f3	83 ec 44	 sub	 esp, 68			; 00000044H
  004f6	53		 push	 ebx
  004f7	56		 push	 esi
  004f8	57		 push	 edi
  004f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 195  : 	if(this->m_wSocketSlot + value > (WORD)-2) //0xFE 

  004fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004ff	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  00503	0f b6 55 08	 movzx	 edx, BYTE PTR _value$[ebp]
  00507	03 ca		 add	 ecx, edx
  00509	81 f9 fe ff 00
	00		 cmp	 ecx, 65534		; 0000fffeH
  0050f	7e 02		 jle	 SHORT $LN1@IncSocketS

; 196  : 	{
; 197  : 		return;

  00511	eb 14		 jmp	 SHORT $LN2@IncSocketS
$LN1@IncSocketS:

; 198  : 	}
; 199  : 
; 200  : 	this->m_wSocketSlot += value;

  00513	0f b6 45 08	 movzx	 eax, BYTE PTR _value$[ebp]
  00517	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0051a	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  0051e	03 d0		 add	 edx, eax
  00520	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00523	66 89 50 0a	 mov	 WORD PTR [eax+10], dx
$LN2@IncSocketS:

; 201  : }

  00527	5f		 pop	 edi
  00528	5e		 pop	 esi
  00529	5b		 pop	 ebx
  0052a	8b e5		 mov	 esp, ebp
  0052c	5d		 pop	 ebp
  0052d	c2 04 00	 ret	 4
?IncSocketSlot@CSeedSphere@@QAEXE@Z ENDP		; CSeedSphere::IncSocketSlot
_TEXT	ENDS
END
