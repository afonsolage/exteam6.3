; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\TMonsterSkillElementInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?SetSkillElement@TMonsterSkillElementInfo@@QAEXH@Z ; TMonsterSkillElementInfo::SetSkillElement
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\tmonsterskillelementinfo.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSkillElement$ = 8					; size = 4
?SetSkillElement@TMonsterSkillElementInfo@@QAEXH@Z PROC	; TMonsterSkillElementInfo::SetSkillElement
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 16   : 	//
; 17   : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetSkillElement@TMonsterSkillElementInfo@@QAEXH@Z ENDP	; TMonsterSkillElementInfo::SetSkillElement
_TEXT	ENDS
PUBLIC	?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetBerserkTime
PUBLIC	?DecBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecBerserkTime
PUBLIC	?CheckBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckBerserkTime
PUBLIC	?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetModifyStat
PUBLIC	?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecModifyStatTime
PUBLIC	?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckModifyStatTime
PUBLIC	?ResetResist@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetResist
PUBLIC	?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecResistTime
PUBLIC	?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckResistTime
PUBLIC	?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAutoMP
PUBLIC	?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAutoMPTime
PUBLIC	?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoMPTime
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@4059000000000000
PUBLIC	?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAutoHP
PUBLIC	?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAutoHPTime
PUBLIC	?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoHPTime
PUBLIC	?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAutoAG
PUBLIC	?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAutoAGTime
PUBLIC	?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoAGTime
PUBLIC	?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetDefense
PUBLIC	?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecDefenseTime
PUBLIC	?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckDefenseTime
PUBLIC	?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAttack
PUBLIC	?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAttackTime
PUBLIC	?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAttackTime
PUBLIC	?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z ; TMonsterSkillElementInfo::CheckSkillElementInfoProc
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z PROC ; TMonsterSkillElementInfo::CheckSkillElementInfoProc

; 20   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 40	 sub	 esp, 64			; 00000040H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi

; 21   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAttackTime() )

  00029	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0002c	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00032	e8 00 00 00 00	 call	 ?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAttackTime
  00037	85 c0		 test	 eax, eax
  00039	74 20		 je	 SHORT $LN24@CheckSkill

; 22   : 	{
; 23   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAttackTime() )

  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0003e	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00044	e8 00 00 00 00	 call	 ?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAttackTime
  00049	85 c0		 test	 eax, eax
  0004b	74 0e		 je	 SHORT $LN24@CheckSkill

; 24   : 		{
; 25   : 			lpObj->m_MonsterSkillElementInfo.ResetAttack();

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00050	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00056	e8 00 00 00 00	 call	 ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAttack
$LN24@CheckSkill:

; 26   : 		}
; 27   : 	}
; 28   : 
; 29   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckDefenseTime() )

  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0005e	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00064	e8 00 00 00 00	 call	 ?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckDefenseTime
  00069	85 c0		 test	 eax, eax
  0006b	74 20		 je	 SHORT $LN22@CheckSkill

; 30   : 	{
; 31   : 		if ( lpObj->m_MonsterSkillElementInfo.DecDefenseTime() )

  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00070	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00076	e8 00 00 00 00	 call	 ?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecDefenseTime
  0007b	85 c0		 test	 eax, eax
  0007d	74 0e		 je	 SHORT $LN22@CheckSkill

; 32   : 		{
; 33   : 			lpObj->m_MonsterSkillElementInfo.ResetDefense();

  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00082	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00088	e8 00 00 00 00	 call	 ?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetDefense
$LN22@CheckSkill:

; 34   : 		}
; 35   : 	}
; 36   : 	
; 37   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAutoAGTime() )

  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00090	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00096	e8 00 00 00 00	 call	 ?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoAGTime
  0009b	85 c0		 test	 eax, eax
  0009d	74 20		 je	 SHORT $LN20@CheckSkill

; 38   : 	{
; 39   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAutoAGTime() )

  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000a2	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  000a8	e8 00 00 00 00	 call	 ?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAutoAGTime
  000ad	85 c0		 test	 eax, eax
  000af	74 0e		 je	 SHORT $LN20@CheckSkill

; 40   : 		{
; 41   : 			lpObj->m_MonsterSkillElementInfo.ResetAutoAG();

  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000b4	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  000ba	e8 00 00 00 00	 call	 ?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoAG
$LN20@CheckSkill:

; 42   : 		}
; 43   : 	}
; 44   : 
; 45   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAutoHPTime() )

  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000c2	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  000c8	e8 00 00 00 00	 call	 ?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoHPTime
  000cd	85 c0		 test	 eax, eax
  000cf	0f 84 69 01 00
	00		 je	 $LN11@CheckSkill

; 46   : 	{
; 47   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAutoHPTime() )

  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000d8	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  000de	e8 00 00 00 00	 call	 ?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAutoHPTime
  000e3	85 c0		 test	 eax, eax
  000e5	74 13		 je	 SHORT $LN18@CheckSkill

; 48   : 		{
; 49   : 			lpObj->m_MonsterSkillElementInfo.ResetAutoHP();

  000e7	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000ea	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  000f0	e8 00 00 00 00	 call	 ?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoHP

; 50   : 		}
; 51   : 		else 

  000f5	e9 44 01 00 00	 jmp	 $LN11@CheckSkill
$LN18@CheckSkill:

; 52   : 		{
; 53   : 			if ( lpObj->m_MonsterSkillElementInfo.m_iSkillElementAutoHPCycle == 110 )

  000fa	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000fd	83 b8 34 1c 00
	00 6e		 cmp	 DWORD PTR [eax+7220], 110 ; 0000006eH
  00104	75 1d		 jne	 SHORT $LN16@CheckSkill

; 54   : 				lpObj->Life += lpObj->m_MonsterSkillElementInfo.m_iSkillElementAutoHP;

  00106	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00109	db 80 30 1c 00
	00		 fild	 DWORD PTR [eax+7216]
  0010f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00112	d8 81 fc 00 00
	00		 fadd	 DWORD PTR [ecx+252]
  00118	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0011b	d9 9a fc 00 00
	00		 fstp	 DWORD PTR [edx+252]

; 55   : 			else

  00121	eb 2a		 jmp	 SHORT $LN15@CheckSkill
$LN16@CheckSkill:

; 56   : 	
; 57   : 			lpObj->Life += (((float)(lpObj->Life) * (float)(lpObj->m_MonsterSkillElementInfo.m_iSkillElementAutoHP)))/100.0f;

  00123	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00126	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  0012c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0012f	da 89 30 1c 00
	00		 fimul	 DWORD PTR [ecx+7216]
  00135	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0013b	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0013e	d8 82 fc 00 00
	00		 fadd	 DWORD PTR [edx+252]
  00144	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00147	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]
$LN15@CheckSkill:

; 58   : 
; 59   : 			if ( lpObj->Life <0 )

  0014d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00150	d9 80 fc 00 00
	00		 fld	 DWORD PTR [eax+252]
  00156	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0015c	df e0		 fnstsw	 ax
  0015e	f6 c4 05	 test	 ah, 5
  00161	7a 3e		 jp	 SHORT $LN14@CheckSkill

; 60   : 			{
; 61   : 				lpObj->Life = 0;

  00163	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00166	d9 ee		 fldz
  00168	d9 98 fc 00 00
	00		 fstp	 DWORD PTR [eax+252]

; 62   : 				GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  0016e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00171	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00177	51		 push	 ecx
  00178	6a 00		 push	 0
  0017a	68 ff 00 00 00	 push	 255			; 000000ffH
  0017f	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00182	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  00188	e8 00 00 00 00	 call	 __ftol2_sse
  0018d	50		 push	 eax
  0018e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00191	8b 08		 mov	 ecx, DWORD PTR [eax]
  00193	51		 push	 ecx
  00194	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00199	83 c4 14	 add	 esp, 20			; 00000014H
  0019c	e9 9d 00 00 00	 jmp	 $LN11@CheckSkill
$LN14@CheckSkill:

; 63   : 			}
; 64   : 			else if ( (lpObj->MaxLife + lpObj->AddLife) < lpObj->Life )

  001a1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001a4	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  001aa	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  001ad	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  001b3	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  001b6	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  001bc	de d9		 fcompp
  001be	df e0		 fnstsw	 ax
  001c0	f6 c4 41	 test	 ah, 65			; 00000041H
  001c3	75 4b		 jne	 SHORT $LN12@CheckSkill

; 65   : 			{
; 66   : 				lpObj->Life = lpObj->MaxLife + lpObj->AddLife;

  001c5	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001c8	db 80 4c 01 00
	00		 fild	 DWORD PTR [eax+332]
  001ce	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  001d1	d8 81 00 01 00
	00		 fadd	 DWORD PTR [ecx+256]
  001d7	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  001da	d9 9a fc 00 00
	00		 fstp	 DWORD PTR [edx+252]

; 67   : 				GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  001e0	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001e3	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  001e9	51		 push	 ecx
  001ea	6a 00		 push	 0
  001ec	68 ff 00 00 00	 push	 255			; 000000ffH
  001f1	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  001f4	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  001fa	e8 00 00 00 00	 call	 __ftol2_sse
  001ff	50		 push	 eax
  00200	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00203	8b 08		 mov	 ecx, DWORD PTR [eax]
  00205	51		 push	 ecx
  00206	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0020b	83 c4 14	 add	 esp, 20			; 00000014H

; 68   : 			}
; 69   : 			else

  0020e	eb 2e		 jmp	 SHORT $LN11@CheckSkill
$LN12@CheckSkill:

; 70   : 			{
; 71   : 				GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  00210	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00213	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00219	51		 push	 ecx
  0021a	6a 00		 push	 0
  0021c	68 ff 00 00 00	 push	 255			; 000000ffH
  00221	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00224	d9 82 fc 00 00
	00		 fld	 DWORD PTR [edx+252]
  0022a	e8 00 00 00 00	 call	 __ftol2_sse
  0022f	50		 push	 eax
  00230	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00233	8b 08		 mov	 ecx, DWORD PTR [eax]
  00235	51		 push	 ecx
  00236	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0023b	83 c4 14	 add	 esp, 20			; 00000014H
$LN11@CheckSkill:

; 72   : 			}
; 73   : 		}
; 74   : 	}
; 75   : 
; 76   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAutoMPTime() )

  0023e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00241	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00247	e8 00 00 00 00	 call	 ?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoMPTime
  0024c	85 c0		 test	 eax, eax
  0024e	74 20		 je	 SHORT $LN9@CheckSkill

; 77   : 	{
; 78   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAutoMPTime() )

  00250	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00253	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00259	e8 00 00 00 00	 call	 ?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAutoMPTime
  0025e	85 c0		 test	 eax, eax
  00260	74 0e		 je	 SHORT $LN9@CheckSkill

; 79   : 		{
; 80   : 			lpObj->m_MonsterSkillElementInfo.ResetAutoMP();

  00262	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00265	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  0026b	e8 00 00 00 00	 call	 ?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoMP
$LN9@CheckSkill:

; 81   : 		}
; 82   : 	}
; 83   : 
; 84   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAttackTime() )

  00270	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00273	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00279	e8 00 00 00 00	 call	 ?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAttackTime
  0027e	85 c0		 test	 eax, eax
  00280	74 20		 je	 SHORT $LN7@CheckSkill

; 85   : 	{
; 86   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAttackTime() )

  00282	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00285	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  0028b	e8 00 00 00 00	 call	 ?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAttackTime
  00290	85 c0		 test	 eax, eax
  00292	74 0e		 je	 SHORT $LN7@CheckSkill

; 87   : 		{
; 88   : 			lpObj->m_MonsterSkillElementInfo.ResetAttack();

  00294	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00297	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  0029d	e8 00 00 00 00	 call	 ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAttack
$LN7@CheckSkill:

; 89   : 		}
; 90   : 	}
; 91   : 
; 92   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckResistTime() )

  002a2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  002a5	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  002ab	e8 00 00 00 00	 call	 ?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckResistTime
  002b0	85 c0		 test	 eax, eax
  002b2	74 20		 je	 SHORT $LN5@CheckSkill

; 93   : 	{
; 94   : 		if ( lpObj->m_MonsterSkillElementInfo.DecResistTime() )

  002b4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  002b7	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  002bd	e8 00 00 00 00	 call	 ?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecResistTime
  002c2	85 c0		 test	 eax, eax
  002c4	74 0e		 je	 SHORT $LN5@CheckSkill

; 95   : 		{
; 96   : 			lpObj->m_MonsterSkillElementInfo.ResetResist();

  002c6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  002c9	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  002cf	e8 00 00 00 00	 call	 ?ResetResist@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetResist
$LN5@CheckSkill:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	if ( lpObj->m_MonsterSkillElementInfo.CheckModifyStatTime() )

  002d4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  002d7	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  002dd	e8 00 00 00 00	 call	 ?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckModifyStatTime
  002e2	85 c0		 test	 eax, eax
  002e4	74 20		 je	 SHORT $LN3@CheckSkill

; 101  : 	{
; 102  : 		if ( lpObj->m_MonsterSkillElementInfo.DecModifyStatTime() )

  002e6	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  002e9	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  002ef	e8 00 00 00 00	 call	 ?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecModifyStatTime
  002f4	85 c0		 test	 eax, eax
  002f6	74 0e		 je	 SHORT $LN3@CheckSkill

; 103  : 		{
; 104  : 			lpObj->m_MonsterSkillElementInfo.ResetModifyStat();

  002f8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  002fb	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00301	e8 00 00 00 00	 call	 ?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetModifyStat
$LN3@CheckSkill:

; 105  : 		}
; 106  : 	}
; 107  : 
; 108  : 	if ( lpObj->m_MonsterSkillElementInfo.CheckBerserkTime() )

  00306	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00309	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  0030f	e8 00 00 00 00	 call	 ?CheckBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckBerserkTime
  00314	85 c0		 test	 eax, eax
  00316	74 20		 je	 SHORT $LN1@CheckSkill

; 109  : 	{
; 110  : 		if ( lpObj->m_MonsterSkillElementInfo.DecBerserkTime() )

  00318	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0031b	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00321	e8 00 00 00 00	 call	 ?DecBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecBerserkTime
  00326	85 c0		 test	 eax, eax
  00328	74 0e		 je	 SHORT $LN1@CheckSkill

; 111  : 		{
; 112  : 			lpObj->m_MonsterSkillElementInfo.ResetBerserkTime();

  0032a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0032d	81 c1 20 1c 00
	00		 add	 ecx, 7200		; 00001c20H
  00333	e8 00 00 00 00	 call	 ?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetBerserkTime
$LN1@CheckSkill:

; 113  : 		}
; 114  : 	}
; 115  : }

  00338	5f		 pop	 edi
  00339	5e		 pop	 esi
  0033a	5b		 pop	 ebx
  0033b	8b e5		 mov	 esp, ebp
  0033d	5d		 pop	 ebp
  0033e	c3		 ret	 0
?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z ENDP ; TMonsterSkillElementInfo::CheckSkillElementInfoProc
_TEXT	ENDS
PUBLIC	?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetImmune
PUBLIC	?Reset@TMonsterSkillElementInfo@@QAEXXZ		; TMonsterSkillElementInfo::Reset
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@TMonsterSkillElementInfo@@QAEXXZ PROC		; TMonsterSkillElementInfo::Reset
; _this$ = ecx

; 119  : {

  00340	55		 push	 ebp
  00341	8b ec		 mov	 ebp, esp
  00343	83 ec 44	 sub	 esp, 68			; 00000044H
  00346	53		 push	 ebx
  00347	56		 push	 esi
  00348	57		 push	 edi
  00349	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 	this->ResetDefense();

  0034c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0034f	e8 00 00 00 00	 call	 ?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetDefense

; 121  : 	this->ResetAttack();

  00354	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00357	e8 00 00 00 00	 call	 ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAttack

; 122  : 	this->ResetAutoHP();

  0035c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035f	e8 00 00 00 00	 call	 ?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoHP

; 123  : 	this->ResetAutoMP();

  00364	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00367	e8 00 00 00 00	 call	 ?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoMP

; 124  : 	this->ResetAutoAG();

  0036c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0036f	e8 00 00 00 00	 call	 ?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoAG

; 125  : 	this->ResetImmune();

  00374	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00377	e8 00 00 00 00	 call	 ?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetImmune

; 126  : 	this->ResetResist();

  0037c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0037f	e8 00 00 00 00	 call	 ?ResetResist@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetResist

; 127  : 	this->ResetModifyStat();

  00384	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00387	e8 00 00 00 00	 call	 ?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetModifyStat

; 128  : 	this->ResetBerserkTime();

  0038c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0038f	e8 00 00 00 00	 call	 ?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetBerserkTime

; 129  : }

  00394	5f		 pop	 edi
  00395	5e		 pop	 esi
  00396	5b		 pop	 ebx
  00397	8b e5		 mov	 esp, ebp
  00399	5d		 pop	 ebp
  0039a	c3		 ret	 0
?Reset@TMonsterSkillElementInfo@@QAEXXZ ENDP		; TMonsterSkillElementInfo::Reset
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetDefense
; _this$ = ecx

; 132  : {

  003a0	55		 push	 ebp
  003a1	8b ec		 mov	 ebp, esp
  003a3	83 ec 44	 sub	 esp, 68			; 00000044H
  003a6	53		 push	 ebx
  003a7	56		 push	 esi
  003a8	57		 push	 edi
  003a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : 	this->m_iSkillElementDefense = 0;

  003ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003af	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 134  : 	this->m_iSkillElementDefenseTime = 0;

  003b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003b8	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 135  : }

  003bf	5f		 pop	 edi
  003c0	5e		 pop	 esi
  003c1	5b		 pop	 ebx
  003c2	8b e5		 mov	 esp, ebp
  003c4	5d		 pop	 ebp
  003c5	c3		 ret	 0
?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetDefense
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAttack
; _this$ = ecx

; 138  : {

  003d0	55		 push	 ebp
  003d1	8b ec		 mov	 ebp, esp
  003d3	83 ec 44	 sub	 esp, 68			; 00000044H
  003d6	53		 push	 ebx
  003d7	56		 push	 esi
  003d8	57		 push	 edi
  003d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 139  : 	this->m_iSkillElementAttack = 0;

  003dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003df	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 140  : 	this->m_iSkillElementAttackTime = 0;

  003e6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e9	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 141  : }

  003f0	5f		 pop	 edi
  003f1	5e		 pop	 esi
  003f2	5b		 pop	 ebx
  003f3	8b e5		 mov	 esp, ebp
  003f5	5d		 pop	 ebp
  003f6	c3		 ret	 0
?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAttack
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAutoHP
; _this$ = ecx

; 144  : {

  00400	55		 push	 ebp
  00401	8b ec		 mov	 ebp, esp
  00403	83 ec 44	 sub	 esp, 68			; 00000044H
  00406	53		 push	 ebx
  00407	56		 push	 esi
  00408	57		 push	 edi
  00409	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 145  : 	this->m_iSkillElementAutoHP = 0;

  0040c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0040f	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 146  : 	this->m_iSkillElementAutoHPCycle = 0;

  00416	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00419	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 147  : 	this->m_iSkillElementAutoHPTime = 0;

  00420	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00423	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 148  : }

  0042a	5f		 pop	 edi
  0042b	5e		 pop	 esi
  0042c	5b		 pop	 ebx
  0042d	8b e5		 mov	 esp, ebp
  0042f	5d		 pop	 ebp
  00430	c3		 ret	 0
?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAutoHP
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAutoMP
; _this$ = ecx

; 151  : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	83 ec 44	 sub	 esp, 68			; 00000044H
  00446	53		 push	 ebx
  00447	56		 push	 esi
  00448	57		 push	 edi
  00449	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 152  : 	this->m_iSkillElementAutoMP = 0;

  0044c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0044f	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 153  : 	this->m_iSkillElementAutoMPCycle = 0;

  00456	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00459	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 154  : 	this->m_iSkillElementAutoMPTime = 0;

  00460	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00463	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 155  : }

  0046a	5f		 pop	 edi
  0046b	5e		 pop	 esi
  0046c	5b		 pop	 ebx
  0046d	8b e5		 mov	 esp, ebp
  0046f	5d		 pop	 ebp
  00470	c3		 ret	 0
?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAutoMP
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAutoAG
; _this$ = ecx

; 158  : {

  00480	55		 push	 ebp
  00481	8b ec		 mov	 ebp, esp
  00483	83 ec 44	 sub	 esp, 68			; 00000044H
  00486	53		 push	 ebx
  00487	56		 push	 esi
  00488	57		 push	 edi
  00489	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 159  : 	this->m_iSkillElementAutoAG = 0;

  0048c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0048f	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 160  : 	this->m_iSkillElementAutoAGCycle = 0;

  00496	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00499	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 161  : 	this->m_iSkillElementAutoAGTime = 0;

  004a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004a3	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 162  : }

  004aa	5f		 pop	 edi
  004ab	5e		 pop	 esi
  004ac	5b		 pop	 ebx
  004ad	8b e5		 mov	 esp, ebp
  004af	5d		 pop	 ebp
  004b0	c3		 ret	 0
?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAutoAG
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetImmune
; _this$ = ecx

; 165  : {

  004c0	55		 push	 ebp
  004c1	8b ec		 mov	 ebp, esp
  004c3	83 ec 44	 sub	 esp, 68			; 00000044H
  004c6	53		 push	 ebx
  004c7	56		 push	 esi
  004c8	57		 push	 edi
  004c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 	this->m_iSkillElementImmuneNumber = 0;

  004cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004cf	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 167  : 	this->m_iSkillElementImmuneTime = 0;

  004d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004d9	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 168  : }

  004e0	5f		 pop	 edi
  004e1	5e		 pop	 esi
  004e2	5b		 pop	 ebx
  004e3	8b e5		 mov	 esp, ebp
  004e5	5d		 pop	 ebp
  004e6	c3		 ret	 0
?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetImmune
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ResetResist@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetResist
; _this$ = ecx

; 171  : {

  004f0	55		 push	 ebp
  004f1	8b ec		 mov	 ebp, esp
  004f3	83 ec 44	 sub	 esp, 68			; 00000044H
  004f6	53		 push	 ebx
  004f7	56		 push	 esi
  004f8	57		 push	 edi
  004f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 172  : 	this->m_iSkillElementResistNumber = 0;

  004fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004ff	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 173  : 	this->m_iSkillElementResistTime = 0;

  00506	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00509	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 174  : }

  00510	5f		 pop	 edi
  00511	5e		 pop	 esi
  00512	5b		 pop	 ebx
  00513	8b e5		 mov	 esp, ebp
  00515	5d		 pop	 ebp
  00516	c3		 ret	 0
?ResetResist@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetResist
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetModifyStat
; _this$ = ecx

; 177  : {

  00520	55		 push	 ebp
  00521	8b ec		 mov	 ebp, esp
  00523	83 ec 44	 sub	 esp, 68			; 00000044H
  00526	53		 push	 ebx
  00527	56		 push	 esi
  00528	57		 push	 edi
  00529	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 178  : 	this->m_iSkillElementModifyStat = 0;

  0052c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0052f	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 179  : 	this->m_iSkillElementModifyStatType = 0;

  00536	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00539	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 180  : 	this->m_iSkillElementModifyStatTime = 0;

  00540	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00543	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0

; 181  : }

  0054a	5f		 pop	 edi
  0054b	5e		 pop	 esi
  0054c	5b		 pop	 ebx
  0054d	8b e5		 mov	 esp, ebp
  0054f	5d		 pop	 ebp
  00550	c3		 ret	 0
?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetModifyStat
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetBerserkTime
; _this$ = ecx

; 185  : {

  00560	55		 push	 ebp
  00561	8b ec		 mov	 ebp, esp
  00563	83 ec 44	 sub	 esp, 68			; 00000044H
  00566	53		 push	 ebx
  00567	56		 push	 esi
  00568	57		 push	 edi
  00569	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 186  : 	this->m_iSkillElementBerserkTime = 0;

  0056c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0056f	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 187  : }

  00576	5f		 pop	 edi
  00577	5e		 pop	 esi
  00578	5b		 pop	 ebx
  00579	8b e5		 mov	 esp, ebp
  0057b	5d		 pop	 ebp
  0057c	c3		 ret	 0
?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetBerserkTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckDefenseTime
; _this$ = ecx

; 191  : {

  00580	55		 push	 ebp
  00581	8b ec		 mov	 ebp, esp
  00583	83 ec 44	 sub	 esp, 68			; 00000044H
  00586	53		 push	 ebx
  00587	56		 push	 esi
  00588	57		 push	 edi
  00589	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 192  : 	return (this->m_iSkillElementDefense <= 0)?FALSE:TRUE;

  0058c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0058f	33 c9		 xor	 ecx, ecx
  00591	83 38 00	 cmp	 DWORD PTR [eax], 0
  00594	0f 9f c1	 setg	 cl
  00597	8b c1		 mov	 eax, ecx

; 193  : }

  00599	5f		 pop	 edi
  0059a	5e		 pop	 esi
  0059b	5b		 pop	 ebx
  0059c	8b e5		 mov	 esp, ebp
  0059e	5d		 pop	 ebp
  0059f	c3		 ret	 0
?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckDefenseTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAttackTime
; _this$ = ecx

; 196  : {

  005a0	55		 push	 ebp
  005a1	8b ec		 mov	 ebp, esp
  005a3	83 ec 44	 sub	 esp, 68			; 00000044H
  005a6	53		 push	 ebx
  005a7	56		 push	 esi
  005a8	57		 push	 edi
  005a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 	return (this->m_iSkillElementAttack <= 0)?FALSE:TRUE;

  005ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005af	33 c9		 xor	 ecx, ecx
  005b1	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  005b5	0f 9f c1	 setg	 cl
  005b8	8b c1		 mov	 eax, ecx

; 198  : }

  005ba	5f		 pop	 edi
  005bb	5e		 pop	 esi
  005bc	5b		 pop	 ebx
  005bd	8b e5		 mov	 esp, ebp
  005bf	5d		 pop	 ebp
  005c0	c3		 ret	 0
?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAttackTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAutoHPTime
; _this$ = ecx

; 201  : {

  005d0	55		 push	 ebp
  005d1	8b ec		 mov	 ebp, esp
  005d3	83 ec 44	 sub	 esp, 68			; 00000044H
  005d6	53		 push	 ebx
  005d7	56		 push	 esi
  005d8	57		 push	 edi
  005d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 	return (this->m_iSkillElementAutoHPTime <= 0)?FALSE:TRUE;

  005dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005df	33 c9		 xor	 ecx, ecx
  005e1	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  005e5	0f 9f c1	 setg	 cl
  005e8	8b c1		 mov	 eax, ecx

; 203  : }

  005ea	5f		 pop	 edi
  005eb	5e		 pop	 esi
  005ec	5b		 pop	 ebx
  005ed	8b e5		 mov	 esp, ebp
  005ef	5d		 pop	 ebp
  005f0	c3		 ret	 0
?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAutoHPTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAutoMPTime
; _this$ = ecx

; 206  : {

  00600	55		 push	 ebp
  00601	8b ec		 mov	 ebp, esp
  00603	83 ec 44	 sub	 esp, 68			; 00000044H
  00606	53		 push	 ebx
  00607	56		 push	 esi
  00608	57		 push	 edi
  00609	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 	return (this->m_iSkillElementAutoMPTime <= 0)?FALSE:TRUE;

  0060c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0060f	33 c9		 xor	 ecx, ecx
  00611	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00615	0f 9f c1	 setg	 cl
  00618	8b c1		 mov	 eax, ecx

; 208  : }

  0061a	5f		 pop	 edi
  0061b	5e		 pop	 esi
  0061c	5b		 pop	 ebx
  0061d	8b e5		 mov	 esp, ebp
  0061f	5d		 pop	 ebp
  00620	c3		 ret	 0
?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAutoMPTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAutoAGTime
; _this$ = ecx

; 211  : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp
  00633	83 ec 44	 sub	 esp, 68			; 00000044H
  00636	53		 push	 ebx
  00637	56		 push	 esi
  00638	57		 push	 edi
  00639	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 212  : 	return (this->m_iSkillElementAutoAGTime <= 0)?FALSE:TRUE;

  0063c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0063f	33 c9		 xor	 ecx, ecx
  00641	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00645	0f 9f c1	 setg	 cl
  00648	8b c1		 mov	 eax, ecx

; 213  : }

  0064a	5f		 pop	 edi
  0064b	5e		 pop	 esi
  0064c	5b		 pop	 ebx
  0064d	8b e5		 mov	 esp, ebp
  0064f	5d		 pop	 ebp
  00650	c3		 ret	 0
?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAutoAGTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckResistTime
; _this$ = ecx

; 216  : {

  00660	55		 push	 ebp
  00661	8b ec		 mov	 ebp, esp
  00663	83 ec 44	 sub	 esp, 68			; 00000044H
  00666	53		 push	 ebx
  00667	56		 push	 esi
  00668	57		 push	 edi
  00669	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 	return (this->m_iSkillElementResistTime <= 0)?FALSE:TRUE;

  0066c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0066f	33 c9		 xor	 ecx, ecx
  00671	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00675	0f 9f c1	 setg	 cl
  00678	8b c1		 mov	 eax, ecx

; 218  : }

  0067a	5f		 pop	 edi
  0067b	5e		 pop	 esi
  0067c	5b		 pop	 ebx
  0067d	8b e5		 mov	 esp, ebp
  0067f	5d		 pop	 ebp
  00680	c3		 ret	 0
?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckResistTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ PROC ; TMonsterSkillElementInfo::CheckModifyStatTime
; _this$ = ecx

; 221  : {

  00690	55		 push	 ebp
  00691	8b ec		 mov	 ebp, esp
  00693	83 ec 44	 sub	 esp, 68			; 00000044H
  00696	53		 push	 ebx
  00697	56		 push	 esi
  00698	57		 push	 edi
  00699	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 222  : 	return (this->m_iSkillElementModifyStatTime <= 0)?FALSE:TRUE;

  0069c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0069f	33 c9		 xor	 ecx, ecx
  006a1	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  006a5	0f 9f c1	 setg	 cl
  006a8	8b c1		 mov	 eax, ecx

; 223  : }

  006aa	5f		 pop	 edi
  006ab	5e		 pop	 esi
  006ac	5b		 pop	 ebx
  006ad	8b e5		 mov	 esp, ebp
  006af	5d		 pop	 ebp
  006b0	c3		 ret	 0
?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ENDP ; TMonsterSkillElementInfo::CheckModifyStatTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?CheckBerserkTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckBerserkTime
; _this$ = ecx

; 228  : {

  006c0	55		 push	 ebp
  006c1	8b ec		 mov	 ebp, esp
  006c3	83 ec 44	 sub	 esp, 68			; 00000044H
  006c6	53		 push	 ebx
  006c7	56		 push	 esi
  006c8	57		 push	 edi
  006c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	return (this->m_iSkillElementBerserkTime <= 0)?FALSE:TRUE;

  006cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006cf	33 c9		 xor	 ecx, ecx
  006d1	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  006d5	0f 9f c1	 setg	 cl
  006d8	8b c1		 mov	 eax, ecx

; 230  : }

  006da	5f		 pop	 edi
  006db	5e		 pop	 esi
  006dc	5b		 pop	 ebx
  006dd	8b e5		 mov	 esp, ebp
  006df	5d		 pop	 ebp
  006e0	c3		 ret	 0
?CheckBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckBerserkTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecDefenseTime
; _this$ = ecx

; 234  : {

  006f0	55		 push	 ebp
  006f1	8b ec		 mov	 ebp, esp
  006f3	83 ec 44	 sub	 esp, 68			; 00000044H
  006f6	53		 push	 ebx
  006f7	56		 push	 esi
  006f8	57		 push	 edi
  006f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 	this->m_iSkillElementDefense--;

  006fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00701	83 e9 01	 sub	 ecx, 1
  00704	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00707	89 0a		 mov	 DWORD PTR [edx], ecx

; 236  : 	return (this->m_iSkillElementDefense > 0)?FALSE:TRUE;

  00709	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0070c	33 c9		 xor	 ecx, ecx
  0070e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00711	0f 9e c1	 setle	 cl
  00714	8b c1		 mov	 eax, ecx

; 237  : }

  00716	5f		 pop	 edi
  00717	5e		 pop	 esi
  00718	5b		 pop	 ebx
  00719	8b e5		 mov	 esp, ebp
  0071b	5d		 pop	 ebp
  0071c	c3		 ret	 0
?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecDefenseTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAttackTime
; _this$ = ecx

; 240  : {

  00720	55		 push	 ebp
  00721	8b ec		 mov	 ebp, esp
  00723	83 ec 44	 sub	 esp, 68			; 00000044H
  00726	53		 push	 ebx
  00727	56		 push	 esi
  00728	57		 push	 edi
  00729	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  : 	this->m_iSkillElementAttack--;

  0072c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0072f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00732	83 e9 01	 sub	 ecx, 1
  00735	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00738	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 242  : 	return (this->m_iSkillElementAttack > 0)?FALSE:TRUE;

  0073b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0073e	33 c9		 xor	 ecx, ecx
  00740	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00744	0f 9e c1	 setle	 cl
  00747	8b c1		 mov	 eax, ecx

; 243  : }

  00749	5f		 pop	 edi
  0074a	5e		 pop	 esi
  0074b	5b		 pop	 ebx
  0074c	8b e5		 mov	 esp, ebp
  0074e	5d		 pop	 ebp
  0074f	c3		 ret	 0
?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAttackTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAutoHPTime
; _this$ = ecx

; 246  : {

  00750	55		 push	 ebp
  00751	8b ec		 mov	 ebp, esp
  00753	83 ec 44	 sub	 esp, 68			; 00000044H
  00756	53		 push	 ebx
  00757	56		 push	 esi
  00758	57		 push	 edi
  00759	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 	this->m_iSkillElementAutoHPTime--;

  0075c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0075f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00762	83 e9 01	 sub	 ecx, 1
  00765	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00768	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 248  : 	return (this->m_iSkillElementAutoHPTime > 0)?FALSE:TRUE;

  0076b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0076e	33 c9		 xor	 ecx, ecx
  00770	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00774	0f 9e c1	 setle	 cl
  00777	8b c1		 mov	 eax, ecx

; 249  : }

  00779	5f		 pop	 edi
  0077a	5e		 pop	 esi
  0077b	5b		 pop	 ebx
  0077c	8b e5		 mov	 esp, ebp
  0077e	5d		 pop	 ebp
  0077f	c3		 ret	 0
?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAutoHPTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAutoMPTime
; _this$ = ecx

; 252  : {

  00780	55		 push	 ebp
  00781	8b ec		 mov	 ebp, esp
  00783	83 ec 44	 sub	 esp, 68			; 00000044H
  00786	53		 push	 ebx
  00787	56		 push	 esi
  00788	57		 push	 edi
  00789	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	this->m_iSkillElementAutoMPTime--;

  0078c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0078f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00792	83 e9 01	 sub	 ecx, 1
  00795	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00798	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 254  : 	return (this->m_iSkillElementAutoMPTime > 0)?FALSE:TRUE;

  0079b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0079e	33 c9		 xor	 ecx, ecx
  007a0	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  007a4	0f 9e c1	 setle	 cl
  007a7	8b c1		 mov	 eax, ecx

; 255  : }

  007a9	5f		 pop	 edi
  007aa	5e		 pop	 esi
  007ab	5b		 pop	 ebx
  007ac	8b e5		 mov	 esp, ebp
  007ae	5d		 pop	 ebp
  007af	c3		 ret	 0
?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAutoMPTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAutoAGTime
; _this$ = ecx

; 258  : {

  007b0	55		 push	 ebp
  007b1	8b ec		 mov	 ebp, esp
  007b3	83 ec 44	 sub	 esp, 68			; 00000044H
  007b6	53		 push	 ebx
  007b7	56		 push	 esi
  007b8	57		 push	 edi
  007b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 259  : 	this->m_iSkillElementAutoAGTime--;

  007bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007bf	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  007c2	83 e9 01	 sub	 ecx, 1
  007c5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007c8	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 260  : 	return (this->m_iSkillElementAutoAGTime > 0)?FALSE:TRUE;

  007cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007ce	33 c9		 xor	 ecx, ecx
  007d0	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  007d4	0f 9e c1	 setle	 cl
  007d7	8b c1		 mov	 eax, ecx

; 261  : }

  007d9	5f		 pop	 edi
  007da	5e		 pop	 esi
  007db	5b		 pop	 ebx
  007dc	8b e5		 mov	 esp, ebp
  007de	5d		 pop	 ebp
  007df	c3		 ret	 0
?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAutoAGTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecResistTime
; _this$ = ecx

; 264  : {

  007e0	55		 push	 ebp
  007e1	8b ec		 mov	 ebp, esp
  007e3	83 ec 44	 sub	 esp, 68			; 00000044H
  007e6	53		 push	 ebx
  007e7	56		 push	 esi
  007e8	57		 push	 edi
  007e9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 265  : 	this->m_iSkillElementResistTime--;

  007ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007ef	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  007f2	83 e9 01	 sub	 ecx, 1
  007f5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007f8	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 266  : 	return (this->m_iSkillElementResistTime > 0)?FALSE:TRUE;

  007fb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007fe	33 c9		 xor	 ecx, ecx
  00800	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00804	0f 9e c1	 setle	 cl
  00807	8b c1		 mov	 eax, ecx

; 267  : }

  00809	5f		 pop	 edi
  0080a	5e		 pop	 esi
  0080b	5b		 pop	 ebx
  0080c	8b e5		 mov	 esp, ebp
  0080e	5d		 pop	 ebp
  0080f	c3		 ret	 0
?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecResistTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ PROC ; TMonsterSkillElementInfo::DecModifyStatTime
; _this$ = ecx

; 270  : {

  00810	55		 push	 ebp
  00811	8b ec		 mov	 ebp, esp
  00813	83 ec 44	 sub	 esp, 68			; 00000044H
  00816	53		 push	 ebx
  00817	56		 push	 esi
  00818	57		 push	 edi
  00819	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  : 	this->m_iSkillElementModifyStatTime--;

  0081c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0081f	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00822	83 e9 01	 sub	 ecx, 1
  00825	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00828	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 272  : 	return (this->m_iSkillElementModifyStatTime > 0)?FALSE:TRUE;

  0082b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0082e	33 c9		 xor	 ecx, ecx
  00830	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00834	0f 9e c1	 setle	 cl
  00837	8b c1		 mov	 eax, ecx

; 273  : }

  00839	5f		 pop	 edi
  0083a	5e		 pop	 esi
  0083b	5b		 pop	 ebx
  0083c	8b e5		 mov	 esp, ebp
  0083e	5d		 pop	 ebp
  0083f	c3		 ret	 0
?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ENDP ; TMonsterSkillElementInfo::DecModifyStatTime
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
?DecBerserkTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecBerserkTime
; _this$ = ecx

; 277  : {

  00840	55		 push	 ebp
  00841	8b ec		 mov	 ebp, esp
  00843	83 ec 44	 sub	 esp, 68			; 00000044H
  00846	53		 push	 ebx
  00847	56		 push	 esi
  00848	57		 push	 edi
  00849	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 278  : 	this->m_iSkillElementBerserkTime--;

  0084c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0084f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00852	83 e9 01	 sub	 ecx, 1
  00855	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00858	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 279  : 	return (this->m_iSkillElementBerserkTime > 0)?FALSE:TRUE;

  0085b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0085e	33 c9		 xor	 ecx, ecx
  00860	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00864	0f 9e c1	 setle	 cl
  00867	8b c1		 mov	 eax, ecx

; 280  : }

  00869	5f		 pop	 edi
  0086a	5e		 pop	 esi
  0086b	5b		 pop	 ebx
  0086c	8b e5		 mov	 esp, ebp
  0086e	5d		 pop	 ebp
  0086f	c3		 ret	 0
?DecBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecBerserkTime
_TEXT	ENDS
END
