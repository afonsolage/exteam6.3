; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\ChaosCastleRewardItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gChaosCastleRewardItem@@3VCChaosCastleRewardItem@@A ; gChaosCastleRewardItem
_BSS	SEGMENT
?gChaosCastleRewardItem@@3VCChaosCastleRewardItem@@A DB 0af20H DUP (?) ; gChaosCastleRewardItem
_BSS	ENDS
_DATA	SEGMENT
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	0fH
	DD	0257H
	DD	0aH
	DD	0257H
_g_sttCHAOSCASTLE_LEVEL DD 0fH
	DD	031H
	DD	0fH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
	DD	0190H
	DD	0257H
	DD	0190H
	DD	0257H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	04H
_g_iChaosCastle_MonsterItemsNewServer DD 00H
	DD	00H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	02H
	DD	01c0eH
	DD	03H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_06MLPMCPDE@ExTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CJ@CFIFHFCO@?4?4?2Data?2ExData?2ChaosCastleReward@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@CChaosCastleRewardItem@@QAEXXZ		; CChaosCastleRewardItem::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Ex_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Ex_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\chaoscastlerewarditem.cpp
CONST	SEGMENT
??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB ' '
	DB	'%d %d %d %d %d %d %d %d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLPMCPDE@ExTeam?$AA@
CONST	SEGMENT
??_C@_06MLPMCPDE@ExTeam?$AA@ DB 'ExTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CFIFHFCO@?4?4?2Data?2ExData?2ChaosCastleReward@
CONST	SEGMENT
??_C@_0CJ@CFIFHFCO@?4?4?2Data?2ExData?2ChaosCastleReward@ DB '..\Data\ExD'
	DB	'ata\ChaosCastleRewardItem.ini', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_n$222913 = -320					; size = 32
_j$222908 = -288					; size = 4
_j$222900 = -284					; size = 4
_Flag$ = -280						; size = 4
_Buff$ = -276						; size = 256
_file$ = -20						; size = 4
_i$222891 = -16						; size = 4
_j$222887 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Load@CChaosCastleRewardItem@@QAEXXZ PROC		; CChaosCastleRewardItem::Load
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : 	if(!g_ExLicense.CheckUser(Local) && 
; 13   : 	   !g_ExLicense.CheckUser(MedoniAndrei))

  00019	6a 00		 push	 0
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00020	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00025	0f b6 c0	 movzx	 eax, al
  00028	85 c0		 test	 eax, eax
  0002a	75 21		 jne	 SHORT $LN19@Load
  0002c	6a 32		 push	 50			; 00000032H
  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00033	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00038	0f b6 c0	 movzx	 eax, al
  0003b	85 c0		 test	 eax, eax
  0003d	75 0e		 jne	 SHORT $LN19@Load

; 14   : 	{
; 15   : 		this->Enable = 0;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 16   : 		return;

  00048	e9 61 04 00 00	 jmp	 $LN20@Load
$LN19@Load:

; 17   : 	}
; 18   : 
; 19   : 	this->Enable = GetPrivateProfileInt("ExTeam","Enable",0,CC_REWARD_ITEM_DIR);

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CFIFHFCO@?4?4?2Data?2ExData?2ChaosCastleReward@
  00052	6a 00		 push	 0
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_06MLPMCPDE@ExTeam?$AA@
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	89 01		 mov	 DWORD PTR [ecx], eax

; 20   : 
; 21   : 	for (int j = 0; j < MAX_CHAOSCASTLE_LEVEL; j++)

  00069	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$222887[ebp], 0
  00070	eb 09		 jmp	 SHORT $LN18@Load
$LN17@Load:
  00072	8b 45 f4	 mov	 eax, DWORD PTR _j$222887[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 f4	 mov	 DWORD PTR _j$222887[ebp], eax
$LN18@Load:
  0007b	83 7d f4 07	 cmp	 DWORD PTR _j$222887[ebp], 7
  0007f	0f 8d 18 01 00
	00		 jge	 $LN16@Load

; 22   : 	{
; 23   : 		for(int i=0;i<MAX_CC_REWARD_ITEM;i++)

  00085	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$222891[ebp], 0
  0008c	eb 09		 jmp	 SHORT $LN15@Load
$LN14@Load:
  0008e	8b 45 f0	 mov	 eax, DWORD PTR _i$222891[ebp]
  00091	83 c0 01	 add	 eax, 1
  00094	89 45 f0	 mov	 DWORD PTR _i$222891[ebp], eax
$LN15@Load:
  00097	81 7d f0 c8 00
	00 00		 cmp	 DWORD PTR _i$222891[ebp], 200 ; 000000c8H
  0009e	0f 8d f4 00 00
	00		 jge	 $LN13@Load

; 24   : 		{
; 25   : 			this->Reward[i][j].Type		= 0;

  000a4	8b 45 f0	 mov	 eax, DWORD PTR _i$222891[ebp]
  000a7	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000b4	8b 45 f4	 mov	 eax, DWORD PTR _j$222887[ebp]
  000b7	c1 e0 05	 shl	 eax, 5
  000ba	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], 0

; 26   : 			this->Reward[i][j].Index	= 0;

  000c1	8b 45 f0	 mov	 eax, DWORD PTR _i$222891[ebp]
  000c4	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  000ca	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000d1	8b 45 f4	 mov	 eax, DWORD PTR _j$222887[ebp]
  000d4	c1 e0 05	 shl	 eax, 5
  000d7	c7 44 02 04 00
	00 00 00	 mov	 DWORD PTR [edx+eax+4], 0

; 27   : 			this->Reward[i][j].Level	= 0;

  000df	8b 45 f0	 mov	 eax, DWORD PTR _i$222891[ebp]
  000e2	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  000e8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000ef	8b 45 f4	 mov	 eax, DWORD PTR _j$222887[ebp]
  000f2	c1 e0 05	 shl	 eax, 5
  000f5	c7 44 02 08 00
	00 00 00	 mov	 DWORD PTR [edx+eax+8], 0

; 28   : 			this->Reward[i][j].Skill	= 0;

  000fd	8b 45 f0	 mov	 eax, DWORD PTR _i$222891[ebp]
  00100	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  00106	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0010d	8b 45 f4	 mov	 eax, DWORD PTR _j$222887[ebp]
  00110	c1 e0 05	 shl	 eax, 5
  00113	c7 44 02 0c 00
	00 00 00	 mov	 DWORD PTR [edx+eax+12], 0

; 29   : 			this->Reward[i][j].Luck		= 0;

  0011b	8b 45 f0	 mov	 eax, DWORD PTR _i$222891[ebp]
  0011e	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  00124	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0012b	8b 45 f4	 mov	 eax, DWORD PTR _j$222887[ebp]
  0012e	c1 e0 05	 shl	 eax, 5
  00131	c7 44 02 10 00
	00 00 00	 mov	 DWORD PTR [edx+eax+16], 0

; 30   : 			this->Reward[i][j].Opt		= 0;

  00139	8b 45 f0	 mov	 eax, DWORD PTR _i$222891[ebp]
  0013c	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  00142	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00149	8b 45 f4	 mov	 eax, DWORD PTR _j$222887[ebp]
  0014c	c1 e0 05	 shl	 eax, 5
  0014f	c7 44 02 14 00
	00 00 00	 mov	 DWORD PTR [edx+eax+20], 0

; 31   : 			this->Reward[i][j].Exl		= 0;

  00157	8b 45 f0	 mov	 eax, DWORD PTR _i$222891[ebp]
  0015a	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  00160	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00163	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00167	8b 45 f4	 mov	 eax, DWORD PTR _j$222887[ebp]
  0016a	c1 e0 05	 shl	 eax, 5
  0016d	c7 44 02 18 00
	00 00 00	 mov	 DWORD PTR [edx+eax+24], 0

; 32   : 			this->Reward[i][j].Anc		= 0;

  00175	8b 45 f0	 mov	 eax, DWORD PTR _i$222891[ebp]
  00178	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  0017e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00181	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00185	8b 45 f4	 mov	 eax, DWORD PTR _j$222887[ebp]
  00188	c1 e0 05	 shl	 eax, 5
  0018b	c7 44 02 1c 00
	00 00 00	 mov	 DWORD PTR [edx+eax+28], 0

; 33   : 		}

  00193	e9 f6 fe ff ff	 jmp	 $LN14@Load
$LN13@Load:

; 34   : 	}

  00198	e9 d5 fe ff ff	 jmp	 $LN17@Load
$LN16@Load:

; 35   : 
; 36   : 	FILE *file = fopen(CC_REWARD_ITEM_DIR,"r");

  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CFIFHFCO@?4?4?2Data?2ExData?2ChaosCastleReward@
  001a7	e8 00 00 00 00	 call	 _fopen
  001ac	83 c4 08	 add	 esp, 8
  001af	89 45 ec	 mov	 DWORD PTR _file$[ebp], eax

; 37   : 
; 38   : 	if(file == NULL)

  001b2	83 7d ec 00	 cmp	 DWORD PTR _file$[ebp], 0
  001b6	75 0e		 jne	 SHORT $LN12@Load

; 39   : 	{
; 40   : 		this->Enable = 0;

  001b8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001bb	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 41   : 		return;

  001c1	e9 e8 02 00 00	 jmp	 $LN20@Load
$LN12@Load:

; 42   : 	}
; 43   : 
; 44   : 	char Buff[256];
; 45   : 	int Flag = 0;

  001c6	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Flag$[ebp], 0

; 46   : 
; 47   : 	for (int j = 0; j < MAX_CHAOSCASTLE_LEVEL; j++)

  001d0	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$222900[ebp], 0
  001da	eb 0f		 jmp	 SHORT $LN11@Load
$LN10@Load:
  001dc	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _j$222900[ebp]
  001e2	83 c0 01	 add	 eax, 1
  001e5	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _j$222900[ebp], eax
$LN11@Load:
  001eb	83 bd e4 fe ff
	ff 07		 cmp	 DWORD PTR _j$222900[ebp], 7
  001f2	7d 16		 jge	 SHORT $LN8@Load

; 48   : 	{
; 49   : 		this->Count[j] = 0;

  001f4	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _j$222900[ebp]
  001fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001fd	c7 84 81 04 af
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+44804], 0

; 50   : 	}

  00208	eb d2		 jmp	 SHORT $LN10@Load
$LN8@Load:

; 51   : 	
; 52   : 	while(!feof(file))

  0020a	8b 45 ec	 mov	 eax, DWORD PTR _file$[ebp]
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 _feof
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 85 84 02 00
	00		 jne	 $LN7@Load

; 53   : 	{
; 54   : 		fgets(Buff,256,file);	

  0021e	8b 45 ec	 mov	 eax, DWORD PTR _file$[ebp]
  00221	50		 push	 eax
  00222	68 00 01 00 00	 push	 256			; 00000100H
  00227	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0022d	51		 push	 ecx
  0022e	e8 00 00 00 00	 call	 _fgets
  00233	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   : 		if(Ex_IsBadFileLine(Buff, Flag))	

  00236	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _Flag$[ebp]
  0023c	50		 push	 eax
  0023d	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00243	51		 push	 ecx
  00244	e8 00 00 00 00	 call	 ?Ex_IsBadFileLine@@YA_NPADAAH@Z ; Ex_IsBadFileLine
  00249	83 c4 08	 add	 esp, 8
  0024c	0f b6 d0	 movzx	 edx, al
  0024f	85 d2		 test	 edx, edx
  00251	74 02		 je	 SHORT $LN6@Load

; 57   : 			continue;

  00253	eb b5		 jmp	 SHORT $LN8@Load
$LN6@Load:

; 58   : 
; 59   : 		for(int j = 0; j < MAX_CHAOSCASTLE_LEVEL; j++)

  00255	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$222908[ebp], 0
  0025f	eb 0f		 jmp	 SHORT $LN5@Load
$LN4@Load:
  00261	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00267	83 c0 01	 add	 eax, 1
  0026a	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _j$222908[ebp], eax
$LN5@Load:
  00270	83 bd e0 fe ff
	ff 07		 cmp	 DWORD PTR _j$222908[ebp], 7
  00277	0f 8d 20 02 00
	00		 jge	 $LN3@Load

; 60   : 		{
; 61   : 			if(Flag == (j+1))

  0027d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00283	83 c0 01	 add	 eax, 1
  00286	39 85 e8 fe ff
	ff		 cmp	 DWORD PTR _Flag$[ebp], eax
  0028c	0f 85 06 02 00
	00		 jne	 $LN2@Load

; 62   : 			{
; 63   : 				int n[8];
; 64   : 
; 65   : 				sscanf(Buff," %d %d %d %d %d %d %d %d %d",&n[0],&n[1],&n[2],&n[3],&n[4],&n[5],&n[6],&n[7]);

  00292	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _n$222913[ebp+28]
  00298	50		 push	 eax
  00299	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$222913[ebp+24]
  0029f	51		 push	 ecx
  002a0	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _n$222913[ebp+20]
  002a6	52		 push	 edx
  002a7	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _n$222913[ebp+16]
  002ad	50		 push	 eax
  002ae	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _n$222913[ebp+12]
  002b4	51		 push	 ecx
  002b5	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _n$222913[ebp+8]
  002bb	52		 push	 edx
  002bc	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _n$222913[ebp+4]
  002c2	50		 push	 eax
  002c3	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$222913[ebp]
  002c9	51		 push	 ecx
  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EFDCNEL@?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  002cf	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  002d5	52		 push	 edx
  002d6	e8 00 00 00 00	 call	 _sscanf
  002db	83 c4 28	 add	 esp, 40			; 00000028H

; 66   : 
; 67   : 				this->Reward[this->Count[j]][j].Type	= n[0];

  002de	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  002e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e7	8b 94 81 04 af
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+44804]
  002ee	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  002f4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002f7	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  002fb	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$222908[ebp]
  00301	c1 e2 05	 shl	 edx, 5
  00304	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _n$222913[ebp]
  0030a	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 68   : 				this->Reward[this->Count[j]][j].Index	= n[1];

  0030d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00313	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00316	8b 94 81 04 af
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+44804]
  0031d	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  00323	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00326	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0032a	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$222908[ebp]
  00330	c1 e2 05	 shl	 edx, 5
  00333	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _n$222913[ebp+4]
  00339	89 44 11 04	 mov	 DWORD PTR [ecx+edx+4], eax

; 69   : 				this->Reward[this->Count[j]][j].Level	= n[2];

  0033d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00343	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00346	8b 94 81 04 af
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+44804]
  0034d	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  00353	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00356	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0035a	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$222908[ebp]
  00360	c1 e2 05	 shl	 edx, 5
  00363	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _n$222913[ebp+8]
  00369	89 44 11 08	 mov	 DWORD PTR [ecx+edx+8], eax

; 70   : 				this->Reward[this->Count[j]][j].Skill	= n[3];

  0036d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00373	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00376	8b 94 81 04 af
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+44804]
  0037d	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  00383	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00386	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0038a	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$222908[ebp]
  00390	c1 e2 05	 shl	 edx, 5
  00393	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _n$222913[ebp+12]
  00399	89 44 11 0c	 mov	 DWORD PTR [ecx+edx+12], eax

; 71   : 				this->Reward[this->Count[j]][j].Luck	= n[4];

  0039d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  003a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003a6	8b 94 81 04 af
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+44804]
  003ad	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  003b3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003b6	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  003ba	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$222908[ebp]
  003c0	c1 e2 05	 shl	 edx, 5
  003c3	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _n$222913[ebp+16]
  003c9	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 72   : 				this->Reward[this->Count[j]][j].Opt		= n[5];

  003cd	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  003d3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003d6	8b 94 81 04 af
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+44804]
  003dd	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  003e3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003e6	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  003ea	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$222908[ebp]
  003f0	c1 e2 05	 shl	 edx, 5
  003f3	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _n$222913[ebp+20]
  003f9	89 44 11 14	 mov	 DWORD PTR [ecx+edx+20], eax

; 73   : 				this->Reward[this->Count[j]][j].Exl		= n[6];

  003fd	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00403	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00406	8b 94 81 04 af
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+44804]
  0040d	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  00413	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00416	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0041a	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$222908[ebp]
  00420	c1 e2 05	 shl	 edx, 5
  00423	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _n$222913[ebp+24]
  00429	89 44 11 18	 mov	 DWORD PTR [ecx+edx+24], eax

; 74   : 				this->Reward[this->Count[j]][j].Anc		= n[7];

  0042d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00433	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00436	8b 94 81 04 af
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+44804]
  0043d	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  00443	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00446	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0044a	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _j$222908[ebp]
  00450	c1 e2 05	 shl	 edx, 5
  00453	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _n$222913[ebp+28]
  00459	89 44 11 1c	 mov	 DWORD PTR [ecx+edx+28], eax

; 75   : 
; 76   : 				this->Count[j]++;

  0045d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00463	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00466	8b 94 81 04 af
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+44804]
  0046d	83 c2 01	 add	 edx, 1
  00470	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00476	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00479	89 94 81 04 af
	00 00		 mov	 DWORD PTR [ecx+eax*4+44804], edx

; 77   : 
; 78   : 				if(this->Count[j]>=MAX_CC_REWARD_ITEM)

  00480	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _j$222908[ebp]
  00486	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00489	81 bc 81 04 af
	00 00 c8 00 00
	00		 cmp	 DWORD PTR [ecx+eax*4+44804], 200 ; 000000c8H
  00494	7c 02		 jl	 SHORT $LN2@Load

; 79   : 				{
; 80   : 					break;

  00496	eb 05		 jmp	 SHORT $LN3@Load
$LN2@Load:

; 81   : 				}
; 82   : 			}
; 83   : 		}

  00498	e9 c4 fd ff ff	 jmp	 $LN4@Load
$LN3@Load:

; 84   : 	}

  0049d	e9 68 fd ff ff	 jmp	 $LN8@Load
$LN7@Load:

; 85   : 
; 86   : 	fclose(file);

  004a2	8b 45 ec	 mov	 eax, DWORD PTR _file$[ebp]
  004a5	50		 push	 eax
  004a6	e8 00 00 00 00	 call	 _fclose
  004ab	83 c4 04	 add	 esp, 4
$LN20@Load:

; 87   : }

  004ae	5f		 pop	 edi
  004af	5e		 pop	 esi
  004b0	5b		 pop	 ebx
  004b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004b4	33 cd		 xor	 ecx, ebp
  004b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004bb	8b e5		 mov	 esp, ebp
  004bd	5d		 pop	 ebp
  004be	c3		 ret	 0
?Load@CChaosCastleRewardItem@@QAEXXZ ENDP		; CChaosCastleRewardItem::Load
_TEXT	ENDS
PUBLIC	?Main@CChaosCastleRewardItem@@QAE_NHH@Z		; CChaosCastleRewardItem::Main
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	_rand:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_itemId$222929 = -16					; size = 4
_j$222923 = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_ChaosCastleIndex$ = 12					; size = 4
?Main@CChaosCastleRewardItem@@QAE_NHH@Z PROC		; CChaosCastleRewardItem::Main
; _this$ = ecx

; 90   : {

  004c0	55		 push	 ebp
  004c1	8b ec		 mov	 ebp, esp
  004c3	83 ec 50	 sub	 esp, 80			; 00000050H
  004c6	53		 push	 ebx
  004c7	56		 push	 esi
  004c8	57		 push	 edi
  004c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 	
; 92   : 	if(!this->Enable)

  004cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004cf	83 38 00	 cmp	 DWORD PTR [eax], 0
  004d2	75 07		 jne	 SHORT $LN6@Main

; 93   : 	{
; 94   : 		return false;

  004d4	32 c0		 xor	 al, al
  004d6	e9 84 01 00 00	 jmp	 $LN7@Main
$LN6@Main:

; 95   : 	}
; 96   : 
; 97   : 	LPOBJ lpObj = &gObj[aIndex];

  004db	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  004de	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  004e4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004ea	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 98   : 	
; 99   : 	for(int j = 0; j < MAX_CHAOSCASTLE_LEVEL; j++)

  004ed	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$222923[ebp], 0
  004f4	eb 09		 jmp	 SHORT $LN5@Main
$LN4@Main:
  004f6	8b 45 f4	 mov	 eax, DWORD PTR _j$222923[ebp]
  004f9	83 c0 01	 add	 eax, 1
  004fc	89 45 f4	 mov	 DWORD PTR _j$222923[ebp], eax
$LN5@Main:
  004ff	83 7d f4 07	 cmp	 DWORD PTR _j$222923[ebp], 7
  00503	0f 8d 54 01 00
	00		 jge	 $LN3@Main

; 100  : 	{
; 101  : 		if(ChaosCastleIndex == j)

  00509	8b 45 0c	 mov	 eax, DWORD PTR _ChaosCastleIndex$[ebp]
  0050c	3b 45 f4	 cmp	 eax, DWORD PTR _j$222923[ebp]
  0050f	0f 85 43 01 00
	00		 jne	 $LN2@Main

; 102  : 		{
; 103  : 			if(this->Count[j] == 0)

  00515	8b 45 f4	 mov	 eax, DWORD PTR _j$222923[ebp]
  00518	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0051b	83 bc 81 04 af
	00 00 00	 cmp	 DWORD PTR [ecx+eax*4+44804], 0
  00523	75 07		 jne	 SHORT $LN1@Main

; 104  : 			{
; 105  : 				return false;

  00525	32 c0		 xor	 al, al
  00527	e9 33 01 00 00	 jmp	 $LN7@Main
$LN1@Main:

; 106  : 			}
; 107  : 
; 108  : 			int itemId = rand()%this->Count[j];

  0052c	e8 00 00 00 00	 call	 _rand
  00531	8b 4d f4	 mov	 ecx, DWORD PTR _j$222923[ebp]
  00534	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00537	99		 cdq
  00538	f7 bc 8e 04 af
	00 00		 idiv	 DWORD PTR [esi+ecx*4+44804]
  0053f	89 55 f0	 mov	 DWORD PTR _itemId$222929[ebp], edx

; 109  : 
; 110  : 			ItemSerialCreateSend(aIndex,lpObj->MapNumber,lpObj->X,lpObj->Y,ITEMGET(this->Reward[itemId][j].Type,this->Reward[itemId][j].Index),this->Reward[itemId][j].Level,0,this->Reward[itemId][j].Skill,this->Reward[itemId][j].Luck,this->Reward[itemId][j].Opt,aIndex,this->Reward[itemId][j].Exl,this->Reward[itemId][j].Anc);

  00542	8b 45 f0	 mov	 eax, DWORD PTR _itemId$222929[ebp]
  00545	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  0054b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0054e	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00552	8b 45 f4	 mov	 eax, DWORD PTR _j$222923[ebp]
  00555	c1 e0 05	 shl	 eax, 5
  00558	0f b6 4c 02 1c	 movzx	 ecx, BYTE PTR [edx+eax+28]
  0055d	51		 push	 ecx
  0055e	8b 55 f0	 mov	 edx, DWORD PTR _itemId$222929[ebp]
  00561	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  00567	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0056a	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0056e	8b 55 f4	 mov	 edx, DWORD PTR _j$222923[ebp]
  00571	c1 e2 05	 shl	 edx, 5
  00574	0f b6 44 11 18	 movzx	 eax, BYTE PTR [ecx+edx+24]
  00579	50		 push	 eax
  0057a	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0057d	51		 push	 ecx
  0057e	8b 55 f0	 mov	 edx, DWORD PTR _itemId$222929[ebp]
  00581	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  00587	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0058a	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0058e	8b 55 f4	 mov	 edx, DWORD PTR _j$222923[ebp]
  00591	c1 e2 05	 shl	 edx, 5
  00594	0f b6 44 11 14	 movzx	 eax, BYTE PTR [ecx+edx+20]
  00599	50		 push	 eax
  0059a	8b 4d f0	 mov	 ecx, DWORD PTR _itemId$222929[ebp]
  0059d	69 c9 e0 00 00
	00		 imul	 ecx, 224		; 000000e0H
  005a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005a6	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  005aa	8b 4d f4	 mov	 ecx, DWORD PTR _j$222923[ebp]
  005ad	c1 e1 05	 shl	 ecx, 5
  005b0	0f b6 54 08 10	 movzx	 edx, BYTE PTR [eax+ecx+16]
  005b5	52		 push	 edx
  005b6	8b 45 f0	 mov	 eax, DWORD PTR _itemId$222929[ebp]
  005b9	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  005bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c2	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  005c6	8b 45 f4	 mov	 eax, DWORD PTR _j$222923[ebp]
  005c9	c1 e0 05	 shl	 eax, 5
  005cc	0f b6 4c 02 0c	 movzx	 ecx, BYTE PTR [edx+eax+12]
  005d1	51		 push	 ecx
  005d2	6a 00		 push	 0
  005d4	8b 55 f0	 mov	 edx, DWORD PTR _itemId$222929[ebp]
  005d7	69 d2 e0 00 00
	00		 imul	 edx, 224		; 000000e0H
  005dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005e0	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  005e4	8b 55 f4	 mov	 edx, DWORD PTR _j$222923[ebp]
  005e7	c1 e2 05	 shl	 edx, 5
  005ea	0f b6 44 11 08	 movzx	 eax, BYTE PTR [ecx+edx+8]
  005ef	50		 push	 eax
  005f0	8b 4d f0	 mov	 ecx, DWORD PTR _itemId$222929[ebp]
  005f3	69 c9 e0 00 00
	00		 imul	 ecx, 224		; 000000e0H
  005f9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005fc	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00600	8b 4d f4	 mov	 ecx, DWORD PTR _j$222923[ebp]
  00603	c1 e1 05	 shl	 ecx, 5
  00606	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00609	c1 e2 09	 shl	 edx, 9
  0060c	8b 45 f0	 mov	 eax, DWORD PTR _itemId$222929[ebp]
  0060f	69 c0 e0 00 00
	00		 imul	 eax, 224		; 000000e0H
  00615	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00618	8d 44 01 04	 lea	 eax, DWORD PTR [ecx+eax+4]
  0061c	8b 4d f4	 mov	 ecx, DWORD PTR _j$222923[ebp]
  0061f	c1 e1 05	 shl	 ecx, 5
  00622	03 54 08 04	 add	 edx, DWORD PTR [eax+ecx+4]
  00626	52		 push	 edx
  00627	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0062a	0f b6 82 46 01
	00 00		 movzx	 eax, BYTE PTR [edx+326]
  00631	50		 push	 eax
  00632	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00635	0f b6 91 44 01
	00 00		 movzx	 edx, BYTE PTR [ecx+324]
  0063c	52		 push	 edx
  0063d	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00640	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00647	51		 push	 ecx
  00648	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0064b	52		 push	 edx
  0064c	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00651	83 c4 34	 add	 esp, 52			; 00000034H

; 111  : 
; 112  : 			return true;	

  00654	b0 01		 mov	 al, 1
  00656	eb 07		 jmp	 SHORT $LN7@Main
$LN2@Main:

; 113  : 		}
; 114  : 	}

  00658	e9 99 fe ff ff	 jmp	 $LN4@Main
$LN3@Main:

; 115  : 
; 116  : 	return false;

  0065d	32 c0		 xor	 al, al
$LN7@Main:

; 117  : }

  0065f	5f		 pop	 edi
  00660	5e		 pop	 esi
  00661	5b		 pop	 ebx
  00662	8b e5		 mov	 esp, ebp
  00664	5d		 pop	 ebp
  00665	c2 08 00	 ret	 8
?Main@CChaosCastleRewardItem@@QAE_NHH@Z ENDP		; CChaosCastleRewardItem::Main
_TEXT	ENDS
END
