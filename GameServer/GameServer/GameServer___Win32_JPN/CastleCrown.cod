; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\CastleCrown.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CCastleCrown@@6B@				; CCastleCrown::`vftable'
PUBLIC	??0CCastleCrown@@QAE@XZ				; CCastleCrown::CCastleCrown
PUBLIC	??_R4CCastleCrown@@6B@				; CCastleCrown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleCrown@@@8			; CCastleCrown `RTTI Type Descriptor'
PUBLIC	??_R3CCastleCrown@@8				; CCastleCrown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleCrown@@8				; CCastleCrown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleCrown@@8			; CCastleCrown::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCastleCrown@@UAEPAXI@Z:PROC		; CCastleCrown::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCastleCrown@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\castlecrown.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleCrown@@8 DD FLAT:??_R0?AVCCastleCrown@@@8 ; CCastleCrown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleCrown@@8
rdata$r	SEGMENT
??_R2CCastleCrown@@8 DD FLAT:??_R1A@?0A@EA@CCastleCrown@@8 ; CCastleCrown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleCrown@@8
rdata$r	SEGMENT
??_R3CCastleCrown@@8 DD 00H				; CCastleCrown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleCrown@@@8
_DATA	SEGMENT
??_R0?AVCCastleCrown@@@8 DD FLAT:??_7type_info@@6B@	; CCastleCrown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleCrown@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCastleCrown@@6B@
rdata$r	SEGMENT
??_R4CCastleCrown@@6B@ DD 00H				; CCastleCrown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleCrown@@@8
	DD	FLAT:??_R3CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_7CCastleCrown@@6B@
CONST	SEGMENT
??_7CCastleCrown@@6B@ DD FLAT:??_R4CCastleCrown@@6B@	; CCastleCrown::`vftable'
	DD	FLAT:??_ECCastleCrown@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCastleCrown@@QAE@XZ PROC				; CCastleCrown::CCastleCrown
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCastleCrown@@6B@

; 21   : 	return;
; 22   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CCastleCrown@@QAE@XZ ENDP				; CCastleCrown::CCastleCrown
_TEXT	ENDS
PUBLIC	??1CCastleCrown@@UAE@XZ				; CCastleCrown::~CCastleCrown
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCCastleCrown@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCastleCrown@@UAEPAXI@Z PROC			; CCastleCrown::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CCastleCrown@@UAE@XZ	; CCastleCrown::~CCastleCrown
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCCastleCrown@@UAEPAXI@Z ENDP			; CCastleCrown::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCastleCrown@@UAE@XZ PROC				; CCastleCrown::~CCastleCrown
; _this$ = ecx

; 25   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCastleCrown@@6B@

; 26   : 	return;
; 27   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CCastleCrown@@UAE@XZ ENDP				; CCastleCrown::~CCastleCrown
_TEXT	ENDS
PUBLIC	??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@ ; `string'
PUBLIC	??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@ ; `string'
PUBLIC	?GetCrownAccessTickCount@CCastleSiege@@QAEKXZ	; CCastleSiege::GetCrownAccessTickCount
PUBLIC	?GetCrownAccessUserX@CCastleSiege@@QAEHXZ	; CCastleSiege::GetCrownAccessUserX
PUBLIC	?GetCrownAccessUserY@CCastleSiege@@QAEHXZ	; CCastleSiege::GetCrownAccessUserY
PUBLIC	?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z	; CCastleSiege::SetCrownAccessUserY
PUBLIC	?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z	; CCastleSiege::SetCrownAccessUserX
PUBLIC	?ResetCrownUserIndex@CCastleSiege@@QAEXXZ	; CCastleSiege::ResetCrownUserIndex
PUBLIC	?GetCrownUserIndex@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCrownUserIndex
PUBLIC	?CastleCrownAct@CCastleCrown@@QAEXH@Z		; CCastleCrown::CastleCrownAct
EXTRN	?g_UserConfig@@3VCUserConfig@@A:BYTE		; g_UserConfig
EXTRN	?GCAnsCsAccessCrownState@@YAXHE@Z:PROC		; GCAnsCsAccessCrownState
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z:PROC ; CCastleSiege::GetCrownSwitchUserIndex
EXTRN	?CheckUser@CExLicense@@QAE_NH@Z:PROC		; CExLicense::CheckUser
EXTRN	?g_ExLicense@@3VCExLicense@@A:BYTE		; g_ExLicense
EXTRN	?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ:PROC ; CCastleSiege::ResetCrownAccessTickCount
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT ??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@
CONST	SEGMENT
??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@ DB '['
	DB	'CastleSiege] [%s][%s] Register Castle Crown Canceled (GUILD:%'
	DB	's)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@
CONST	SEGMENT
??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@ DB '[Cas'
	DB	'tleSiege] [Reg. Accumulating] Accumulated Crown AccessTime : '
	DB	'acc(%d) + %d [%s](%s)(%s)', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_dwTime$222252 = -16					; size = 4
_lpUserObj$ = -12					; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?CastleCrownAct@CCastleCrown@@QAEXH@Z PROC		; CCastleCrown::CastleCrownAct
; _this$ = ecx

; 31   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 50	 sub	 esp, 80			; 00000050H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	if ( !gObjIsConnected(iIndex))

  0004c	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00055	83 c4 04	 add	 esp, 4
  00058	85 c0		 test	 eax, eax
  0005a	75 05		 jne	 SHORT $LN32@CastleCrow

; 33   : 		return;

  0005c	e9 c7 05 00 00	 jmp	 $LN33@CastleCrow
$LN32@CastleCrow:

; 34   : 
; 35   : 	if ( gObj[iIndex].Type != OBJ_NPC ||
; 36   : 		 gObj[iIndex].Class != 216 )

  00061	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00064	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00070	0f b7 54 01 68	 movzx	 edx, WORD PTR [ecx+eax+104]
  00075	83 fa 03	 cmp	 edx, 3
  00078	75 1f		 jne	 SHORT $LN30@CastleCrow
  0007a	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0007d	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00089	0f b7 94 01 b8
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+184]
  00091	81 fa d8 00 00
	00		 cmp	 edx, 216		; 000000d8H
  00097	74 05		 je	 SHORT $LN31@CastleCrow
$LN30@CastleCrow:

; 37   : 		 return;

  00099	e9 8a 05 00 00	 jmp	 $LN33@CastleCrow
$LN31@CastleCrow:

; 38   : 
; 39   : 	if ( !gObjIsConnected(g_CastleSiege.GetCrownUserIndex()) )

  0009e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000a3	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000ae	83 c4 04	 add	 esp, 4
  000b1	85 c0		 test	 eax, eax
  000b3	75 31		 jne	 SHORT $LN29@CastleCrow

; 40   : 	{
; 41   : 		g_CastleSiege.ResetCrownUserIndex();

  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000ba	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 42   : 		g_CastleSiege.SetCrownAccessUserX(0);

  000bf	6a 00		 push	 0
  000c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000c6	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 43   : 		g_CastleSiege.SetCrownAccessUserY(0);

  000cb	6a 00		 push	 0
  000cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000d2	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 44   : 		g_CastleSiege.ResetCrownAccessTickCount();

  000d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000dc	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount

; 45   : 
; 46   : 		return;

  000e1	e9 42 05 00 00	 jmp	 $LN33@CastleCrow
$LN29@CastleCrow:

; 47   : 	}
; 48   : 
; 49   : 	LPOBJ lpObj = &gObj[iIndex];

  000e6	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  000e9	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  000ef	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f5	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 50   : 	LPOBJ lpUserObj = &gObj[g_CastleSiege.GetCrownUserIndex()];

  000f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000fd	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  00102	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00108	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010e	89 45 f4	 mov	 DWORD PTR _lpUserObj$[ebp], eax

; 51   : 
; 52   : #if(EVOMU_CASTLE_SEGE==TRUE)
; 53   : 	if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2))

  00111	6a 20		 push	 32			; 00000020H
  00113	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00118	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0011d	0f b6 c0	 movzx	 eax, al
  00120	85 c0		 test	 eax, eax
  00122	75 26		 jne	 SHORT $LN27@CastleCrow
  00124	6a 21		 push	 33			; 00000021H
  00126	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0012b	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00130	0f b6 c0	 movzx	 eax, al
  00133	85 c0		 test	 eax, eax
  00135	75 13		 jne	 SHORT $LN27@CastleCrow
  00137	6a 22		 push	 34			; 00000022H
  00139	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0013e	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00143	0f b6 c0	 movzx	 eax, al
  00146	85 c0		 test	 eax, eax
  00148	74 43		 je	 SHORT $LN28@CastleCrow
$LN27@CastleCrow:

; 54   : 	{
; 55   : 		if(lpUserObj->CrownNpc == true)

  0014a	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  0014d	0f b6 88 81 28
	00 00		 movzx	 ecx, BYTE PTR [eax+10369]
  00154	83 f9 01	 cmp	 ecx, 1
  00157	75 34		 jne	 SHORT $LN28@CastleCrow

; 56   : 		{
; 57   : 			g_CastleSiege.SetCrownAccessUserX(lpUserObj->X);

  00159	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  0015c	0f b6 88 44 01
	00 00		 movzx	 ecx, BYTE PTR [eax+324]
  00163	51		 push	 ecx
  00164	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00169	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 58   : 			g_CastleSiege.SetCrownAccessUserY(lpUserObj->Y);

  0016e	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  00171	0f b6 88 46 01
	00 00		 movzx	 ecx, BYTE PTR [eax+326]
  00178	51		 push	 ecx
  00179	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0017e	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 59   : 			lpUserObj->CrownNpc = false;

  00183	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  00186	c6 80 81 28 00
	00 00		 mov	 BYTE PTR [eax+10369], 0
$LN28@CastleCrow:

; 60   : 		}
; 61   : 	}
; 62   : #endif
; 63   : 
; 64   : 	if(g_ExLicense.CheckUser(eExUB::Artem) || g_ExLicense.CheckUser(eExUB::Artem2))

  0018d	6a 30		 push	 48			; 00000030H
  0018f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00194	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00199	0f b6 c0	 movzx	 eax, al
  0019c	85 c0		 test	 eax, eax
  0019e	75 13		 jne	 SHORT $LN24@CastleCrow
  001a0	6a 31		 push	 49			; 00000031H
  001a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  001a7	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  001ac	0f b6 c0	 movzx	 eax, al
  001af	85 c0		 test	 eax, eax
  001b1	74 43		 je	 SHORT $LN25@CastleCrow
$LN24@CastleCrow:

; 65   : 	{
; 66   : 		if(lpUserObj->CrownNpc == true)

  001b3	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  001b6	0f b6 88 81 28
	00 00		 movzx	 ecx, BYTE PTR [eax+10369]
  001bd	83 f9 01	 cmp	 ecx, 1
  001c0	75 34		 jne	 SHORT $LN25@CastleCrow

; 67   : 		{
; 68   : 			g_CastleSiege.SetCrownAccessUserX(lpUserObj->X);

  001c2	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  001c5	0f b6 88 44 01
	00 00		 movzx	 ecx, BYTE PTR [eax+324]
  001cc	51		 push	 ecx
  001cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001d2	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 69   : 			g_CastleSiege.SetCrownAccessUserY(lpUserObj->Y);

  001d7	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  001da	0f b6 88 46 01
	00 00		 movzx	 ecx, BYTE PTR [eax+326]
  001e1	51		 push	 ecx
  001e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001e7	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 70   : 			lpUserObj->CrownNpc = false;

  001ec	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  001ef	c6 80 81 28 00
	00 00		 mov	 BYTE PTR [eax+10369], 0
$LN25@CastleCrow:

; 71   : 		}
; 72   : 	}
; 73   : 
; 74   : 	if ( lpUserObj->MapNumber == MAP_INDEX_CASTLESIEGE && lpUserObj->m_btCsJoinSide >= 2 && lpUserObj->m_bCsGuildInvolved == 1 )

  001f6	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  001f9	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]
  00200	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  00203	0f 85 e3 03 00
	00		 jne	 $LN22@CastleCrow
  00209	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  0020c	0f b6 88 02 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7170]
  00213	83 f9 02	 cmp	 ecx, 2
  00216	0f 8c d0 03 00
	00		 jl	 $LN22@CastleCrow
  0021c	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  0021f	0f b6 88 03 1c
	00 00		 movzx	 ecx, BYTE PTR [eax+7171]
  00226	83 f9 01	 cmp	 ecx, 1
  00229	0f 85 bd 03 00
	00		 jne	 $LN22@CastleCrow

; 75   : 	{
; 76   : 		if ( lpUserObj->Y == g_CastleSiege.GetCrownAccessUserY() &&	lpUserObj->X == g_CastleSiege.GetCrownAccessUserX() )

  0022f	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  00232	0f bf b0 46 01
	00 00		 movsx	 esi, WORD PTR [eax+326]
  00239	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0023e	e8 00 00 00 00	 call	 ?GetCrownAccessUserY@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownAccessUserY
  00243	3b f0		 cmp	 esi, eax
  00245	0f 85 ae 02 00
	00		 jne	 $LN21@CastleCrow
  0024b	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  0024e	0f bf b0 44 01
	00 00		 movsx	 esi, WORD PTR [eax+324]
  00255	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0025a	e8 00 00 00 00	 call	 ?GetCrownAccessUserX@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownAccessUserX
  0025f	3b f0		 cmp	 esi, eax
  00261	0f 85 92 02 00
	00		 jne	 $LN21@CastleCrow

; 77   : 		{
; 78   : 			if ( gObjIsConnected(g_CastleSiege.GetCrownUserIndex()) && gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(217)) && gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(218)) )

  00267	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0026c	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00277	83 c4 04	 add	 esp, 4
  0027a	85 c0		 test	 eax, eax
  0027c	0f 84 81 01 00
	00		 je	 $LN20@CastleCrow
  00282	68 d9 00 00 00	 push	 217			; 000000d9H
  00287	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0028c	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  00291	50		 push	 eax
  00292	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00297	83 c4 04	 add	 esp, 4
  0029a	85 c0		 test	 eax, eax
  0029c	0f 84 61 01 00
	00		 je	 $LN20@CastleCrow
  002a2	68 da 00 00 00	 push	 218			; 000000daH
  002a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002ac	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  002b1	50		 push	 eax
  002b2	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  002b7	83 c4 04	 add	 esp, 4
  002ba	85 c0		 test	 eax, eax
  002bc	0f 84 41 01 00
	00		 je	 $LN20@CastleCrow

; 79   : 			{
; 80   : 				if ( gObj[g_CastleSiege.GetCrownUserIndex()].m_btCsJoinSide == gObj[g_CastleSiege.GetCrownSwitchUserIndex(217)].m_btCsJoinSide && gObj[g_CastleSiege.GetCrownUserIndex()].m_btCsJoinSide == gObj[g_CastleSiege.GetCrownSwitchUserIndex(217)].m_btCsJoinSide )

  002c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002c7	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  002cc	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  002d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002d8	0f b6 b4 01 02
	1c 00 00	 movzx	 esi, BYTE PTR [ecx+eax+7170]
  002e0	68 d9 00 00 00	 push	 217			; 000000d9H
  002e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002ea	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  002ef	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002fb	0f b6 84 02 02
	1c 00 00	 movzx	 eax, BYTE PTR [edx+eax+7170]
  00303	3b f0		 cmp	 esi, eax
  00305	0f 85 92 00 00
	00		 jne	 $LN19@CastleCrow
  0030b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00310	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  00315	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0031b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00321	0f b6 b4 01 02
	1c 00 00	 movzx	 esi, BYTE PTR [ecx+eax+7170]
  00329	68 d9 00 00 00	 push	 217			; 000000d9H
  0032e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00333	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  00338	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0033e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00344	0f b6 84 02 02
	1c 00 00	 movzx	 eax, BYTE PTR [edx+eax+7170]
  0034c	3b f0		 cmp	 esi, eax
  0034e	75 4d		 jne	 SHORT $LN19@CastleCrow

; 81   : 				{
; 82   : 					DWORD dwTime = GetTickCount() - g_CastleSiege.GetCrownAccessTickCount();

  00350	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00356	8b f0		 mov	 esi, eax
  00358	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0035d	e8 00 00 00 00	 call	 ?GetCrownAccessTickCount@CCastleSiege@@QAEKXZ ; CCastleSiege::GetCrownAccessTickCount
  00362	2b f0		 sub	 esi, eax
  00364	89 75 f0	 mov	 DWORD PTR _dwTime$222252[ebp], esi

; 83   : 
; 84   : 						LogAddTD("[CastleSiege] [Reg. Accumulating] Accumulated Crown AccessTime : acc(%d) + %d [%s](%s)(%s)",
; 85   : 							lpUserObj->m_iAccumulatedCrownAccessTime, dwTime,
; 86   : 							lpUserObj->GuildName, lpUserObj->AccountID, lpUserObj->Name);

  00367	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  0036a	83 c0 77	 add	 eax, 119		; 00000077H
  0036d	50		 push	 eax
  0036e	8b 4d f4	 mov	 ecx, DWORD PTR _lpUserObj$[ebp]
  00371	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00374	51		 push	 ecx
  00375	8b 55 f4	 mov	 edx, DWORD PTR _lpUserObj$[ebp]
  00378	81 c2 3c 04 00
	00		 add	 edx, 1084		; 0000043cH
  0037e	52		 push	 edx
  0037f	8b 45 f0	 mov	 eax, DWORD PTR _dwTime$222252[ebp]
  00382	50		 push	 eax
  00383	8b 4d f4	 mov	 ecx, DWORD PTR _lpUserObj$[ebp]
  00386	8b 91 1c 1c 00
	00		 mov	 edx, DWORD PTR [ecx+7196]
  0038c	52		 push	 edx
  0038d	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@
  00392	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00398	83 c4 18	 add	 esp, 24			; 00000018H

; 87   : 				}
; 88   : 				else

  0039b	eb 61		 jmp	 SHORT $LN18@CastleCrow
$LN19@CastleCrow:

; 89   : 				{
; 90   : 					GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  0039d	6a 02		 push	 2
  0039f	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  003a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a4	51		 push	 ecx
  003a5	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  003aa	83 c4 08	 add	 esp, 8

; 91   : 					g_CastleSiege.ResetCrownUserIndex();

  003ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  003b2	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 92   : 					g_CastleSiege.SetCrownAccessUserX(0);

  003b7	6a 00		 push	 0
  003b9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  003be	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 93   : 					g_CastleSiege.SetCrownAccessUserY(0);

  003c3	6a 00		 push	 0
  003c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  003ca	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 94   : 					g_CastleSiege.ResetCrownAccessTickCount();

  003cf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  003d4	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount

; 95   : 
; 96   : 					LogAddTD("[CastleSiege] [%s][%s] Register Castle Crown Canceled (GUILD:%s)",
; 97   : 						lpUserObj->AccountID, lpUserObj->Name, lpUserObj->GuildName);

  003d9	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  003dc	05 3c 04 00 00	 add	 eax, 1084		; 0000043cH
  003e1	50		 push	 eax
  003e2	8b 4d f4	 mov	 ecx, DWORD PTR _lpUserObj$[ebp]
  003e5	83 c1 77	 add	 ecx, 119		; 00000077H
  003e8	51		 push	 ecx
  003e9	8b 55 f4	 mov	 edx, DWORD PTR _lpUserObj$[ebp]
  003ec	83 c2 6c	 add	 edx, 108		; 0000006cH
  003ef	52		 push	 edx
  003f0	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@
  003f5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003fb	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@CastleCrow:

; 98   : 				}
; 99   : 			}
; 100  : 			else

  003fe	e9 f1 00 00 00	 jmp	 $LN17@CastleCrow
$LN20@CastleCrow:

; 101  : 			{
; 102  : #if(EVOMU_CASTLE_SEGE==TRUE)
; 103  : 				if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2))

  00403	6a 20		 push	 32			; 00000020H
  00405	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0040a	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0040f	0f b6 c0	 movzx	 eax, al
  00412	85 c0		 test	 eax, eax
  00414	75 26		 jne	 SHORT $LN15@CastleCrow
  00416	6a 21		 push	 33			; 00000021H
  00418	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  0041d	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00422	0f b6 c0	 movzx	 eax, al
  00425	85 c0		 test	 eax, eax
  00427	75 13		 jne	 SHORT $LN15@CastleCrow
  00429	6a 22		 push	 34			; 00000022H
  0042b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00430	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00435	0f b6 c0	 movzx	 eax, al
  00438	85 c0		 test	 eax, eax
  0043a	74 3d		 je	 SHORT $LN16@CastleCrow
$LN15@CastleCrow:

; 104  : 				{
; 105  : 					if(lpUserObj->m_iAccumulatedCrownAccessTime > 0)

  0043c	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  0043f	83 b8 1c 1c 00
	00 00		 cmp	 DWORD PTR [eax+7196], 0
  00446	7e 31		 jle	 SHORT $LN16@CastleCrow

; 106  : 					{
; 107  : 						//lpUserObj->m_iAccumulatedCrownAccessTime -= 4000;
; 108  : 						lpUserObj->m_iAccumulatedCrownAccessTime -= g_UserConfig.m_EvoMU.CSRegTimeMinus;

  00448	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  0044b	8b 88 1c 1c 00
	00		 mov	 ecx, DWORD PTR [eax+7196]
  00451	2b 0d 10 00 00
	00		 sub	 ecx, DWORD PTR ?g_UserConfig@@3VCUserConfig@@A+16
  00457	8b 55 f4	 mov	 edx, DWORD PTR _lpUserObj$[ebp]
  0045a	89 8a 1c 1c 00
	00		 mov	 DWORD PTR [edx+7196], ecx

; 109  : 						if(lpUserObj->m_iAccumulatedCrownAccessTime < 0)

  00460	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  00463	83 b8 1c 1c 00
	00 00		 cmp	 DWORD PTR [eax+7196], 0
  0046a	7d 0d		 jge	 SHORT $LN16@CastleCrow

; 110  : 						{
; 111  : 							lpUserObj->m_iAccumulatedCrownAccessTime = 0;

  0046c	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  0046f	c7 80 1c 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+7196], 0
$LN16@CastleCrow:

; 112  : 						}
; 113  : 					}
; 114  : 				}
; 115  : #endif
; 116  : 
; 117  : 				if(g_ExLicense.CheckUser(eExUB::Artem) || g_ExLicense.CheckUser(eExUB::Artem2))

  00479	6a 30		 push	 48			; 00000030H
  0047b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00480	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00485	0f b6 c0	 movzx	 eax, al
  00488	85 c0		 test	 eax, eax
  0048a	75 13		 jne	 SHORT $LN11@CastleCrow
  0048c	6a 31		 push	 49			; 00000031H
  0048e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00493	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00498	0f b6 c0	 movzx	 eax, al
  0049b	85 c0		 test	 eax, eax
  0049d	74 19		 je	 SHORT $LN12@CastleCrow
$LN11@CastleCrow:

; 118  : 				{
; 119  : 					if(lpObj->m_iAccumulatedCrownAccessTime > 0)

  0049f	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004a2	83 b8 1c 1c 00
	00 00		 cmp	 DWORD PTR [eax+7196], 0
  004a9	7e 0d		 jle	 SHORT $LN12@CastleCrow

; 120  : 					{
; 121  : 						lpObj->m_iAccumulatedCrownAccessTime = 0;

  004ab	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  004ae	c7 80 1c 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+7196], 0
$LN12@CastleCrow:

; 122  : 					}
; 123  : 				}
; 124  : 
; 125  : 				GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);//knopka

  004b8	6a 02		 push	 2
  004ba	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  004bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  004bf	51		 push	 ecx
  004c0	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  004c5	83 c4 08	 add	 esp, 8

; 126  : 				g_CastleSiege.ResetCrownUserIndex();

  004c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  004cd	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 127  : 				g_CastleSiege.SetCrownAccessUserX(0);

  004d2	6a 00		 push	 0
  004d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  004d9	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 128  : 				g_CastleSiege.SetCrownAccessUserY(0);

  004de	6a 00		 push	 0
  004e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  004e5	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 129  : 				g_CastleSiege.ResetCrownAccessTickCount();

  004ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  004ef	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount
$LN17@CastleCrow:

; 130  : 			}
; 131  : 		}
; 132  : 		else

  004f4	e9 f1 00 00 00	 jmp	 $LN9@CastleCrow
$LN21@CastleCrow:

; 133  : 		{
; 134  : #if(EVOMU_CASTLE_SEGE==TRUE)
; 135  : 			if(g_ExLicense.CheckUser(eExUB::Gredy) || g_ExLicense.CheckUser(eExUB::GredyLocal) || g_ExLicense.CheckUser(eExUB::Gredy2))

  004f9	6a 20		 push	 32			; 00000020H
  004fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00500	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00505	0f b6 c0	 movzx	 eax, al
  00508	85 c0		 test	 eax, eax
  0050a	75 26		 jne	 SHORT $LN7@CastleCrow
  0050c	6a 21		 push	 33			; 00000021H
  0050e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00513	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  00518	0f b6 c0	 movzx	 eax, al
  0051b	85 c0		 test	 eax, eax
  0051d	75 13		 jne	 SHORT $LN7@CastleCrow
  0051f	6a 22		 push	 34			; 00000022H
  00521	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00526	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0052b	0f b6 c0	 movzx	 eax, al
  0052e	85 c0		 test	 eax, eax
  00530	74 3d		 je	 SHORT $LN8@CastleCrow
$LN7@CastleCrow:

; 136  : 			{
; 137  : 				if(lpUserObj->m_iAccumulatedCrownAccessTime > 0)

  00532	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  00535	83 b8 1c 1c 00
	00 00		 cmp	 DWORD PTR [eax+7196], 0
  0053c	7e 31		 jle	 SHORT $LN8@CastleCrow

; 138  : 				{
; 139  : 					//lpUserObj->m_iAccumulatedCrownAccessTime -= 4000;
; 140  : 					lpUserObj->m_iAccumulatedCrownAccessTime -= g_UserConfig.m_EvoMU.CSRegTimeMinus;

  0053e	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  00541	8b 88 1c 1c 00
	00		 mov	 ecx, DWORD PTR [eax+7196]
  00547	2b 0d 10 00 00
	00		 sub	 ecx, DWORD PTR ?g_UserConfig@@3VCUserConfig@@A+16
  0054d	8b 55 f4	 mov	 edx, DWORD PTR _lpUserObj$[ebp]
  00550	89 8a 1c 1c 00
	00		 mov	 DWORD PTR [edx+7196], ecx

; 141  : 					if(lpUserObj->m_iAccumulatedCrownAccessTime < 0)

  00556	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  00559	83 b8 1c 1c 00
	00 00		 cmp	 DWORD PTR [eax+7196], 0
  00560	7d 0d		 jge	 SHORT $LN8@CastleCrow

; 142  : 					{
; 143  : 						lpUserObj->m_iAccumulatedCrownAccessTime = 0;

  00562	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  00565	c7 80 1c 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+7196], 0
$LN8@CastleCrow:

; 144  : 					}
; 145  : 				}
; 146  : 			}
; 147  : #endif
; 148  : 			if(g_ExLicense.CheckUser(eExUB::Artem) || g_ExLicense.CheckUser(eExUB::Artem2))

  0056f	6a 30		 push	 48			; 00000030H
  00571	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00576	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0057b	0f b6 c0	 movzx	 eax, al
  0057e	85 c0		 test	 eax, eax
  00580	75 13		 jne	 SHORT $LN3@CastleCrow
  00582	6a 31		 push	 49			; 00000031H
  00584	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ExLicense@@3VCExLicense@@A ; g_ExLicense
  00589	e8 00 00 00 00	 call	 ?CheckUser@CExLicense@@QAE_NH@Z ; CExLicense::CheckUser
  0058e	0f b6 c0	 movzx	 eax, al
  00591	85 c0		 test	 eax, eax
  00593	74 19		 je	 SHORT $LN4@CastleCrow
$LN3@CastleCrow:

; 149  : 			{
; 150  : 				if(lpObj->m_iAccumulatedCrownAccessTime > 0)

  00595	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00598	83 b8 1c 1c 00
	00 00		 cmp	 DWORD PTR [eax+7196], 0
  0059f	7e 0d		 jle	 SHORT $LN4@CastleCrow

; 151  : 				{
; 152  : 					lpObj->m_iAccumulatedCrownAccessTime = 0;

  005a1	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  005a4	c7 80 1c 1c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+7196], 0
$LN4@CastleCrow:

; 153  : 				}
; 154  : 			}
; 155  : 			//LogAddC(2,"X:%d == CX:%d | Y:%d == CY:%d", lpUserObj->X, g_CastleSiege.GetCrownAccessUserX(), lpUserObj->Y, g_CastleSiege.GetCrownAccessUserY());
; 156  : 			GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);	//XY

  005ae	6a 02		 push	 2
  005b0	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  005b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  005b5	51		 push	 ecx
  005b6	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  005bb	83 c4 08	 add	 esp, 8

; 157  : 			g_CastleSiege.ResetCrownUserIndex();

  005be	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  005c3	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 158  : 			g_CastleSiege.SetCrownAccessUserX(0);

  005c8	6a 00		 push	 0
  005ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  005cf	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 159  : 			g_CastleSiege.SetCrownAccessUserY(0);

  005d4	6a 00		 push	 0
  005d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  005db	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 160  : 			g_CastleSiege.ResetCrownAccessTickCount();

  005e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  005e5	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount
$LN9@CastleCrow:

; 161  : 		}
; 162  : 	}
; 163  : 	else

  005ea	eb 3c		 jmp	 SHORT $LN33@CastleCrow
$LN22@CastleCrow:

; 164  : 	{
; 165  : 		GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  005ec	6a 02		 push	 2
  005ee	8b 45 f4	 mov	 eax, DWORD PTR _lpUserObj$[ebp]
  005f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  005f3	51		 push	 ecx
  005f4	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  005f9	83 c4 08	 add	 esp, 8

; 166  : 		g_CastleSiege.ResetCrownUserIndex();

  005fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00601	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 167  : 		g_CastleSiege.SetCrownAccessUserX(0);

  00606	6a 00		 push	 0
  00608	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0060d	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 168  : 		g_CastleSiege.SetCrownAccessUserY(0);

  00612	6a 00		 push	 0
  00614	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00619	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 169  : 		g_CastleSiege.ResetCrownAccessTickCount();

  0061e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00623	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount
$LN33@CastleCrow:

; 170  : 	}
; 171  : }

  00628	5f		 pop	 edi
  00629	5e		 pop	 esi
  0062a	5b		 pop	 ebx
  0062b	8b e5		 mov	 esp, ebp
  0062d	5d		 pop	 ebp
  0062e	c2 04 00	 ret	 4
?CastleCrownAct@CCastleCrown@@QAEXH@Z ENDP		; CCastleCrown::CastleCrownAct
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\castlesiege.h
_TEXT	ENDS
;	COMDAT ?GetCrownUserIndex@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCrownUserIndex@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCrownUserIndex, COMDAT
; _this$ = ecx

; 390  : 	int GetCrownUserIndex(){return m_iCastleCrownAccessUser;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 f0 01 00
	00		 mov	 eax, DWORD PTR [eax+496]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetCrownUserIndex@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCrownUserIndex
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetCrownUserIndex@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ResetCrownUserIndex, COMDAT
; _this$ = ecx

; 391  : 	void ResetCrownUserIndex(){m_iCastleCrownAccessUser=-1;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 80 f0 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+496], -1
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ResetCrownUserIndex
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetCrownAccessUserX@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCrownAccessUserX@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCrownAccessUserX, COMDAT
; _this$ = ecx

; 392  : 	int GetCrownAccessUserX(){return m_btCastleCrownAccessUserX;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 80 f4 01
	00 00		 movzx	 eax, BYTE PTR [eax+500]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?GetCrownAccessUserX@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCrownAccessUserX
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetCrownAccessUserY@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCrownAccessUserY@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCrownAccessUserY, COMDAT
; _this$ = ecx

; 393  : 	int GetCrownAccessUserY(){return m_btCastleCrownAccessUserY;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 80 f5 01
	00 00		 movzx	 eax, BYTE PTR [eax+501]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?GetCrownAccessUserY@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCrownAccessUserY
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iX$ = 8						; size = 1
?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z PROC		; CCastleSiege::SetCrownAccessUserX, COMDAT
; _this$ = ecx

; 394  : 	void SetCrownAccessUserX(BYTE iX){m_btCastleCrownAccessUserX = iX;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _iX$[ebp]
  00012	88 88 f4 01 00
	00		 mov	 BYTE PTR [eax+500], cl
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ENDP		; CCastleSiege::SetCrownAccessUserX
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iY$ = 8						; size = 1
?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z PROC		; CCastleSiege::SetCrownAccessUserY, COMDAT
; _this$ = ecx

; 395  : 	void SetCrownAccessUserY(BYTE iY){m_btCastleCrownAccessUserY = iY;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _iY$[ebp]
  00012	88 88 f5 01 00
	00		 mov	 BYTE PTR [eax+501], cl
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ENDP		; CCastleSiege::SetCrownAccessUserY
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetCrownAccessTickCount@CCastleSiege@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCrownAccessTickCount@CCastleSiege@@QAEKXZ PROC	; CCastleSiege::GetCrownAccessTickCount, COMDAT
; _this$ = ecx

; 425  : 	DWORD GetCrownAccessTickCount(){return m_dwCrownAccessTime;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 00 02 00
	00		 mov	 eax, DWORD PTR [eax+512]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetCrownAccessTickCount@CCastleSiege@@QAEKXZ ENDP	; CCastleSiege::GetCrownAccessTickCount
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\castlecrown.cpp
;	COMDAT ??__Eg_CsNPC_CastleCrown@@YAXXZ
text$yc	SEGMENT
??__Eg_CsNPC_CastleCrown@@YAXXZ PROC			; `dynamic initializer for 'g_CsNPC_CastleCrown'', COMDAT

; 14   : CCastleCrown g_CsNPC_CastleCrown;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrown@@3VCCastleCrown@@A ; g_CsNPC_CastleCrown
  0000e	e8 00 00 00 00	 call	 ??0CCastleCrown@@QAE@XZ	; CCastleCrown::CCastleCrown
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_CastleCrown@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_CastleCrown''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_CsNPC_CastleCrown@@YAXXZ ENDP			; `dynamic initializer for 'g_CsNPC_CastleCrown''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_CsNPC_CastleCrown@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_CastleCrown@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CsNPC_CastleCrown'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrown@@3VCCastleCrown@@A ; g_CsNPC_CastleCrown
  0000e	e8 00 00 00 00	 call	 ??1CCastleCrown@@UAE@XZ	; CCastleCrown::~CCastleCrown
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_CsNPC_CastleCrown@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CsNPC_CastleCrown''
text$yd	ENDS
PUBLIC	?g_CsNPC_CastleCrown@@3VCCastleCrown@@A		; g_CsNPC_CastleCrown
_BSS	SEGMENT
?g_CsNPC_CastleCrown@@3VCCastleCrown@@A DD 01H DUP (?)	; g_CsNPC_CastleCrown
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CsNPC_CastleCrown$initializer$ DD FLAT:??__Eg_CsNPC_CastleCrown@@YAXXZ
CRT$XCU	ENDS
END
