; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\CastleSiegeSync.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Clear@CCastleSiegeSync@@QAEXXZ			; CCastleSiegeSync::Clear
PUBLIC	??_7CCastleSiegeSync@@6B@			; CCastleSiegeSync::`vftable'
PUBLIC	??0CCastleSiegeSync@@QAE@XZ			; CCastleSiegeSync::CCastleSiegeSync
PUBLIC	??_R4CCastleSiegeSync@@6B@			; CCastleSiegeSync::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleSiegeSync@@@8			; CCastleSiegeSync `RTTI Type Descriptor'
PUBLIC	??_R3CCastleSiegeSync@@8			; CCastleSiegeSync::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleSiegeSync@@8			; CCastleSiegeSync::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleSiegeSync@@8		; CCastleSiegeSync::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCastleSiegeSync@@UAEPAXI@Z:PROC		; CCastleSiegeSync::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCastleSiegeSync@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\castlesiegesync.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleSiegeSync@@8 DD FLAT:??_R0?AVCCastleSiegeSync@@@8 ; CCastleSiegeSync::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleSiegeSync@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleSiegeSync@@8
rdata$r	SEGMENT
??_R2CCastleSiegeSync@@8 DD FLAT:??_R1A@?0A@EA@CCastleSiegeSync@@8 ; CCastleSiegeSync::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleSiegeSync@@8
rdata$r	SEGMENT
??_R3CCastleSiegeSync@@8 DD 00H				; CCastleSiegeSync::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleSiegeSync@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleSiegeSync@@@8
_DATA	SEGMENT
??_R0?AVCCastleSiegeSync@@@8 DD FLAT:??_7type_info@@6B@	; CCastleSiegeSync `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleSiegeSync@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCastleSiegeSync@@6B@
rdata$r	SEGMENT
??_R4CCastleSiegeSync@@6B@ DD 00H			; CCastleSiegeSync::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleSiegeSync@@@8
	DD	FLAT:??_R3CCastleSiegeSync@@8
rdata$r	ENDS
;	COMDAT ??_7CCastleSiegeSync@@6B@
CONST	SEGMENT
??_7CCastleSiegeSync@@6B@ DD FLAT:??_R4CCastleSiegeSync@@6B@ ; CCastleSiegeSync::`vftable'
	DD	FLAT:??_ECCastleSiegeSync@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCastleSiegeSync@@QAE@XZ PROC			; CCastleSiegeSync::CCastleSiegeSync
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCastleSiegeSync@@6B@

; 11   : 	this->Clear();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Clear@CCastleSiegeSync@@QAEXXZ ; CCastleSiegeSync::Clear

; 12   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CCastleSiegeSync@@QAE@XZ ENDP			; CCastleSiegeSync::CCastleSiegeSync
_TEXT	ENDS
PUBLIC	??1CCastleSiegeSync@@UAE@XZ			; CCastleSiegeSync::~CCastleSiegeSync
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCCastleSiegeSync@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCastleSiegeSync@@UAEPAXI@Z PROC			; CCastleSiegeSync::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CCastleSiegeSync@@UAE@XZ ; CCastleSiegeSync::~CCastleSiegeSync
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCCastleSiegeSync@@UAEPAXI@Z ENDP			; CCastleSiegeSync::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCastleSiegeSync@@UAE@XZ PROC			; CCastleSiegeSync::~CCastleSiegeSync
; _this$ = ecx

; 15   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCastleSiegeSync@@6B@

; 16   : 	return;
; 17   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??1CCastleSiegeSync@@UAE@XZ ENDP			; CCastleSiegeSync::~CCastleSiegeSync
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CCastleSiegeSync@@QAEXXZ PROC			; CCastleSiegeSync::Clear
; _this$ = ecx

; 20   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 44	 sub	 esp, 68			; 00000044H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	this->m_iCurCastleState = -1;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 22   : 	this->m_iCurTaxRateChaos = 0;

  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 23   : 	this->m_iCurTaxRateStore  = 0;

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 24   : 	this->m_lCastleTributeMoney = 0;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 25   : 	this->m_iCsTributeMoneyTimer = 0;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 26   : 	memset(this->m_szCastleOwnerGuild, 0, sizeof(this->m_szCastleOwnerGuild));

  0008e	6a 10		 push	 16			; 00000010H
  00090	6a 00		 push	 0
  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	83 c0 18	 add	 eax, 24			; 00000018H
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _memset
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 27   : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?Clear@CCastleSiegeSync@@QAEXXZ ENDP			; CCastleSiegeSync::Clear
_TEXT	ENDS
PUBLIC	?SetCastleOwnerGuild@CCastleSiegeSync@@QAEXPAD@Z ; CCastleSiegeSync::SetCastleOwnerGuild
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpszGuildName$ = 8					; size = 4
?SetCastleOwnerGuild@CCastleSiegeSync@@QAEXPAD@Z PROC	; CCastleSiegeSync::SetCastleOwnerGuild
; _this$ = ecx

; 30   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	83 ec 44	 sub	 esp, 68			; 00000044H
  000b6	53		 push	 ebx
  000b7	56		 push	 esi
  000b8	57		 push	 edi
  000b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	if ( lpszGuildName == NULL )

  000bc	83 7d 08 00	 cmp	 DWORD PTR _lpszGuildName$[ebp], 0
  000c0	75 02		 jne	 SHORT $LN1@SetCastleO

; 32   : 	{
; 33   : 		return;

  000c2	eb 28		 jmp	 SHORT $LN2@SetCastleO
$LN1@SetCastleO:

; 34   : 	}
; 35   : 
; 36   : 	memset(this->m_szCastleOwnerGuild, 0, sizeof(this->m_szCastleOwnerGuild));

  000c4	6a 10		 push	 16			; 00000010H
  000c6	6a 00		 push	 0
  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	83 c0 18	 add	 eax, 24			; 00000018H
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memset
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 37   : 	memcpy(this->m_szCastleOwnerGuild, lpszGuildName, sizeof(this->m_szCastleOwnerGuild)/2);

  000d7	6a 08		 push	 8
  000d9	8b 45 08	 mov	 eax, DWORD PTR _lpszGuildName$[ebp]
  000dc	50		 push	 eax
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	83 c1 18	 add	 ecx, 24			; 00000018H
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 _memcpy
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SetCastleO:

; 38   : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 04 00	 ret	 4
?SetCastleOwnerGuild@CCastleSiegeSync@@QAEXPAD@Z ENDP	; CCastleSiegeSync::SetCastleOwnerGuild
_TEXT	ENDS
PUBLIC	?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
PUBLIC	?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
PUBLIC	?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z	; CCastleSiegeSync::GetTaxRateChaos
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iCurTaxRateChaos$ = -8					; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z PROC		; CCastleSiegeSync::GetTaxRateChaos
; _this$ = ecx

; 41   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	83 ec 48	 sub	 esp, 72			; 00000048H
  00106	53		 push	 ebx
  00107	56		 push	 esi
  00108	57		 push	 edi
  00109	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	int iCurTaxRateChaos = this->m_iCurTaxRateChaos;

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00112	89 4d f8	 mov	 DWORD PTR _iCurTaxRateChaos$[ebp], ecx

; 43   : 
; 44   : 	if ( this->CheckCastleOwnerMember(iIndex) == TRUE || this->CheckCastleOwnerUnionMember(iIndex) == TRUE )

  00115	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00118	50		 push	 eax
  00119	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011c	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
  00121	83 f8 01	 cmp	 eax, 1
  00124	74 11		 je	 SHORT $LN1@GetTaxRate
  00126	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00129	50		 push	 eax
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	e8 00 00 00 00	 call	 ?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
  00132	83 f8 01	 cmp	 eax, 1
  00135	75 07		 jne	 SHORT $LN2@GetTaxRate
$LN1@GetTaxRate:

; 45   : 	{
; 46   : 		iCurTaxRateChaos = 0;

  00137	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCurTaxRateChaos$[ebp], 0
$LN2@GetTaxRate:

; 47   : 	}
; 48   : 
; 49   : 	return iCurTaxRateChaos;

  0013e	8b 45 f8	 mov	 eax, DWORD PTR _iCurTaxRateChaos$[ebp]

; 50   : }

  00141	5f		 pop	 edi
  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 04 00	 ret	 4
?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ENDP		; CCastleSiegeSync::GetTaxRateChaos
_TEXT	ENDS
PUBLIC	?GetTaxRateStore@CCastleSiegeSync@@QAEHH@Z	; CCastleSiegeSync::GetTaxRateStore
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iCurTaxRateStore$ = -8					; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?GetTaxRateStore@CCastleSiegeSync@@QAEHH@Z PROC		; CCastleSiegeSync::GetTaxRateStore
; _this$ = ecx

; 53   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	83 ec 48	 sub	 esp, 72			; 00000048H
  00156	53		 push	 ebx
  00157	56		 push	 esi
  00158	57		 push	 edi
  00159	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	int iCurTaxRateStore = this->m_iCurTaxRateStore;

  0015c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00162	89 4d f8	 mov	 DWORD PTR _iCurTaxRateStore$[ebp], ecx

; 55   : 
; 56   : 	if ( this->CheckCastleOwnerMember(iIndex) == TRUE || this->CheckCastleOwnerUnionMember(iIndex) == TRUE )

  00165	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00168	50		 push	 eax
  00169	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
  00171	83 f8 01	 cmp	 eax, 1
  00174	74 11		 je	 SHORT $LN1@GetTaxRate@2
  00176	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00179	50		 push	 eax
  0017a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	e8 00 00 00 00	 call	 ?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
  00182	83 f8 01	 cmp	 eax, 1
  00185	75 07		 jne	 SHORT $LN2@GetTaxRate@2
$LN1@GetTaxRate@2:

; 57   : 	{
; 58   : 		iCurTaxRateStore = 0;

  00187	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCurTaxRateStore$[ebp], 0
$LN2@GetTaxRate@2:

; 59   : 	}
; 60   : 
; 61   : 	return iCurTaxRateStore;

  0018e	8b 45 f8	 mov	 eax, DWORD PTR _iCurTaxRateStore$[ebp]

; 62   : }

  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c2 04 00	 ret	 4
?GetTaxRateStore@CCastleSiegeSync@@QAEHH@Z ENDP		; CCastleSiegeSync::GetTaxRateStore
_TEXT	ENDS
PUBLIC	?GetTaxHuntZone@CCastleSiegeSync@@QAEHHH@Z	; CCastleSiegeSync::GetTaxHuntZone
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_iCurTaxHuntZone$ = -8					; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
_bCheckOwnerGuild$ = 12					; size = 4
?GetTaxHuntZone@CCastleSiegeSync@@QAEHHH@Z PROC		; CCastleSiegeSync::GetTaxHuntZone
; _this$ = ecx

; 65   : {

  001a0	55		 push	 ebp
  001a1	8b ec		 mov	 ebp, esp
  001a3	83 ec 48	 sub	 esp, 72			; 00000048H
  001a6	53		 push	 ebx
  001a7	56		 push	 esi
  001a8	57		 push	 edi
  001a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   : 	int iCurTaxHuntZone = this->m_iCurTaxHuntZone;

  001ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001af	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001b2	89 4d f8	 mov	 DWORD PTR _iCurTaxHuntZone$[ebp], ecx

; 67   : 
; 68   : 	if ( bCheckOwnerGuild == TRUE )

  001b5	83 7d 0c 01	 cmp	 DWORD PTR _bCheckOwnerGuild$[ebp], 1
  001b9	75 29		 jne	 SHORT $LN3@GetTaxHunt

; 69   : 	{
; 70   : 		if ( this->CheckCastleOwnerMember(iIndex) == TRUE || this->CheckCastleOwnerUnionMember(iIndex) == TRUE )

  001bb	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  001be	50		 push	 eax
  001bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c2	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
  001c7	83 f8 01	 cmp	 eax, 1
  001ca	74 11		 je	 SHORT $LN1@GetTaxHunt
  001cc	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  001cf	50		 push	 eax
  001d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d3	e8 00 00 00 00	 call	 ?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
  001d8	83 f8 01	 cmp	 eax, 1
  001db	75 07		 jne	 SHORT $LN3@GetTaxHunt
$LN1@GetTaxHunt:

; 71   : 		{
; 72   : 			iCurTaxHuntZone = 0;

  001dd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCurTaxHuntZone$[ebp], 0
$LN3@GetTaxHunt:

; 73   : 		}
; 74   : 	}
; 75   : 
; 76   : 	return iCurTaxHuntZone;

  001e4	8b 45 f8	 mov	 eax, DWORD PTR _iCurTaxHuntZone$[ebp]

; 77   : }

  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi
  001e9	5b		 pop	 ebx
  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c2 08 00	 ret	 8
?GetTaxHuntZone@CCastleSiegeSync@@QAEHHH@Z ENDP		; CCastleSiegeSync::GetTaxHuntZone
_TEXT	ENDS
PUBLIC	?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z	; CCastleSiegeSync::AddTributeMoney
EXTRN	__imp__InterlockedExchangeAdd@8:PROC
EXTRN	__imp__InterlockedExchange@8:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMoney$ = 8						; size = 4
?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z PROC		; CCastleSiegeSync::AddTributeMoney
; _this$ = ecx

; 80   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	83 ec 44	 sub	 esp, 68			; 00000044H
  001f6	53		 push	 ebx
  001f7	56		 push	 esi
  001f8	57		 push	 edi
  001f9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 	if ( this->m_lCastleTributeMoney < 0 )

  001fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ff	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00203	7d 0f		 jge	 SHORT $LN3@AddTribute

; 82   : 	{
; 83   : 		InterlockedExchange((LPLONG)&this->m_lCastleTributeMoney, 0);

  00205	6a 00		 push	 0
  00207	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0020a	83 c0 14	 add	 eax, 20			; 00000014H
  0020d	50		 push	 eax
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
$LN3@AddTribute:

; 84   : 	}
; 85   : 
; 86   : 	if ( iMoney <= 0 )

  00214	83 7d 08 00	 cmp	 DWORD PTR _iMoney$[ebp], 0
  00218	7f 02		 jg	 SHORT $LN2@AddTribute

; 87   : 	{
; 88   : 		return;

  0021a	eb 24		 jmp	 SHORT $LN4@AddTribute
$LN2@AddTribute:

; 89   : 	}
; 90   : 
; 91   : 	if ( (this->m_lCastleTributeMoney + iMoney) > MAX_TRIBUTE_MONEY )

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0021f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00222	03 4d 08	 add	 ecx, DWORD PTR _iMoney$[ebp]
  00225	81 f9 00 94 35
	77		 cmp	 ecx, 2000000000		; 77359400H
  0022b	7e 02		 jle	 SHORT $LN1@AddTribute

; 92   : 	{
; 93   : 		return;

  0022d	eb 11		 jmp	 SHORT $LN4@AddTribute
$LN1@AddTribute:

; 94   : 	}
; 95   : 
; 96   : 	InterlockedExchangeAdd((LPLONG)&this->m_lCastleTributeMoney, iMoney);

  0022f	8b 45 08	 mov	 eax, DWORD PTR _iMoney$[ebp]
  00232	50		 push	 eax
  00233	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00236	83 c1 14	 add	 ecx, 20			; 00000014H
  00239	51		 push	 ecx
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchangeAdd@8
$LN4@AddTribute:

; 97   : }

  00240	5f		 pop	 edi
  00241	5e		 pop	 esi
  00242	5b		 pop	 ebx
  00243	8b e5		 mov	 esp, ebp
  00245	5d		 pop	 ebp
  00246	c2 04 00	 ret	 4
?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ENDP		; CCastleSiegeSync::AddTributeMoney
_TEXT	ENDS
PUBLIC	?ResetTributeMoney@CCastleSiegeSync@@QAEXXZ	; CCastleSiegeSync::ResetTributeMoney
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetTributeMoney@CCastleSiegeSync@@QAEXXZ PROC	; CCastleSiegeSync::ResetTributeMoney
; _this$ = ecx

; 100  : {

  00250	55		 push	 ebp
  00251	8b ec		 mov	 ebp, esp
  00253	83 ec 44	 sub	 esp, 68			; 00000044H
  00256	53		 push	 ebx
  00257	56		 push	 esi
  00258	57		 push	 edi
  00259	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 101  : 	InterlockedExchange((LPLONG)&this->m_lCastleTributeMoney, 0);

  0025c	6a 00		 push	 0
  0025e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00261	83 c0 14	 add	 eax, 20			; 00000014H
  00264	50		 push	 eax
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 102  : }

  0026b	5f		 pop	 edi
  0026c	5e		 pop	 esi
  0026d	5b		 pop	 ebx
  0026e	8b e5		 mov	 esp, ebp
  00270	5d		 pop	 ebp
  00271	c3		 ret	 0
?ResetTributeMoney@CCastleSiegeSync@@QAEXXZ ENDP	; CCastleSiegeSync::ResetTributeMoney
_TEXT	ENDS
PUBLIC	?GetMapSvrGroup@CMapServerManager@@QAEHXZ	; CMapServerManager::GetMapSvrGroup
PUBLIC	?AdjustTributeMoney@CCastleSiegeSync@@QAEXXZ	; CCastleSiegeSync::AdjustTributeMoney
EXTRN	?GS_GDReqCastleTributeMoney@@YAXHH@Z:PROC	; GS_GDReqCastleTributeMoney
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AdjustTributeMoney@CCastleSiegeSync@@QAEXXZ PROC	; CCastleSiegeSync::AdjustTributeMoney
; _this$ = ecx

; 105  : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 44	 sub	 esp, 68			; 00000044H
  00286	53		 push	 ebx
  00287	56		 push	 esi
  00288	57		 push	 edi
  00289	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	if ( this->m_lCastleTributeMoney < 0 )

  0028c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028f	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00293	7d 0f		 jge	 SHORT $LN3@AdjustTrib

; 107  : 	{
; 108  : 		InterlockedExchange((LPLONG)&this->m_lCastleTributeMoney, 0);

  00295	6a 00		 push	 0
  00297	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0029a	83 c0 14	 add	 eax, 20			; 00000014H
  0029d	50		 push	 eax
  0029e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
$LN3@AdjustTrib:

; 109  : 	}
; 110  : 
; 111  : 	if ( this->m_lCastleTributeMoney == 0 )

  002a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a7	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  002ab	75 02		 jne	 SHORT $LN2@AdjustTrib

; 112  : 	{
; 113  : 		return;

  002ad	eb 48		 jmp	 SHORT $LN4@AdjustTrib
$LN2@AdjustTrib:

; 114  : 	}
; 115  : 
; 116  : 	this->m_iCsTributeMoneyTimer++;

  002af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b2	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  002b5	83 c1 01	 add	 ecx, 1
  002b8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002bb	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 117  : 
; 118  : 	this->m_iCsTributeMoneyTimer %= 180;

  002be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c1	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  002c4	99		 cdq
  002c5	b9 b4 00 00 00	 mov	 ecx, 180		; 000000b4H
  002ca	f7 f9		 idiv	 ecx
  002cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002cf	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 119  : 
; 120  : 	if ( this->m_iCsTributeMoneyTimer != 0 )

  002d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d5	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  002d9	74 02		 je	 SHORT $LN1@AdjustTrib

; 121  : 	{
; 122  : 		return;

  002db	eb 1a		 jmp	 SHORT $LN4@AdjustTrib
$LN1@AdjustTrib:

; 123  : 	}
; 124  : 
; 125  : 	GS_GDReqCastleTributeMoney(g_MapServerManager.GetMapSvrGroup(), this->m_lCastleTributeMoney);

  002dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002e0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002e3	51		 push	 ecx
  002e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  002e9	e8 00 00 00 00	 call	 ?GetMapSvrGroup@CMapServerManager@@QAEHXZ ; CMapServerManager::GetMapSvrGroup
  002ee	50		 push	 eax
  002ef	e8 00 00 00 00	 call	 ?GS_GDReqCastleTributeMoney@@YAXHH@Z ; GS_GDReqCastleTributeMoney
  002f4	83 c4 08	 add	 esp, 8
$LN4@AdjustTrib:

; 126  : }

  002f7	5f		 pop	 edi
  002f8	5e		 pop	 esi
  002f9	5b		 pop	 ebx
  002fa	8b e5		 mov	 esp, ebp
  002fc	5d		 pop	 ebp
  002fd	c3		 ret	 0
?AdjustTributeMoney@CCastleSiegeSync@@QAEXXZ ENDP	; CCastleSiegeSync::AdjustTributeMoney
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mapservermanager.h
_TEXT	ENDS
;	COMDAT ?GetMapSvrGroup@CMapServerManager@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMapSvrGroup@CMapServerManager@@QAEHXZ PROC		; CMapServerManager::GetMapSvrGroup, COMDAT
; _this$ = ecx

; 49   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 		if ( this->m_lpThisMapSvrData != NULL )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 c0 4b 01
	00 00		 cmp	 DWORD PTR [eax+84928], 0
  00016	74 0f		 je	 SHORT $LN1@GetMapSvrG

; 51   : 		{
; 52   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 88 c0 4b 01
	00		 mov	 ecx, DWORD PTR [eax+84928]
  00021	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]
  00025	eb 03		 jmp	 SHORT $LN2@GetMapSvrG
$LN1@GetMapSvrG:

; 53   : 		}
; 54   : 		return -1;

  00027	83 c8 ff	 or	 eax, -1
$LN2@GetMapSvrG:

; 55   : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?GetMapSvrGroup@CMapServerManager@@QAEHXZ ENDP		; CMapServerManager::GetMapSvrGroup
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	_strcmp:PROC
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\projects\exteam6.3\source\gameserver\gameserver\castlesiegesync.cpp
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z PROC	; CCastleSiegeSync::CheckCastleOwnerMember
; _this$ = ecx

; 129  : {

  00300	55		 push	 ebp
  00301	8b ec		 mov	 ebp, esp
  00303	83 ec 44	 sub	 esp, 68			; 00000044H
  00306	53		 push	 ebx
  00307	56		 push	 esi
  00308	57		 push	 edi
  00309	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 130  : 	if ( gObjIsConnected(iIndex) == FALSE )

  0030c	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0030f	50		 push	 eax
  00310	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00315	83 c4 04	 add	 esp, 4
  00318	85 c0		 test	 eax, eax
  0031a	75 04		 jne	 SHORT $LN3@CheckCastl

; 131  : 	{
; 132  : 		return FALSE;

  0031c	33 c0		 xor	 eax, eax
  0031e	eb 4f		 jmp	 SHORT $LN4@CheckCastl
$LN3@CheckCastl:

; 133  : 	}
; 134  : 
; 135  : 	if ( strcmp(this->m_szCastleOwnerGuild, "") == 0 )

  00320	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00325	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00328	83 c0 18	 add	 eax, 24			; 00000018H
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 _strcmp
  00331	83 c4 08	 add	 esp, 8
  00334	85 c0		 test	 eax, eax
  00336	75 04		 jne	 SHORT $LN2@CheckCastl

; 136  : 	{
; 137  : 		return FALSE;

  00338	33 c0		 xor	 eax, eax
  0033a	eb 33		 jmp	 SHORT $LN4@CheckCastl
$LN2@CheckCastl:

; 138  : 	}
; 139  : 
; 140  : 	if ( strcmp(gObj[iIndex].GuildName, this->m_szCastleOwnerGuild) != 0 )

  0033c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0033f	83 c0 18	 add	 eax, 24			; 00000018H
  00342	50		 push	 eax
  00343	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00346	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0034c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00352	8d 84 0a 3c 04
	00 00		 lea	 eax, DWORD PTR [edx+ecx+1084]
  00359	50		 push	 eax
  0035a	e8 00 00 00 00	 call	 _strcmp
  0035f	83 c4 08	 add	 esp, 8
  00362	85 c0		 test	 eax, eax
  00364	74 04		 je	 SHORT $LN1@CheckCastl

; 141  : 	{
; 142  : 		return FALSE;

  00366	33 c0		 xor	 eax, eax
  00368	eb 05		 jmp	 SHORT $LN4@CheckCastl
$LN1@CheckCastl:

; 143  : 	}
; 144  : 
; 145  : 	return TRUE;

  0036a	b8 01 00 00 00	 mov	 eax, 1
$LN4@CheckCastl:

; 146  : }

  0036f	5f		 pop	 edi
  00370	5e		 pop	 esi
  00371	5b		 pop	 ebx
  00372	8b e5		 mov	 esp, ebp
  00374	5d		 pop	 ebp
  00375	c2 04 00	 ret	 4
?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ENDP	; CCastleSiegeSync::CheckCastleOwnerMember
_TEXT	ENDS
EXTRN	?SearchUnion@TUnion@@QAEPAVTUnionInfo@@H@Z:PROC	; TUnion::SearchUnion
EXTRN	?UnionManager@@3VTUnion@@A:BYTE			; UnionManager
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_pUnionInfo$ = -12					; size = 4
_lpGuildInfo$ = -8					; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z PROC ; CCastleSiegeSync::CheckCastleOwnerUnionMember
; _this$ = ecx

; 149  : {

  00380	55		 push	 ebp
  00381	8b ec		 mov	 ebp, esp
  00383	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00386	53		 push	 ebx
  00387	56		 push	 esi
  00388	57		 push	 edi
  00389	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 150  : 	if ( gObjIsConnected(iIndex) == FALSE )

  0038c	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00395	83 c4 04	 add	 esp, 4
  00398	85 c0		 test	 eax, eax
  0039a	75 07		 jne	 SHORT $LN5@CheckCastl@2

; 151  : 	{
; 152  : 		return FALSE;

  0039c	33 c0		 xor	 eax, eax
  0039e	e9 83 00 00 00	 jmp	 $LN6@CheckCastl@2
$LN5@CheckCastl@2:

; 153  : 	}
; 154  : 
; 155  : 	if ( strcmp(this->m_szCastleOwnerGuild, "") == 0 )

  003a3	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  003a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003ab	83 c0 18	 add	 eax, 24			; 00000018H
  003ae	50		 push	 eax
  003af	e8 00 00 00 00	 call	 _strcmp
  003b4	83 c4 08	 add	 esp, 8
  003b7	85 c0		 test	 eax, eax
  003b9	75 04		 jne	 SHORT $LN4@CheckCastl@2

; 156  : 	{
; 157  : 		return FALSE;

  003bb	33 c0		 xor	 eax, eax
  003bd	eb 67		 jmp	 SHORT $LN6@CheckCastl@2
$LN4@CheckCastl@2:

; 158  : 	}
; 159  : 
; 160  : 	_GUILD_INFO_STRUCT * lpGuildInfo = gObj[iIndex].lpGuild;

  003bf	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  003c2	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  003c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003ce	8b 94 01 38 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1080]
  003d5	89 55 f8	 mov	 DWORD PTR _lpGuildInfo$[ebp], edx

; 161  : 	
; 162  : 	if ( lpGuildInfo == NULL )

  003d8	83 7d f8 00	 cmp	 DWORD PTR _lpGuildInfo$[ebp], 0
  003dc	75 04		 jne	 SHORT $LN3@CheckCastl@2

; 163  : 	{
; 164  : 		return FALSE;

  003de	33 c0		 xor	 eax, eax
  003e0	eb 44		 jmp	 SHORT $LN6@CheckCastl@2
$LN3@CheckCastl@2:

; 165  : 	}
; 166  : 	
; 167  : 	TUnionInfo * pUnionInfo = UnionManager.SearchUnion(lpGuildInfo->iGuildUnion);

  003e2	8b 45 f8	 mov	 eax, DWORD PTR _lpGuildInfo$[ebp]
  003e5	8b 88 1c 07 00
	00		 mov	 ecx, DWORD PTR [eax+1820]
  003eb	51		 push	 ecx
  003ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?UnionManager@@3VTUnion@@A ; UnionManager
  003f1	e8 00 00 00 00	 call	 ?SearchUnion@TUnion@@QAEPAVTUnionInfo@@H@Z ; TUnion::SearchUnion
  003f6	89 45 f4	 mov	 DWORD PTR _pUnionInfo$[ebp], eax

; 168  : 
; 169  : 	if ( pUnionInfo == NULL )

  003f9	83 7d f4 00	 cmp	 DWORD PTR _pUnionInfo$[ebp], 0
  003fd	75 04		 jne	 SHORT $LN2@CheckCastl@2

; 170  : 	{
; 171  : 		return FALSE;

  003ff	33 c0		 xor	 eax, eax
  00401	eb 23		 jmp	 SHORT $LN6@CheckCastl@2
$LN2@CheckCastl@2:

; 172  : 	}
; 173  : 
; 174  : 	if ( strcmp( pUnionInfo->m_szMasterGuild, this->m_szCastleOwnerGuild) == 0 )

  00403	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00406	83 c0 18	 add	 eax, 24			; 00000018H
  00409	50		 push	 eax
  0040a	8b 4d f4	 mov	 ecx, DWORD PTR _pUnionInfo$[ebp]
  0040d	83 c1 10	 add	 ecx, 16			; 00000010H
  00410	51		 push	 ecx
  00411	e8 00 00 00 00	 call	 _strcmp
  00416	83 c4 08	 add	 esp, 8
  00419	85 c0		 test	 eax, eax
  0041b	75 07		 jne	 SHORT $LN1@CheckCastl@2

; 175  : 	{
; 176  : 		return TRUE;

  0041d	b8 01 00 00 00	 mov	 eax, 1
  00422	eb 02		 jmp	 SHORT $LN6@CheckCastl@2
$LN1@CheckCastl@2:

; 177  : 	}
; 178  : 
; 179  : 	return FALSE;

  00424	33 c0		 xor	 eax, eax
$LN6@CheckCastl@2:

; 180  : }

  00426	5f		 pop	 edi
  00427	5e		 pop	 esi
  00428	5b		 pop	 ebx
  00429	8b e5		 mov	 esp, ebp
  0042b	5d		 pop	 ebp
  0042c	c2 04 00	 ret	 4
?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ENDP ; CCastleSiegeSync::CheckCastleOwnerUnionMember
_TEXT	ENDS
PUBLIC	?CheckOverlapCsMarks@CCastleSiegeSync@@QAEHH@Z	; CCastleSiegeSync::CheckOverlapCsMarks
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv132 = -80						; size = 4
_op$221468 = -12					; size = 4
_x$221461 = -8						; size = 4
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?CheckOverlapCsMarks@CCastleSiegeSync@@QAEHH@Z PROC	; CCastleSiegeSync::CheckOverlapCsMarks
; _this$ = ecx

; 183  : {

  00430	55		 push	 ebp
  00431	8b ec		 mov	 ebp, esp
  00433	83 ec 50	 sub	 esp, 80			; 00000050H
  00436	53		 push	 ebx
  00437	56		 push	 esi
  00438	57		 push	 edi
  00439	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 184  : 	for ( int x=INVENTORY_BAG_START;x<MAIN_INVENTORY_SIZE;x++)

  0043c	c7 45 f8 0c 00
	00 00		 mov	 DWORD PTR _x$221461[ebp], 12 ; 0000000cH
  00443	eb 09		 jmp	 SHORT $LN7@CheckOverl
$LN6@CheckOverl:
  00445	8b 45 f8	 mov	 eax, DWORD PTR _x$221461[ebp]
  00448	83 c0 01	 add	 eax, 1
  0044b	89 45 f8	 mov	 DWORD PTR _x$221461[ebp], eax
$LN7@CheckOverl:
  0044e	81 7d f8 cc 00
	00 00		 cmp	 DWORD PTR _x$221461[ebp], 204 ; 000000ccH
  00455	0f 8d db 00 00
	00		 jge	 $LN5@CheckOverl

; 185  : 	{
; 186  : 		if ( gObj[iIndex].pInventory[x].IsItem() == TRUE )

  0045b	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0045e	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00464	8b 4d f8	 mov	 ecx, DWORD PTR _x$221461[ebp]
  00467	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0046d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00473	03 8c 02 24 0e
	00 00		 add	 ecx, DWORD PTR [edx+eax+3620]
  0047a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0047f	83 f8 01	 cmp	 eax, 1
  00482	0f 85 a9 00 00
	00		 jne	 $LN1@CheckOverl

; 187  : 		{
; 188  : 			if ( gObj[iIndex].pInventory[x].m_Type == ITEMGET(14,21) )

  00488	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0048b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00491	8b 4d f8	 mov	 ecx, DWORD PTR _x$221461[ebp]
  00494	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0049a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004a0	8b 84 02 24 0e
	00 00		 mov	 eax, DWORD PTR [edx+eax+3620]
  004a7	0f bf 4c 08 06	 movsx	 ecx, WORD PTR [eax+ecx+6]
  004ac	81 f9 15 1c 00
	00		 cmp	 ecx, 7189		; 00001c15H
  004b2	75 7d		 jne	 SHORT $LN1@CheckOverl

; 189  : 			{
; 190  : 				if ( gObj[iIndex].pInventory[x].m_Level == 3 )

  004b4	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  004b7	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  004bd	8b 4d f8	 mov	 ecx, DWORD PTR _x$221461[ebp]
  004c0	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  004c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004cc	8b 84 02 24 0e
	00 00		 mov	 eax, DWORD PTR [edx+eax+3620]
  004d3	0f bf 4c 08 08	 movsx	 ecx, WORD PTR [eax+ecx+8]
  004d8	83 f9 03	 cmp	 ecx, 3
  004db	75 54		 jne	 SHORT $LN1@CheckOverl

; 191  : 				{
; 192  : 					int op = (int)gObj[iIndex].pInventory[x].m_Durability;

  004dd	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  004e0	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  004e6	8b 4d f8	 mov	 ecx, DWORD PTR _x$221461[ebp]
  004e9	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  004ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004f5	8b 84 02 24 0e
	00 00		 mov	 eax, DWORD PTR [edx+eax+3620]
  004fc	d9 44 08 24	 fld	 DWORD PTR [eax+ecx+36]
  00500	e8 00 00 00 00	 call	 __ftol2_sse
  00505	89 45 f4	 mov	 DWORD PTR _op$221468[ebp], eax

; 193  : 
; 194  : 					if ( ITEM_DUR_RANGE(op) != FALSE)

  00508	83 7d f4 00	 cmp	 DWORD PTR _op$221468[ebp], 0
  0050c	7d 09		 jge	 SHORT $LN10@CheckOverl
  0050e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
  00515	eb 0f		 jmp	 SHORT $LN11@CheckOverl
$LN10@CheckOverl:
  00517	33 c0		 xor	 eax, eax
  00519	81 7d f4 fe 00
	00 00		 cmp	 DWORD PTR _op$221468[ebp], 254 ; 000000feH
  00520	0f 9e c0	 setle	 al
  00523	89 45 b0	 mov	 DWORD PTR tv132[ebp], eax
$LN11@CheckOverl:
  00526	83 7d b0 00	 cmp	 DWORD PTR tv132[ebp], 0
  0052a	74 05		 je	 SHORT $LN1@CheckOverl

; 195  : 					{
; 196  : 						return x;

  0052c	8b 45 f8	 mov	 eax, DWORD PTR _x$221461[ebp]
  0052f	eb 08		 jmp	 SHORT $LN8@CheckOverl
$LN1@CheckOverl:

; 197  : 					}
; 198  : 				}
; 199  : 			}
; 200  : 		}
; 201  : 	}

  00531	e9 0f ff ff ff	 jmp	 $LN6@CheckOverl
$LN5@CheckOverl:

; 202  : 
; 203  : 	return -1;

  00536	83 c8 ff	 or	 eax, -1
$LN8@CheckOverl:

; 204  : }

  00539	5f		 pop	 edi
  0053a	5e		 pop	 esi
  0053b	5b		 pop	 ebx
  0053c	8b e5		 mov	 esp, ebp
  0053e	5d		 pop	 ebp
  0053f	c2 04 00	 ret	 4
?CheckOverlapCsMarks@CCastleSiegeSync@@QAEHH@Z ENDP	; CCastleSiegeSync::CheckOverlapCsMarks
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Eg_CastleSiegeSync@@YAXXZ
text$yc	SEGMENT
??__Eg_CastleSiegeSync@@YAXXZ PROC			; `dynamic initializer for 'g_CastleSiegeSync'', COMDAT

; 206  : CCastleSiegeSync g_CastleSiegeSync;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0000e	e8 00 00 00 00	 call	 ??0CCastleSiegeSync@@QAE@XZ ; CCastleSiegeSync::CCastleSiegeSync
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_CastleSiegeSync@@YAXXZ ; `dynamic atexit destructor for 'g_CastleSiegeSync''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_CastleSiegeSync@@YAXXZ ENDP			; `dynamic initializer for 'g_CastleSiegeSync''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__Fg_CastleSiegeSync@@YAXXZ
text$yd	SEGMENT
??__Fg_CastleSiegeSync@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CastleSiegeSync'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0000e	e8 00 00 00 00	 call	 ??1CCastleSiegeSync@@UAE@XZ ; CCastleSiegeSync::~CCastleSiegeSync
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_CastleSiegeSync@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CastleSiegeSync''
text$yd	ENDS
PUBLIC	?g_CastleSiegeSync@@3VCCastleSiegeSync@@A	; g_CastleSiegeSync
_BSS	SEGMENT
?g_CastleSiegeSync@@3VCCastleSiegeSync@@A DB 02cH DUP (?) ; g_CastleSiegeSync
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CastleSiegeSync$initializer$ DD FLAT:??__Eg_CastleSiegeSync@@YAXXZ
CRT$XCU	ENDS
END
