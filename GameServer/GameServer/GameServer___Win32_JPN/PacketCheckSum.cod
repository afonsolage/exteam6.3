; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\PacketCheckSum.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@CPacketCheckSum@@QAEXXZ			; CPacketCheckSum::Init
PUBLIC	??_7CPacketCheckSum@@6B@			; CPacketCheckSum::`vftable'
PUBLIC	??0CPacketCheckSum@@QAE@XZ			; CPacketCheckSum::CPacketCheckSum
PUBLIC	??_R4CPacketCheckSum@@6B@			; CPacketCheckSum::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPacketCheckSum@@@8			; CPacketCheckSum `RTTI Type Descriptor'
PUBLIC	??_R3CPacketCheckSum@@8				; CPacketCheckSum::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPacketCheckSum@@8				; CPacketCheckSum::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPacketCheckSum@@8		; CPacketCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECPacketCheckSum@@UAEPAXI@Z:PROC		; CPacketCheckSum::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CPacketCheckSum@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\packetchecksum.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CPacketCheckSum@@8 DD FLAT:??_R0?AVCPacketCheckSum@@@8 ; CPacketCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R2CPacketCheckSum@@8
rdata$r	SEGMENT
??_R2CPacketCheckSum@@8 DD FLAT:??_R1A@?0A@EA@CPacketCheckSum@@8 ; CPacketCheckSum::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPacketCheckSum@@8
rdata$r	SEGMENT
??_R3CPacketCheckSum@@8 DD 00H				; CPacketCheckSum::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPacketCheckSum@@@8
_DATA	SEGMENT
??_R0?AVCPacketCheckSum@@@8 DD FLAT:??_7type_info@@6B@	; CPacketCheckSum `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPacketCheckSum@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPacketCheckSum@@6B@
rdata$r	SEGMENT
??_R4CPacketCheckSum@@6B@ DD 00H			; CPacketCheckSum::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPacketCheckSum@@@8
	DD	FLAT:??_R3CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_7CPacketCheckSum@@6B@
CONST	SEGMENT
??_7CPacketCheckSum@@6B@ DD FLAT:??_R4CPacketCheckSum@@6B@ ; CPacketCheckSum::`vftable'
	DD	FLAT:??_ECPacketCheckSum@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPacketCheckSum@@QAE@XZ PROC				; CPacketCheckSum::CPacketCheckSum
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPacketCheckSum@@6B@

; 15   : 	this->Init();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Init@CPacketCheckSum@@QAEXXZ ; CPacketCheckSum::Init

; 16   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CPacketCheckSum@@QAE@XZ ENDP				; CPacketCheckSum::CPacketCheckSum
_TEXT	ENDS
PUBLIC	??1CPacketCheckSum@@UAE@XZ			; CPacketCheckSum::~CPacketCheckSum
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCPacketCheckSum@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPacketCheckSum@@UAEPAXI@Z PROC			; CPacketCheckSum::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CPacketCheckSum@@UAE@XZ ; CPacketCheckSum::~CPacketCheckSum
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCPacketCheckSum@@UAEPAXI@Z ENDP			; CPacketCheckSum::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPacketCheckSum@@UAE@XZ PROC				; CPacketCheckSum::~CPacketCheckSum
; _this$ = ecx

; 22   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	83 ec 44	 sub	 esp, 68			; 00000044H
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPacketCheckSum@@6B@

; 23   : 	return;
; 24   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??1CPacketCheckSum@@UAE@XZ ENDP				; CPacketCheckSum::~CPacketCheckSum
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CPacketCheckSum@@QAEXXZ PROC			; CPacketCheckSum::Init
; _this$ = ecx

; 29   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 44	 sub	 esp, 68			; 00000044H
  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	this->m_ChecksumTableAllClearState = 0;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 80 44 24 14
	00 00 00 00 00	 mov	 DWORD PTR [eax+1320004], 0

; 31   : 	memset(this->m_ChecksumTableClearState, 0, sizeof(this->m_ChecksumTableClearState));

  00069	6a 58		 push	 88			; 00000058H
  0006b	6a 00		 push	 0
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	05 48 24 14 00	 add	 eax, 1320008		; 00142448H
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _memset
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   : 	memset(this->m_ChecksumTableAVGCount, 0, sizeof(this->m_ChecksumTableAVGCount));

  0007e	6a 58		 push	 88			; 00000058H
  00080	6a 00		 push	 0
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	05 a0 24 14 00	 add	 eax, 1320096		; 001424a0H
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _memset
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 33   : 	memset(this->m_ChecksumTableAVG, 0, sizeof(this->m_ChecksumTableAVG));

  00093	68 60 22 00 00	 push	 8800			; 00002260H
  00098	6a 00		 push	 0
  0009a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	05 f8 24 14 00	 add	 eax, 1320184		; 001424f8H
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _memset
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 34   : 	memset(this->PaketChecksum, 0, sizeof(this->PaketChecksum));

  000ab	68 40 24 14 00	 push	 1320000			; 00142440H
  000b0	6a 00		 push	 0
  000b2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	83 c0 04	 add	 eax, 4
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _memset
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 35   : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
?Init@CPacketCheckSum@@QAEXXZ ENDP			; CPacketCheckSum::Init
_TEXT	ENDS
PUBLIC	??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ ; `string'
PUBLIC	?ClearCheckSum@CPacketCheckSum@@QAEXH@Z		; CPacketCheckSum::ClearCheckSum
PUBLIC	??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Check@CPacketCheckSum@@QAEXH@Z			; CPacketCheckSum::Check
EXTRN	?gObjCloseSet@@YAXHH@Z:PROC			; gObjCloseSet
EXTRN	?gDisconnectHackUser@@3HA:DWORD			; gDisconnectHackUser
EXTRN	?Send@CSendHackLog@@QAEXHEPAD@Z:PROC		; CSendHackLog::Send
EXTRN	?gSendHackLog@@3VCSendHackLog@@A:BYTE		; gSendHackLog
EXTRN	__imp__wsprintfA:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
CONST	SEGMENT
??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ DB 'C'
	DB	'heck PacketCheckSum [%d][%s][%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@ DB 'PacketCheckSum E'
	DB	'rror %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
CONST	SEGMENT
??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ DB 'P'
	DB	'acketCheckSum Error [%d][%s][%s] %d', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_szPacketError$227099 = -268				; size = 256
_i$227094 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?Check@CPacketCheckSum@@QAEXH@Z PROC			; CPacketCheckSum::Check
; _this$ = ecx

; 41   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000de	33 c5		 xor	 eax, ebp
  000e0	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000e3	53		 push	 ebx
  000e4	56		 push	 esi
  000e5	57		 push	 edi
  000e6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	if ( gObj[aIndex].m_InWebzen != false )	// Olny for Local Test and Test Mains

  000e9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000ec	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f8	0f b6 94 01 e5
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax+4325]
  00100	85 d2		 test	 edx, edx
  00102	74 05		 je	 SHORT $LN6@Check

; 43   : 	{
; 44   : 		return;

  00104	e9 14 01 00 00	 jmp	 $LN7@Check
$LN6@Check:

; 45   : 	}
; 46   : 
; 47   : 	for ( int i=0 ; i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX ; i++)

  00109	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$227094[ebp], 0
  00110	eb 09		 jmp	 SHORT $LN5@Check
$LN4@Check:
  00112	8b 45 f4	 mov	 eax, DWORD PTR _i$227094[ebp]
  00115	83 c0 01	 add	 eax, 1
  00118	89 45 f4	 mov	 DWORD PTR _i$227094[ebp], eax
$LN5@Check:
  0011b	83 7d f4 16	 cmp	 DWORD PTR _i$227094[ebp], 22 ; 00000016H
  0011f	0f 8d b2 00 00
	00		 jge	 $LN3@Check

; 48   : 	{
; 49   : 		if ( this->PaketChecksum[aIndex].Check[i] == 0 )

  00125	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00128	6b c0 58	 imul	 eax, 88			; 00000058H
  0012b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00132	8b 45 f4	 mov	 eax, DWORD PTR _i$227094[ebp]
  00135	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00139	0f 85 93 00 00
	00		 jne	 $LN2@Check

; 50   : 		{
; 51   : 			char szPacketError[256];
; 52   : 
; 53   : 			LogAddTD("PacketCheckSum Error [%d][%s][%s] %d",
; 54   : 				aIndex, gObj[aIndex].AccountID, gObj[aIndex].Name, i);

  0013f	8b 45 f4	 mov	 eax, DWORD PTR _i$227094[ebp]
  00142	50		 push	 eax
  00143	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00146	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  0014c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00152	8d 44 0a 77	 lea	 eax, DWORD PTR [edx+ecx+119]
  00156	50		 push	 eax
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0015a	69 c9 38 2b 00
	00		 imul	 ecx, 11064		; 00002b38H
  00160	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00166	8d 44 0a 6c	 lea	 eax, DWORD PTR [edx+ecx+108]
  0016a	50		 push	 eax
  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0016e	51		 push	 ecx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0017a	83 c4 14	 add	 esp, 20			; 00000014H

; 55   : 			
; 56   : 			wsprintf(szPacketError, "PacketCheckSum Error %d", i);

  0017d	8b 45 f4	 mov	 eax, DWORD PTR _i$227094[ebp]
  00180	50		 push	 eax
  00181	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@
  00186	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _szPacketError$227099[ebp]
  0018c	51		 push	 ecx
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00193	83 c4 0c	 add	 esp, 12			; 0000000cH

; 57   : 
; 58   : 			gSendHackLog.Send(aIndex, 1, szPacketError);	// Hack Log Server

  00196	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szPacketError$227099[ebp]
  0019c	50		 push	 eax
  0019d	6a 01		 push	 1
  0019f	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  001a2	51		 push	 ecx
  001a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSendHackLog@@3VCSendHackLog@@A ; gSendHackLog
  001a8	e8 00 00 00 00	 call	 ?Send@CSendHackLog@@QAEXHEPAD@Z ; CSendHackLog::Send

; 59   : 
; 60   : 			this->ClearCheckSum(aIndex);

  001ad	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001b0	50		 push	 eax
  001b1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b4	e8 00 00 00 00	 call	 ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::ClearCheckSum

; 61   : 
; 62   : 			if ( gDisconnectHackUser != FALSE )

  001b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDisconnectHackUser@@3HA, 0 ; gDisconnectHackUser
  001c0	74 0e		 je	 SHORT $LN1@Check

; 63   : 			{
; 64   : 				gObjCloseSet(aIndex, 0);

  001c2	6a 00		 push	 0
  001c4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet
  001cd	83 c4 08	 add	 esp, 8
$LN1@Check:

; 65   : 			}
; 66   : 
; 67   : 			return;

  001d0	eb 4b		 jmp	 SHORT $LN7@Check
$LN2@Check:

; 68   : 		}
; 69   : 	}

  001d2	e9 3b ff ff ff	 jmp	 $LN4@Check
$LN3@Check:

; 70   : 
; 71   : 	LogAddTD("Check PacketCheckSum [%d][%s][%s]", aIndex, gObj[aIndex].AccountID, gObj[aIndex].Name);

  001d7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001da	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  001e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e6	8d 54 01 77	 lea	 edx, DWORD PTR [ecx+eax+119]
  001ea	52		 push	 edx
  001eb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001ee	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  001f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001fa	8d 54 01 6c	 lea	 edx, DWORD PTR [ecx+eax+108]
  001fe	52		 push	 edx
  001ff	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00202	50		 push	 eax
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
  00208	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0020e	83 c4 10	 add	 esp, 16			; 00000010H

; 72   : 	this->ClearCheckSum(aIndex);

  00211	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00214	50		 push	 eax
  00215	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00218	e8 00 00 00 00	 call	 ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::ClearCheckSum
$LN7@Check:

; 73   : }

  0021d	5f		 pop	 edi
  0021e	5e		 pop	 esi
  0021f	5b		 pop	 ebx
  00220	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00223	33 cd		 xor	 ecx, ebp
  00225	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022a	8b e5		 mov	 esp, ebp
  0022c	5d		 pop	 ebp
  0022d	c2 04 00	 ret	 4
?Check@CPacketCheckSum@@QAEXH@Z ENDP			; CPacketCheckSum::Check
; Function compile flags: /Odtp /ZI
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?ClearCheckSum@CPacketCheckSum@@QAEXH@Z PROC		; CPacketCheckSum::ClearCheckSum
; _this$ = ecx

; 78   : {

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	83 ec 44	 sub	 esp, 68			; 00000044H
  00236	53		 push	 ebx
  00237	56		 push	 esi
  00238	57		 push	 edi
  00239	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 79   : 	memset(&this->PaketChecksum[aIndex], 0, sizeof(PAKETCHECKSUM) );

  0023c	6a 58		 push	 88			; 00000058H
  0023e	6a 00		 push	 0
  00240	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00243	6b c0 58	 imul	 eax, 88			; 00000058H
  00246	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00249	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0024d	52		 push	 edx
  0024e	e8 00 00 00 00	 call	 _memset
  00253	83 c4 0c	 add	 esp, 12			; 0000000cH

; 80   : }

  00256	5f		 pop	 edi
  00257	5e		 pop	 esi
  00258	5b		 pop	 ebx
  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c2 04 00	 ret	 4
?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ENDP		; CPacketCheckSum::ClearCheckSum
_TEXT	ENDS
PUBLIC	??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ ; `string'
PUBLIC	??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Add@CPacketCheckSum@@QAEHHHK@Z			; CPacketCheckSum::Add
;	COMDAT ??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
CONST	SEGMENT
??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ DB 'PacketChec'
	DB	'kSum : Compare Fail : (%d,%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
CONST	SEGMENT
??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ DB 'PacketChe'
	DB	'ckSum : Compare Fail : [%d][%s][%s] (%d,%d)', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_szPacketError$227119 = -264				; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_funcindex$ = 12					; size = 4
_checksum$ = 16						; size = 4
?Add@CPacketCheckSum@@QAEHHHK@Z PROC			; CPacketCheckSum::Add
; _this$ = ecx

; 85   : {

  00260	55		 push	 ebp
  00261	8b ec		 mov	 ebp, esp
  00263	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00269	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0026e	33 c5		 xor	 eax, ebp
  00270	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00273	53		 push	 ebx
  00274	56		 push	 esi
  00275	57		 push	 edi
  00276	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 86   : 	if ( gObj[aIndex].m_InWebzen != false )

  00279	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0027c	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00282	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00288	0f b6 94 01 e5
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax+4325]
  00290	85 d2		 test	 edx, edx
  00292	74 0a		 je	 SHORT $LN5@Add

; 87   : 	{
; 88   : 		return true;

  00294	b8 01 00 00 00	 mov	 eax, 1
  00299	e9 e9 00 00 00	 jmp	 $LN6@Add
$LN5@Add:

; 89   : 	}
; 90   : 
; 91   : 	if ( this->m_ChecksumTableAllClearState == 0 )

  0029e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002a1	83 b8 44 24 14
	00 00		 cmp	 DWORD PTR [eax+1320004], 0
  002a8	75 20		 jne	 SHORT $LN4@Add

; 92   : 	{
; 93   : 		this->PaketChecksum[aIndex].Check[funcindex] = checksum;

  002aa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002ad	6b c0 58	 imul	 eax, 88			; 00000058H
  002b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b3	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  002b7	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  002ba	8b 4d 10	 mov	 ecx, DWORD PTR _checksum$[ebp]
  002bd	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 94   : 		return TRUE;

  002c0	b8 01 00 00 00	 mov	 eax, 1
  002c5	e9 bd 00 00 00	 jmp	 $LN6@Add
$LN4@Add:

; 95   : 	}
; 96   : 	
; 97   : 	if ( this->m_ChecksumTable[funcindex] == checksum )

  002ca	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  002cd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002d0	8b 94 81 58 47
	14 00		 mov	 edx, DWORD PTR [ecx+eax*4+1328984]
  002d7	3b 55 10	 cmp	 edx, DWORD PTR _checksum$[ebp]
  002da	75 1b		 jne	 SHORT $LN3@Add

; 98   : 	{
; 99   : 		this->PaketChecksum[aIndex].Check[funcindex] = checksum;

  002dc	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002df	6b c0 58	 imul	 eax, 88			; 00000058H
  002e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e5	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  002e9	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  002ec	8b 4d 10	 mov	 ecx, DWORD PTR _checksum$[ebp]
  002ef	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 100  : 	}
; 101  : 	else

  002f2	e9 8b 00 00 00	 jmp	 $LN2@Add
$LN3@Add:

; 102  : 	{
; 103  : 		char szPacketError[256];
; 104  : 
; 105  : 		LogAddTD("PacketCheckSum : Compare Fail : [%d][%s][%s] (%d,%d)", aIndex,
; 106  : 			gObj[aIndex].AccountID, gObj[aIndex].Name, funcindex, checksum);

  002f7	8b 45 10	 mov	 eax, DWORD PTR _checksum$[ebp]
  002fa	50		 push	 eax
  002fb	8b 4d 0c	 mov	 ecx, DWORD PTR _funcindex$[ebp]
  002fe	51		 push	 ecx
  002ff	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00302	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  00308	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0030d	8d 4c 10 77	 lea	 ecx, DWORD PTR [eax+edx+119]
  00311	51		 push	 ecx
  00312	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00315	69 d2 38 2b 00
	00		 imul	 edx, 11064		; 00002b38H
  0031b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00320	8d 4c 10 6c	 lea	 ecx, DWORD PTR [eax+edx+108]
  00324	51		 push	 ecx
  00325	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00328	52		 push	 edx
  00329	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00334	83 c4 18	 add	 esp, 24			; 00000018H

; 107  : 
; 108  : 		wsprintf(szPacketError, "PacketCheckSum : Compare Fail : (%d,%d)", funcindex, checksum);

  00337	8b 45 10	 mov	 eax, DWORD PTR _checksum$[ebp]
  0033a	50		 push	 eax
  0033b	8b 4d 0c	 mov	 ecx, DWORD PTR _funcindex$[ebp]
  0033e	51		 push	 ecx
  0033f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
  00344	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szPacketError$227119[ebp]
  0034a	52		 push	 edx
  0034b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00351	83 c4 10	 add	 esp, 16			; 00000010H

; 109  : 
; 110  : 		gSendHackLog.Send(aIndex, 1, szPacketError);

  00354	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szPacketError$227119[ebp]
  0035a	50		 push	 eax
  0035b	6a 01		 push	 1
  0035d	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00360	51		 push	 ecx
  00361	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSendHackLog@@3VCSendHackLog@@A ; gSendHackLog
  00366	e8 00 00 00 00	 call	 ?Send@CSendHackLog@@QAEXHEPAD@Z ; CSendHackLog::Send

; 111  : 
; 112  : 		if ( gDisconnectHackUser != FALSE )

  0036b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDisconnectHackUser@@3HA, 0 ; gDisconnectHackUser
  00372	74 0e		 je	 SHORT $LN2@Add

; 113  : 		{
; 114  : 			gObjCloseSet(aIndex, 0);

  00374	6a 00		 push	 0
  00376	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00379	50		 push	 eax
  0037a	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet
  0037f	83 c4 08	 add	 esp, 8
$LN2@Add:

; 115  : 		}
; 116  : 	}
; 117  : 
; 118  : 	return TRUE;

  00382	b8 01 00 00 00	 mov	 eax, 1
$LN6@Add:

; 119  : }

  00387	5f		 pop	 edi
  00388	5e		 pop	 esi
  00389	5b		 pop	 ebx
  0038a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038d	33 cd		 xor	 ecx, ebp
  0038f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00394	8b e5		 mov	 esp, ebp
  00396	5d		 pop	 ebp
  00397	c2 0c 00	 ret	 12			; 0000000cH
?Add@CPacketCheckSum@@QAEHHHK@Z ENDP			; CPacketCheckSum::Add
_TEXT	ENDS
PUBLIC	?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z	; CPacketCheckSum::SetClearChecksumFunc
PUBLIC	??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@ ; `string'
PUBLIC	?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z		; CPacketCheckSum::AddCheckSum
;	COMDAT ??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@ DB 'I'
	DB	'nsert PacketCheckSum %d, %d,%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@
CONST	SEGMENT
??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@ DB 'PacketCheckS'
	DB	'um : Invalid FuncIndex : %d, %d', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_funcindex$ = 12					; size = 4
_checksum$ = 16						; size = 4
?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z PROC		; CPacketCheckSum::AddCheckSum
; _this$ = ecx

; 126  : {

  003a0	55		 push	 ebp
  003a1	8b ec		 mov	 ebp, esp
  003a3	83 ec 44	 sub	 esp, 68			; 00000044H
  003a6	53		 push	 ebx
  003a7	56		 push	 esi
  003a8	57		 push	 edi
  003a9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 127  : 	if ( funcindex < 0 || funcindex >= MAX_PACKET_CHECKSUM_FUNCTION_INDEX )

  003ac	83 7d 0c 00	 cmp	 DWORD PTR _funcindex$[ebp], 0
  003b0	7c 06		 jl	 SHORT $LN4@AddCheckSu
  003b2	83 7d 0c 16	 cmp	 DWORD PTR _funcindex$[ebp], 22 ; 00000016H
  003b6	7c 1b		 jl	 SHORT $LN5@AddCheckSu
$LN4@AddCheckSu:

; 128  : 	{
; 129  : 		LogAddTD("PacketCheckSum : Invalid FuncIndex : %d, %d", aIndex, funcindex);

  003b8	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  003bb	50		 push	 eax
  003bc	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  003bf	51		 push	 ecx
  003c0	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@
  003c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 130  : 		return;

  003ce	e9 c5 00 00 00	 jmp	 $LN6@AddCheckSu
$LN5@AddCheckSu:

; 131  : 	}
; 132  : 
; 133  : 	this->Add(aIndex, funcindex, checksum);

  003d3	8b 45 10	 mov	 eax, DWORD PTR _checksum$[ebp]
  003d6	50		 push	 eax
  003d7	8b 4d 0c	 mov	 ecx, DWORD PTR _funcindex$[ebp]
  003da	51		 push	 ecx
  003db	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  003de	52		 push	 edx
  003df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e2	e8 00 00 00 00	 call	 ?Add@CPacketCheckSum@@QAEHHHK@Z ; CPacketCheckSum::Add

; 134  : 
; 135  : 	if ( this->m_ChecksumTableAllClearState != 0 )

  003e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003ea	83 b8 44 24 14
	00 00		 cmp	 DWORD PTR [eax+1320004], 0
  003f1	74 05		 je	 SHORT $LN3@AddCheckSu

; 136  : 	{
; 137  : 		return;

  003f3	e9 a0 00 00 00	 jmp	 $LN6@AddCheckSu
$LN3@AddCheckSu:

; 138  : 	}
; 139  : 
; 140  : 	if ( this->m_ChecksumTableClearState[funcindex] != 0 )

  003f8	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  003fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fe	83 bc 81 48 24
	14 00 00	 cmp	 DWORD PTR [ecx+eax*4+1320008], 0
  00406	74 05		 je	 SHORT $LN2@AddCheckSu

; 141  : 	{
; 142  : 		return;

  00408	e9 8b 00 00 00	 jmp	 $LN6@AddCheckSu
$LN2@AddCheckSu:

; 143  : 	}
; 144  : 
; 145  : 	this->m_ChecksumTableAVG[funcindex][this->m_ChecksumTableAVGCount[funcindex] % MAX_CHECKSUM_TABLE_AVG] = checksum;

  0040d	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  00410	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00416	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00419	8d 8c 01 f8 24
	14 00		 lea	 ecx, DWORD PTR [ecx+eax+1320184]
  00420	8b 55 0c	 mov	 edx, DWORD PTR _funcindex$[ebp]
  00423	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00426	8b 84 90 a0 24
	14 00		 mov	 eax, DWORD PTR [eax+edx*4+1320096]
  0042d	99		 cdq
  0042e	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  00433	f7 fe		 idiv	 esi
  00435	8b 45 10	 mov	 eax, DWORD PTR _checksum$[ebp]
  00438	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 146  : 	this->m_ChecksumTableAVGCount[funcindex]++;

  0043b	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  0043e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00441	8b 94 81 a0 24
	14 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320096]
  00448	83 c2 01	 add	 edx, 1
  0044b	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  0044e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00451	89 94 81 a0 24
	14 00		 mov	 DWORD PTR [ecx+eax*4+1320096], edx

; 147  : 
; 148  : 	LogAddTD("Insert PacketCheckSum %d, %d,%d", funcindex, this->m_ChecksumTableAVGCount[funcindex], checksum);

  00458	8b 45 10	 mov	 eax, DWORD PTR _checksum$[ebp]
  0045b	50		 push	 eax
  0045c	8b 4d 0c	 mov	 ecx, DWORD PTR _funcindex$[ebp]
  0045f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00462	8b 84 8a a0 24
	14 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320096]
  00469	50		 push	 eax
  0046a	8b 4d 0c	 mov	 ecx, DWORD PTR _funcindex$[ebp]
  0046d	51		 push	 ecx
  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@
  00473	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00479	83 c4 10	 add	 esp, 16			; 00000010H

; 149  : 
; 150  : 	if ( this->m_ChecksumTableAVGCount[funcindex] >= MAX_CHECKSUM_TABLE_AVG )

  0047c	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  0047f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00482	83 bc 81 a0 24
	14 00 64	 cmp	 DWORD PTR [ecx+eax*4+1320096], 100 ; 00000064H
  0048a	7c 0c		 jl	 SHORT $LN6@AddCheckSu

; 151  : 	{
; 152  : 		this->SetClearChecksumFunc(funcindex);

  0048c	8b 45 0c	 mov	 eax, DWORD PTR _funcindex$[ebp]
  0048f	50		 push	 eax
  00490	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00493	e8 00 00 00 00	 call	 ?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::SetClearChecksumFunc
$LN6@AddCheckSu:

; 153  : 	}
; 154  : }

  00498	5f		 pop	 edi
  00499	5e		 pop	 esi
  0049a	5b		 pop	 ebx
  0049b	8b e5		 mov	 esp, ebp
  0049d	5d		 pop	 ebp
  0049e	c2 0c 00	 ret	 12			; 0000000cH
?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z ENDP		; CPacketCheckSum::AddCheckSum
_TEXT	ENDS
PUBLIC	??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@ ; `string'
;	COMDAT ??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@ DB '%d, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@
CONST	SEGMENT
??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@ DB 'Complete Init Checks'
	DB	'um', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_i$227155 = -24						; size = 4
_i$227148 = -20						; size = 4
_i$227142 = -16						; size = 4
_Checksum$ = -12					; size = 4
_iCount$ = -8						; size = 4
_this$ = -4						; size = 4
_funcindex$ = 8						; size = 4
?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z PROC	; CPacketCheckSum::SetClearChecksumFunc
; _this$ = ecx

; 160  : {

  004b0	55		 push	 ebp
  004b1	8b ec		 mov	 ebp, esp
  004b3	83 ec 58	 sub	 esp, 88			; 00000058H
  004b6	53		 push	 ebx
  004b7	56		 push	 esi
  004b8	57		 push	 edi
  004b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 161  : 	int iCount = 0;

  004bc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 0

; 162  : 	int Checksum = this->m_ChecksumTableAVG[funcindex][0];

  004c3	8b 45 08	 mov	 eax, DWORD PTR _funcindex$[ebp]
  004c6	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  004cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004cf	8b 94 01 f8 24
	14 00		 mov	 edx, DWORD PTR [ecx+eax+1320184]
  004d6	89 55 f4	 mov	 DWORD PTR _Checksum$[ebp], edx

; 163  : 
; 164  : 	for ( int i=0;i<MAX_CHECKSUM_TABLE_AVG;i++)

  004d9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$227142[ebp], 0
  004e0	eb 09		 jmp	 SHORT $LN13@SetClearCh
$LN12@SetClearCh:
  004e2	8b 45 f0	 mov	 eax, DWORD PTR _i$227142[ebp]
  004e5	83 c0 01	 add	 eax, 1
  004e8	89 45 f0	 mov	 DWORD PTR _i$227142[ebp], eax
$LN13@SetClearCh:
  004eb	83 7d f0 64	 cmp	 DWORD PTR _i$227142[ebp], 100 ; 00000064H
  004ef	7d 29		 jge	 SHORT $LN11@SetClearCh

; 165  : 	{
; 166  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  004f1	8b 45 08	 mov	 eax, DWORD PTR _funcindex$[ebp]
  004f4	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  004fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004fd	8d 94 01 f8 24
	14 00		 lea	 edx, DWORD PTR [ecx+eax+1320184]
  00504	8b 45 f0	 mov	 eax, DWORD PTR _i$227142[ebp]
  00507	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0050a	3b 4d f4	 cmp	 ecx, DWORD PTR _Checksum$[ebp]
  0050d	75 09		 jne	 SHORT $LN10@SetClearCh

; 167  : 		{
; 168  : 			iCount++;

  0050f	8b 45 f8	 mov	 eax, DWORD PTR _iCount$[ebp]
  00512	83 c0 01	 add	 eax, 1
  00515	89 45 f8	 mov	 DWORD PTR _iCount$[ebp], eax
$LN10@SetClearCh:

; 169  : 		}
; 170  : 	}

  00518	eb c8		 jmp	 SHORT $LN12@SetClearCh
$LN11@SetClearCh:

; 171  : 
; 172  : 	if ( iCount >= MAX_CHECKSUM_TABLE_AVG-1 )

  0051a	83 7d f8 63	 cmp	 DWORD PTR _iCount$[ebp], 99 ; 00000063H
  0051e	0f 8c e9 00 00
	00		 jl	 $LN14@SetClearCh

; 173  : 	{
; 174  : 		this->m_ChecksumTableClearState[funcindex] = 1;

  00524	8b 45 08	 mov	 eax, DWORD PTR _funcindex$[ebp]
  00527	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0052a	c7 84 81 48 24
	14 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+1320008], 1

; 175  : 		this->m_ChecksumTableAllClearState = TRUE;

  00535	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00538	c7 80 44 24 14
	00 01 00 00 00	 mov	 DWORD PTR [eax+1320004], 1

; 176  : 
; 177  : 		for (int i=0;i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX;i++)

  00542	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$227148[ebp], 0
  00549	eb 09		 jmp	 SHORT $LN8@SetClearCh
$LN7@SetClearCh:
  0054b	8b 45 ec	 mov	 eax, DWORD PTR _i$227148[ebp]
  0054e	83 c0 01	 add	 eax, 1
  00551	89 45 ec	 mov	 DWORD PTR _i$227148[ebp], eax
$LN8@SetClearCh:
  00554	83 7d ec 16	 cmp	 DWORD PTR _i$227148[ebp], 22 ; 00000016H
  00558	7d 3f		 jge	 SHORT $LN6@SetClearCh

; 178  : 		{
; 179  : 			if ( this->m_ChecksumTableClearState[i] == 0 )

  0055a	8b 45 ec	 mov	 eax, DWORD PTR _i$227148[ebp]
  0055d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00560	83 bc 81 48 24
	14 00 00	 cmp	 DWORD PTR [ecx+eax*4+1320008], 0
  00568	75 0d		 jne	 SHORT $LN5@SetClearCh

; 180  : 			{
; 181  : 				this->m_ChecksumTableAllClearState = FALSE;

  0056a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0056d	c7 80 44 24 14
	00 00 00 00 00	 mov	 DWORD PTR [eax+1320004], 0
$LN5@SetClearCh:

; 182  : 			}
; 183  : 
; 184  : 			this->m_ChecksumTable[i] = this->m_ChecksumTableAVG[i][0];

  00577	8b 45 ec	 mov	 eax, DWORD PTR _i$227148[ebp]
  0057a	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00580	8b 4d ec	 mov	 ecx, DWORD PTR _i$227148[ebp]
  00583	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00586	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00589	8b 84 06 f8 24
	14 00		 mov	 eax, DWORD PTR [esi+eax+1320184]
  00590	89 84 8a 58 47
	14 00		 mov	 DWORD PTR [edx+ecx*4+1328984], eax

; 185  : 		}

  00597	eb b2		 jmp	 SHORT $LN7@SetClearCh
$LN6@SetClearCh:

; 186  : 
; 187  : 		if ( this->m_ChecksumTableAllClearState != FALSE )

  00599	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0059c	83 b8 44 24 14
	00 00		 cmp	 DWORD PTR [eax+1320004], 0
  005a3	74 68		 je	 SHORT $LN14@SetClearCh

; 188  : 		{
; 189  : 			LogAddTD("Complete Init Checksum");

  005a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@
  005aa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  005b0	83 c4 04	 add	 esp, 4

; 190  : 
; 191  : 			for (int i=0;i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX;i++)

  005b3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$227155[ebp], 0
  005ba	eb 09		 jmp	 SHORT $LN3@SetClearCh
$LN2@SetClearCh:
  005bc	8b 45 e8	 mov	 eax, DWORD PTR _i$227155[ebp]
  005bf	83 c0 01	 add	 eax, 1
  005c2	89 45 e8	 mov	 DWORD PTR _i$227155[ebp], eax
$LN3@SetClearCh:
  005c5	83 7d e8 16	 cmp	 DWORD PTR _i$227155[ebp], 22 ; 00000016H
  005c9	7d 42		 jge	 SHORT $LN14@SetClearCh

; 192  : 			{
; 193  : 				this->m_ChecksumTable[i] = this->m_ChecksumTableAVG[i][0];

  005cb	8b 45 e8	 mov	 eax, DWORD PTR _i$227155[ebp]
  005ce	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  005d4	8b 4d e8	 mov	 ecx, DWORD PTR _i$227155[ebp]
  005d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005da	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  005dd	8b 84 06 f8 24
	14 00		 mov	 eax, DWORD PTR [esi+eax+1320184]
  005e4	89 84 8a 58 47
	14 00		 mov	 DWORD PTR [edx+ecx*4+1328984], eax

; 194  : 				LogAddTD("%d, %d", i, this->m_ChecksumTable[i]);

  005eb	8b 45 e8	 mov	 eax, DWORD PTR _i$227155[ebp]
  005ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005f1	8b 94 81 58 47
	14 00		 mov	 edx, DWORD PTR [ecx+eax*4+1328984]
  005f8	52		 push	 edx
  005f9	8b 45 e8	 mov	 eax, DWORD PTR _i$227155[ebp]
  005fc	50		 push	 eax
  005fd	68 00 00 00 00	 push	 OFFSET ??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@
  00602	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00608	83 c4 0c	 add	 esp, 12			; 0000000cH

; 195  : 			}

  0060b	eb af		 jmp	 SHORT $LN2@SetClearCh
$LN14@SetClearCh:

; 196  : 		}
; 197  : 	}
; 198  : }

  0060d	5f		 pop	 edi
  0060e	5e		 pop	 esi
  0060f	5b		 pop	 ebx
  00610	8b e5		 mov	 esp, ebp
  00612	5d		 pop	 ebp
  00613	c2 04 00	 ret	 4
?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z ENDP	; CPacketCheckSum::SetClearChecksumFunc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__EgPacketCheckSum@@YAXXZ
text$yc	SEGMENT
??__EgPacketCheckSum@@YAXXZ PROC			; `dynamic initializer for 'gPacketCheckSum'', COMDAT

; 9    : CPacketCheckSum gPacketCheckSum;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gPacketCheckSum@@3VCPacketCheckSum@@A ; gPacketCheckSum
  0000e	e8 00 00 00 00	 call	 ??0CPacketCheckSum@@QAE@XZ ; CPacketCheckSum::CPacketCheckSum
  00013	68 00 00 00 00	 push	 OFFSET ??__FgPacketCheckSum@@YAXXZ ; `dynamic atexit destructor for 'gPacketCheckSum''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgPacketCheckSum@@YAXXZ ENDP			; `dynamic initializer for 'gPacketCheckSum''
; Function compile flags: /Odtp /ZI
text$yc	ENDS
;	COMDAT ??__FgPacketCheckSum@@YAXXZ
text$yd	SEGMENT
??__FgPacketCheckSum@@YAXXZ PROC			; `dynamic atexit destructor for 'gPacketCheckSum'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gPacketCheckSum@@3VCPacketCheckSum@@A ; gPacketCheckSum
  0000e	e8 00 00 00 00	 call	 ??1CPacketCheckSum@@UAE@XZ ; CPacketCheckSum::~CPacketCheckSum
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgPacketCheckSum@@YAXXZ ENDP			; `dynamic atexit destructor for 'gPacketCheckSum''
text$yd	ENDS
PUBLIC	?gPacketCheckSum@@3VCPacketCheckSum@@A		; gPacketCheckSum
_BSS	SEGMENT
?gPacketCheckSum@@3VCPacketCheckSum@@A DB 01447b0H DUP (?) ; gPacketCheckSum
_BSS	ENDS
CRT$XCU	SEGMENT
_gPacketCheckSum$initializer$ DD FLAT:??__EgPacketCheckSum@@YAXXZ
CRT$XCU	ENDS
END
