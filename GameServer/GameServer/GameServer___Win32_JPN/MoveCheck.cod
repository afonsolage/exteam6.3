; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\MoveCheck.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CMoveCheck@@6B@				; CMoveCheck::`vftable'
PUBLIC	??0CMoveCheck@@QAE@XZ				; CMoveCheck::CMoveCheck
PUBLIC	??_R4CMoveCheck@@6B@				; CMoveCheck::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMoveCheck@@@8				; CMoveCheck `RTTI Type Descriptor'
PUBLIC	??_R3CMoveCheck@@8				; CMoveCheck::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMoveCheck@@8				; CMoveCheck::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMoveCheck@@8			; CMoveCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMoveCheck@@UAEPAXI@Z:PROC			; CMoveCheck::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMoveCheck@@8
; File d:\projects\exteam6.3\source\gameserver\gameserver\movecheck.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMoveCheck@@8 DD FLAT:??_R0?AVCMoveCheck@@@8 ; CMoveCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_R2CMoveCheck@@8
rdata$r	SEGMENT
??_R2CMoveCheck@@8 DD FLAT:??_R1A@?0A@EA@CMoveCheck@@8	; CMoveCheck::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMoveCheck@@8
rdata$r	SEGMENT
??_R3CMoveCheck@@8 DD 00H				; CMoveCheck::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMoveCheck@@@8
_DATA	SEGMENT
??_R0?AVCMoveCheck@@@8 DD FLAT:??_7type_info@@6B@	; CMoveCheck `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMoveCheck@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMoveCheck@@6B@
rdata$r	SEGMENT
??_R4CMoveCheck@@6B@ DD 00H				; CMoveCheck::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMoveCheck@@@8
	DD	FLAT:??_R3CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_7CMoveCheck@@6B@
CONST	SEGMENT
??_7CMoveCheck@@6B@ DD FLAT:??_R4CMoveCheck@@6B@	; CMoveCheck::`vftable'
	DD	FLAT:??_ECMoveCheck@@UAEPAXI@Z
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMoveCheck@@QAE@XZ PROC				; CMoveCheck::CMoveCheck
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMoveCheck@@6B@

; 7    : 	return;
; 8    : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CMoveCheck@@QAE@XZ ENDP				; CMoveCheck::CMoveCheck
_TEXT	ENDS
PUBLIC	??1CMoveCheck@@UAE@XZ				; CMoveCheck::~CMoveCheck
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMoveCheck@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMoveCheck@@UAEPAXI@Z PROC				; CMoveCheck::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMoveCheck@@UAE@XZ	; CMoveCheck::~CMoveCheck
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCMoveCheck@@UAEPAXI@Z ENDP				; CMoveCheck::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMoveCheck@@UAE@XZ PROC				; CMoveCheck::~CMoveCheck
; _this$ = ecx

; 11   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	83 ec 44	 sub	 esp, 68			; 00000044H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMoveCheck@@6B@

; 12   : 	return;
; 13   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1CMoveCheck@@UAE@XZ ENDP				; CMoveCheck::~CMoveCheck
_TEXT	ENDS
PUBLIC	?Init@CMoveCheck@@QAEXXZ			; CMoveCheck::Init
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_n$204433 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CMoveCheck@@QAEXXZ PROC				; CMoveCheck::Init
; _this$ = ecx

; 16   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	83 ec 48	 sub	 esp, 72			; 00000048H
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : 	this->m_Time=GetTickCount();

  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 18   : 
; 19   : 	for (int n=0;n<5;n++)

  00058	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$204433[ebp], 0
  0005f	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  00061	8b 45 f8	 mov	 eax, DWORD PTR _n$204433[ebp]
  00064	83 c0 01	 add	 eax, 1
  00067	89 45 f8	 mov	 DWORD PTR _n$204433[ebp], eax
$LN3@Init:
  0006a	83 7d f8 05	 cmp	 DWORD PTR _n$204433[ebp], 5
  0006e	7d 1c		 jge	 SHORT $LN1@Init

; 20   : 	{
; 21   : 		this->m_PosX[n]=n;

  00070	8b 45 f8	 mov	 eax, DWORD PTR _n$204433[ebp]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 55 f8	 mov	 edx, DWORD PTR _n$204433[ebp]
  00079	89 54 81 08	 mov	 DWORD PTR [ecx+eax*4+8], edx

; 22   : 		this->m_PosY[n]=n;

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _n$204433[ebp]
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 55 f8	 mov	 edx, DWORD PTR _n$204433[ebp]
  00086	89 54 81 1c	 mov	 DWORD PTR [ecx+eax*4+28], edx

; 23   : 	}

  0008a	eb d5		 jmp	 SHORT $LN2@Init
$LN1@Init:

; 24   : 
; 25   : 	this->m_PosCount=0;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 26   : 	this->m_TmpPosX=0;

  00096	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00099	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 27   : 	this->m_TmpPosY=0;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 28   : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
?Init@CMoveCheck@@QAEXXZ ENDP				; CMoveCheck::Init
_TEXT	ENDS
PUBLIC	?Insert@CMoveCheck@@QAEHHH@Z			; CMoveCheck::Insert
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Insert@CMoveCheck@@QAEHHH@Z PROC			; CMoveCheck::Insert
; _this$ = ecx

; 31   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp
  000c3	83 ec 44	 sub	 esp, 68			; 00000044H
  000c6	53		 push	 ebx
  000c7	56		 push	 esi
  000c8	57		 push	 edi
  000c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	if ( (this->m_TmpPosX != x) || (this->m_TmpPosY != y) )

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000d2	3b 4d 08	 cmp	 ecx, DWORD PTR _x$[ebp]
  000d5	75 0b		 jne	 SHORT $LN3@Insert
  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000dd	3b 4d 0c	 cmp	 ecx, DWORD PTR _y$[ebp]
  000e0	74 11		 je	 SHORT $LN4@Insert
$LN3@Insert:

; 33   : 	{
; 34   : 		this->m_PosCount =0;

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 35   : 		return 1;

  000ec	b8 01 00 00 00	 mov	 eax, 1
  000f1	eb 78		 jmp	 SHORT $LN5@Insert
$LN4@Insert:

; 36   : 	}
; 37   : 	
; 38   : 	this->m_TmpPosX=x;

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000f9	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 39   : 	this->m_TmpPosX=y;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00102	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 40   : 
; 41   : 	if ( (GetTickCount() - this->m_Time) < 1000)

  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00111	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00116	73 0c		 jae	 SHORT $LN2@Insert

; 42   : 	{
; 43   : 		this->m_Time=GetTickCount();

  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN2@Insert:

; 44   : 	}
; 45   : 
; 46   : 	this->m_PosX[this->m_PosCount]=x;

  00124	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00127	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0012a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0012d	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00130	89 44 8a 08	 mov	 DWORD PTR [edx+ecx*4+8], eax

; 47   : 	this->m_PosY[this->m_PosCount]=y;

  00134	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00137	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0013a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00140	89 44 8a 1c	 mov	 DWORD PTR [edx+ecx*4+28], eax

; 48   : 	this->m_PosCount++;

  00144	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00147	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0014a	83 c1 01	 add	 ecx, 1
  0014d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00150	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 49   : 
; 50   : 	if (this->m_PosCount > 4)

  00153	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00156	83 78 30 04	 cmp	 DWORD PTR [eax+48], 4
  0015a	7e 0a		 jle	 SHORT $LN1@Insert

; 51   : 	{
; 52   : 		this->m_PosCount = 0;

  0015c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
$LN1@Insert:

; 53   : 	}
; 54   : 	return 1;

  00166	b8 01 00 00 00	 mov	 eax, 1
$LN5@Insert:

; 55   : }

  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c2 08 00	 ret	 8
?Insert@CMoveCheck@@QAEHHH@Z ENDP			; CMoveCheck::Insert
_TEXT	ENDS
PUBLIC	?Check@CMoveCheck@@QAEHXZ			; CMoveCheck::Check
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
?Check@CMoveCheck@@QAEHXZ PROC				; CMoveCheck::Check
; _this$ = ecx

; 58   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00186	53		 push	 ebx
  00187	56		 push	 esi
  00188	57		 push	 edi
  00189	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 	int x;
; 60   : 	int y;
; 61   : 
; 62   : 	for (y=0;y<5;y++)

  0018c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00193	eb 09		 jmp	 SHORT $LN14@Check
$LN13@Check:
  00195	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00198	83 c0 01	 add	 eax, 1
  0019b	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN14@Check:
  0019e	83 7d f4 05	 cmp	 DWORD PTR _y$[ebp], 5
  001a2	7d 36		 jge	 SHORT $LN12@Check

; 63   : 	{
; 64   : 		for (x=0;x<5;x++)

  001a4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001ab	eb 09		 jmp	 SHORT $LN11@Check
$LN10@Check:
  001ad	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001b0	83 c0 01	 add	 eax, 1
  001b3	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN11@Check:
  001b6	83 7d f8 05	 cmp	 DWORD PTR _x$[ebp], 5
  001ba	7d 1c		 jge	 SHORT $LN9@Check

; 65   : 		{
; 66   : 			if ( this->m_PosX[y] != this->m_PosX[x] )

  001bc	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  001bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c2	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  001c5	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  001c8	8b 44 81 08	 mov	 eax, DWORD PTR [ecx+eax*4+8]
  001cc	3b 44 96 08	 cmp	 eax, DWORD PTR [esi+edx*4+8]
  001d0	74 04		 je	 SHORT $LN8@Check

; 67   : 			{
; 68   : 				return 0;

  001d2	33 c0		 xor	 eax, eax
  001d4	eb 57		 jmp	 SHORT $LN15@Check
$LN8@Check:

; 69   : 			}
; 70   : 		}

  001d6	eb d5		 jmp	 SHORT $LN10@Check
$LN9@Check:

; 71   : 	}

  001d8	eb bb		 jmp	 SHORT $LN13@Check
$LN12@Check:

; 72   : 
; 73   : 	for (y=0;y<5;y++)

  001da	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  001e1	eb 09		 jmp	 SHORT $LN7@Check
$LN6@Check:
  001e3	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  001e6	83 c0 01	 add	 eax, 1
  001e9	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN7@Check:
  001ec	83 7d f4 05	 cmp	 DWORD PTR _y$[ebp], 5
  001f0	7d 36		 jge	 SHORT $LN5@Check

; 74   : 	{
; 75   : 		for (x=0;x<5;x++)

  001f2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001f9	eb 09		 jmp	 SHORT $LN4@Check
$LN3@Check:
  001fb	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001fe	83 c0 01	 add	 eax, 1
  00201	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN4@Check:
  00204	83 7d f8 05	 cmp	 DWORD PTR _x$[ebp], 5
  00208	7d 1c		 jge	 SHORT $LN2@Check

; 76   : 		{
; 77   : 			if ( this->m_PosY[y] != this->m_PosY[x] )

  0020a	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00210	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00213	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00216	8b 44 81 1c	 mov	 eax, DWORD PTR [ecx+eax*4+28]
  0021a	3b 44 96 1c	 cmp	 eax, DWORD PTR [esi+edx*4+28]
  0021e	74 04		 je	 SHORT $LN1@Check

; 78   : 			{
; 79   : 				return 0;

  00220	33 c0		 xor	 eax, eax
  00222	eb 09		 jmp	 SHORT $LN15@Check
$LN1@Check:

; 80   : 			}
; 81   : 		}

  00224	eb d5		 jmp	 SHORT $LN3@Check
$LN2@Check:

; 82   : 	}

  00226	eb bb		 jmp	 SHORT $LN6@Check
$LN5@Check:

; 83   : 	return 1;

  00228	b8 01 00 00 00	 mov	 eax, 1
$LN15@Check:

; 84   : }

  0022d	5f		 pop	 edi
  0022e	5e		 pop	 esi
  0022f	5b		 pop	 ebx
  00230	8b e5		 mov	 esp, ebp
  00232	5d		 pop	 ebp
  00233	c3		 ret	 0
?Check@CMoveCheck@@QAEHXZ ENDP				; CMoveCheck::Check
_TEXT	ENDS
END
