; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\zzzmathlib.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?vec3_origin@@3PAMA				; vec3_origin
_BSS	SEGMENT
?vec3_origin@@3PAMA DD 03H DUP (?)			; vec3_origin
_BSS	ENDS
PUBLIC	_GetSquare
PUBLIC	__real@00000000
PUBLIC	_VectorLength
EXTRN	__fltused:DWORD
;	COMDAT __real@00000000
; File d:\projects\exteam6.3\source\gameserver\gameserver\zzzmathlib.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_length$ = -8						; size = 4
_i$ = -4						; size = 4
_v$ = 8							; size = 4
_VectorLength PROC

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 26   : 	int		i;
; 27   : 	float	length;
; 28   : 	
; 29   : 	length = 0;

  00009	d9 ee		 fldz
  0000b	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]

; 30   : 	for (i=0 ; i< 3 ; i++)

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00015	eb 09		 jmp	 SHORT $LN3@VectorLeng
$LN2@VectorLeng:
  00017	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001a	83 c0 01	 add	 eax, 1
  0001d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN3@VectorLeng:
  00020	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  00024	7d 1a		 jge	 SHORT $LN1@VectorLeng

; 31   : 		length += v[i]*v[i];

  00026	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002c	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00032	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00035	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  00038	d8 45 f8	 fadd	 DWORD PTR _length$[ebp]
  0003b	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]
  0003e	eb d7		 jmp	 SHORT $LN2@VectorLeng
$LN1@VectorLeng:

; 32   : 	length = GetSquare (length);

  00040	51		 push	 ecx
  00041	d9 45 f8	 fld	 DWORD PTR _length$[ebp]
  00044	d9 1c 24	 fstp	 DWORD PTR [esp]
  00047	e8 00 00 00 00	 call	 _GetSquare
  0004c	83 c4 04	 add	 esp, 4
  0004f	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]

; 33   : 
; 34   : 	return length;

  00052	d9 45 f8	 fld	 DWORD PTR _length$[ebp]

; 35   : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_VectorLength ENDP
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_value$ = 8						; size = 4
_GetSquare PROC

; 39   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	83 ec 40	 sub	 esp, 64			; 00000040H
  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	57		 push	 edi

; 40   : 	return sqrt(value);

  00069	51		 push	 ecx
  0006a	d9 45 08	 fld	 DWORD PTR _value$[ebp]
  0006d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00070	e8 00 00 00 00	 call	 ?sqrt@@YAMM@Z		; sqrt
  00075	83 c4 04	 add	 esp, 4

; 41   : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_GetSquare ENDP
_TEXT	ENDS
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	_VectorCompare
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv83 = -72						; size = 4
_i$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_VectorCompare PROC

; 44   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 48	 sub	 esp, 72			; 00000048H
  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	57		 push	 edi

; 45   : 	int		i;
; 46   : 	
; 47   : 	for (i=0 ; i<3 ; i++)

  00089	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00090	eb 09		 jmp	 SHORT $LN4@VectorComp
$LN3@VectorComp:
  00092	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00095	83 c0 01	 add	 eax, 1
  00098	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@VectorComp:
  0009b	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  0009f	7d 37		 jge	 SHORT $LN2@VectorComp

; 48   : 		if (fabs(v1[i]-v2[i]) > EQUAL_EPSILON)

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  000a7	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  000aa	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ad	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  000b0	d8 24 90	 fsub	 DWORD PTR [eax+edx*4]
  000b3	d9 5d b8	 fstp	 DWORD PTR tv83[ebp]
  000b6	d9 45 b8	 fld	 DWORD PTR tv83[ebp]
  000b9	51		 push	 ecx
  000ba	d9 1c 24	 fstp	 DWORD PTR [esp]
  000bd	e8 00 00 00 00	 call	 ?fabs@@YAMM@Z		; fabs
  000c2	83 c4 04	 add	 esp, 4
  000c5	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3f50624dd2f1a9fc
  000cb	df e0		 fnstsw	 ax
  000cd	f6 c4 41	 test	 ah, 65			; 00000041H
  000d0	75 04		 jne	 SHORT $LN1@VectorComp

; 49   : 			return false;

  000d2	33 c0		 xor	 eax, eax
  000d4	eb 07		 jmp	 SHORT $LN5@VectorComp
$LN1@VectorComp:

; 50   : 			
; 51   : 	return true;

  000d6	eb ba		 jmp	 SHORT $LN3@VectorComp
$LN2@VectorComp:
  000d8	b8 01 00 00 00	 mov	 eax, 1
$LN5@VectorComp:

; 52   : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_VectorCompare ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	_Q_rint
EXTRN	_floor:PROC
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv73 = -68						; size = 4
_in$ = 8						; size = 4
_Q_rint	PROC

; 55   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	83 ec 44	 sub	 esp, 68			; 00000044H
  000f6	53		 push	 ebx
  000f7	56		 push	 esi
  000f8	57		 push	 edi

; 56   : 	return (vec_t)floor (in + 0.5);

  000f9	d9 45 08	 fld	 DWORD PTR _in$[ebp]
  000fc	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00102	83 ec 08	 sub	 esp, 8
  00105	dd 1c 24	 fstp	 QWORD PTR [esp]
  00108	e8 00 00 00 00	 call	 _floor
  0010d	83 c4 08	 add	 esp, 8
  00110	d9 5d bc	 fstp	 DWORD PTR tv73[ebp]
  00113	d9 45 bc	 fld	 DWORD PTR tv73[ebp]

; 57   : }

  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
_Q_rint	ENDP
_TEXT	ENDS
PUBLIC	_VectorMA
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_va$ = 8						; size = 4
_scale$ = 12						; size = 4
_vb$ = 16						; size = 4
_vc$ = 20						; size = 4
_VectorMA PROC

; 60   : {

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp
  00123	83 ec 40	 sub	 esp, 64			; 00000040H
  00126	53		 push	 ebx
  00127	56		 push	 esi
  00128	57		 push	 edi

; 61   : 	vc[0] = va[0] + scale*vb[0];

  00129	d9 45 0c	 fld	 DWORD PTR _scale$[ebp]
  0012c	8b 45 10	 mov	 eax, DWORD PTR _vb$[ebp]
  0012f	d8 08		 fmul	 DWORD PTR [eax]
  00131	8b 4d 08	 mov	 ecx, DWORD PTR _va$[ebp]
  00134	d8 01		 fadd	 DWORD PTR [ecx]
  00136	8b 55 14	 mov	 edx, DWORD PTR _vc$[ebp]
  00139	d9 1a		 fstp	 DWORD PTR [edx]

; 62   : 	vc[1] = va[1] + scale*vb[1];

  0013b	d9 45 0c	 fld	 DWORD PTR _scale$[ebp]
  0013e	8b 45 10	 mov	 eax, DWORD PTR _vb$[ebp]
  00141	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00144	8b 4d 08	 mov	 ecx, DWORD PTR _va$[ebp]
  00147	d8 41 04	 fadd	 DWORD PTR [ecx+4]
  0014a	8b 55 14	 mov	 edx, DWORD PTR _vc$[ebp]
  0014d	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 63   : 	vc[2] = va[2] + scale*vb[2];

  00150	d9 45 0c	 fld	 DWORD PTR _scale$[ebp]
  00153	8b 45 10	 mov	 eax, DWORD PTR _vb$[ebp]
  00156	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00159	8b 4d 08	 mov	 ecx, DWORD PTR _va$[ebp]
  0015c	d8 41 08	 fadd	 DWORD PTR [ecx+8]
  0015f	8b 55 14	 mov	 edx, DWORD PTR _vc$[ebp]
  00162	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 64   : }

  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c3		 ret	 0
_VectorMA ENDP
_TEXT	ENDS
PUBLIC	_CrossProduct
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_cross$ = 16						; size = 4
_CrossProduct PROC

; 67   : {

  00170	55		 push	 ebp
  00171	8b ec		 mov	 ebp, esp
  00173	83 ec 40	 sub	 esp, 64			; 00000040H
  00176	53		 push	 ebx
  00177	56		 push	 esi
  00178	57		 push	 edi

; 68   : 	cross[0] = v1[1]*v2[2] - v1[2]*v2[1];

  00179	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  0017c	d9 40 04	 fld	 DWORD PTR [eax+4]
  0017f	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00182	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00185	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  00188	d9 42 08	 fld	 DWORD PTR [edx+8]
  0018b	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  0018e	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00191	de e9		 fsubp	 ST(1), ST(0)
  00193	8b 4d 10	 mov	 ecx, DWORD PTR _cross$[ebp]
  00196	d9 19		 fstp	 DWORD PTR [ecx]

; 69   : 	cross[1] = v1[2]*v2[0] - v1[0]*v2[2];

  00198	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  0019b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0019e	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  001a1	d8 09		 fmul	 DWORD PTR [ecx]
  001a3	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  001a6	d9 02		 fld	 DWORD PTR [edx]
  001a8	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  001ab	d8 48 08	 fmul	 DWORD PTR [eax+8]
  001ae	de e9		 fsubp	 ST(1), ST(0)
  001b0	8b 4d 10	 mov	 ecx, DWORD PTR _cross$[ebp]
  001b3	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 70   : 	cross[2] = v1[0]*v2[1] - v1[1]*v2[0];

  001b6	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  001b9	d9 00		 fld	 DWORD PTR [eax]
  001bb	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  001be	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  001c1	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  001c4	d9 42 04	 fld	 DWORD PTR [edx+4]
  001c7	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  001ca	d8 08		 fmul	 DWORD PTR [eax]
  001cc	de e9		 fsubp	 ST(1), ST(0)
  001ce	8b 4d 10	 mov	 ecx, DWORD PTR _cross$[ebp]
  001d1	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 71   : }

  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c3		 ret	 0
_CrossProduct ENDP
_TEXT	ENDS
PUBLIC	__DotProduct
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv86 = -68						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
__DotProduct PROC

; 74   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	83 ec 44	 sub	 esp, 68			; 00000044H
  001e6	53		 push	 ebx
  001e7	56		 push	 esi
  001e8	57		 push	 edi

; 75   : 	return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];

  001e9	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  001ec	d9 00		 fld	 DWORD PTR [eax]
  001ee	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  001f1	d8 09		 fmul	 DWORD PTR [ecx]
  001f3	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  001f6	d9 42 04	 fld	 DWORD PTR [edx+4]
  001f9	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  001fc	d8 48 04	 fmul	 DWORD PTR [eax+4]
  001ff	de c1		 faddp	 ST(1), ST(0)
  00201	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  00204	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00207	8b 55 0c	 mov	 edx, DWORD PTR _v2$[ebp]
  0020a	d8 4a 08	 fmul	 DWORD PTR [edx+8]
  0020d	de c1		 faddp	 ST(1), ST(0)
  0020f	d9 5d bc	 fstp	 DWORD PTR tv86[ebp]
  00212	d9 45 bc	 fld	 DWORD PTR tv86[ebp]

; 76   : }

  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	5b		 pop	 ebx
  00218	8b e5		 mov	 esp, ebp
  0021a	5d		 pop	 ebp
  0021b	c3		 ret	 0
__DotProduct ENDP
_TEXT	ENDS
PUBLIC	__VectorSubtract
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_va$ = 8						; size = 4
_vb$ = 12						; size = 4
_out$ = 16						; size = 4
__VectorSubtract PROC

; 79   : {

  00220	55		 push	 ebp
  00221	8b ec		 mov	 ebp, esp
  00223	83 ec 40	 sub	 esp, 64			; 00000040H
  00226	53		 push	 ebx
  00227	56		 push	 esi
  00228	57		 push	 edi

; 80   : 	out[0] = va[0]-vb[0];

  00229	8b 45 08	 mov	 eax, DWORD PTR _va$[ebp]
  0022c	d9 00		 fld	 DWORD PTR [eax]
  0022e	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  00231	d8 21		 fsub	 DWORD PTR [ecx]
  00233	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00236	d9 1a		 fstp	 DWORD PTR [edx]

; 81   : 	out[1] = va[1]-vb[1];

  00238	8b 45 08	 mov	 eax, DWORD PTR _va$[ebp]
  0023b	d9 40 04	 fld	 DWORD PTR [eax+4]
  0023e	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  00241	d8 61 04	 fsub	 DWORD PTR [ecx+4]
  00244	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00247	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 82   : 	out[2] = va[2]-vb[2];

  0024a	8b 45 08	 mov	 eax, DWORD PTR _va$[ebp]
  0024d	d9 40 08	 fld	 DWORD PTR [eax+8]
  00250	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  00253	d8 61 08	 fsub	 DWORD PTR [ecx+8]
  00256	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00259	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 83   : }

  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi
  0025e	5b		 pop	 ebx
  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c3		 ret	 0
__VectorSubtract ENDP
_TEXT	ENDS
PUBLIC	__VectorAdd
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_va$ = 8						; size = 4
_vb$ = 12						; size = 4
_out$ = 16						; size = 4
__VectorAdd PROC

; 86   : {

  00270	55		 push	 ebp
  00271	8b ec		 mov	 ebp, esp
  00273	83 ec 40	 sub	 esp, 64			; 00000040H
  00276	53		 push	 ebx
  00277	56		 push	 esi
  00278	57		 push	 edi

; 87   : 	out[0] = va[0]+vb[0];

  00279	8b 45 08	 mov	 eax, DWORD PTR _va$[ebp]
  0027c	d9 00		 fld	 DWORD PTR [eax]
  0027e	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  00281	d8 01		 fadd	 DWORD PTR [ecx]
  00283	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00286	d9 1a		 fstp	 DWORD PTR [edx]

; 88   : 	out[1] = va[1]+vb[1];

  00288	8b 45 08	 mov	 eax, DWORD PTR _va$[ebp]
  0028b	d9 40 04	 fld	 DWORD PTR [eax+4]
  0028e	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  00291	d8 41 04	 fadd	 DWORD PTR [ecx+4]
  00294	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00297	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 89   : 	out[2] = va[2]+vb[2];

  0029a	8b 45 08	 mov	 eax, DWORD PTR _va$[ebp]
  0029d	d9 40 08	 fld	 DWORD PTR [eax+8]
  002a0	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  002a3	d8 41 08	 fadd	 DWORD PTR [ecx+8]
  002a6	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  002a9	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 90   : }

  002ac	5f		 pop	 edi
  002ad	5e		 pop	 esi
  002ae	5b		 pop	 ebx
  002af	8b e5		 mov	 esp, ebp
  002b1	5d		 pop	 ebp
  002b2	c3		 ret	 0
__VectorAdd ENDP
_TEXT	ENDS
PUBLIC	__VectorCopy
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
__VectorCopy PROC

; 93   : {

  002c0	55		 push	 ebp
  002c1	8b ec		 mov	 ebp, esp
  002c3	83 ec 40	 sub	 esp, 64			; 00000040H
  002c6	53		 push	 ebx
  002c7	56		 push	 esi
  002c8	57		 push	 edi

; 94   : 	out[0] = in[0];

  002c9	8b 45 0c	 mov	 eax, DWORD PTR _out$[ebp]
  002cc	8b 4d 08	 mov	 ecx, DWORD PTR _in$[ebp]
  002cf	d9 01		 fld	 DWORD PTR [ecx]
  002d1	d9 18		 fstp	 DWORD PTR [eax]

; 95   : 	out[1] = in[1];

  002d3	8b 45 0c	 mov	 eax, DWORD PTR _out$[ebp]
  002d6	8b 4d 08	 mov	 ecx, DWORD PTR _in$[ebp]
  002d9	d9 41 04	 fld	 DWORD PTR [ecx+4]
  002dc	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 96   : 	out[2] = in[2];

  002df	8b 45 0c	 mov	 eax, DWORD PTR _out$[ebp]
  002e2	8b 4d 08	 mov	 ecx, DWORD PTR _in$[ebp]
  002e5	d9 41 08	 fld	 DWORD PTR [ecx+8]
  002e8	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 97   : }

  002eb	5f		 pop	 edi
  002ec	5e		 pop	 esi
  002ed	5b		 pop	 ebx
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c3		 ret	 0
__VectorCopy ENDP
_TEXT	ENDS
PUBLIC	__VectorScale
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_v$ = 8							; size = 4
_scale$ = 12						; size = 4
_out$ = 16						; size = 4
__VectorScale PROC

; 100  : {

  00300	55		 push	 ebp
  00301	8b ec		 mov	 ebp, esp
  00303	83 ec 40	 sub	 esp, 64			; 00000040H
  00306	53		 push	 ebx
  00307	56		 push	 esi
  00308	57		 push	 edi

; 101  : 	out[0] = v[0] * scale;

  00309	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0030c	d9 00		 fld	 DWORD PTR [eax]
  0030e	d8 4d 0c	 fmul	 DWORD PTR _scale$[ebp]
  00311	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00314	d9 19		 fstp	 DWORD PTR [ecx]

; 102  : 	out[1] = v[1] * scale;

  00316	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00319	d9 40 04	 fld	 DWORD PTR [eax+4]
  0031c	d8 4d 0c	 fmul	 DWORD PTR _scale$[ebp]
  0031f	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00322	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 103  : 	out[2] = v[2] * scale;

  00325	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00328	d9 40 08	 fld	 DWORD PTR [eax+8]
  0032b	d8 4d 0c	 fmul	 DWORD PTR _scale$[ebp]
  0032e	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00331	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 104  : }

  00334	5f		 pop	 edi
  00335	5e		 pop	 esi
  00336	5b		 pop	 ebx
  00337	8b e5		 mov	 esp, ebp
  00339	5d		 pop	 ebp
  0033a	c3		 ret	 0
__VectorScale ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f2c4e47ea2d0d88
PUBLIC	_VectorNormalize
EXTRN	_fabs:PROC
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f2c4e47ea2d0d88
CONST	SEGMENT
__real@3f2c4e47ea2d0d88 DQ 03f2c4e47ea2d0d88r	; 0.000215956
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_length$ = -8						; size = 4
_i$ = -4						; size = 4
_v$ = 8							; size = 4
_VectorNormalize PROC

; 107  : {

  00340	55		 push	 ebp
  00341	8b ec		 mov	 ebp, esp
  00343	83 ec 48	 sub	 esp, 72			; 00000048H
  00346	53		 push	 ebx
  00347	56		 push	 esi
  00348	57		 push	 edi

; 108  : 	int		i;
; 109  : 	float	length;
; 110  : 
; 111  : if ( fabs(v[1] - 0.000215956) < 0.0001)

  00349	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0034c	d9 40 04	 fld	 DWORD PTR [eax+4]
  0034f	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3f2c4e47ea2d0d88
  00355	83 ec 08	 sub	 esp, 8
  00358	dd 1c 24	 fstp	 QWORD PTR [esp]
  0035b	e8 00 00 00 00	 call	 _fabs
  00360	83 c4 08	 add	 esp, 8
  00363	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3f1a36e2eb1c432d
  00369	df e0		 fnstsw	 ax
  0036b	f6 c4 05	 test	 ah, 5
  0036e	7a 07		 jp	 SHORT $LN8@VectorNorm

; 112  : i=1;

  00370	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
$LN8@VectorNorm:

; 113  : 
; 114  : 	length = 0;

  00377	d9 ee		 fldz
  00379	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]

; 115  : 	for (i=0 ; i< 3 ; i++)

  0037c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00383	eb 09		 jmp	 SHORT $LN7@VectorNorm
$LN6@VectorNorm:
  00385	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00388	83 c0 01	 add	 eax, 1
  0038b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@VectorNorm:
  0038e	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  00392	7d 1a		 jge	 SHORT $LN5@VectorNorm

; 116  : 		length += v[i]*v[i];

  00394	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00397	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0039a	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0039d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  003a0	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  003a3	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  003a6	d8 45 f8	 fadd	 DWORD PTR _length$[ebp]
  003a9	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]
  003ac	eb d7		 jmp	 SHORT $LN6@VectorNorm
$LN5@VectorNorm:

; 117  : 	length = GetSquare (length);

  003ae	51		 push	 ecx
  003af	d9 45 f8	 fld	 DWORD PTR _length$[ebp]
  003b2	d9 1c 24	 fstp	 DWORD PTR [esp]
  003b5	e8 00 00 00 00	 call	 _GetSquare
  003ba	83 c4 04	 add	 esp, 4
  003bd	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]

; 118  : 	if (length == 0)

  003c0	d9 45 f8	 fld	 DWORD PTR _length$[ebp]
  003c3	d9 ee		 fldz
  003c5	da e9		 fucompp
  003c7	df e0		 fnstsw	 ax
  003c9	f6 c4 44	 test	 ah, 68			; 00000044H
  003cc	7a 04		 jp	 SHORT $LN4@VectorNorm

; 119  : 		return 0;

  003ce	d9 ee		 fldz
  003d0	eb 32		 jmp	 SHORT $LN9@VectorNorm
$LN4@VectorNorm:

; 120  : 		
; 121  : 	for (i=0 ; i< 3 ; i++)

  003d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003d9	eb 09		 jmp	 SHORT $LN3@VectorNorm
$LN2@VectorNorm:
  003db	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003de	83 c0 01	 add	 eax, 1
  003e1	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN3@VectorNorm:
  003e4	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  003e8	7d 17		 jge	 SHORT $LN1@VectorNorm

; 122  : 		v[i] /= length;	

  003ea	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003ed	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  003f0	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  003f3	d8 75 f8	 fdiv	 DWORD PTR _length$[ebp]
  003f6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  003f9	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  003fc	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]
  003ff	eb da		 jmp	 SHORT $LN2@VectorNorm
$LN1@VectorNorm:

; 123  : 
; 124  : 	return length;

  00401	d9 45 f8	 fld	 DWORD PTR _length$[ebp]
$LN9@VectorNorm:

; 125  : }

  00404	5f		 pop	 edi
  00405	5e		 pop	 esi
  00406	5b		 pop	 ebx
  00407	8b e5		 mov	 esp, ebp
  00409	5d		 pop	 ebp
  0040a	c3		 ret	 0
_VectorNormalize ENDP
_TEXT	ENDS
PUBLIC	_VectorInverse
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_v$ = 8							; size = 4
_VectorInverse PROC

; 128  : {

  00410	55		 push	 ebp
  00411	8b ec		 mov	 ebp, esp
  00413	83 ec 40	 sub	 esp, 64			; 00000040H
  00416	53		 push	 ebx
  00417	56		 push	 esi
  00418	57		 push	 edi

; 129  : 	v[0] = -v[0];

  00419	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0041c	d9 00		 fld	 DWORD PTR [eax]
  0041e	d9 e0		 fchs
  00420	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00423	d9 19		 fstp	 DWORD PTR [ecx]

; 130  : 	v[1] = -v[1];

  00425	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00428	d9 40 04	 fld	 DWORD PTR [eax+4]
  0042b	d9 e0		 fchs
  0042d	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00430	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 131  : 	v[2] = -v[2];

  00433	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00436	d9 40 08	 fld	 DWORD PTR [eax+8]
  00439	d9 e0		 fchs
  0043b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0043e	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 132  : }

  00441	5f		 pop	 edi
  00442	5e		 pop	 esi
  00443	5b		 pop	 ebx
  00444	8b e5		 mov	 esp, ebp
  00446	5d		 pop	 ebp
  00447	c3		 ret	 0
_VectorInverse ENDP
_TEXT	ENDS
PUBLIC	__real@c7c34f80
PUBLIC	__real@47c34f80
PUBLIC	_ClearBounds
;	COMDAT __real@c7c34f80
CONST	SEGMENT
__real@c7c34f80 DD 0c7c34f80r			; -99999
CONST	ENDS
;	COMDAT __real@47c34f80
CONST	SEGMENT
__real@47c34f80 DD 047c34f80r			; 99999
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_mins$ = 8						; size = 4
_maxs$ = 12						; size = 4
_ClearBounds PROC

; 135  : {

  00450	55		 push	 ebp
  00451	8b ec		 mov	 ebp, esp
  00453	83 ec 40	 sub	 esp, 64			; 00000040H
  00456	53		 push	 ebx
  00457	56		 push	 esi
  00458	57		 push	 edi

; 136  : 	mins[0] = mins[1] = mins[2] = 99999;

  00459	8b 45 08	 mov	 eax, DWORD PTR _mins$[ebp]
  0045c	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@47c34f80
  00462	d9 58 08	 fstp	 DWORD PTR [eax+8]
  00465	8b 4d 08	 mov	 ecx, DWORD PTR _mins$[ebp]
  00468	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@47c34f80
  0046e	d9 59 04	 fstp	 DWORD PTR [ecx+4]
  00471	8b 55 08	 mov	 edx, DWORD PTR _mins$[ebp]
  00474	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@47c34f80
  0047a	d9 1a		 fstp	 DWORD PTR [edx]

; 137  : 	maxs[0] = maxs[1] = maxs[2] = -99999;

  0047c	8b 45 0c	 mov	 eax, DWORD PTR _maxs$[ebp]
  0047f	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@c7c34f80
  00485	d9 58 08	 fstp	 DWORD PTR [eax+8]
  00488	8b 4d 0c	 mov	 ecx, DWORD PTR _maxs$[ebp]
  0048b	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@c7c34f80
  00491	d9 59 04	 fstp	 DWORD PTR [ecx+4]
  00494	8b 55 0c	 mov	 edx, DWORD PTR _maxs$[ebp]
  00497	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@c7c34f80
  0049d	d9 1a		 fstp	 DWORD PTR [edx]

; 138  : }

  0049f	5f		 pop	 edi
  004a0	5e		 pop	 esi
  004a1	5b		 pop	 ebx
  004a2	8b e5		 mov	 esp, ebp
  004a4	5d		 pop	 ebp
  004a5	c3		 ret	 0
_ClearBounds ENDP
_TEXT	ENDS
PUBLIC	_AddPointToBounds
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_val$ = -8						; size = 4
_i$ = -4						; size = 4
_v$ = 8							; size = 4
_mins$ = 12						; size = 4
_maxs$ = 16						; size = 4
_AddPointToBounds PROC

; 141  : {

  004b0	55		 push	 ebp
  004b1	8b ec		 mov	 ebp, esp
  004b3	83 ec 48	 sub	 esp, 72			; 00000048H
  004b6	53		 push	 ebx
  004b7	56		 push	 esi
  004b8	57		 push	 edi

; 142  : 	int		i;
; 143  : 	vec_t	val;
; 144  : 
; 145  : 	for (i=0 ; i<3 ; i++)

  004b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004c0	eb 09		 jmp	 SHORT $LN5@AddPointTo
$LN4@AddPointTo:
  004c2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004c5	83 c0 01	 add	 eax, 1
  004c8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN5@AddPointTo:
  004cb	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  004cf	7d 50		 jge	 SHORT $LN3@AddPointTo

; 146  : 	{
; 147  : 		val = v[i];

  004d1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004d4	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  004d7	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  004da	d9 5d f8	 fstp	 DWORD PTR _val$[ebp]

; 148  : 		if (val < mins[i])

  004dd	d9 45 f8	 fld	 DWORD PTR _val$[ebp]
  004e0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004e3	8b 4d 0c	 mov	 ecx, DWORD PTR _mins$[ebp]
  004e6	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  004e9	de d9		 fcompp
  004eb	df e0		 fnstsw	 ax
  004ed	f6 c4 41	 test	 ah, 65			; 00000041H
  004f0	75 0c		 jne	 SHORT $LN2@AddPointTo

; 149  : 			mins[i] = val;

  004f2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004f5	8b 4d 0c	 mov	 ecx, DWORD PTR _mins$[ebp]
  004f8	d9 45 f8	 fld	 DWORD PTR _val$[ebp]
  004fb	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
$LN2@AddPointTo:

; 150  : 		if (val > maxs[i])

  004fe	d9 45 f8	 fld	 DWORD PTR _val$[ebp]
  00501	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00504	8b 4d 10	 mov	 ecx, DWORD PTR _maxs$[ebp]
  00507	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0050a	de d9		 fcompp
  0050c	df e0		 fnstsw	 ax
  0050e	f6 c4 05	 test	 ah, 5
  00511	7a 0c		 jp	 SHORT $LN1@AddPointTo

; 151  : 			maxs[i] = val;

  00513	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00516	8b 4d 10	 mov	 ecx, DWORD PTR _maxs$[ebp]
  00519	d9 45 f8	 fld	 DWORD PTR _val$[ebp]
  0051c	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
$LN1@AddPointTo:

; 152  : 	}

  0051f	eb a1		 jmp	 SHORT $LN4@AddPointTo
$LN3@AddPointTo:

; 153  : }

  00521	5f		 pop	 edi
  00522	5e		 pop	 esi
  00523	5b		 pop	 ebx
  00524	8b e5		 mov	 esp, ebp
  00526	5d		 pop	 ebp
  00527	c3		 ret	 0
_AddPointToBounds ENDP
_TEXT	ENDS
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	__real@3f91df46a0000000
PUBLIC	_AngleMatrix
;	COMDAT __real@3f91df46a0000000
CONST	SEGMENT
__real@3f91df46a0000000 DQ 03f91df46a0000000r	; 0.0174533
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_cy$ = -28						; size = 4
_cp$ = -24						; size = 4
_cr$ = -20						; size = 4
_sy$ = -16						; size = 4
_sp$ = -12						; size = 4
_sr$ = -8						; size = 4
_angle$ = -4						; size = 4
_angles$ = 8						; size = 4
_matrix$ = 12						; size = 4
_AngleMatrix PROC

; 156  : {

  00530	55		 push	 ebp
  00531	8b ec		 mov	 ebp, esp
  00533	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00536	53		 push	 ebx
  00537	56		 push	 esi
  00538	57		 push	 edi

; 157  : 	float		angle;
; 158  : 	float		sr, sp, sy, cr, cp, cy;
; 159  : 	
; 160  : 	angle = angles[2] * (Q_PI*2 / 360);

  00539	8b 45 08	 mov	 eax, DWORD PTR _angles$[ebp]
  0053c	d9 40 08	 fld	 DWORD PTR [eax+8]
  0053f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  00545	d9 5d fc	 fstp	 DWORD PTR _angle$[ebp]

; 161  : 	sy = (float)sin(angle);

  00548	51		 push	 ecx
  00549	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  0054c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0054f	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00554	83 c4 04	 add	 esp, 4
  00557	d9 5d f0	 fstp	 DWORD PTR _sy$[ebp]

; 162  : 	cy = (float)cos(angle);

  0055a	51		 push	 ecx
  0055b	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  0055e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00561	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  00566	83 c4 04	 add	 esp, 4
  00569	d9 5d e4	 fstp	 DWORD PTR _cy$[ebp]

; 163  : 	angle = angles[1] * (Q_PI*2 / 360);

  0056c	8b 45 08	 mov	 eax, DWORD PTR _angles$[ebp]
  0056f	d9 40 04	 fld	 DWORD PTR [eax+4]
  00572	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  00578	d9 5d fc	 fstp	 DWORD PTR _angle$[ebp]

; 164  : 	sp = (float)sin(angle);

  0057b	51		 push	 ecx
  0057c	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  0057f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00582	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00587	83 c4 04	 add	 esp, 4
  0058a	d9 5d f4	 fstp	 DWORD PTR _sp$[ebp]

; 165  : 	cp = (float)cos(angle);

  0058d	51		 push	 ecx
  0058e	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  00591	d9 1c 24	 fstp	 DWORD PTR [esp]
  00594	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  00599	83 c4 04	 add	 esp, 4
  0059c	d9 5d e8	 fstp	 DWORD PTR _cp$[ebp]

; 166  : 	angle = angles[0] * (Q_PI*2 / 360);

  0059f	8b 45 08	 mov	 eax, DWORD PTR _angles$[ebp]
  005a2	d9 00		 fld	 DWORD PTR [eax]
  005a4	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  005aa	d9 5d fc	 fstp	 DWORD PTR _angle$[ebp]

; 167  : 	sr = (float)sin(angle);

  005ad	51		 push	 ecx
  005ae	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  005b1	d9 1c 24	 fstp	 DWORD PTR [esp]
  005b4	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  005b9	83 c4 04	 add	 esp, 4
  005bc	d9 5d f8	 fstp	 DWORD PTR _sr$[ebp]

; 168  : 	cr = (float)cos(angle);

  005bf	51		 push	 ecx
  005c0	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  005c3	d9 1c 24	 fstp	 DWORD PTR [esp]
  005c6	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  005cb	83 c4 04	 add	 esp, 4
  005ce	d9 5d ec	 fstp	 DWORD PTR _cr$[ebp]

; 169  : 
; 170  : 	// matrix = (Z * Y) * X
; 171  : 	matrix[0][0] = cp*cy;

  005d1	d9 45 e8	 fld	 DWORD PTR _cp$[ebp]
  005d4	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  005d7	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  005da	d9 18		 fstp	 DWORD PTR [eax]

; 172  : 	matrix[1][0] = cp*sy;

  005dc	d9 45 e8	 fld	 DWORD PTR _cp$[ebp]
  005df	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  005e2	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  005e5	d9 58 10	 fstp	 DWORD PTR [eax+16]

; 173  : 	matrix[2][0] = -sp;

  005e8	d9 45 f4	 fld	 DWORD PTR _sp$[ebp]
  005eb	d9 e0		 fchs
  005ed	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  005f0	d9 58 20	 fstp	 DWORD PTR [eax+32]

; 174  : 	matrix[0][1] = sr*sp*cy+cr*-sy;

  005f3	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  005f6	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  005f9	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  005fc	d9 45 f0	 fld	 DWORD PTR _sy$[ebp]
  005ff	d9 e0		 fchs
  00601	d8 4d ec	 fmul	 DWORD PTR _cr$[ebp]
  00604	de c1		 faddp	 ST(1), ST(0)
  00606	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00609	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 175  : 	matrix[1][1] = sr*sp*sy+cr*cy;

  0060c	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  0060f	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00612	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  00615	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  00618	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  0061b	de c1		 faddp	 ST(1), ST(0)
  0061d	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00620	d9 58 14	 fstp	 DWORD PTR [eax+20]

; 176  : 	matrix[2][1] = sr*cp;

  00623	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  00626	d8 4d e8	 fmul	 DWORD PTR _cp$[ebp]
  00629	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  0062c	d9 58 24	 fstp	 DWORD PTR [eax+36]

; 177  : 	matrix[0][2] = (cr*sp*cy+-sr*-sy);

  0062f	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  00632	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00635	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  00638	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  0063b	d9 e0		 fchs
  0063d	d9 45 f0	 fld	 DWORD PTR _sy$[ebp]
  00640	d9 e0		 fchs
  00642	de c9		 fmulp	 ST(1), ST(0)
  00644	de c1		 faddp	 ST(1), ST(0)
  00646	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00649	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 178  : 	matrix[1][2] = (cr*sp*sy+-sr*cy);

  0064c	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  0064f	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00652	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  00655	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  00658	d9 e0		 fchs
  0065a	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  0065d	de c1		 faddp	 ST(1), ST(0)
  0065f	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00662	d9 58 18	 fstp	 DWORD PTR [eax+24]

; 179  : 	matrix[2][2] = cr*cp;

  00665	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  00668	d8 4d e8	 fmul	 DWORD PTR _cp$[ebp]
  0066b	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  0066e	d9 58 28	 fstp	 DWORD PTR [eax+40]

; 180  : 	matrix[0][3] = 0.0;

  00671	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00674	d9 ee		 fldz
  00676	d9 58 0c	 fstp	 DWORD PTR [eax+12]

; 181  : 	matrix[1][3] = 0.0;

  00679	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  0067c	d9 ee		 fldz
  0067e	d9 58 1c	 fstp	 DWORD PTR [eax+28]

; 182  : 	matrix[2][3] = 0.0;

  00681	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00684	d9 ee		 fldz
  00686	d9 58 2c	 fstp	 DWORD PTR [eax+44]

; 183  : }

  00689	5f		 pop	 edi
  0068a	5e		 pop	 esi
  0068b	5b		 pop	 ebx
  0068c	8b e5		 mov	 esp, ebp
  0068e	5d		 pop	 ebp
  0068f	c3		 ret	 0
_AngleMatrix ENDP
_TEXT	ENDS
PUBLIC	_AngleIMatrix
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_cy$ = -28						; size = 4
_cp$ = -24						; size = 4
_cr$ = -20						; size = 4
_sy$ = -16						; size = 4
_sp$ = -12						; size = 4
_sr$ = -8						; size = 4
_angle$ = -4						; size = 4
_angles$ = 8						; size = 4
_matrix$ = 12						; size = 4
_AngleIMatrix PROC

; 186  : {

  00690	55		 push	 ebp
  00691	8b ec		 mov	 ebp, esp
  00693	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00696	53		 push	 ebx
  00697	56		 push	 esi
  00698	57		 push	 edi

; 187  : 	float		angle;
; 188  : 	float		sr, sp, sy, cr, cp, cy;
; 189  : 	
; 190  : 	angle = angles[2] * (Q_PI*2 / 360);

  00699	8b 45 08	 mov	 eax, DWORD PTR _angles$[ebp]
  0069c	d9 40 08	 fld	 DWORD PTR [eax+8]
  0069f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  006a5	d9 5d fc	 fstp	 DWORD PTR _angle$[ebp]

; 191  : 	sy = (float)sin(angle);

  006a8	51		 push	 ecx
  006a9	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  006ac	d9 1c 24	 fstp	 DWORD PTR [esp]
  006af	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  006b4	83 c4 04	 add	 esp, 4
  006b7	d9 5d f0	 fstp	 DWORD PTR _sy$[ebp]

; 192  : 	cy = (float)cos(angle);

  006ba	51		 push	 ecx
  006bb	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  006be	d9 1c 24	 fstp	 DWORD PTR [esp]
  006c1	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  006c6	83 c4 04	 add	 esp, 4
  006c9	d9 5d e4	 fstp	 DWORD PTR _cy$[ebp]

; 193  : 	angle = angles[1] * (Q_PI*2 / 360);

  006cc	8b 45 08	 mov	 eax, DWORD PTR _angles$[ebp]
  006cf	d9 40 04	 fld	 DWORD PTR [eax+4]
  006d2	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  006d8	d9 5d fc	 fstp	 DWORD PTR _angle$[ebp]

; 194  : 	sp = (float)sin(angle);

  006db	51		 push	 ecx
  006dc	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  006df	d9 1c 24	 fstp	 DWORD PTR [esp]
  006e2	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  006e7	83 c4 04	 add	 esp, 4
  006ea	d9 5d f4	 fstp	 DWORD PTR _sp$[ebp]

; 195  : 	cp = (float)cos(angle);

  006ed	51		 push	 ecx
  006ee	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  006f1	d9 1c 24	 fstp	 DWORD PTR [esp]
  006f4	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  006f9	83 c4 04	 add	 esp, 4
  006fc	d9 5d e8	 fstp	 DWORD PTR _cp$[ebp]

; 196  : 	angle = angles[0] * (Q_PI*2 / 360);

  006ff	8b 45 08	 mov	 eax, DWORD PTR _angles$[ebp]
  00702	d9 00		 fld	 DWORD PTR [eax]
  00704	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  0070a	d9 5d fc	 fstp	 DWORD PTR _angle$[ebp]

; 197  : 	sr = (float)sin(angle);

  0070d	51		 push	 ecx
  0070e	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  00711	d9 1c 24	 fstp	 DWORD PTR [esp]
  00714	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00719	83 c4 04	 add	 esp, 4
  0071c	d9 5d f8	 fstp	 DWORD PTR _sr$[ebp]

; 198  : 	cr = (float)cos(angle);

  0071f	51		 push	 ecx
  00720	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  00723	d9 1c 24	 fstp	 DWORD PTR [esp]
  00726	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  0072b	83 c4 04	 add	 esp, 4
  0072e	d9 5d ec	 fstp	 DWORD PTR _cr$[ebp]

; 199  : 
; 200  : 	// matrix = (Z * Y) * X
; 201  : 	matrix[0][0] = cp*cy;

  00731	d9 45 e8	 fld	 DWORD PTR _cp$[ebp]
  00734	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  00737	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  0073a	d9 18		 fstp	 DWORD PTR [eax]

; 202  : 	matrix[0][1] = cp*sy;

  0073c	d9 45 e8	 fld	 DWORD PTR _cp$[ebp]
  0073f	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  00742	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00745	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 203  : 	matrix[0][2] = -sp;

  00748	d9 45 f4	 fld	 DWORD PTR _sp$[ebp]
  0074b	d9 e0		 fchs
  0074d	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00750	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 204  : 	matrix[1][0] = sr*sp*cy+cr*-sy;

  00753	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  00756	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00759	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  0075c	d9 45 f0	 fld	 DWORD PTR _sy$[ebp]
  0075f	d9 e0		 fchs
  00761	d8 4d ec	 fmul	 DWORD PTR _cr$[ebp]
  00764	de c1		 faddp	 ST(1), ST(0)
  00766	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00769	d9 58 10	 fstp	 DWORD PTR [eax+16]

; 205  : 	matrix[1][1] = sr*sp*sy+cr*cy;

  0076c	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  0076f	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00772	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  00775	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  00778	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  0077b	de c1		 faddp	 ST(1), ST(0)
  0077d	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00780	d9 58 14	 fstp	 DWORD PTR [eax+20]

; 206  : 	matrix[1][2] = sr*cp;

  00783	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  00786	d8 4d e8	 fmul	 DWORD PTR _cp$[ebp]
  00789	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  0078c	d9 58 18	 fstp	 DWORD PTR [eax+24]

; 207  : 	matrix[2][0] = (cr*sp*cy+-sr*-sy);

  0078f	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  00792	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00795	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  00798	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  0079b	d9 e0		 fchs
  0079d	d9 45 f0	 fld	 DWORD PTR _sy$[ebp]
  007a0	d9 e0		 fchs
  007a2	de c9		 fmulp	 ST(1), ST(0)
  007a4	de c1		 faddp	 ST(1), ST(0)
  007a6	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  007a9	d9 58 20	 fstp	 DWORD PTR [eax+32]

; 208  : 	matrix[2][1] = (cr*sp*sy+-sr*cy);

  007ac	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  007af	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  007b2	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  007b5	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  007b8	d9 e0		 fchs
  007ba	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  007bd	de c1		 faddp	 ST(1), ST(0)
  007bf	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  007c2	d9 58 24	 fstp	 DWORD PTR [eax+36]

; 209  : 	matrix[2][2] = cr*cp;

  007c5	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  007c8	d8 4d e8	 fmul	 DWORD PTR _cp$[ebp]
  007cb	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  007ce	d9 58 28	 fstp	 DWORD PTR [eax+40]

; 210  : 	matrix[0][3] = 0.0;

  007d1	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  007d4	d9 ee		 fldz
  007d6	d9 58 0c	 fstp	 DWORD PTR [eax+12]

; 211  : 	matrix[1][3] = 0.0;

  007d9	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  007dc	d9 ee		 fldz
  007de	d9 58 1c	 fstp	 DWORD PTR [eax+28]

; 212  : 	matrix[2][3] = 0.0;

  007e1	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  007e4	d9 ee		 fldz
  007e6	d9 58 2c	 fstp	 DWORD PTR [eax+44]

; 213  : }

  007e9	5f		 pop	 edi
  007ea	5e		 pop	 esi
  007eb	5b		 pop	 ebx
  007ec	8b e5		 mov	 esp, ebp
  007ee	5d		 pop	 ebp
  007ef	c3		 ret	 0
_AngleIMatrix ENDP
_TEXT	ENDS
PUBLIC	_R_ConcatTransforms
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_R_ConcatTransforms PROC

; 216  : {

  007f0	55		 push	 ebp
  007f1	8b ec		 mov	 ebp, esp
  007f3	83 ec 40	 sub	 esp, 64			; 00000040H
  007f6	53		 push	 ebx
  007f7	56		 push	 esi
  007f8	57		 push	 edi

; 217  : 	out[0][0] = in1[0][0] * in2[0][0] + in1[0][1] * in2[1][0] +
; 218  : 				in1[0][2] * in2[2][0];

  007f9	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  007fc	d9 00		 fld	 DWORD PTR [eax]
  007fe	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00801	d8 09		 fmul	 DWORD PTR [ecx]
  00803	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00806	d9 42 04	 fld	 DWORD PTR [edx+4]
  00809	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  0080c	d8 48 10	 fmul	 DWORD PTR [eax+16]
  0080f	de c1		 faddp	 ST(1), ST(0)
  00811	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00814	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00817	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  0081a	d8 4a 20	 fmul	 DWORD PTR [edx+32]
  0081d	de c1		 faddp	 ST(1), ST(0)
  0081f	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00822	d9 18		 fstp	 DWORD PTR [eax]

; 219  : 	out[0][1] = in1[0][0] * in2[0][1] + in1[0][1] * in2[1][1] +
; 220  : 				in1[0][2] * in2[2][1];

  00824	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00827	d9 00		 fld	 DWORD PTR [eax]
  00829	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  0082c	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0082f	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00832	d9 42 04	 fld	 DWORD PTR [edx+4]
  00835	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00838	d8 48 14	 fmul	 DWORD PTR [eax+20]
  0083b	de c1		 faddp	 ST(1), ST(0)
  0083d	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00840	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00843	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00846	d8 4a 24	 fmul	 DWORD PTR [edx+36]
  00849	de c1		 faddp	 ST(1), ST(0)
  0084b	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0084e	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 221  : 	out[0][2] = in1[0][0] * in2[0][2] + in1[0][1] * in2[1][2] +
; 222  : 				in1[0][2] * in2[2][2];

  00851	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00854	d9 00		 fld	 DWORD PTR [eax]
  00856	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00859	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0085c	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  0085f	d9 42 04	 fld	 DWORD PTR [edx+4]
  00862	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00865	d8 48 18	 fmul	 DWORD PTR [eax+24]
  00868	de c1		 faddp	 ST(1), ST(0)
  0086a	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  0086d	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00870	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00873	d8 4a 28	 fmul	 DWORD PTR [edx+40]
  00876	de c1		 faddp	 ST(1), ST(0)
  00878	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0087b	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 223  : 	out[0][3] = in1[0][0] * in2[0][3] + in1[0][1] * in2[1][3] +
; 224  : 				in1[0][2] * in2[2][3] + in1[0][3];

  0087e	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00881	d9 00		 fld	 DWORD PTR [eax]
  00883	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00886	d8 49 0c	 fmul	 DWORD PTR [ecx+12]
  00889	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  0088c	d9 42 04	 fld	 DWORD PTR [edx+4]
  0088f	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00892	d8 48 1c	 fmul	 DWORD PTR [eax+28]
  00895	de c1		 faddp	 ST(1), ST(0)
  00897	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  0089a	d9 41 08	 fld	 DWORD PTR [ecx+8]
  0089d	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  008a0	d8 4a 2c	 fmul	 DWORD PTR [edx+44]
  008a3	de c1		 faddp	 ST(1), ST(0)
  008a5	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  008a8	d8 40 0c	 fadd	 DWORD PTR [eax+12]
  008ab	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  008ae	d9 59 0c	 fstp	 DWORD PTR [ecx+12]

; 225  : 	out[1][0] = in1[1][0] * in2[0][0] + in1[1][1] * in2[1][0] +
; 226  : 				in1[1][2] * in2[2][0];

  008b1	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  008b4	d9 40 10	 fld	 DWORD PTR [eax+16]
  008b7	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  008ba	d8 09		 fmul	 DWORD PTR [ecx]
  008bc	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  008bf	d9 42 14	 fld	 DWORD PTR [edx+20]
  008c2	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  008c5	d8 48 10	 fmul	 DWORD PTR [eax+16]
  008c8	de c1		 faddp	 ST(1), ST(0)
  008ca	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  008cd	d9 41 18	 fld	 DWORD PTR [ecx+24]
  008d0	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  008d3	d8 4a 20	 fmul	 DWORD PTR [edx+32]
  008d6	de c1		 faddp	 ST(1), ST(0)
  008d8	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  008db	d9 58 10	 fstp	 DWORD PTR [eax+16]

; 227  : 	out[1][1] = in1[1][0] * in2[0][1] + in1[1][1] * in2[1][1] +
; 228  : 				in1[1][2] * in2[2][1];

  008de	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  008e1	d9 40 10	 fld	 DWORD PTR [eax+16]
  008e4	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  008e7	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  008ea	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  008ed	d9 42 14	 fld	 DWORD PTR [edx+20]
  008f0	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  008f3	d8 48 14	 fmul	 DWORD PTR [eax+20]
  008f6	de c1		 faddp	 ST(1), ST(0)
  008f8	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  008fb	d9 41 18	 fld	 DWORD PTR [ecx+24]
  008fe	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00901	d8 4a 24	 fmul	 DWORD PTR [edx+36]
  00904	de c1		 faddp	 ST(1), ST(0)
  00906	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00909	d9 58 14	 fstp	 DWORD PTR [eax+20]

; 229  : 	out[1][2] = in1[1][0] * in2[0][2] + in1[1][1] * in2[1][2] +
; 230  : 				in1[1][2] * in2[2][2];

  0090c	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  0090f	d9 40 10	 fld	 DWORD PTR [eax+16]
  00912	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00915	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00918	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  0091b	d9 42 14	 fld	 DWORD PTR [edx+20]
  0091e	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00921	d8 48 18	 fmul	 DWORD PTR [eax+24]
  00924	de c1		 faddp	 ST(1), ST(0)
  00926	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00929	d9 41 18	 fld	 DWORD PTR [ecx+24]
  0092c	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  0092f	d8 4a 28	 fmul	 DWORD PTR [edx+40]
  00932	de c1		 faddp	 ST(1), ST(0)
  00934	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00937	d9 58 18	 fstp	 DWORD PTR [eax+24]

; 231  : 	out[1][3] = in1[1][0] * in2[0][3] + in1[1][1] * in2[1][3] +
; 232  : 				in1[1][2] * in2[2][3] + in1[1][3];

  0093a	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  0093d	d9 40 10	 fld	 DWORD PTR [eax+16]
  00940	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00943	d8 49 0c	 fmul	 DWORD PTR [ecx+12]
  00946	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00949	d9 42 14	 fld	 DWORD PTR [edx+20]
  0094c	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  0094f	d8 48 1c	 fmul	 DWORD PTR [eax+28]
  00952	de c1		 faddp	 ST(1), ST(0)
  00954	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00957	d9 41 18	 fld	 DWORD PTR [ecx+24]
  0095a	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  0095d	d8 4a 2c	 fmul	 DWORD PTR [edx+44]
  00960	de c1		 faddp	 ST(1), ST(0)
  00962	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00965	d8 40 1c	 fadd	 DWORD PTR [eax+28]
  00968	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  0096b	d9 59 1c	 fstp	 DWORD PTR [ecx+28]

; 233  : 	out[2][0] = in1[2][0] * in2[0][0] + in1[2][1] * in2[1][0] +
; 234  : 				in1[2][2] * in2[2][0];

  0096e	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00971	d9 40 20	 fld	 DWORD PTR [eax+32]
  00974	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00977	d8 09		 fmul	 DWORD PTR [ecx]
  00979	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  0097c	d9 42 24	 fld	 DWORD PTR [edx+36]
  0097f	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00982	d8 48 10	 fmul	 DWORD PTR [eax+16]
  00985	de c1		 faddp	 ST(1), ST(0)
  00987	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  0098a	d9 41 28	 fld	 DWORD PTR [ecx+40]
  0098d	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00990	d8 4a 20	 fmul	 DWORD PTR [edx+32]
  00993	de c1		 faddp	 ST(1), ST(0)
  00995	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00998	d9 58 20	 fstp	 DWORD PTR [eax+32]

; 235  : 	out[2][1] = in1[2][0] * in2[0][1] + in1[2][1] * in2[1][1] +
; 236  : 				in1[2][2] * in2[2][1];

  0099b	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  0099e	d9 40 20	 fld	 DWORD PTR [eax+32]
  009a1	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  009a4	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  009a7	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  009aa	d9 42 24	 fld	 DWORD PTR [edx+36]
  009ad	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  009b0	d8 48 14	 fmul	 DWORD PTR [eax+20]
  009b3	de c1		 faddp	 ST(1), ST(0)
  009b5	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  009b8	d9 41 28	 fld	 DWORD PTR [ecx+40]
  009bb	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  009be	d8 4a 24	 fmul	 DWORD PTR [edx+36]
  009c1	de c1		 faddp	 ST(1), ST(0)
  009c3	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  009c6	d9 58 24	 fstp	 DWORD PTR [eax+36]

; 237  : 	out[2][2] = in1[2][0] * in2[0][2] + in1[2][1] * in2[1][2] +
; 238  : 				in1[2][2] * in2[2][2];

  009c9	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  009cc	d9 40 20	 fld	 DWORD PTR [eax+32]
  009cf	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  009d2	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  009d5	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  009d8	d9 42 24	 fld	 DWORD PTR [edx+36]
  009db	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  009de	d8 48 18	 fmul	 DWORD PTR [eax+24]
  009e1	de c1		 faddp	 ST(1), ST(0)
  009e3	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  009e6	d9 41 28	 fld	 DWORD PTR [ecx+40]
  009e9	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  009ec	d8 4a 28	 fmul	 DWORD PTR [edx+40]
  009ef	de c1		 faddp	 ST(1), ST(0)
  009f1	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  009f4	d9 58 28	 fstp	 DWORD PTR [eax+40]

; 239  : 	out[2][3] = in1[2][0] * in2[0][3] + in1[2][1] * in2[1][3] +
; 240  : 				in1[2][2] * in2[2][3] + in1[2][3];

  009f7	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  009fa	d9 40 20	 fld	 DWORD PTR [eax+32]
  009fd	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00a00	d8 49 0c	 fmul	 DWORD PTR [ecx+12]
  00a03	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00a06	d9 42 24	 fld	 DWORD PTR [edx+36]
  00a09	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00a0c	d8 48 1c	 fmul	 DWORD PTR [eax+28]
  00a0f	de c1		 faddp	 ST(1), ST(0)
  00a11	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00a14	d9 41 28	 fld	 DWORD PTR [ecx+40]
  00a17	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00a1a	d8 4a 2c	 fmul	 DWORD PTR [edx+44]
  00a1d	de c1		 faddp	 ST(1), ST(0)
  00a1f	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00a22	d8 40 2c	 fadd	 DWORD PTR [eax+44]
  00a25	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00a28	d9 59 2c	 fstp	 DWORD PTR [ecx+44]

; 241  : }

  00a2b	5f		 pop	 edi
  00a2c	5e		 pop	 esi
  00a2d	5b		 pop	 ebx
  00a2e	8b e5		 mov	 esp, ebp
  00a30	5d		 pop	 ebp
  00a31	c3		 ret	 0
_R_ConcatTransforms ENDP
_TEXT	ENDS
PUBLIC	_VectorRotate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_VectorRotate PROC

; 246  : {

  00a40	55		 push	 ebp
  00a41	8b ec		 mov	 ebp, esp
  00a43	83 ec 40	 sub	 esp, 64			; 00000040H
  00a46	53		 push	 ebx
  00a47	56		 push	 esi
  00a48	57		 push	 edi

; 247  : 	out[0] = DotProduct(in1, in2[0]);

  00a49	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00a4c	d9 00		 fld	 DWORD PTR [eax]
  00a4e	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00a51	d8 09		 fmul	 DWORD PTR [ecx]
  00a53	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00a56	d9 42 04	 fld	 DWORD PTR [edx+4]
  00a59	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00a5c	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00a5f	de c1		 faddp	 ST(1), ST(0)
  00a61	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00a64	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00a67	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00a6a	d8 4a 08	 fmul	 DWORD PTR [edx+8]
  00a6d	de c1		 faddp	 ST(1), ST(0)
  00a6f	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00a72	d9 18		 fstp	 DWORD PTR [eax]

; 248  : 	out[1] = DotProduct(in1, in2[1]);

  00a74	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00a77	d9 00		 fld	 DWORD PTR [eax]
  00a79	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00a7c	d8 49 10	 fmul	 DWORD PTR [ecx+16]
  00a7f	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00a82	d9 42 04	 fld	 DWORD PTR [edx+4]
  00a85	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00a88	d8 48 14	 fmul	 DWORD PTR [eax+20]
  00a8b	de c1		 faddp	 ST(1), ST(0)
  00a8d	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00a90	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00a93	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00a96	d8 4a 18	 fmul	 DWORD PTR [edx+24]
  00a99	de c1		 faddp	 ST(1), ST(0)
  00a9b	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00a9e	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 249  : 	out[2] = DotProduct(in1, in2[2]);

  00aa1	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00aa4	d9 00		 fld	 DWORD PTR [eax]
  00aa6	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00aa9	d8 49 20	 fmul	 DWORD PTR [ecx+32]
  00aac	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00aaf	d9 42 04	 fld	 DWORD PTR [edx+4]
  00ab2	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00ab5	d8 48 24	 fmul	 DWORD PTR [eax+36]
  00ab8	de c1		 faddp	 ST(1), ST(0)
  00aba	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00abd	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00ac0	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00ac3	d8 4a 28	 fmul	 DWORD PTR [edx+40]
  00ac6	de c1		 faddp	 ST(1), ST(0)
  00ac8	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00acb	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 250  : }

  00ace	5f		 pop	 edi
  00acf	5e		 pop	 esi
  00ad0	5b		 pop	 ebx
  00ad1	8b e5		 mov	 esp, ebp
  00ad3	5d		 pop	 ebp
  00ad4	c3		 ret	 0
_VectorRotate ENDP
_TEXT	ENDS
PUBLIC	_VectorIRotate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_VectorIRotate PROC

; 255  : {

  00ae0	55		 push	 ebp
  00ae1	8b ec		 mov	 ebp, esp
  00ae3	83 ec 40	 sub	 esp, 64			; 00000040H
  00ae6	53		 push	 ebx
  00ae7	56		 push	 esi
  00ae8	57		 push	 edi

; 256  : 	out[0] = in1[0]*in2[0][0] + in1[1]*in2[1][0] + in1[2]*in2[2][0];

  00ae9	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00aec	d9 00		 fld	 DWORD PTR [eax]
  00aee	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00af1	d8 09		 fmul	 DWORD PTR [ecx]
  00af3	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00af6	d9 42 04	 fld	 DWORD PTR [edx+4]
  00af9	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00afc	d8 48 10	 fmul	 DWORD PTR [eax+16]
  00aff	de c1		 faddp	 ST(1), ST(0)
  00b01	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00b04	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00b07	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00b0a	d8 4a 20	 fmul	 DWORD PTR [edx+32]
  00b0d	de c1		 faddp	 ST(1), ST(0)
  00b0f	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00b12	d9 18		 fstp	 DWORD PTR [eax]

; 257  : 	out[1] = in1[0]*in2[0][1] + in1[1]*in2[1][1] + in1[2]*in2[2][1];

  00b14	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00b17	d9 00		 fld	 DWORD PTR [eax]
  00b19	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00b1c	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00b1f	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00b22	d9 42 04	 fld	 DWORD PTR [edx+4]
  00b25	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00b28	d8 48 14	 fmul	 DWORD PTR [eax+20]
  00b2b	de c1		 faddp	 ST(1), ST(0)
  00b2d	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00b30	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00b33	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00b36	d8 4a 24	 fmul	 DWORD PTR [edx+36]
  00b39	de c1		 faddp	 ST(1), ST(0)
  00b3b	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00b3e	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 258  : 	out[2] = in1[0]*in2[0][2] + in1[1]*in2[1][2] + in1[2]*in2[2][2];

  00b41	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00b44	d9 00		 fld	 DWORD PTR [eax]
  00b46	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00b49	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00b4c	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00b4f	d9 42 04	 fld	 DWORD PTR [edx+4]
  00b52	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00b55	d8 48 18	 fmul	 DWORD PTR [eax+24]
  00b58	de c1		 faddp	 ST(1), ST(0)
  00b5a	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00b5d	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00b60	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00b63	d8 4a 28	 fmul	 DWORD PTR [edx+40]
  00b66	de c1		 faddp	 ST(1), ST(0)
  00b68	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00b6b	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 259  : }

  00b6e	5f		 pop	 edi
  00b6f	5e		 pop	 esi
  00b70	5b		 pop	 ebx
  00b71	8b e5		 mov	 esp, ebp
  00b73	5d		 pop	 ebp
  00b74	c3		 ret	 0
_VectorIRotate ENDP
_TEXT	ENDS
PUBLIC	_VectorTranslate
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_VectorTranslate PROC

; 263  : {

  00b80	55		 push	 ebp
  00b81	8b ec		 mov	 ebp, esp
  00b83	83 ec 40	 sub	 esp, 64			; 00000040H
  00b86	53		 push	 ebx
  00b87	56		 push	 esi
  00b88	57		 push	 edi

; 264  : 	out[0] = in1[0] + in2[0][3];

  00b89	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00b8c	d9 00		 fld	 DWORD PTR [eax]
  00b8e	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00b91	d8 41 0c	 fadd	 DWORD PTR [ecx+12]
  00b94	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00b97	d9 1a		 fstp	 DWORD PTR [edx]

; 265  : 	out[1] = in1[1] + in2[1][3];

  00b99	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00b9c	d9 40 04	 fld	 DWORD PTR [eax+4]
  00b9f	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00ba2	d8 41 1c	 fadd	 DWORD PTR [ecx+28]
  00ba5	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00ba8	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 266  : 	out[2] = in1[2] + in2[2][3];

  00bab	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00bae	d9 40 08	 fld	 DWORD PTR [eax+8]
  00bb1	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00bb4	d8 41 2c	 fadd	 DWORD PTR [ecx+44]
  00bb7	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00bba	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 267  : }

  00bbd	5f		 pop	 edi
  00bbe	5e		 pop	 esi
  00bbf	5b		 pop	 ebx
  00bc0	8b e5		 mov	 esp, ebp
  00bc2	5d		 pop	 ebp
  00bc3	c3		 ret	 0
_VectorTranslate ENDP
_TEXT	ENDS
PUBLIC	_VectorTransform
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_VectorTransform PROC

; 270  : {

  00bd0	55		 push	 ebp
  00bd1	8b ec		 mov	 ebp, esp
  00bd3	83 ec 40	 sub	 esp, 64			; 00000040H
  00bd6	53		 push	 ebx
  00bd7	56		 push	 esi
  00bd8	57		 push	 edi

; 271  : 	out[0] = DotProduct(in1, in2[0]) + in2[0][3];

  00bd9	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00bdc	d9 00		 fld	 DWORD PTR [eax]
  00bde	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00be1	d8 09		 fmul	 DWORD PTR [ecx]
  00be3	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00be6	d9 42 04	 fld	 DWORD PTR [edx+4]
  00be9	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00bec	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00bef	de c1		 faddp	 ST(1), ST(0)
  00bf1	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00bf4	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00bf7	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00bfa	d8 4a 08	 fmul	 DWORD PTR [edx+8]
  00bfd	de c1		 faddp	 ST(1), ST(0)
  00bff	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00c02	d8 40 0c	 fadd	 DWORD PTR [eax+12]
  00c05	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00c08	d9 19		 fstp	 DWORD PTR [ecx]

; 272  : 	out[1] = DotProduct(in1, in2[1]) +	in2[1][3];

  00c0a	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00c0d	d9 00		 fld	 DWORD PTR [eax]
  00c0f	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00c12	d8 49 10	 fmul	 DWORD PTR [ecx+16]
  00c15	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00c18	d9 42 04	 fld	 DWORD PTR [edx+4]
  00c1b	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00c1e	d8 48 14	 fmul	 DWORD PTR [eax+20]
  00c21	de c1		 faddp	 ST(1), ST(0)
  00c23	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00c26	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00c29	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00c2c	d8 4a 18	 fmul	 DWORD PTR [edx+24]
  00c2f	de c1		 faddp	 ST(1), ST(0)
  00c31	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00c34	d8 40 1c	 fadd	 DWORD PTR [eax+28]
  00c37	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00c3a	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 273  : 	out[2] = DotProduct(in1, in2[2]) +	in2[2][3];

  00c3d	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00c40	d9 00		 fld	 DWORD PTR [eax]
  00c42	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00c45	d8 49 20	 fmul	 DWORD PTR [ecx+32]
  00c48	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00c4b	d9 42 04	 fld	 DWORD PTR [edx+4]
  00c4e	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00c51	d8 48 24	 fmul	 DWORD PTR [eax+36]
  00c54	de c1		 faddp	 ST(1), ST(0)
  00c56	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00c59	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00c5c	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00c5f	d8 4a 28	 fmul	 DWORD PTR [edx+40]
  00c62	de c1		 faddp	 ST(1), ST(0)
  00c64	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00c67	d8 40 2c	 fadd	 DWORD PTR [eax+44]
  00c6a	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00c6d	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 274  : }

  00c70	5f		 pop	 edi
  00c71	5e		 pop	 esi
  00c72	5b		 pop	 ebx
  00c73	8b e5		 mov	 esp, ebp
  00c75	5d		 pop	 ebp
  00c76	c3		 ret	 0
_VectorTransform ENDP
_TEXT	ENDS
PUBLIC	_AngleQuaternion
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
_cy$ = -28						; size = 4
_cp$ = -24						; size = 4
_cr$ = -20						; size = 4
_sy$ = -16						; size = 4
_sp$ = -12						; size = 4
_sr$ = -8						; size = 4
_angle$ = -4						; size = 4
_angles$ = 8						; size = 4
_quaternion$ = 12					; size = 4
_AngleQuaternion PROC

; 279  : {

  00c80	55		 push	 ebp
  00c81	8b ec		 mov	 ebp, esp
  00c83	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00c86	53		 push	 ebx
  00c87	56		 push	 esi
  00c88	57		 push	 edi

; 280  : 	float		angle;
; 281  : 	float		sr, sp, sy, cr, cp, cy;
; 282  : 
; 283  : 	// FIXME: rescale the inputs to 1/2 angle
; 284  : 	angle = (float)angles[2] * 0.5;

  00c89	8b 45 08	 mov	 eax, DWORD PTR _angles$[ebp]
  00c8c	d9 40 08	 fld	 DWORD PTR [eax+8]
  00c8f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  00c95	d9 5d fc	 fstp	 DWORD PTR _angle$[ebp]

; 285  : 	sy = (float)sin(angle);

  00c98	51		 push	 ecx
  00c99	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  00c9c	d9 1c 24	 fstp	 DWORD PTR [esp]
  00c9f	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00ca4	83 c4 04	 add	 esp, 4
  00ca7	d9 5d f0	 fstp	 DWORD PTR _sy$[ebp]

; 286  : 	cy = (float)cos(angle);

  00caa	51		 push	 ecx
  00cab	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  00cae	d9 1c 24	 fstp	 DWORD PTR [esp]
  00cb1	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  00cb6	83 c4 04	 add	 esp, 4
  00cb9	d9 5d e4	 fstp	 DWORD PTR _cy$[ebp]

; 287  : 	angle = angles[1] * 0.5;

  00cbc	8b 45 08	 mov	 eax, DWORD PTR _angles$[ebp]
  00cbf	d9 40 04	 fld	 DWORD PTR [eax+4]
  00cc2	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  00cc8	d9 5d fc	 fstp	 DWORD PTR _angle$[ebp]

; 288  : 	sp = (float)sin(angle);

  00ccb	51		 push	 ecx
  00ccc	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  00ccf	d9 1c 24	 fstp	 DWORD PTR [esp]
  00cd2	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00cd7	83 c4 04	 add	 esp, 4
  00cda	d9 5d f4	 fstp	 DWORD PTR _sp$[ebp]

; 289  : 	cp = (float)cos(angle);

  00cdd	51		 push	 ecx
  00cde	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  00ce1	d9 1c 24	 fstp	 DWORD PTR [esp]
  00ce4	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  00ce9	83 c4 04	 add	 esp, 4
  00cec	d9 5d e8	 fstp	 DWORD PTR _cp$[ebp]

; 290  : 	angle = angles[0] * 0.5;

  00cef	8b 45 08	 mov	 eax, DWORD PTR _angles$[ebp]
  00cf2	d9 00		 fld	 DWORD PTR [eax]
  00cf4	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  00cfa	d9 5d fc	 fstp	 DWORD PTR _angle$[ebp]

; 291  : 	sr = (float)sin(angle);

  00cfd	51		 push	 ecx
  00cfe	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  00d01	d9 1c 24	 fstp	 DWORD PTR [esp]
  00d04	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00d09	83 c4 04	 add	 esp, 4
  00d0c	d9 5d f8	 fstp	 DWORD PTR _sr$[ebp]

; 292  : 	cr = (float)cos(angle);

  00d0f	51		 push	 ecx
  00d10	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]
  00d13	d9 1c 24	 fstp	 DWORD PTR [esp]
  00d16	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  00d1b	83 c4 04	 add	 esp, 4
  00d1e	d9 5d ec	 fstp	 DWORD PTR _cr$[ebp]

; 293  : 
; 294  : 	quaternion[0] = sr*cp*cy-cr*sp*sy; // X

  00d21	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  00d24	d8 4d e8	 fmul	 DWORD PTR _cp$[ebp]
  00d27	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  00d2a	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  00d2d	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00d30	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  00d33	de e9		 fsubp	 ST(1), ST(0)
  00d35	8b 45 0c	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00d38	d9 18		 fstp	 DWORD PTR [eax]

; 295  : 	quaternion[1] = cr*sp*cy+sr*cp*sy; // Y

  00d3a	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  00d3d	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00d40	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  00d43	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  00d46	d8 4d e8	 fmul	 DWORD PTR _cp$[ebp]
  00d49	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  00d4c	de c1		 faddp	 ST(1), ST(0)
  00d4e	8b 45 0c	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00d51	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 296  : 	quaternion[2] = cr*cp*sy-sr*sp*cy; // Z

  00d54	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  00d57	d8 4d e8	 fmul	 DWORD PTR _cp$[ebp]
  00d5a	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  00d5d	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  00d60	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00d63	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  00d66	de e9		 fsubp	 ST(1), ST(0)
  00d68	8b 45 0c	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00d6b	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 297  : 	quaternion[3] = cr*cp*cy+sr*sp*sy; // W

  00d6e	d9 45 ec	 fld	 DWORD PTR _cr$[ebp]
  00d71	d8 4d e8	 fmul	 DWORD PTR _cp$[ebp]
  00d74	d8 4d e4	 fmul	 DWORD PTR _cy$[ebp]
  00d77	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  00d7a	d8 4d f4	 fmul	 DWORD PTR _sp$[ebp]
  00d7d	d8 4d f0	 fmul	 DWORD PTR _sy$[ebp]
  00d80	de c1		 faddp	 ST(1), ST(0)
  00d82	8b 45 0c	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00d85	d9 58 0c	 fstp	 DWORD PTR [eax+12]

; 298  : }

  00d88	5f		 pop	 edi
  00d89	5e		 pop	 esi
  00d8a	5b		 pop	 ebx
  00d8b	8b e5		 mov	 esp, ebp
  00d8d	5d		 pop	 ebp
  00d8e	c3		 ret	 0
_AngleQuaternion ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	_QuaternionMatrix
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
_quaternion$ = 8					; size = 4
_matrix$ = 12						; size = 4
_QuaternionMatrix PROC

; 301  : {

  00d90	55		 push	 ebp
  00d91	8b ec		 mov	 ebp, esp
  00d93	83 ec 40	 sub	 esp, 64			; 00000040H
  00d96	53		 push	 ebx
  00d97	56		 push	 esi
  00d98	57		 push	 edi

; 302  : 
; 303  : 	matrix[0][0] = 1.0 - 2.0 * quaternion[1] * quaternion[1] - 2.0 * quaternion[2] * quaternion[2];

  00d99	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00d9c	d9 40 04	 fld	 DWORD PTR [eax+4]
  00d9f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00da5	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00da8	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00dab	d9 e8		 fld1
  00dad	de e1		 fsubrp	 ST(1), ST(0)
  00daf	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00db2	d9 42 08	 fld	 DWORD PTR [edx+8]
  00db5	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00dbb	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00dbe	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00dc1	de e9		 fsubp	 ST(1), ST(0)
  00dc3	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  00dc6	d9 19		 fstp	 DWORD PTR [ecx]

; 304  : 	matrix[1][0] = 2.0 * quaternion[0] * quaternion[1] + 2.0 * quaternion[3] * quaternion[2];

  00dc8	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00dcb	d9 00		 fld	 DWORD PTR [eax]
  00dcd	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00dd3	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00dd6	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00dd9	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00ddc	d9 42 0c	 fld	 DWORD PTR [edx+12]
  00ddf	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00de5	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00de8	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00deb	de c1		 faddp	 ST(1), ST(0)
  00ded	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  00df0	d9 59 10	 fstp	 DWORD PTR [ecx+16]

; 305  : 	matrix[2][0] = 2.0 * quaternion[0] * quaternion[2] - 2.0 * quaternion[3] * quaternion[1];

  00df3	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00df6	d9 00		 fld	 DWORD PTR [eax]
  00df8	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00dfe	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00e01	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00e04	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00e07	d9 42 0c	 fld	 DWORD PTR [edx+12]
  00e0a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00e10	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00e13	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00e16	de e9		 fsubp	 ST(1), ST(0)
  00e18	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  00e1b	d9 59 20	 fstp	 DWORD PTR [ecx+32]

; 306  : 
; 307  : 	matrix[0][1] = 2.0 * quaternion[0] * quaternion[1] - 2.0 * quaternion[3] * quaternion[2];

  00e1e	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00e21	d9 00		 fld	 DWORD PTR [eax]
  00e23	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00e29	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00e2c	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00e2f	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00e32	d9 42 0c	 fld	 DWORD PTR [edx+12]
  00e35	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00e3b	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00e3e	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00e41	de e9		 fsubp	 ST(1), ST(0)
  00e43	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  00e46	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 308  : 	matrix[1][1] = 1.0 - 2.0 * quaternion[0] * quaternion[0] - 2.0 * quaternion[2] * quaternion[2];

  00e49	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00e4c	d9 00		 fld	 DWORD PTR [eax]
  00e4e	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00e54	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00e57	d8 09		 fmul	 DWORD PTR [ecx]
  00e59	d9 e8		 fld1
  00e5b	de e1		 fsubrp	 ST(1), ST(0)
  00e5d	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00e60	d9 42 08	 fld	 DWORD PTR [edx+8]
  00e63	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00e69	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00e6c	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00e6f	de e9		 fsubp	 ST(1), ST(0)
  00e71	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  00e74	d9 59 14	 fstp	 DWORD PTR [ecx+20]

; 309  : 	matrix[2][1] = 2.0 * quaternion[1] * quaternion[2] + 2.0 * quaternion[3] * quaternion[0];

  00e77	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00e7a	d9 40 04	 fld	 DWORD PTR [eax+4]
  00e7d	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00e83	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00e86	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00e89	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00e8c	d9 42 0c	 fld	 DWORD PTR [edx+12]
  00e8f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00e95	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00e98	d8 08		 fmul	 DWORD PTR [eax]
  00e9a	de c1		 faddp	 ST(1), ST(0)
  00e9c	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  00e9f	d9 59 24	 fstp	 DWORD PTR [ecx+36]

; 310  : 
; 311  : 	matrix[0][2] = 2.0 * quaternion[0] * quaternion[2] + 2.0 * quaternion[3] * quaternion[1];

  00ea2	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00ea5	d9 00		 fld	 DWORD PTR [eax]
  00ea7	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00ead	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00eb0	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00eb3	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00eb6	d9 42 0c	 fld	 DWORD PTR [edx+12]
  00eb9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00ebf	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00ec2	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00ec5	de c1		 faddp	 ST(1), ST(0)
  00ec7	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  00eca	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 312  : 	matrix[1][2] = 2.0 * quaternion[1] * quaternion[2] - 2.0 * quaternion[3] * quaternion[0];

  00ecd	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00ed0	d9 40 04	 fld	 DWORD PTR [eax+4]
  00ed3	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00ed9	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00edc	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00edf	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00ee2	d9 42 0c	 fld	 DWORD PTR [edx+12]
  00ee5	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00eeb	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00eee	d8 08		 fmul	 DWORD PTR [eax]
  00ef0	de e9		 fsubp	 ST(1), ST(0)
  00ef2	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  00ef5	d9 59 18	 fstp	 DWORD PTR [ecx+24]

; 313  : 	matrix[2][2] = 1.0 - 2.0 * quaternion[0] * quaternion[0] - 2.0 * quaternion[1] * quaternion[1];

  00ef8	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00efb	d9 00		 fld	 DWORD PTR [eax]
  00efd	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00f03	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00f06	d8 09		 fmul	 DWORD PTR [ecx]
  00f08	d9 e8		 fld1
  00f0a	de e1		 fsubrp	 ST(1), ST(0)
  00f0c	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00f0f	d9 42 04	 fld	 DWORD PTR [edx+4]
  00f12	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00f18	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00f1b	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00f1e	de e9		 fsubp	 ST(1), ST(0)
  00f20	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  00f23	d9 59 28	 fstp	 DWORD PTR [ecx+40]

; 314  : }

  00f26	5f		 pop	 edi
  00f27	5e		 pop	 esi
  00f28	5b		 pop	 ebx
  00f29	8b e5		 mov	 esp, ebp
  00f2b	5d		 pop	 ebp
  00f2c	c3		 ret	 0
_QuaternionMatrix ENDP
_TEXT	ENDS
PUBLIC	__real@400921fb60000000
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	__real@3e45798ee2308c3a
PUBLIC	_QuaternionSlerp
EXTRN	_sin:PROC
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@3e45798ee2308c3a
CONST	SEGMENT
__real@3e45798ee2308c3a DQ 03e45798ee2308c3ar	; 1e-008
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv327 = -100						; size = 4
_b$ = -32						; size = 4
_a$ = -28						; size = 4
_sclq$ = -24						; size = 4
_sclp$ = -20						; size = 4
_sinom$ = -16						; size = 4
_cosom$ = -12						; size = 4
_omega$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_q$ = 12						; size = 4
_t$ = 16						; size = 4
_qt$ = 20						; size = 4
_QuaternionSlerp PROC

; 317  : {

  00f30	55		 push	 ebp
  00f31	8b ec		 mov	 ebp, esp
  00f33	83 ec 64	 sub	 esp, 100		; 00000064H
  00f36	53		 push	 ebx
  00f37	56		 push	 esi
  00f38	57		 push	 edi

; 318  : 	int i;
; 319  : 	float omega, cosom, sinom, sclp, sclq;
; 320  : 
; 321  : 	// decide if one of the quaternions is backwards
; 322  : 	float a = 0;

  00f39	d9 ee		 fldz
  00f3b	d9 5d e4	 fstp	 DWORD PTR _a$[ebp]

; 323  : 	float b = 0;

  00f3e	d9 ee		 fldz
  00f40	d9 5d e0	 fstp	 DWORD PTR _b$[ebp]

; 324  : 	for (i = 0; i < 4; i++) {

  00f43	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00f4a	eb 09		 jmp	 SHORT $LN17@Quaternion
$LN16@Quaternion:
  00f4c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00f4f	83 c0 01	 add	 eax, 1
  00f52	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN17@Quaternion:
  00f55	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  00f59	7d 5a		 jge	 SHORT $LN15@Quaternion

; 325  : 		a += (p[i]-q[i])*(p[i]-q[i]);

  00f5b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00f5e	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00f61	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00f64	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00f67	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  00f6a	d8 24 90	 fsub	 DWORD PTR [eax+edx*4]
  00f6d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00f70	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00f73	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00f76	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00f79	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  00f7c	d8 24 81	 fsub	 DWORD PTR [ecx+eax*4]
  00f7f	de c9		 fmulp	 ST(1), ST(0)
  00f81	d8 45 e4	 fadd	 DWORD PTR _a$[ebp]
  00f84	d9 5d e4	 fstp	 DWORD PTR _a$[ebp]

; 326  : 		b += (p[i]+q[i])*(p[i]+q[i]);

  00f87	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00f8a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00f8d	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00f90	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00f93	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  00f96	d8 04 90	 fadd	 DWORD PTR [eax+edx*4]
  00f99	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00f9c	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00f9f	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00fa2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00fa5	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  00fa8	d8 04 81	 fadd	 DWORD PTR [ecx+eax*4]
  00fab	de c9		 fmulp	 ST(1), ST(0)
  00fad	d8 45 e0	 fadd	 DWORD PTR _b$[ebp]
  00fb0	d9 5d e0	 fstp	 DWORD PTR _b$[ebp]

; 327  : 	}

  00fb3	eb 97		 jmp	 SHORT $LN16@Quaternion
$LN15@Quaternion:

; 328  : 	if (a > b) {

  00fb5	d9 45 e4	 fld	 DWORD PTR _a$[ebp]
  00fb8	d9 45 e0	 fld	 DWORD PTR _b$[ebp]
  00fbb	de d9		 fcompp
  00fbd	df e0		 fnstsw	 ax
  00fbf	f6 c4 05	 test	 ah, 5
  00fc2	7a 2e		 jp	 SHORT $LN11@Quaternion

; 329  : 		for (i = 0; i < 4; i++) {

  00fc4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00fcb	eb 09		 jmp	 SHORT $LN13@Quaternion
$LN12@Quaternion:
  00fcd	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00fd0	83 c0 01	 add	 eax, 1
  00fd3	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN13@Quaternion:
  00fd6	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  00fda	7d 16		 jge	 SHORT $LN11@Quaternion

; 330  : 			q[i] = -q[i];

  00fdc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00fdf	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  00fe2	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00fe5	d9 e0		 fchs
  00fe7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00fea	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  00fed	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 331  : 		}

  00ff0	eb db		 jmp	 SHORT $LN12@Quaternion
$LN11@Quaternion:

; 332  : 	}
; 333  : 
; 334  : 	cosom = p[0]*q[0] + p[1]*q[1] + p[2]*q[2] + p[3]*q[3];

  00ff2	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00ff5	d9 00		 fld	 DWORD PTR [eax]
  00ff7	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  00ffa	d8 09		 fmul	 DWORD PTR [ecx]
  00ffc	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00fff	d9 42 04	 fld	 DWORD PTR [edx+4]
  01002	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  01005	d8 48 04	 fmul	 DWORD PTR [eax+4]
  01008	de c1		 faddp	 ST(1), ST(0)
  0100a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0100d	d9 41 08	 fld	 DWORD PTR [ecx+8]
  01010	8b 55 0c	 mov	 edx, DWORD PTR _q$[ebp]
  01013	d8 4a 08	 fmul	 DWORD PTR [edx+8]
  01016	de c1		 faddp	 ST(1), ST(0)
  01018	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0101b	d9 40 0c	 fld	 DWORD PTR [eax+12]
  0101e	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  01021	d8 49 0c	 fmul	 DWORD PTR [ecx+12]
  01024	de c1		 faddp	 ST(1), ST(0)
  01026	d9 5d f4	 fstp	 DWORD PTR _cosom$[ebp]

; 335  : 
; 336  : 	if ((1.0 + cosom) > 0.00000001) {

  01029	d9 45 f4	 fld	 DWORD PTR _cosom$[ebp]
  0102c	d9 e8		 fld1
  0102e	de c1		 faddp	 ST(1), ST(0)
  01030	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3e45798ee2308c3a
  01036	df e0		 fnstsw	 ax
  01038	f6 c4 41	 test	 ah, 65			; 00000041H
  0103b	0f 85 c8 00 00
	00		 jne	 $LN10@Quaternion

; 337  : 		if ((1.0 - cosom) > 0.00000001) {

  01041	d9 45 f4	 fld	 DWORD PTR _cosom$[ebp]
  01044	d9 e8		 fld1
  01046	de e1		 fsubrp	 ST(1), ST(0)
  01048	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3e45798ee2308c3a
  0104e	df e0		 fnstsw	 ax
  01050	f6 c4 41	 test	 ah, 65			; 00000041H
  01053	75 62		 jne	 SHORT $LN9@Quaternion

; 338  : 			omega = acos( cosom );

  01055	51		 push	 ecx
  01056	d9 45 f4	 fld	 DWORD PTR _cosom$[ebp]
  01059	d9 1c 24	 fstp	 DWORD PTR [esp]
  0105c	e8 00 00 00 00	 call	 ?acos@@YAMM@Z		; acos
  01061	83 c4 04	 add	 esp, 4
  01064	d9 5d f8	 fstp	 DWORD PTR _omega$[ebp]

; 339  : 			sinom = sin( omega );

  01067	51		 push	 ecx
  01068	d9 45 f8	 fld	 DWORD PTR _omega$[ebp]
  0106b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0106e	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  01073	83 c4 04	 add	 esp, 4
  01076	d9 5d f0	 fstp	 DWORD PTR _sinom$[ebp]

; 340  : 			sclp = sin( (1.0 - t)*omega) / sinom;

  01079	d9 45 10	 fld	 DWORD PTR _t$[ebp]
  0107c	d9 e8		 fld1
  0107e	de e1		 fsubrp	 ST(1), ST(0)
  01080	d8 4d f8	 fmul	 DWORD PTR _omega$[ebp]
  01083	83 ec 08	 sub	 esp, 8
  01086	dd 1c 24	 fstp	 QWORD PTR [esp]
  01089	e8 00 00 00 00	 call	 _sin
  0108e	83 c4 08	 add	 esp, 8
  01091	d8 75 f0	 fdiv	 DWORD PTR _sinom$[ebp]
  01094	d9 5d ec	 fstp	 DWORD PTR _sclp$[ebp]

; 341  : 			sclq = sin( t*omega ) / sinom;

  01097	d9 45 10	 fld	 DWORD PTR _t$[ebp]
  0109a	d8 4d f8	 fmul	 DWORD PTR _omega$[ebp]
  0109d	d9 5d 9c	 fstp	 DWORD PTR tv327[ebp]
  010a0	d9 45 9c	 fld	 DWORD PTR tv327[ebp]
  010a3	51		 push	 ecx
  010a4	d9 1c 24	 fstp	 DWORD PTR [esp]
  010a7	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  010ac	83 c4 04	 add	 esp, 4
  010af	d8 75 f0	 fdiv	 DWORD PTR _sinom$[ebp]
  010b2	d9 5d e8	 fstp	 DWORD PTR _sclq$[ebp]

; 342  : 		}
; 343  : 		else {

  010b5	eb 10		 jmp	 SHORT $LN8@Quaternion
$LN9@Quaternion:

; 344  : 			sclp = 1.0 - t;

  010b7	d9 45 10	 fld	 DWORD PTR _t$[ebp]
  010ba	d9 e8		 fld1
  010bc	de e1		 fsubrp	 ST(1), ST(0)
  010be	d9 5d ec	 fstp	 DWORD PTR _sclp$[ebp]

; 345  : 			sclq = t;

  010c1	d9 45 10	 fld	 DWORD PTR _t$[ebp]
  010c4	d9 5d e8	 fstp	 DWORD PTR _sclq$[ebp]
$LN8@Quaternion:

; 346  : 		}
; 347  : 		for (i = 0; i < 4; i++) {

  010c7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  010ce	eb 09		 jmp	 SHORT $LN7@Quaternion
$LN6@Quaternion:
  010d0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  010d3	83 c0 01	 add	 eax, 1
  010d6	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@Quaternion:
  010d9	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  010dd	7d 25		 jge	 SHORT $LN5@Quaternion

; 348  : 			qt[i] = sclp * p[i] + sclq * q[i];

  010df	d9 45 ec	 fld	 DWORD PTR _sclp$[ebp]
  010e2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  010e5	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  010e8	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  010eb	d9 45 e8	 fld	 DWORD PTR _sclq$[ebp]
  010ee	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  010f1	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  010f4	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  010f7	de c1		 faddp	 ST(1), ST(0)
  010f9	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  010fc	8b 55 14	 mov	 edx, DWORD PTR _qt$[ebp]
  010ff	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 349  : 		}

  01102	eb cc		 jmp	 SHORT $LN6@Quaternion
$LN5@Quaternion:

; 350  : 	}
; 351  : 	else {

  01104	e9 b3 00 00 00	 jmp	 $LN1@Quaternion
$LN10@Quaternion:

; 352  : 		qt[0] = -p[1];

  01109	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0110c	d9 40 04	 fld	 DWORD PTR [eax+4]
  0110f	d9 e0		 fchs
  01111	8b 4d 14	 mov	 ecx, DWORD PTR _qt$[ebp]
  01114	d9 19		 fstp	 DWORD PTR [ecx]

; 353  : 		qt[1] = p[0];

  01116	8b 45 14	 mov	 eax, DWORD PTR _qt$[ebp]
  01119	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0111c	d9 01		 fld	 DWORD PTR [ecx]
  0111e	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 354  : 		qt[2] = -p[3];

  01121	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  01124	d9 40 0c	 fld	 DWORD PTR [eax+12]
  01127	d9 e0		 fchs
  01129	8b 4d 14	 mov	 ecx, DWORD PTR _qt$[ebp]
  0112c	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 355  : 		qt[3] = p[2];

  0112f	8b 45 14	 mov	 eax, DWORD PTR _qt$[ebp]
  01132	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  01135	d9 41 08	 fld	 DWORD PTR [ecx+8]
  01138	d9 58 0c	 fstp	 DWORD PTR [eax+12]

; 356  : 		sclp = sin( (1.0 - t) * 0.5 * Q_PI);

  0113b	d9 45 10	 fld	 DWORD PTR _t$[ebp]
  0113e	d9 e8		 fld1
  01140	de e1		 fsubrp	 ST(1), ST(0)
  01142	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  01148	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@400921fb60000000
  0114e	83 ec 08	 sub	 esp, 8
  01151	dd 1c 24	 fstp	 QWORD PTR [esp]
  01154	e8 00 00 00 00	 call	 _sin
  01159	83 c4 08	 add	 esp, 8
  0115c	d9 5d ec	 fstp	 DWORD PTR _sclp$[ebp]

; 357  : 		sclq = sin( t * 0.5 * Q_PI);

  0115f	d9 45 10	 fld	 DWORD PTR _t$[ebp]
  01162	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  01168	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@400921fb60000000
  0116e	83 ec 08	 sub	 esp, 8
  01171	dd 1c 24	 fstp	 QWORD PTR [esp]
  01174	e8 00 00 00 00	 call	 _sin
  01179	83 c4 08	 add	 esp, 8
  0117c	d9 5d e8	 fstp	 DWORD PTR _sclq$[ebp]

; 358  : 		for (i = 0; i < 3; i++) {

  0117f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01186	eb 09		 jmp	 SHORT $LN3@Quaternion
$LN2@Quaternion:
  01188	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0118b	83 c0 01	 add	 eax, 1
  0118e	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN3@Quaternion:
  01191	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  01195	7d 25		 jge	 SHORT $LN1@Quaternion

; 359  : 			qt[i] = sclp * p[i] + sclq * qt[i];

  01197	d9 45 ec	 fld	 DWORD PTR _sclp$[ebp]
  0119a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0119d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  011a0	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  011a3	d9 45 e8	 fld	 DWORD PTR _sclq$[ebp]
  011a6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  011a9	8b 45 14	 mov	 eax, DWORD PTR _qt$[ebp]
  011ac	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  011af	de c1		 faddp	 ST(1), ST(0)
  011b1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  011b4	8b 55 14	 mov	 edx, DWORD PTR _qt$[ebp]
  011b7	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 360  : 		}

  011ba	eb cc		 jmp	 SHORT $LN2@Quaternion
$LN1@Quaternion:

; 361  : 	}
; 362  : }

  011bc	5f		 pop	 edi
  011bd	5e		 pop	 esi
  011be	5b		 pop	 ebx
  011bf	8b e5		 mov	 esp, ebp
  011c1	5d		 pop	 ebp
  011c2	c3		 ret	 0
_QuaternionSlerp ENDP
_TEXT	ENDS
PUBLIC	_FaceNormalize
; Function compile flags: /Odtp /ZI
_TEXT	SEGMENT
tv241 = -88						; size = 4
_dot$ = -20						; size = 8
_nz$ = -12						; size = 4
_ny$ = -8						; size = 4
_nx$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v3$ = 16						; size = 4
_Normal$ = 20						; size = 4
_FaceNormalize PROC

; 365  : {

  011d0	55		 push	 ebp
  011d1	8b ec		 mov	 ebp, esp
  011d3	83 ec 58	 sub	 esp, 88			; 00000058H
  011d6	53		 push	 ebx
  011d7	56		 push	 esi
  011d8	57		 push	 edi

; 366  :     float nx,ny,nz;
; 367  :     nx = (v2[1]-v1[1]) * (v3[2]-v1[2]) - (v3[1]-v1[1]) * (v2[2]-v1[2]);

  011d9	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  011dc	d9 40 04	 fld	 DWORD PTR [eax+4]
  011df	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  011e2	d8 61 04	 fsub	 DWORD PTR [ecx+4]
  011e5	8b 55 10	 mov	 edx, DWORD PTR _v3$[ebp]
  011e8	d9 42 08	 fld	 DWORD PTR [edx+8]
  011eb	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  011ee	d8 60 08	 fsub	 DWORD PTR [eax+8]
  011f1	de c9		 fmulp	 ST(1), ST(0)
  011f3	8b 4d 10	 mov	 ecx, DWORD PTR _v3$[ebp]
  011f6	d9 41 04	 fld	 DWORD PTR [ecx+4]
  011f9	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  011fc	d8 62 04	 fsub	 DWORD PTR [edx+4]
  011ff	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  01202	d9 40 08	 fld	 DWORD PTR [eax+8]
  01205	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  01208	d8 61 08	 fsub	 DWORD PTR [ecx+8]
  0120b	de c9		 fmulp	 ST(1), ST(0)
  0120d	de e9		 fsubp	 ST(1), ST(0)
  0120f	d9 5d fc	 fstp	 DWORD PTR _nx$[ebp]

; 368  :     ny = (v2[2]-v1[2]) * (v3[0]-v1[0]) - (v3[2]-v1[2]) * (v2[0]-v1[0]);

  01212	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  01215	d9 40 08	 fld	 DWORD PTR [eax+8]
  01218	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  0121b	d8 61 08	 fsub	 DWORD PTR [ecx+8]
  0121e	8b 55 10	 mov	 edx, DWORD PTR _v3$[ebp]
  01221	d9 02		 fld	 DWORD PTR [edx]
  01223	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  01226	d8 20		 fsub	 DWORD PTR [eax]
  01228	de c9		 fmulp	 ST(1), ST(0)
  0122a	8b 4d 10	 mov	 ecx, DWORD PTR _v3$[ebp]
  0122d	d9 41 08	 fld	 DWORD PTR [ecx+8]
  01230	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  01233	d8 62 08	 fsub	 DWORD PTR [edx+8]
  01236	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  01239	d9 00		 fld	 DWORD PTR [eax]
  0123b	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  0123e	d8 21		 fsub	 DWORD PTR [ecx]
  01240	de c9		 fmulp	 ST(1), ST(0)
  01242	de e9		 fsubp	 ST(1), ST(0)
  01244	d9 5d f8	 fstp	 DWORD PTR _ny$[ebp]

; 369  :     nz = (v2[0]-v1[0]) * (v3[1]-v1[1]) - (v3[0]-v1[0]) * (v2[1]-v1[1]);

  01247	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  0124a	d9 00		 fld	 DWORD PTR [eax]
  0124c	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  0124f	d8 21		 fsub	 DWORD PTR [ecx]
  01251	8b 55 10	 mov	 edx, DWORD PTR _v3$[ebp]
  01254	d9 42 04	 fld	 DWORD PTR [edx+4]
  01257	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  0125a	d8 60 04	 fsub	 DWORD PTR [eax+4]
  0125d	de c9		 fmulp	 ST(1), ST(0)
  0125f	8b 4d 10	 mov	 ecx, DWORD PTR _v3$[ebp]
  01262	d9 01		 fld	 DWORD PTR [ecx]
  01264	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  01267	d8 22		 fsub	 DWORD PTR [edx]
  01269	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  0126c	d9 40 04	 fld	 DWORD PTR [eax+4]
  0126f	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  01272	d8 61 04	 fsub	 DWORD PTR [ecx+4]
  01275	de c9		 fmulp	 ST(1), ST(0)
  01277	de e9		 fsubp	 ST(1), ST(0)
  01279	d9 5d f4	 fstp	 DWORD PTR _nz$[ebp]

; 370  :     double dot = sqrt(nx*nx+ny*ny+nz*nz);

  0127c	d9 45 fc	 fld	 DWORD PTR _nx$[ebp]
  0127f	d8 4d fc	 fmul	 DWORD PTR _nx$[ebp]
  01282	d9 45 f8	 fld	 DWORD PTR _ny$[ebp]
  01285	d8 4d f8	 fmul	 DWORD PTR _ny$[ebp]
  01288	de c1		 faddp	 ST(1), ST(0)
  0128a	d9 45 f4	 fld	 DWORD PTR _nz$[ebp]
  0128d	d8 4d f4	 fmul	 DWORD PTR _nz$[ebp]
  01290	de c1		 faddp	 ST(1), ST(0)
  01292	d9 5d a8	 fstp	 DWORD PTR tv241[ebp]
  01295	d9 45 a8	 fld	 DWORD PTR tv241[ebp]
  01298	51		 push	 ecx
  01299	d9 1c 24	 fstp	 DWORD PTR [esp]
  0129c	e8 00 00 00 00	 call	 ?sqrt@@YAMM@Z		; sqrt
  012a1	83 c4 04	 add	 esp, 4
  012a4	dd 5d ec	 fstp	 QWORD PTR _dot$[ebp]

; 371  : 	if(dot == 0) return;

  012a7	dd 45 ec	 fld	 QWORD PTR _dot$[ebp]
  012aa	d9 ee		 fldz
  012ac	da e9		 fucompp
  012ae	df e0		 fnstsw	 ax
  012b0	f6 c4 44	 test	 ah, 68			; 00000044H
  012b3	7a 02		 jp	 SHORT $LN1@FaceNormal
  012b5	eb 23		 jmp	 SHORT $LN2@FaceNormal
$LN1@FaceNormal:

; 372  : 	Normal[0] = (nx/dot);

  012b7	d9 45 fc	 fld	 DWORD PTR _nx$[ebp]
  012ba	dc 75 ec	 fdiv	 QWORD PTR _dot$[ebp]
  012bd	8b 45 14	 mov	 eax, DWORD PTR _Normal$[ebp]
  012c0	d9 18		 fstp	 DWORD PTR [eax]

; 373  : 	Normal[1] = (ny/dot);

  012c2	d9 45 f8	 fld	 DWORD PTR _ny$[ebp]
  012c5	dc 75 ec	 fdiv	 QWORD PTR _dot$[ebp]
  012c8	8b 45 14	 mov	 eax, DWORD PTR _Normal$[ebp]
  012cb	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 374  : 	Normal[2] = (nz/dot);

  012ce	d9 45 f4	 fld	 DWORD PTR _nz$[ebp]
  012d1	dc 75 ec	 fdiv	 QWORD PTR _dot$[ebp]
  012d4	8b 45 14	 mov	 eax, DWORD PTR _Normal$[ebp]
  012d7	d9 58 08	 fstp	 DWORD PTR [eax+8]
$LN2@FaceNormal:

; 375  : }

  012da	5f		 pop	 edi
  012db	5e		 pop	 esi
  012dc	5b		 pop	 ebx
  012dd	8b e5		 mov	 esp, ebp
  012df	5d		 pop	 ebp
  012e0	c3		 ret	 0
_FaceNormalize ENDP
_TEXT	ENDS
PUBLIC	_acosf
; Function compile flags: /Odtp /ZI
; File d:\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 502  :         {return (acosf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	51		 push	 ecx
  0000a	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00010	e8 00 00 00 00	 call	 _acosf
  00015	83 c4 04	 add	 esp, 4
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
EXTRN	_acos:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _acosf
_TEXT	SEGMENT
tv73 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00012	e8 00 00 00 00	 call	 _acos
  00017	83 c4 08	 add	 esp, 8
  0001a	d9 5d bc	 fstp	 DWORD PTR tv73[ebp]
  0001d	d9 45 bc	 fld	 DWORD PTR tv73[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
PUBLIC	_cosf
; Function compile flags: /Odtp /ZI
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 512  :         {return (cosf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	51		 push	 ecx
  0000a	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00010	e8 00 00 00 00	 call	 _cosf
  00015	83 c4 04	 add	 esp, 4
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
EXTRN	_cos:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _cosf
_TEXT	SEGMENT
tv73 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00012	e8 00 00 00 00	 call	 _cos
  00017	83 c4 08	 add	 esp, 8
  0001a	d9 5d bc	 fstp	 DWORD PTR tv73[ebp]
  0001d	d9 45 bc	 fld	 DWORD PTR tv73[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_fabsf
; Function compile flags: /Odtp /ZI
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 518  :         {return (fabsf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	51		 push	 ecx
  0000a	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00010	e8 00 00 00 00	 call	 _fabsf
  00015	83 c4 04	 add	 esp, 4
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?fabs@@YAMM@Z ENDP					; fabs
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT
tv73 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 395  :         {return ((float)fabs((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00012	e8 00 00 00 00	 call	 _fabs
  00017	83 c4 08	 add	 esp, 8
  0001a	d9 5d bc	 fstp	 DWORD PTR tv73[ebp]
  0001d	d9 45 bc	 fld	 DWORD PTR tv73[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odtp /ZI
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 538  :         {return (sinf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	51		 push	 ecx
  0000a	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00010	e8 00 00 00 00	 call	 _sinf
  00015	83 c4 04	 add	 esp, 4
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?sin@@YAMM@Z ENDP					; sin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT
tv73 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00012	e8 00 00 00 00	 call	 _sin
  00017	83 c4 08	 add	 esp, 8
  0001a	d9 5d bc	 fstp	 DWORD PTR tv73[ebp]
  0001d	d9 45 bc	 fld	 DWORD PTR tv73[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /ZI
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	51		 push	 ecx
  0000a	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00010	e8 00 00 00 00	 call	 _sqrtf
  00015	83 c4 04	 add	 esp, 4
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00012	e8 00 00 00 00	 call	 _sqrt
  00017	83 c4 08	 add	 esp, 8
  0001a	d9 5d bc	 fstp	 DWORD PTR tv73[ebp]
  0001d	d9 45 bc	 fld	 DWORD PTR tv73[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
