; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\ExTeam6.3\Source\GameServer\GameServer\MossMerchant.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gMossMerchant@@3VCMossMerchant@@A		; gMossMerchant
_BSS	SEGMENT
?gMossMerchant@@3VCMossMerchant@@A DB 031e4H DUP (?)	; gMossMerchant
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?ReadFile@CMossMerchant@@QAEXXZ			; CMossMerchant::ReadFile
PUBLIC	?Init@CMossMerchant@@QAEXXZ			; CMossMerchant::Init
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\gameserver\mossmerchant.cpp
_TEXT	SEGMENT
_i$219865 = -12						; size = 4
_j$219861 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CMossMerchant@@QAEXXZ PROC			; CMossMerchant::Init
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 14   : 	// ----
; 15   : 	for (int j=0;j<5;j++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$219861[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN6@Init
$LN5@Init:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _j$219861[ebp], eax
$LN6@Init:
  0001e	83 7d f8 05	 cmp	 DWORD PTR _j$219861[ebp], 5
  00022	0f 8d e2 00 00
	00		 jge	 $LN4@Init

; 16   : 	{
; 17   : 		for (int i=0;i<MAX_ITEM_SECTION;i++)

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$219865[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN3@Init
$LN2@Init:
  00031	8b 45 f4	 mov	 eax, DWORD PTR _i$219865[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f4	 mov	 DWORD PTR _i$219865[ebp], eax
$LN3@Init:
  0003a	81 7d f4 ff 00
	00 00		 cmp	 DWORD PTR _i$219865[ebp], 255 ; 000000ffH
  00041	0f 8d be 00 00
	00		 jge	 $LN1@Init

; 18   : 		{
; 19   : 			gMossMerchant.Type[j][i] = -1;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  0004a	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00050	8b 4d f4	 mov	 ecx, DWORD PTR _i$219865[ebp]
  00053	c6 84 08 14 00
	00 00 ff	 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+20], 255 ; 000000ffH

; 20   : 			gMossMerchant.Index[j][i] = -1;

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  0005e	69 c0 fe 01 00
	00		 imul	 eax, 510		; 000001feH
  00064	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00069	8b 55 f4	 mov	 edx, DWORD PTR _i$219865[ebp]
  0006c	66 89 8c 50 10
	05 00 00	 mov	 WORD PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+edx*2+1296], cx

; 21   : 			gMossMerchant.Level[j][i] = 0;

  00074	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  00077	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR _i$219865[ebp]
  00080	c6 84 08 06 0f
	00 00 00	 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+3846], 0

; 22   : 			gMossMerchant.Dur[j][i] = 0;

  00088	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  0008b	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00091	8b 4d f4	 mov	 ecx, DWORD PTR _i$219865[ebp]
  00094	c6 84 08 01 14
	00 00 00	 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+5121], 0

; 23   : 			gMossMerchant.Skill[j][i] = 0;

  0009c	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  0009f	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  000a5	8b 4d f4	 mov	 ecx, DWORD PTR _i$219865[ebp]
  000a8	c6 84 08 fc 18
	00 00 00	 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+6396], 0

; 24   : 			gMossMerchant.Luck[j][i] = 0;

  000b0	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  000b3	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  000b9	8b 4d f4	 mov	 ecx, DWORD PTR _i$219865[ebp]
  000bc	c6 84 08 f7 1d
	00 00 00	 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+7671], 0

; 25   : 			gMossMerchant.Opt[j][i] = 0;

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  000c7	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  000cd	8b 4d f4	 mov	 ecx, DWORD PTR _i$219865[ebp]
  000d0	c6 84 08 f2 22
	00 00 00	 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+8946], 0

; 26   : 			gMossMerchant.Exe[j][i] = 0;

  000d8	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  000db	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  000e1	8b 4d f4	 mov	 ecx, DWORD PTR _i$219865[ebp]
  000e4	c6 84 08 ed 27
	00 00 00	 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+10221], 0

; 27   : 			gMossMerchant.Anc[j][i] = 0;

  000ec	8b 45 f8	 mov	 eax, DWORD PTR _j$219861[ebp]
  000ef	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  000f5	8b 4d f4	 mov	 ecx, DWORD PTR _i$219865[ebp]
  000f8	c6 84 08 e8 2c
	00 00 00	 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+11496], 0

; 28   : 		}

  00100	e9 2c ff ff ff	 jmp	 $LN2@Init
$LN1@Init:

; 29   : 	}

  00105	e9 0b ff ff ff	 jmp	 $LN5@Init
$LN4@Init:

; 30   : 	gMossMerchant.ReadFile();

  0010a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMossMerchant@@3VCMossMerchant@@A ; gMossMerchant
  0010f	e8 00 00 00 00	 call	 ?ReadFile@CMossMerchant@@QAEXXZ ; CMossMerchant::ReadFile

; 31   : }

  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
?Init@CMossMerchant@@QAEXXZ ENDP			; CMossMerchant::Init
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0EM@KBONNBD@?$FLMossMerchant?$FN?5Info?5file?5Load?5Fa@ ; `string'
PUBLIC	??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@		; `string'
PUBLIC	??_C@_0CH@BEOCCCNO@?4?4?2Data?2ExData?2Events?2MossMercha@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
EXTRN	_fclose:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_TokenString DB	064H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@KBONNBD@?$FLMossMerchant?$FN?5Info?5file?5Load?5Fa@
CONST	SEGMENT
??_C@_0EM@KBONNBD@?$FLMossMerchant?$FN?5Info?5file?5Load?5Fa@ DB '[MossMe'
	DB	'rchant] Info file Load Fail [..\Data\ExData\Events\MossMercha'
	DB	'nt.ini]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
CONST	SEGMENT
??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@ DB 'CRITICAL ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BEOCCCNO@?4?4?2Data?2ExData?2Events?2MossMercha@
CONST	SEGMENT
??_C@_0CH@BEOCCCNO@?4?4?2Data?2ExData?2Events?2MossMercha@ DB '..\Data\Ex'
	DB	'Data\Events\MossMerchant.ini', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
_TEXT	SEGMENT
tv312 = -88						; size = 4
tv300 = -88						; size = 4
tv288 = -88						; size = 4
tv276 = -88						; size = 4
tv264 = -88						; size = 4
tv252 = -88						; size = 4
tv240 = -88						; size = 4
tv228 = -88						; size = 4
tv216 = -88						; size = 4
tv310 = -84						; size = 4
tv298 = -84						; size = 4
tv286 = -84						; size = 4
tv274 = -84						; size = 4
tv262 = -84						; size = 4
tv250 = -84						; size = 4
tv238 = -84						; size = 4
tv226 = -84						; size = 4
tv214 = -84						; size = 4
tv307 = -78						; size = 2
tv295 = -78						; size = 2
tv283 = -78						; size = 2
tv271 = -78						; size = 2
tv259 = -78						; size = 2
tv247 = -78						; size = 2
tv235 = -78						; size = 2
tv223 = -78						; size = 2
tv211 = -78						; size = 2
_type$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
?ReadFile@CMossMerchant@@QAEXXZ PROC			; CMossMerchant::ReadFile
; _this$ = ecx

; 34   : {

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp
  00123	83 ec 58	 sub	 esp, 88			; 00000058H
  00126	53		 push	 ebx
  00127	56		 push	 esi
  00128	57		 push	 edi
  00129	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	SMDFile = fopen("..\\Data\\ExData\\Events\\MossMerchant.ini", "r");

  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BEOCCCNO@?4?4?2Data?2ExData?2Events?2MossMercha@
  00136	e8 00 00 00 00	 call	 _fopen
  0013b	83 c4 08	 add	 esp, 8
  0013e	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 36   : 
; 37   : 	if ( SMDFile == NULL )

  00143	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SMDFile, 0
  0014a	75 21		 jne	 SHORT $LN9@ReadFile

; 38   : 	{
; 39   : 		MessageBoxA(0,"[MossMerchant] Info file Load Fail [..\\Data\\ExData\\Events\\MossMerchant.ini]","CRITICAL ERROR",0);

  0014c	6a 00		 push	 0
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@KBONNBD@?$FLMossMerchant?$FN?5Info?5file?5Load?5Fa@
  00158	6a 00		 push	 0
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 40   : 		ExitProcess(1);

  00160	6a 01		 push	 1
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4

; 41   : 		return;

  00168	e9 f2 02 00 00	 jmp	 $LN10@ReadFile
$LN9@ReadFile:

; 42   : 	}
; 43   : 
; 44   : 	int Token;
; 45   : 	int type = -1;

  0016d	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _type$[ebp], -1
$LN8@ReadFile:

; 46   : 
; 47   : 	while ( true )

  00174	b8 01 00 00 00	 mov	 eax, 1
  00179	85 c0		 test	 eax, eax
  0017b	0f 84 d0 02 00
	00		 je	 $LN7@ReadFile

; 48   : 	{
; 49   : 	    Token = GetToken();

  00181	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00186	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 50   : 
; 51   :         if( Token == 2)

  00189	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  0018d	75 05		 jne	 SHORT $LN6@ReadFile

; 52   : 		{
; 53   :             break;

  0018f	e9 bd 02 00 00	 jmp	 $LN7@ReadFile
$LN6@ReadFile:

; 54   : 		}
; 55   : 
; 56   : 		type = (int)TokenNumber;

  00194	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0019a	e8 00 00 00 00	 call	 __ftol2_sse
  0019f	89 45 f4	 mov	 DWORD PTR _type$[ebp], eax
$LN5@ReadFile:

; 57   : 
; 58   : 		while ( true )

  001a2	b8 01 00 00 00	 mov	 eax, 1
  001a7	85 c0		 test	 eax, eax
  001a9	0f 84 9d 02 00
	00		 je	 $LN4@ReadFile

; 59   : 		{
; 60   : 			if ( type < 0 || type > 4 )

  001af	83 7d f4 00	 cmp	 DWORD PTR _type$[ebp], 0
  001b3	7c 06		 jl	 SHORT $LN2@ReadFile
  001b5	83 7d f4 04	 cmp	 DWORD PTR _type$[ebp], 4
  001b9	7e 05		 jle	 SHORT $LN3@ReadFile
$LN2@ReadFile:

; 61   : 			{
; 62   : 				break;

  001bb	e9 8c 02 00 00	 jmp	 $LN4@ReadFile
$LN3@ReadFile:

; 63   : 			}
; 64   : 		    Token = GetToken();

  001c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001c5	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 65   : 
; 66   : 			if ( strcmp("end", TokenString ) == 0)

  001c8	68 00 00 00 00	 push	 OFFSET _TokenString
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001d2	e8 00 00 00 00	 call	 _strcmp
  001d7	83 c4 08	 add	 esp, 8
  001da	85 c0		 test	 eax, eax
  001dc	75 05		 jne	 SHORT $LN1@ReadFile

; 67   : 			{
; 68   : 				break;

  001de	e9 69 02 00 00	 jmp	 $LN4@ReadFile
$LN1@ReadFile:

; 69   : 			}
; 70   : 
; 71   : 			gMossMerchant.Type[type][ItemCount[type]] = (unsigned char)TokenNumber;

  001e3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e9	d9 7d b2	 fnstcw	 WORD PTR tv211[ebp]
  001ec	0f b7 45 b2	 movzx	 eax, WORD PTR tv211[ebp]
  001f0	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001f5	89 45 ac	 mov	 DWORD PTR tv214[ebp], eax
  001f8	d9 6d ac	 fldcw	 WORD PTR tv214[ebp]
  001fb	db 5d a8	 fistp	 DWORD PTR tv216[ebp]
  001fe	d9 6d b2	 fldcw	 WORD PTR tv211[ebp]
  00201	8a 45 a8	 mov	 al, BYTE PTR tv216[ebp]
  00204	8b 4d f4	 mov	 ecx, DWORD PTR _type$[ebp]
  00207	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  0020d	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  00210	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00213	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00216	88 84 11 14 00
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+edx+20], al

; 72   : 
; 73   : 			Token = GetToken();

  0021d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00222	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 74   : 			gMossMerchant.Index[type][ItemCount[type]] = (unsigned char)TokenNumber;

  00225	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0022b	d9 7d b2	 fnstcw	 WORD PTR tv223[ebp]
  0022e	0f b7 45 b2	 movzx	 eax, WORD PTR tv223[ebp]
  00232	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00237	89 45 ac	 mov	 DWORD PTR tv226[ebp], eax
  0023a	d9 6d ac	 fldcw	 WORD PTR tv226[ebp]
  0023d	db 5d a8	 fistp	 DWORD PTR tv228[ebp]
  00240	d9 6d b2	 fldcw	 WORD PTR tv223[ebp]
  00243	66 0f b6 45 a8	 movzx	 ax, BYTE PTR tv228[ebp]
  00248	8b 4d f4	 mov	 ecx, DWORD PTR _type$[ebp]
  0024b	69 c9 fe 01 00
	00		 imul	 ecx, 510		; 000001feH
  00251	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  00254	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00257	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  0025a	66 89 84 51 10
	05 00 00	 mov	 WORD PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+edx*2+1296], ax

; 75   : 
; 76   : 			Token = GetToken();

  00262	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00267	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 77   : 			gMossMerchant.Level[type][ItemCount[type]] = (unsigned char)TokenNumber;

  0026a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00270	d9 7d b2	 fnstcw	 WORD PTR tv235[ebp]
  00273	0f b7 45 b2	 movzx	 eax, WORD PTR tv235[ebp]
  00277	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0027c	89 45 ac	 mov	 DWORD PTR tv238[ebp], eax
  0027f	d9 6d ac	 fldcw	 WORD PTR tv238[ebp]
  00282	db 5d a8	 fistp	 DWORD PTR tv240[ebp]
  00285	d9 6d b2	 fldcw	 WORD PTR tv235[ebp]
  00288	8a 45 a8	 mov	 al, BYTE PTR tv240[ebp]
  0028b	8b 4d f4	 mov	 ecx, DWORD PTR _type$[ebp]
  0028e	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  00294	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  00297	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0029a	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  0029d	88 84 11 06 0f
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+edx+3846], al

; 78   : 
; 79   : 			Token = GetToken();

  002a4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002a9	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 80   : 			gMossMerchant.Dur[type][ItemCount[type]] = (unsigned char)TokenNumber;

  002ac	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b2	d9 7d b2	 fnstcw	 WORD PTR tv247[ebp]
  002b5	0f b7 45 b2	 movzx	 eax, WORD PTR tv247[ebp]
  002b9	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002be	89 45 ac	 mov	 DWORD PTR tv250[ebp], eax
  002c1	d9 6d ac	 fldcw	 WORD PTR tv250[ebp]
  002c4	db 5d a8	 fistp	 DWORD PTR tv252[ebp]
  002c7	d9 6d b2	 fldcw	 WORD PTR tv247[ebp]
  002ca	8a 45 a8	 mov	 al, BYTE PTR tv252[ebp]
  002cd	8b 4d f4	 mov	 ecx, DWORD PTR _type$[ebp]
  002d0	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  002d6	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  002d9	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  002dc	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  002df	88 84 11 01 14
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+edx+5121], al

; 81   : 
; 82   : 			Token = GetToken();

  002e6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002eb	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 83   : 			gMossMerchant.Skill[type][ItemCount[type]] = (unsigned char)TokenNumber;

  002ee	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002f4	d9 7d b2	 fnstcw	 WORD PTR tv259[ebp]
  002f7	0f b7 45 b2	 movzx	 eax, WORD PTR tv259[ebp]
  002fb	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00300	89 45 ac	 mov	 DWORD PTR tv262[ebp], eax
  00303	d9 6d ac	 fldcw	 WORD PTR tv262[ebp]
  00306	db 5d a8	 fistp	 DWORD PTR tv264[ebp]
  00309	d9 6d b2	 fldcw	 WORD PTR tv259[ebp]
  0030c	8a 45 a8	 mov	 al, BYTE PTR tv264[ebp]
  0030f	8b 4d f4	 mov	 ecx, DWORD PTR _type$[ebp]
  00312	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  00318	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  0031b	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0031e	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00321	88 84 11 fc 18
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+edx+6396], al

; 84   : 
; 85   : 			Token = GetToken();

  00328	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0032d	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 86   : 			gMossMerchant.Luck[type][ItemCount[type]] = (unsigned char)TokenNumber;

  00330	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00336	d9 7d b2	 fnstcw	 WORD PTR tv271[ebp]
  00339	0f b7 45 b2	 movzx	 eax, WORD PTR tv271[ebp]
  0033d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00342	89 45 ac	 mov	 DWORD PTR tv274[ebp], eax
  00345	d9 6d ac	 fldcw	 WORD PTR tv274[ebp]
  00348	db 5d a8	 fistp	 DWORD PTR tv276[ebp]
  0034b	d9 6d b2	 fldcw	 WORD PTR tv271[ebp]
  0034e	8a 45 a8	 mov	 al, BYTE PTR tv276[ebp]
  00351	8b 4d f4	 mov	 ecx, DWORD PTR _type$[ebp]
  00354	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  0035a	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  0035d	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00360	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00363	88 84 11 f7 1d
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+edx+7671], al

; 87   : 
; 88   : 			Token = GetToken();

  0036a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0036f	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 89   : 			gMossMerchant.Opt[type][ItemCount[type]] = (unsigned char)TokenNumber;

  00372	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00378	d9 7d b2	 fnstcw	 WORD PTR tv283[ebp]
  0037b	0f b7 45 b2	 movzx	 eax, WORD PTR tv283[ebp]
  0037f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00384	89 45 ac	 mov	 DWORD PTR tv286[ebp], eax
  00387	d9 6d ac	 fldcw	 WORD PTR tv286[ebp]
  0038a	db 5d a8	 fistp	 DWORD PTR tv288[ebp]
  0038d	d9 6d b2	 fldcw	 WORD PTR tv283[ebp]
  00390	8a 45 a8	 mov	 al, BYTE PTR tv288[ebp]
  00393	8b 4d f4	 mov	 ecx, DWORD PTR _type$[ebp]
  00396	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  0039c	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  0039f	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  003a2	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  003a5	88 84 11 f2 22
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+edx+8946], al

; 90   : 
; 91   : 			Token = GetToken();

  003ac	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003b1	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 92   : 			gMossMerchant.Exe[type][ItemCount[type]] = (unsigned char)TokenNumber;

  003b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003ba	d9 7d b2	 fnstcw	 WORD PTR tv295[ebp]
  003bd	0f b7 45 b2	 movzx	 eax, WORD PTR tv295[ebp]
  003c1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003c6	89 45 ac	 mov	 DWORD PTR tv298[ebp], eax
  003c9	d9 6d ac	 fldcw	 WORD PTR tv298[ebp]
  003cc	db 5d a8	 fistp	 DWORD PTR tv300[ebp]
  003cf	d9 6d b2	 fldcw	 WORD PTR tv295[ebp]
  003d2	8a 45 a8	 mov	 al, BYTE PTR tv300[ebp]
  003d5	8b 4d f4	 mov	 ecx, DWORD PTR _type$[ebp]
  003d8	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  003de	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  003e1	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  003e4	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  003e7	88 84 11 ed 27
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+edx+10221], al

; 93   : 
; 94   : 			Token = GetToken();

  003ee	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003f3	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 95   : 			gMossMerchant.Anc[type][ItemCount[type]] = (unsigned char)TokenNumber;

  003f6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003fc	d9 7d b2	 fnstcw	 WORD PTR tv307[ebp]
  003ff	0f b7 45 b2	 movzx	 eax, WORD PTR tv307[ebp]
  00403	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00408	89 45 ac	 mov	 DWORD PTR tv310[ebp], eax
  0040b	d9 6d ac	 fldcw	 WORD PTR tv310[ebp]
  0040e	db 5d a8	 fistp	 DWORD PTR tv312[ebp]
  00411	d9 6d b2	 fldcw	 WORD PTR tv307[ebp]
  00414	8a 45 a8	 mov	 al, BYTE PTR tv312[ebp]
  00417	8b 4d f4	 mov	 ecx, DWORD PTR _type$[ebp]
  0041a	69 c9 ff 00 00
	00		 imul	 ecx, 255		; 000000ffH
  00420	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  00423	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00426	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00429	88 84 11 e8 2c
	00 00		 mov	 BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx+edx+11496], al

; 96   : 
; 97   : 			gMossMerchant.ItemCount[type]++;

  00430	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  00433	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?gMossMerchant@@3VCMossMerchant@@A[eax*4]
  0043a	83 c1 01	 add	 ecx, 1
  0043d	8b 55 f4	 mov	 edx, DWORD PTR _type$[ebp]
  00440	89 0c 95 00 00
	00 00		 mov	 DWORD PTR ?gMossMerchant@@3VCMossMerchant@@A[edx*4], ecx

; 98   : 		    
; 99   : 		}

  00447	e9 56 fd ff ff	 jmp	 $LN5@ReadFile
$LN4@ReadFile:

; 100  :     }

  0044c	e9 23 fd ff ff	 jmp	 $LN8@ReadFile
$LN7@ReadFile:

; 101  : 
; 102  : 	fclose(SMDFile);

  00451	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00456	50		 push	 eax
  00457	e8 00 00 00 00	 call	 _fclose
  0045c	83 c4 04	 add	 esp, 4
$LN10@ReadFile:

; 103  : 	return;
; 104  : }

  0045f	5f		 pop	 edi
  00460	5e		 pop	 esi
  00461	5b		 pop	 ebx
  00462	8b e5		 mov	 esp, ebp
  00464	5d		 pop	 ebp
  00465	c3		 ret	 0
?ReadFile@CMossMerchant@@QAEXXZ ENDP			; CMossMerchant::ReadFile
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
; Function compile flags: /Odtp /ZI
; File d:\projects\exteam6.3\source\gameserver\include\readscript.h
_BSS	ENDS
_TEXT	SEGMENT
tv90 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken

; 24   : {

  00470	55		 push	 ebp
  00471	8b ec		 mov	 ebp, esp
  00473	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00479	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0047e	33 c5		 xor	 eax, ebp
  00480	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00483	53		 push	 ebx
  00484	56		 push	 esi
  00485	57		 push	 edi

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00486	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
$LN31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  0048d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00492	50		 push	 eax
  00493	e8 00 00 00 00	 call	 _fgetc
  00498	83 c4 04	 add	 esp, 4
  0049b	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0049e	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  004a2	83 f9 ff	 cmp	 ecx, -1
  004a5	75 0c		 jne	 SHORT $LN28@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  004a7	b8 02 00 00 00	 mov	 eax, 2
  004ac	e9 f7 02 00 00	 jmp	 $LN32@GetToken

; 36   : 		}
; 37   : 		else

  004b1	eb 5b		 jmp	 SHORT $LN22@GetToken
$LN28@GetToken:

; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  004b3	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004b7	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  004ba	75 52		 jne	 SHORT $LN22@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  004bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004c1	50		 push	 eax
  004c2	e8 00 00 00 00	 call	 _fgetc
  004c7	83 c4 04	 add	 esp, 4
  004ca	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  004cd	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  004d1	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  004d4	75 38		 jne	 SHORT $LN22@GetToken
$LN24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  004d6	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004da	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  004dd	74 1c		 je	 SHORT $LN23@GetToken
  004df	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004e3	83 f8 ff	 cmp	 eax, -1
  004e6	74 13		 je	 SHORT $LN23@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  004e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004ed	50		 push	 eax
  004ee	e8 00 00 00 00	 call	 _fgetc
  004f3	83 c4 04	 add	 esp, 4
  004f6	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 46   : 					}

  004f9	eb db		 jmp	 SHORT $LN24@GetToken
$LN23@GetToken:

; 47   : 	
; 48   : 					if (ch == -1)

  004fb	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  004ff	83 f8 ff	 cmp	 eax, -1
  00502	75 0a		 jne	 SHORT $LN22@GetToken

; 49   : 					{
; 50   : 						return END;	// End of FILE

  00504	b8 02 00 00 00	 mov	 eax, 2
  00509	e9 9a 02 00 00	 jmp	 $LN32@GetToken
$LN22@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0050e	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00512	50		 push	 eax
  00513	e8 00 00 00 00	 call	 _isspace
  00518	83 c4 04	 add	 esp, 4
  0051b	85 c0		 test	 eax, eax
  0051d	0f 85 6a ff ff
	ff		 jne	 $LN31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00523	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00527	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0052d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00533	83 e9 22	 sub	 ecx, 34			; 00000022H
  00536	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  0053c	83 bd 4c ff ff
	ff 5b		 cmp	 DWORD PTR tv90[ebp], 91	; 0000005bH
  00543	0f 87 a3 01 00
	00		 ja	 $LN6@GetToken
  00549	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0054f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetToken[edx]
  00556	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@GetToken[eax*4]
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  0055d	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR _CurrentToken, 35 ; 00000023H
  00567	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0056c	e9 37 02 00 00	 jmp	 $LN32@GetToken

; 64   : 		break;

  00571	e9 30 02 00 00	 jmp	 $LN20@GetToken
$LN18@GetToken:

; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  00576	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR _CurrentToken, 59 ; 0000003bH
  00580	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00585	e9 1e 02 00 00	 jmp	 $LN32@GetToken

; 68   : 		break;

  0058a	e9 17 02 00 00	 jmp	 $LN20@GetToken
$LN17@GetToken:

; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  0058f	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR _CurrentToken, 44 ; 0000002cH
  00599	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0059e	e9 05 02 00 00	 jmp	 $LN32@GetToken

; 73   : 		break;

  005a3	e9 fe 01 00 00	 jmp	 $LN20@GetToken
$LN16@GetToken:

; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  005a8	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR _CurrentToken, 123 ; 0000007bH
  005b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  005b7	e9 ec 01 00 00	 jmp	 $LN32@GetToken

; 77   : 		break;

  005bc	e9 e5 01 00 00	 jmp	 $LN20@GetToken
$LN15@GetToken:

; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  005c1	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR _CurrentToken, 125 ; 0000007dH
  005cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  005d0	e9 d3 01 00 00	 jmp	 $LN32@GetToken

; 81   : 		break;

  005d5	e9 cc 01 00 00	 jmp	 $LN20@GetToken
$LN14@GetToken:

; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  005da	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005df	50		 push	 eax
  005e0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  005e4	51		 push	 ecx
  005e5	e8 00 00 00 00	 call	 _ungetc
  005ea	83 c4 08	 add	 esp, 8

; 97   : 		p = TempString;

  005ed	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  005f0	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN13@GetToken:

; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  005f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  005f8	50		 push	 eax
  005f9	e8 00 00 00 00	 call	 _getc
  005fe	83 c4 04	 add	 esp, 4
  00601	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00604	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00608	83 f9 ff	 cmp	 ecx, -1
  0060b	74 36		 je	 SHORT $LN12@GetToken
  0060d	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00611	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00614	74 1a		 je	 SHORT $LN11@GetToken
  00616	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0061a	50		 push	 eax
  0061b	e8 00 00 00 00	 call	 _isdigit
  00620	83 c4 04	 add	 esp, 4
  00623	85 c0		 test	 eax, eax
  00625	75 09		 jne	 SHORT $LN11@GetToken
  00627	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  0062b	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0062e	75 13		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00630	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00633	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00636	88 08		 mov	 BYTE PTR [eax], cl

; 102  : 			p++;

  00638	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0063b	83 c0 01	 add	 eax, 1
  0063e	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 103  : 		}		

  00641	eb b0		 jmp	 SHORT $LN13@GetToken
$LN12@GetToken:

; 104  : 		*p = 0;

  00643	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00646	c6 00 00	 mov	 BYTE PTR [eax], 0

; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00649	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  0064c	50		 push	 eax
  0064d	e8 00 00 00 00	 call	 _atof
  00652	83 c4 04	 add	 esp, 4
  00655	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber

; 106  : 		return CurrentToken  = NUMBER ;

  0065b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00665	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  0066a	e9 39 01 00 00	 jmp	 $LN32@GetToken

; 107  : 		break;

  0066f	e9 32 01 00 00	 jmp	 $LN20@GetToken
$LN10@GetToken:

; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];

  00674	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString
$LN9@GetToken:

; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0067b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00680	50		 push	 eax
  00681	e8 00 00 00 00	 call	 _getc
  00686	83 c4 04	 add	 esp, 4
  00689	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0068c	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00690	83 f9 ff	 cmp	 ecx, -1
  00693	74 1c		 je	 SHORT $LN8@GetToken
  00695	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00699	83 f8 22	 cmp	 eax, 34			; 00000022H
  0069c	74 13		 je	 SHORT $LN8@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  0069e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  006a1	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  006a4	88 08		 mov	 BYTE PTR [eax], cl

; 115  : 			p++;

  006a6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  006a9	83 c0 01	 add	 eax, 1
  006ac	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 116  : 		}

  006af	eb ca		 jmp	 SHORT $LN9@GetToken
$LN8@GetToken:

; 117  : 		if (ch != 0x22 )

  006b1	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006b5	83 f8 22	 cmp	 eax, 34			; 00000022H
  006b8	74 13		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  006ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  006bf	50		 push	 eax
  006c0	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  006c4	51		 push	 ecx
  006c5	e8 00 00 00 00	 call	 _ungetc
  006ca	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 120  : 		}
; 121  : 		*p = 0;

  006cd	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  006d0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 122  : 		return CurrentToken = NAME;

  006d3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0
  006dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  006e2	e9 c1 00 00 00	 jmp	 $LN32@GetToken

; 123  : 		break;

  006e7	e9 ba 00 00 00	 jmp	 $LN20@GetToken
$LN6@GetToken:

; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  006ec	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  006f0	50		 push	 eax
  006f1	e8 00 00 00 00	 call	 _isalpha
  006f6	83 c4 04	 add	 esp, 4
  006f9	85 c0		 test	 eax, eax
  006fb	0f 84 94 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];

  00701	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET _TokenString

; 129  : 			*p=ch;

  00708	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0070b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0070e	88 08		 mov	 BYTE PTR [eax], cl

; 130  : 			p++;

  00710	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00713	83 c0 01	 add	 eax, 1
  00716	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN4@GetToken:

; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00719	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0071e	50		 push	 eax
  0071f	e8 00 00 00 00	 call	 _getc
  00724	83 c4 04	 add	 esp, 4
  00727	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0072a	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  0072e	83 f9 ff	 cmp	 ecx, -1
  00731	74 36		 je	 SHORT $LN3@GetToken
  00733	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00737	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0073a	74 1a		 je	 SHORT $LN2@GetToken
  0073c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00740	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00743	74 11		 je	 SHORT $LN2@GetToken
  00745	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00749	50		 push	 eax
  0074a	e8 00 00 00 00	 call	 _isalnum
  0074f	83 c4 04	 add	 esp, 4
  00752	85 c0		 test	 eax, eax
  00754	74 13		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 133  : 			{
; 134  : 				*p=ch;

  00756	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00759	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0075c	88 08		 mov	 BYTE PTR [eax], cl

; 135  : 				p++;

  0075e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00761	83 c0 01	 add	 eax, 1
  00764	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 136  : 				
; 137  : 			}

  00767	eb b0		 jmp	 SHORT $LN4@GetToken
$LN3@GetToken:

; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  00769	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0076e	50		 push	 eax
  0076f	0f be 4d fb	 movsx	 ecx, BYTE PTR _ch$[ebp]
  00773	51		 push	 ecx
  00774	e8 00 00 00 00	 call	 _ungetc
  00779	83 c4 08	 add	 esp, 8

; 140  : 			*p=0;

  0077c	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0077f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 141  : 			CurrentToken=NAME;

  00782	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0078c	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  00791	eb 15		 jmp	 SHORT $LN32@GetToken

; 143  : 		}
; 144  : 		else

  00793	eb 11		 jmp	 SHORT $LN1@GetToken
$LN5@GetToken:

; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  00795	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR _CurrentToken, 60 ; 0000003cH
  0079f	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentToken
  007a4	eb 02		 jmp	 SHORT $LN32@GetToken
$LN1@GetToken:
$LN20@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;

  007a6	33 c0		 xor	 eax, eax
$LN32@GetToken:

; 153  : }

  007a8	5f		 pop	 edi
  007a9	5e		 pop	 esi
  007aa	5b		 pop	 ebx
  007ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007ae	33 cd		 xor	 ecx, ebp
  007b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007b5	8b e5		 mov	 esp, ebp
  007b7	5d		 pop	 ebp
  007b8	c3		 ret	 0
  007b9	8d 49 00	 npad	 3
$LN35@GetToken:
  007bc	00 00 00 00	 DD	 $LN10@GetToken
  007c0	00 00 00 00	 DD	 $LN19@GetToken
  007c4	00 00 00 00	 DD	 $LN17@GetToken
  007c8	00 00 00 00	 DD	 $LN14@GetToken
  007cc	00 00 00 00	 DD	 $LN18@GetToken
  007d0	00 00 00 00	 DD	 $LN16@GetToken
  007d4	00 00 00 00	 DD	 $LN15@GetToken
  007d8	00 00 00 00	 DD	 $LN6@GetToken
$LN34@GetToken:
  007dc	00		 DB	 0
  007dd	01		 DB	 1
  007de	07		 DB	 7
  007df	07		 DB	 7
  007e0	07		 DB	 7
  007e1	07		 DB	 7
  007e2	07		 DB	 7
  007e3	07		 DB	 7
  007e4	07		 DB	 7
  007e5	07		 DB	 7
  007e6	02		 DB	 2
  007e7	03		 DB	 3
  007e8	03		 DB	 3
  007e9	07		 DB	 7
  007ea	03		 DB	 3
  007eb	03		 DB	 3
  007ec	03		 DB	 3
  007ed	03		 DB	 3
  007ee	03		 DB	 3
  007ef	03		 DB	 3
  007f0	03		 DB	 3
  007f1	03		 DB	 3
  007f2	03		 DB	 3
  007f3	03		 DB	 3
  007f4	07		 DB	 7
  007f5	04		 DB	 4
  007f6	07		 DB	 7
  007f7	07		 DB	 7
  007f8	07		 DB	 7
  007f9	07		 DB	 7
  007fa	07		 DB	 7
  007fb	07		 DB	 7
  007fc	07		 DB	 7
  007fd	07		 DB	 7
  007fe	07		 DB	 7
  007ff	07		 DB	 7
  00800	07		 DB	 7
  00801	07		 DB	 7
  00802	07		 DB	 7
  00803	07		 DB	 7
  00804	07		 DB	 7
  00805	07		 DB	 7
  00806	07		 DB	 7
  00807	07		 DB	 7
  00808	07		 DB	 7
  00809	07		 DB	 7
  0080a	07		 DB	 7
  0080b	07		 DB	 7
  0080c	07		 DB	 7
  0080d	07		 DB	 7
  0080e	07		 DB	 7
  0080f	07		 DB	 7
  00810	07		 DB	 7
  00811	07		 DB	 7
  00812	07		 DB	 7
  00813	07		 DB	 7
  00814	07		 DB	 7
  00815	07		 DB	 7
  00816	07		 DB	 7
  00817	07		 DB	 7
  00818	07		 DB	 7
  00819	07		 DB	 7
  0081a	07		 DB	 7
  0081b	07		 DB	 7
  0081c	07		 DB	 7
  0081d	07		 DB	 7
  0081e	07		 DB	 7
  0081f	07		 DB	 7
  00820	07		 DB	 7
  00821	07		 DB	 7
  00822	07		 DB	 7
  00823	07		 DB	 7
  00824	07		 DB	 7
  00825	07		 DB	 7
  00826	07		 DB	 7
  00827	07		 DB	 7
  00828	07		 DB	 7
  00829	07		 DB	 7
  0082a	07		 DB	 7
  0082b	07		 DB	 7
  0082c	07		 DB	 7
  0082d	07		 DB	 7
  0082e	07		 DB	 7
  0082f	07		 DB	 7
  00830	07		 DB	 7
  00831	07		 DB	 7
  00832	07		 DB	 7
  00833	07		 DB	 7
  00834	07		 DB	 7
  00835	05		 DB	 5
  00836	07		 DB	 7
  00837	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0CP@MHGMLPMI@?$FLMossMerchant?$FN?3?5Need?51?4000?4000?5z@ ; `string'
PUBLIC	??_C@_0DK@CKENLEMF@?$FLMossMerchant?$FN?3?5Need?5to?5make?5spa@ ; `string'
PUBLIC	??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@ ; `string'
PUBLIC	??_C@_0EE@NDLDAHOJ@d?3?2projects?2exteam6?43?2source?2gam@ ; `string'
PUBLIC	?__LINE__Var@?1??ItemBuy@CMossMerchant@@QAEXHH@Z@4JA ; `CMossMerchant::ItemBuy'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
PUBLIC	?ItemBuy@CMossMerchant@@QAEXHH@Z		; CMossMerchant::ItemBuy
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?ItemGetDurability@@YAHHHHH@Z:PROC		; ItemGetDurability
EXTRN	?GenExcOpt@@YAHH@Z:PROC				; GenExcOpt
EXTRN	_rand:PROC
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z:PROC ; CheckInventoryEmptySpace
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?gObjFixInventoryPointer@@YA_NH@Z:PROC		; gObjFixInventoryPointer
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0CP@MHGMLPMI@?$FLMossMerchant?$FN?3?5Need?51?4000?4000?5z@
; File d:\projects\exteam6.3\source\gameserver\gameserver\mossmerchant.cpp
CONST	SEGMENT
??_C@_0CP@MHGMLPMI@?$FLMossMerchant?$FN?3?5Need?51?4000?4000?5z@ DB '[Mos'
	DB	'sMerchant]: Need 1.000.000 zen to buy here', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CKENLEMF@?$FLMossMerchant?$FN?3?5Need?5to?5make?5spa@
CONST	SEGMENT
??_C@_0DK@CKENLEMF@?$FLMossMerchant?$FN?3?5Need?5to?5make?5spa@ DB '[Moss'
	DB	'Merchant]: Need to make space in the inventory (4x2)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@
CONST	SEGMENT
??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@ DB '['
	DB	'Fix Inv.Ptr] False Location - %s, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@NDLDAHOJ@d?3?2projects?2exteam6?43?2source?2gam@
CONST	SEGMENT
??_C@_0EE@NDLDAHOJ@d?3?2projects?2exteam6?43?2source?2gam@ DB 'd:\project'
	DB	's\exteam6.3\source\gameserver\gameserver\mossmerchant.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ItemBuy@CMossMerchant@@QAEXHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ItemBuy@CMossMerchant@@QAEXHH@Z@4JA DD 074H ; `CMossMerchant::ItemBuy'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
_TEXT	SEGMENT
tv145 = -120						; size = 4
_IsAnc$ = -49						; size = 1
_IsExe$ = -48						; size = 1
_NewAnc$ = -47						; size = 1
_NewExe$ = -46						; size = 1
_NewOpt$ = -45						; size = 1
_NewLuck$ = -44						; size = 1
_NewSkill$ = -43					; size = 1
_NewDur$ = -42						; size = 1
_NewLevel$ = -41					; size = 1
_NewItem$ = -40						; size = 4
_Random$ = -36						; size = 4
_ItemIndex$ = -32					; size = 4
_pResult$ = -28						; size = 16
_lpObj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_Item$ = 12						; size = 4
?ItemBuy@CMossMerchant@@QAEXHH@Z PROC			; CMossMerchant::ItemBuy
; _this$ = ecx

; 116  : {

  00840	55		 push	 ebp
  00841	8b ec		 mov	 ebp, esp
  00843	83 ec 78	 sub	 esp, 120		; 00000078H
  00846	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0084b	33 c5		 xor	 eax, ebp
  0084d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00850	53		 push	 ebx
  00851	56		 push	 esi
  00852	57		 push	 edi
  00853	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 	LPOBJ lpObj = &gObj[aIndex];

  00856	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00859	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  0085f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00865	89 45 f4	 mov	 DWORD PTR _lpObj$[ebp], eax

; 118  : 	PMSG_BUYRESULT pResult;
; 119  : 
; 120  : 	pResult.c = 0xC1;

  00868	c6 45 e4 c1	 mov	 BYTE PTR _pResult$[ebp], 193 ; 000000c1H

; 121  : 	pResult.size = sizeof(PMSG_BUYRESULT);

  0086c	c6 45 e5 10	 mov	 BYTE PTR _pResult$[ebp+1], 16 ; 00000010H

; 122  : 	pResult.headcode = 0x32;

  00870	c6 45 e6 32	 mov	 BYTE PTR _pResult$[ebp+2], 50 ; 00000032H

; 123  : 	pResult.Result = -1;

  00874	c6 45 e7 ff	 mov	 BYTE PTR _pResult$[ebp+3], 255 ; 000000ffH

; 124  : 
; 125  : 	if ( gObj[aIndex].CloseType != -1 )

  00878	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0087b	69 c0 38 2b 00
	00		 imul	 eax, 11064		; 00002b38H
  00881	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00887	0f be 54 01 0b	 movsx	 edx, BYTE PTR [ecx+eax+11]
  0088c	83 fa ff	 cmp	 edx, -1
  0088f	74 1a		 je	 SHORT $LN20@ItemBuy

; 126  : 	{
; 127  : 		DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  00891	0f b6 45 e5	 movzx	 eax, BYTE PTR _pResult$[ebp+1]
  00895	50		 push	 eax
  00896	8d 4d e4	 lea	 ecx, DWORD PTR _pResult$[ebp]
  00899	51		 push	 ecx
  0089a	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0089d	52		 push	 edx
  0089e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  008a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 		return;

  008a6	e9 42 03 00 00	 jmp	 $LN21@ItemBuy
$LN20@ItemBuy:

; 129  : 	}
; 130  : 
; 131  : 	if ( !::gObjFixInventoryPointer(aIndex))

  008ab	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  008ae	50		 push	 eax
  008af	e8 00 00 00 00	 call	 ?gObjFixInventoryPointer@@YA_NH@Z ; gObjFixInventoryPointer
  008b4	83 c4 04	 add	 esp, 4
  008b7	0f b6 c8	 movzx	 ecx, al
  008ba	85 c9		 test	 ecx, ecx
  008bc	75 1c		 jne	 SHORT $LN19@ItemBuy

; 132  : 	{
; 133  : 		LogAdd("[Fix Inv.Ptr] False Location - %s, %d", __FILE__, __LINE__);

  008be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ItemBuy@CMossMerchant@@QAEXHH@Z@4JA
  008c3	83 c0 11	 add	 eax, 17			; 00000011H
  008c6	50		 push	 eax
  008c7	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@NDLDAHOJ@d?3?2projects?2exteam6?43?2source?2gam@
  008cc	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NFDFKIHI@?$FLFix?5Inv?4Ptr?$FN?5False?5Location?5?9?5?$CF@
  008d1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  008d7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@ItemBuy:

; 134  : 	}
; 135  : 
; 136  : 	if ( lpObj->m_IfState.use > 0 )

  008da	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  008dd	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  008e3	83 e1 03	 and	 ecx, 3
  008e6	76 31		 jbe	 SHORT $LN18@ItemBuy

; 137  : 	{
; 138  : 		if ( lpObj->m_IfState.type != 3 )

  008e8	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  008eb	8b 88 1c 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3612]
  008f1	c1 e9 06	 shr	 ecx, 6
  008f4	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  008fa	83 f9 03	 cmp	 ecx, 3
  008fd	74 1a		 je	 SHORT $LN18@ItemBuy

; 139  : 		{
; 140  : 			DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  008ff	0f b6 45 e5	 movzx	 eax, BYTE PTR _pResult$[ebp+1]
  00903	50		 push	 eax
  00904	8d 4d e4	 lea	 ecx, DWORD PTR _pResult$[ebp]
  00907	51		 push	 ecx
  00908	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0090b	52		 push	 edx
  0090c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00911	83 c4 0c	 add	 esp, 12			; 0000000cH

; 141  : 			return;

  00914	e9 d4 02 00 00	 jmp	 $LN21@ItemBuy
$LN18@ItemBuy:

; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	if ( CheckInventoryEmptySpace(lpObj,4,2) == false )

  00919	6a 02		 push	 2
  0091b	6a 04		 push	 4
  0091d	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00920	50		 push	 eax
  00921	e8 00 00 00 00	 call	 ?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z ; CheckInventoryEmptySpace
  00926	83 c4 0c	 add	 esp, 12			; 0000000cH
  00929	85 c0		 test	 eax, eax
  0092b	75 2d		 jne	 SHORT $LN16@ItemBuy

; 146  : 	{
; 147  : 		GCServerMsgStringSend("[MossMerchant]: Need to make space in the inventory (4x2)",aIndex,1);

  0092d	6a 01		 push	 1
  0092f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00932	50		 push	 eax
  00933	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CKENLEMF@?$FLMossMerchant?$FN?3?5Need?5to?5make?5spa@
  00938	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0093d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 148  : 		DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  00940	0f b6 45 e5	 movzx	 eax, BYTE PTR _pResult$[ebp+1]
  00944	50		 push	 eax
  00945	8d 4d e4	 lea	 ecx, DWORD PTR _pResult$[ebp]
  00948	51		 push	 ecx
  00949	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0094c	52		 push	 edx
  0094d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00952	83 c4 0c	 add	 esp, 12			; 0000000cH

; 149  : 		return;

  00955	e9 93 02 00 00	 jmp	 $LN21@ItemBuy
$LN16@ItemBuy:

; 150  : 	}
; 151  : 
; 152  : 	if ( lpObj->Money < 1000000 )

  0095a	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0095d	81 b8 f0 00 00
	00 40 42 0f 00	 cmp	 DWORD PTR [eax+240], 1000000 ; 000f4240H
  00967	7d 2d		 jge	 SHORT $LN15@ItemBuy

; 153  : 	{
; 154  : 		GCServerMsgStringSend("[MossMerchant]: Need 1.000.000 zen to buy here",aIndex,1);

  00969	6a 01		 push	 1
  0096b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0096e	50		 push	 eax
  0096f	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MHGMLPMI@?$FLMossMerchant?$FN?3?5Need?51?4000?4000?5z@
  00974	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00979	83 c4 0c	 add	 esp, 12			; 0000000cH

; 155  : 		DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  0097c	0f b6 45 e5	 movzx	 eax, BYTE PTR _pResult$[ebp+1]
  00980	50		 push	 eax
  00981	8d 4d e4	 lea	 ecx, DWORD PTR _pResult$[ebp]
  00984	51		 push	 ecx
  00985	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00988	52		 push	 edx
  00989	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0098e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 156  : 		return;

  00991	e9 57 02 00 00	 jmp	 $LN21@ItemBuy
$LN15@ItemBuy:

; 157  : 	}
; 158  : 
; 159  : 	int ItemIndex = -1;

  00996	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _ItemIndex$[ebp], -1

; 160  : 
; 161  : 	switch ( Item )

  0099d	8b 45 0c	 mov	 eax, DWORD PTR _Item$[ebp]
  009a0	89 45 88	 mov	 DWORD PTR tv145[ebp], eax
  009a3	83 7d 88 18	 cmp	 DWORD PTR tv145[ebp], 24 ; 00000018H
  009a7	77 3c		 ja	 SHORT $LN13@ItemBuy
  009a9	8b 4d 88	 mov	 ecx, DWORD PTR tv145[ebp]
  009ac	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN23@ItemBuy[ecx]
  009b3	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN24@ItemBuy[edx*4]
$LN12@ItemBuy:

; 162  : 	{
; 163  : 	case 0x00:
; 164  : 		ItemIndex = 0;

  009ba	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _ItemIndex$[ebp], 0

; 165  : 		break;

  009c1	eb 22		 jmp	 SHORT $LN13@ItemBuy
$LN11@ItemBuy:

; 166  : 	case 0x02:
; 167  : 		ItemIndex = 1;

  009c3	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _ItemIndex$[ebp], 1

; 168  : 		break;

  009ca	eb 19		 jmp	 SHORT $LN13@ItemBuy
$LN10@ItemBuy:

; 169  : 	case 0x04:
; 170  : 		ItemIndex = 2;

  009cc	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR _ItemIndex$[ebp], 2

; 171  : 		break;

  009d3	eb 10		 jmp	 SHORT $LN13@ItemBuy
$LN9@ItemBuy:

; 172  : 	case 0x06:
; 173  : 		ItemIndex = 3;

  009d5	c7 45 e0 03 00
	00 00		 mov	 DWORD PTR _ItemIndex$[ebp], 3

; 174  : 		break;

  009dc	eb 07		 jmp	 SHORT $LN13@ItemBuy
$LN8@ItemBuy:

; 175  : 	case 0x18:
; 176  : 		ItemIndex = 4;

  009de	c7 45 e0 04 00
	00 00		 mov	 DWORD PTR _ItemIndex$[ebp], 4
$LN13@ItemBuy:

; 177  : 		break;
; 178  : 	}
; 179  : 
; 180  : 	if ( ItemIndex < 0 || ItemIndex > 4 )

  009e5	83 7d e0 00	 cmp	 DWORD PTR _ItemIndex$[ebp], 0
  009e9	7c 06		 jl	 SHORT $LN6@ItemBuy
  009eb	83 7d e0 04	 cmp	 DWORD PTR _ItemIndex$[ebp], 4
  009ef	7e 05		 jle	 SHORT $LN7@ItemBuy
$LN6@ItemBuy:

; 181  : 	{
; 182  : 		return;

  009f1	e9 f7 01 00 00	 jmp	 $LN21@ItemBuy
$LN7@ItemBuy:

; 183  : 	}
; 184  : 
; 185  : 	if ( gMossMerchant.ItemCount[ItemIndex] == 0 )

  009f6	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  009f9	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?gMossMerchant@@3VCMossMerchant@@A[eax*4], 0
  00a01	75 05		 jne	 SHORT $LN5@ItemBuy

; 186  : 	{
; 187  : 		return;

  00a03	e9 e5 01 00 00	 jmp	 $LN21@ItemBuy
$LN5@ItemBuy:

; 188  : 	}
; 189  : 
; 190  : 	int Random = rand()%gMossMerchant.ItemCount[ItemIndex];

  00a08	e8 00 00 00 00	 call	 _rand
  00a0d	8b 4d e0	 mov	 ecx, DWORD PTR _ItemIndex$[ebp]
  00a10	99		 cdq
  00a11	f7 3c 8d 00 00
	00 00		 idiv	 DWORD PTR ?gMossMerchant@@3VCMossMerchant@@A[ecx*4]
  00a18	89 55 dc	 mov	 DWORD PTR _Random$[ebp], edx

; 191  : 
; 192  : 	int NewItem = 0;

  00a1b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _NewItem$[ebp], 0

; 193  : 	unsigned char NewLevel = 0;

  00a22	c6 45 d7 00	 mov	 BYTE PTR _NewLevel$[ebp], 0

; 194  : 	unsigned char NewDur = 0;

  00a26	c6 45 d6 00	 mov	 BYTE PTR _NewDur$[ebp], 0

; 195  : 	unsigned char NewSkill = 0;

  00a2a	c6 45 d5 00	 mov	 BYTE PTR _NewSkill$[ebp], 0

; 196  : 	unsigned char NewLuck = 0;

  00a2e	c6 45 d4 00	 mov	 BYTE PTR _NewLuck$[ebp], 0

; 197  : 	unsigned char NewOpt = 0;

  00a32	c6 45 d3 00	 mov	 BYTE PTR _NewOpt$[ebp], 0

; 198  : 	unsigned char NewExe = 0;

  00a36	c6 45 d2 00	 mov	 BYTE PTR _NewExe$[ebp], 0

; 199  : 	unsigned char NewAnc = 0;

  00a3a	c6 45 d1 00	 mov	 BYTE PTR _NewAnc$[ebp], 0

; 200  : 	unsigned char IsExe = 0;

  00a3e	c6 45 d0 00	 mov	 BYTE PTR _IsExe$[ebp], 0

; 201  : 	unsigned char IsAnc = 0;

  00a42	c6 45 cf 00	 mov	 BYTE PTR _IsAnc$[ebp], 0

; 202  : 
; 203  : 
; 204  : 	NewOpt = gMossMerchant.Opt[ItemIndex][Random];

  00a46	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00a49	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00a4f	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00a52	8a 94 08 f2 22
	00 00		 mov	 dl, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+8946]
  00a59	88 55 d3	 mov	 BYTE PTR _NewOpt$[ebp], dl

; 205  : 
; 206  : 	NewLuck = gMossMerchant.Luck[ItemIndex][Random];

  00a5c	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00a5f	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00a65	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00a68	8a 94 08 f7 1d
	00 00		 mov	 dl, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+7671]
  00a6f	88 55 d4	 mov	 BYTE PTR _NewLuck$[ebp], dl

; 207  : 
; 208  : 	NewSkill = gMossMerchant.Skill[ItemIndex][Random];

  00a72	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00a75	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00a7b	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00a7e	8a 94 08 fc 18
	00 00		 mov	 dl, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+6396]
  00a85	88 55 d5	 mov	 BYTE PTR _NewSkill$[ebp], dl

; 209  : 	
; 210  : 	NewLevel = gMossMerchant.Level[ItemIndex][Random];

  00a88	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00a8b	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00a91	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00a94	8a 94 08 06 0f
	00 00		 mov	 dl, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+3846]
  00a9b	88 55 d7	 mov	 BYTE PTR _NewLevel$[ebp], dl

; 211  : 
; 212  : 	if ( gMossMerchant.Anc[ItemIndex][Random] == 5 || gMossMerchant.Anc[ItemIndex][Random] == 10 )

  00a9e	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00aa1	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00aa7	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00aaa	0f b6 94 08 e8
	2c 00 00	 movzx	 edx, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+11496]
  00ab2	83 fa 05	 cmp	 edx, 5
  00ab5	74 19		 je	 SHORT $LN3@ItemBuy
  00ab7	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00aba	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00ac0	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00ac3	0f b6 94 08 e8
	2c 00 00	 movzx	 edx, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+11496]
  00acb	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00ace	75 1c		 jne	 SHORT $LN4@ItemBuy
$LN3@ItemBuy:

; 213  : 	{
; 214  : 		NewAnc = gMossMerchant.Anc[ItemIndex][Random];

  00ad0	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00ad3	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00ad9	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00adc	8a 94 08 e8 2c
	00 00		 mov	 dl, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+11496]
  00ae3	88 55 d1	 mov	 BYTE PTR _NewAnc$[ebp], dl

; 215  : 		IsAnc = 1;

  00ae6	c6 45 cf 01	 mov	 BYTE PTR _IsAnc$[ebp], 1

; 216  : 	}
; 217  : 	else

  00aea	eb 04		 jmp	 SHORT $LN2@ItemBuy
$LN4@ItemBuy:

; 218  : 		IsAnc = 0;

  00aec	c6 45 cf 00	 mov	 BYTE PTR _IsAnc$[ebp], 0
$LN2@ItemBuy:

; 219  : 
; 220  : 	//NewExe = GetRandomExeOption(gMossMerchant.Exe[ItemIndex][Random]);
; 221  : 	NewExe = GenExcOpt(gMossMerchant.Exe[ItemIndex][Random]);

  00af0	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00af3	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00af9	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00afc	0f b6 94 08 ed
	27 00 00	 movzx	 edx, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+10221]
  00b04	52		 push	 edx
  00b05	e8 00 00 00 00	 call	 ?GenExcOpt@@YAHH@Z	; GenExcOpt
  00b0a	83 c4 04	 add	 esp, 4
  00b0d	88 45 d2	 mov	 BYTE PTR _NewExe$[ebp], al

; 222  : 	
; 223  : 	if(NewExe>0)

  00b10	0f b6 45 d2	 movzx	 eax, BYTE PTR _NewExe$[ebp]
  00b14	85 c0		 test	 eax, eax
  00b16	7e 04		 jle	 SHORT $LN1@ItemBuy

; 224  : 		IsExe = 1;

  00b18	c6 45 d0 01	 mov	 BYTE PTR _IsExe$[ebp], 1
$LN1@ItemBuy:

; 225  : 
; 226  : 	NewItem = ITEMGET(gMossMerchant.Type[ItemIndex][Random],gMossMerchant.Index[ItemIndex][Random]);

  00b1c	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00b1f	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00b25	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00b28	0f b6 94 08 14
	00 00 00	 movzx	 edx, BYTE PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx+20]
  00b30	c1 e2 09	 shl	 edx, 9
  00b33	8b 45 e0	 mov	 eax, DWORD PTR _ItemIndex$[ebp]
  00b36	69 c0 fe 01 00
	00		 imul	 eax, 510		; 000001feH
  00b3c	8b 4d dc	 mov	 ecx, DWORD PTR _Random$[ebp]
  00b3f	0f b7 84 48 10
	05 00 00	 movzx	 eax, WORD PTR ?gMossMerchant@@3VCMossMerchant@@A[eax+ecx*2+1296]
  00b47	03 d0		 add	 edx, eax
  00b49	89 55 d8	 mov	 DWORD PTR _NewItem$[ebp], edx

; 227  : 
; 228  : 	NewDur = ItemGetDurability(NewItem,NewLevel,IsExe,IsAnc);

  00b4c	0f b6 45 cf	 movzx	 eax, BYTE PTR _IsAnc$[ebp]
  00b50	50		 push	 eax
  00b51	0f b6 4d d0	 movzx	 ecx, BYTE PTR _IsExe$[ebp]
  00b55	51		 push	 ecx
  00b56	0f b6 55 d7	 movzx	 edx, BYTE PTR _NewLevel$[ebp]
  00b5a	52		 push	 edx
  00b5b	8b 45 d8	 mov	 eax, DWORD PTR _NewItem$[ebp]
  00b5e	50		 push	 eax
  00b5f	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  00b64	83 c4 10	 add	 esp, 16			; 00000010H
  00b67	88 45 d6	 mov	 BYTE PTR _NewDur$[ebp], al

; 229  : 
; 230  : 	ItemSerialCreateSend(aIndex,235,0,0,NewItem,(BYTE)NewLevel,(BYTE)NewDur,(BYTE)NewSkill,(BYTE)NewLuck,(BYTE)NewOpt,aIndex,(BYTE)NewExe,(BYTE)NewAnc);

  00b6a	0f b6 45 d1	 movzx	 eax, BYTE PTR _NewAnc$[ebp]
  00b6e	50		 push	 eax
  00b6f	0f b6 4d d2	 movzx	 ecx, BYTE PTR _NewExe$[ebp]
  00b73	51		 push	 ecx
  00b74	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00b77	52		 push	 edx
  00b78	0f b6 45 d3	 movzx	 eax, BYTE PTR _NewOpt$[ebp]
  00b7c	50		 push	 eax
  00b7d	0f b6 4d d4	 movzx	 ecx, BYTE PTR _NewLuck$[ebp]
  00b81	51		 push	 ecx
  00b82	0f b6 55 d5	 movzx	 edx, BYTE PTR _NewSkill$[ebp]
  00b86	52		 push	 edx
  00b87	0f b6 45 d6	 movzx	 eax, BYTE PTR _NewDur$[ebp]
  00b8b	50		 push	 eax
  00b8c	0f b6 4d d7	 movzx	 ecx, BYTE PTR _NewLevel$[ebp]
  00b90	51		 push	 ecx
  00b91	8b 55 d8	 mov	 edx, DWORD PTR _NewItem$[ebp]
  00b94	52		 push	 edx
  00b95	6a 00		 push	 0
  00b97	6a 00		 push	 0
  00b99	68 eb 00 00 00	 push	 235			; 000000ebH
  00b9e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00ba1	50		 push	 eax
  00ba2	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  00ba7	83 c4 34	 add	 esp, 52			; 00000034H

; 231  : 
; 232  : 	lpObj->Money -= 1000000;

  00baa	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bad	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  00bb3	81 e9 40 42 0f
	00		 sub	 ecx, 1000000		; 000f4240H
  00bb9	8b 55 f4	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00bbc	89 8a f0 00 00
	00		 mov	 DWORD PTR [edx+240], ecx

; 233  : 	GCMoneySend(aIndex,lpObj->Money);

  00bc2	8b 45 f4	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00bc5	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  00bcb	51		 push	 ecx
  00bcc	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00bcf	52		 push	 edx
  00bd0	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00bd5	83 c4 08	 add	 esp, 8

; 234  : 
; 235  : 	DataSend(aIndex, (LPBYTE)&pResult, pResult.size);

  00bd8	0f b6 45 e5	 movzx	 eax, BYTE PTR _pResult$[ebp+1]
  00bdc	50		 push	 eax
  00bdd	8d 4d e4	 lea	 ecx, DWORD PTR _pResult$[ebp]
  00be0	51		 push	 ecx
  00be1	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00be4	52		 push	 edx
  00be5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00bea	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@ItemBuy:

; 236  : 
; 237  : 	return;
; 238  : }

  00bed	5f		 pop	 edi
  00bee	5e		 pop	 esi
  00bef	5b		 pop	 ebx
  00bf0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bf3	33 cd		 xor	 ecx, ebp
  00bf5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bfa	8b e5		 mov	 esp, ebp
  00bfc	5d		 pop	 ebp
  00bfd	c2 08 00	 ret	 8
$LN24@ItemBuy:
  00c00	00 00 00 00	 DD	 $LN12@ItemBuy
  00c04	00 00 00 00	 DD	 $LN11@ItemBuy
  00c08	00 00 00 00	 DD	 $LN10@ItemBuy
  00c0c	00 00 00 00	 DD	 $LN9@ItemBuy
  00c10	00 00 00 00	 DD	 $LN8@ItemBuy
  00c14	00 00 00 00	 DD	 $LN13@ItemBuy
$LN23@ItemBuy:
  00c18	00		 DB	 0
  00c19	05		 DB	 5
  00c1a	01		 DB	 1
  00c1b	05		 DB	 5
  00c1c	02		 DB	 2
  00c1d	05		 DB	 5
  00c1e	03		 DB	 3
  00c1f	05		 DB	 5
  00c20	05		 DB	 5
  00c21	05		 DB	 5
  00c22	05		 DB	 5
  00c23	05		 DB	 5
  00c24	05		 DB	 5
  00c25	05		 DB	 5
  00c26	05		 DB	 5
  00c27	05		 DB	 5
  00c28	05		 DB	 5
  00c29	05		 DB	 5
  00c2a	05		 DB	 5
  00c2b	05		 DB	 5
  00c2c	05		 DB	 5
  00c2d	05		 DB	 5
  00c2e	05		 DB	 5
  00c2f	05		 DB	 5
  00c30	04		 DB	 4
?ItemBuy@CMossMerchant@@QAEXHH@Z ENDP			; CMossMerchant::ItemBuy
_TEXT	ENDS
END
